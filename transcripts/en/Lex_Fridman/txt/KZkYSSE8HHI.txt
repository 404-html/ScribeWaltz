Speaker 1:          00:00:00       The following is a conversation with Jeff Atwood. He's the Co founder of stack overflow and stack exchange websites that are visited by millions of people every single day. Much like with Wikipedia, it is difficult to understate the impact on global knowledge and productivity that these networks of sites have created. Jeff is also the author of the fame blog coding core and the founder of discourse and open source software project that seeks to improve the quality of our online community discussions. This conversation is part of the MIT course on artificial general intelligence and the artificial intelligence podcasts. If you enjoy it, subscribe on Youtube, Itunes, or your podcast provider of choice or simply connect with me on Twitter at legs Friedman, spelled f. R I. D. And now. Here's my conversation with Jeff Atwood

Speaker 2:          00:00:56       having cocreated and managed for a few years, the world's largest community of programmers and in stack overflow 10 years ago. What do you think motivates most programmers? Is it fame, fortune, glory process of programming itself, or is it the sense of belonging to a community? It's a puzzles really. I think it's this idea of working on puzzles independently of other people and just solving a problem sort of like on your own almost. Although you don't, nobody really works alone and programming anymore. But I will say there's a, there's an aspect of sort of hiding yourself away and just sort of beating on a problem until you solve it. Like brute force basically to me is what a lot of programming is, is like the computer so fast, right? You can do things that would take forever for human, but you just do, I'm like so many times.

Speaker 2:          00:01:48       And so often that you get the answer right. You're saying just the pure act of tinkering with the code. Yes. Is, is the thing that drives most probably the joy, the struggle balance within the joy of overcoming the brute force process of pain and suffering that eventually leads to something that actually works well. Data is fun too. Like there's this thing called the, uh, the shuffling problem. Like the naive shuffle that most programmers, right, has a huge flaw. And there's a lot of articles online about this cause it can be really bad if you're like a casino and you have an unsophisticated program or writing your shuffle algorithm. They're surprising ways to get this wrong. But the neat thing is the way to figure that out. It's just a runner shuffle a bunch of times and see like how many orientations of cards you get.

Speaker 2:          00:02:32       You should get an equal distribution of all the cards and with the naive method of shuffling, if you just look at the data, if you just brute force and say, okay, I don't know what's gonna Happen, um, you just write, write a program that does it a billion times and then see what the buckets look like of the data and the money hall. The problem is another example of that where you have three doors and somebody gives you information about another door. So the correct answer is you should always switch. And the money hall problem, which is not intuitive and people, it freaks people out all the time, right? But you can solve with data. If you write a program that does the money hall, you know, game and then never switches than always, which is just compare, you would immediately see that you don't have to be smart, right?

Speaker 2:          00:03:09       You don't have to figure out the answer algorithmically, you can just brute forced it out with data and say, well I know the answer is this because I ran the program a billion times and these are the data buckets that I got from it. Right. So empirically find his, but it was the joy of that. What, so for you, for you personally, uh, outside of family, what motivates you in this process? Is felt to be an, honestly, I don't really write a lot of code anymore. Like what I do at discourse is like managery stuff, which I always kind of despised. Right? Like as a programmer, you think of managers as people who don't really do anything themselves. Uh, but the weird thing about code is like, you realize that like language is code. Like the ability to direct other people lets you get more stuff than you done than you could by yourself anyway.

Speaker 2:          00:03:52       You said language is code, language is communion. Communication with other humans. Yes it is. You can think of it as a systematic. So what, what, what is it like to be, what makes, before we get into programming, what makes a good manager? What makes a good leader? Well, I think a leader, it's, it's all about leading by example. First of all, like sort of doing and being the things that you want to be. Now this can be kind of exhausting, particularly have kids cause you realize that your kids are watching you like all the time. Like even in ways that you've stopped seeing yourself, like the hardest person to see on the planet. It's really yourself, right? It's a lot of, you see other people and, and, and make judgments about them, but yourself, like you're super biased. You don't actually see yourself the way other people see you as often.

Speaker 2:          00:04:31       You're very, very hard on yourself in a way that other people really aren't going to be. So, you know, that's one of the insights is, you know, you gotta be really diligent about thinking like, am I behaving in a way that represents how I want other people to behave? Right? Like leading through example. There's a lot of examples of leaders that really mess this up, right? Like they make decisions that are like, wow, that's why would you know? It just, it's, it's, it's a bad example for other people. So I think leading by example is one, the other one I believe in is working really hard and I don't mean like working exhaustively, but like showing a real passion for the problem. Like, you know, not necessarily your solution to the problem, but the problem itself has just one that you really believe in. Like with discourse for example, the problem that we're looking at, which is my current project is how do you get people in groups to communicate in a way that doesn't like break down into the howling of Wolf's, right?

Speaker 2:          00:05:21       Like how do you deal with trolling, not like technical problems, but how do we get people to post paragraphs? How do I get people to use bold, how to get people to use complete sentences. Although those are problems as well. But like how do I get people to get along with each other, right? Like, and, and solve whatever problem it is they set up to solver, you know, reached some consensus on discussion or just like not hurt each other even where like maybe it's a discussion that doesn't really matter, but are people like yelling at each other. Right. And why, right? Like that's not the purpose of this kind of communication. So I would say, you know, leadership is about, you know, setting an example, you know, doing the things that represent what you want to be and making sure that you're actually doing those things. And there's a trick to that too because the things you don't do also say a lot about what you are.

Speaker 1:          00:06:02       Yeah. So let's pause on that one. So those two things are fascinating. So how you have as a leader that self awareness. So you just said it's really hard to be self aware. So for you personally or maybe for other leaders you've seen her look up to? How do you know the both of the things you're doing are the wrong things to be doing, the way you speak to others, the way you behave and the things you're not doing. How do you, how do you get that signal?

Speaker 2:          00:06:25       There's two aspects to that. One is like processing feedback that you're getting. So how do you get feedback? Are you getting feedback right? Like so one way we do it, for example, at discourse we have three cofounders and we periodically talk about decisions before we make them. So it's not like one person can make a mistake or like wow, that's, you know, there can be misunderstandings, things like that. So it's part of like group consensus of leadership is like, it's good to have, I think systems where there's one leader and that leader has the rule of absolute law are just really dangerous. In my experience for communities, for example, like you have a community, it's run by one person, that one person makes all the decisions, that person's going to have a bad day. Something could happen to that person. You know, something, you know, there's a lot of variables.

Speaker 2:          00:07:03       So like at first when you think about leadership, how have multiple people doing leadership and have them talk amongst each other, they're giving each other feedback about the decisions that they're making. And then when you do get feedback, I think there's that little voice in your head, right? Like, or your gut or wherever you want to put it in your body. Uh, I think that voice is really important. Like I think most people who have any kind of moral compass or like want to do, most people want to do the right thing. I do believe that. I mean there might be a handful of sociopath south that don't, but most people, they want other people to think of them as a good person. And why wouldn't you? Right? Like, do you want people to despise you? I mean, that's just weird, right? So you have that little voice that sort of the, the angel and devil on your shoulder, sort of talking to you about like what you're doing, how you're doing, how does it make you feel to make these decisions? Right. And I think having some attunement to that voice is important. But you said that, yeah.

Speaker 1:          00:07:50       Voice also for, I think this is a programmer situation too, where sometimes the devil on the shoulders a little, a little too loud. So you'll be a little too self critical. Uh, for a lot of developers and especially when you have introverted personality, how do you struggle with is self criticism of the criticism? Others? Uh, one of the things of leadership is to do something that's potentially an unpopular or what people doubt you and you still go through with the decision. So what's that balance like?

Speaker 2:          00:08:21       I think you have to walk people through your decision making, right? Like you have to, this is where blogging is really important and communication is so important. Again, code language is just another kind of code. It's like, here is the program by which I arrived at the conclusion that I'm going to reach, right? It's one thing to say like, this is a decision, it's final deal with it, right? That's not usually satisfying to people, but if you say, look, you know, we've been thinking of this problem for a while, here's some stuff that's happened. Here's what we think is right, here's our goals, here's what we want achieve, and we've looked at these options and we think this of the available options is the best option. People would be like, oh, okay. All right, maybe I don't totally agree with you, but I can kind of see where you're coming from. And like I see it's just arbitrary decision delivered from a cloud of flames in the sky, right? It's like a human trying to reach some kind of consensus about goals and their goals might be different than yours. That's completely legit, right? But if you're making that clear, it's like, oh, well the reason we don't agree, it's because we have totally different goals, right? Like how could we agree? It's not that you're a bad person, it's that we have radically different goals in mind when we started looking at this problem.

Speaker 3:          00:09:18       And the other one you said is passion, so or a hard work, sorry. Uh, well those are tied together

Speaker 2:          00:09:23       in my mind. Let's say hardware compassion. Like for me, like I just really love the problem discourses sending out to solve because in a way it's like there's a, there's a vision of the world where it all devolves into Facebook basically owning everything and every aspect of human communication. Right. And this has always been kind of a scary world for me. Um, first cause I don't, I think Facebook is really good at execution. I've got to compliment them. They're very competent in terms of what they're doing. But Facebook has not much of a moral compass in terms of Facebook cares about Facebook really. They don't really care about you and your problems. What they care about is how big they can make Facebook, right? Is that you're talking about the company or just the mechanism of how Facebook works? Kind of both really, right? Like, and the idea with this course, the reason I'm so passionate about is because I believe every community should have the right to own themselves, right?

Speaker 2:          00:10:07       Like they should have their own software that they can run that belongs to them, that's their space where they can set the rules and if they don't like it, they can move to different hosting or you know, whatever they need, they need to happen can happen. But like this, this idea of a company town, we're all human communication is implicitly owned by Whatsapp, Instagram and Facebook. And it's really disturbing to, because Facebook is really smart. Like I said, they're great at execution buying and what's happened buying Instagram were incredibly smart decisions. Um, and they also do this thing on if you know, but they have this VPN software that they give away for free on smartphones and it indirectly feeds all the, the data about the traffic back to Facebook so they can see what's actually getting popular through the VPN, right? They have low level access to the network data because users have let them have that. So

Speaker 3:          00:10:52       let's, let's, uh, take a small pause here. First of all, discourse, can you talk about, can you lay out the land of all the different ways you can have communities? So there's stack overflow that you've built. There's discourse. So stack overflow is kind of like a Wiki Wikipedia you talk about, uh, and it's a very specific scalpel, very focused. So what is the purpose of discourse? And maybe contrast that with Facebook. First of all, say what is discourse? Yeah, start from the beginning.

Speaker 2:          00:11:19       Well, let me start from the very beans. So stack overflow is very structured. Wiki, Sal Q and a for programmers, right? And uh, that was the problem. We first worked on it when we started. We thought it was discussions because we looked at like programming forums and other things, but we quickly realized we were doing Q and, a, which is a very narrow subset of, of human communication, right? Right.

Speaker 3:          00:11:36       Sizes. So when you start a stack overflow, you thought you didn't even know the Q and a. Now he didn't know it would be, well,

Speaker 2:          00:11:43       we didn't know we did. We had an idea of like, okay, these are things that we see working online. We had a goal, right? Our goal was, uh, there was this site experts exchange with a very unfortunate name. Thank you. Killing that site. Yeah, I know, right? Like a lot of people don't remember it anymore, which is great. That's the measure of success when people don't remember the thing that you were trying to replace, then you've totally one. Uh, so it was a place to get answers to programming questions, but it wasn't clear if it was like focused Q and, a if it was a discussion. There were plenty of programming forums so we weren't really sure. We were like, okay, we'll take aspects of Digg and Reddit, like voting, we're very important. A reordering answers based on votes, wiki style stuff of like being able to edit posts, not just your post, but other people supposed to make them better and keep them more up to date, uh, ownership of blogging of like, okay, this is me.

Speaker 2:          00:12:26       I'm saying this in my voice. You know, this is the stuff that I know and you know, you get your reputation accrues to you. Uh, and it's pure recognition. So you asked earlier like what motivates programmers? I think peer recognition motivates them a lot. Uh, that was one of the key insights of stack overflow is like recognition from your peers is why things get done and there's really money necessarily your boss, but like your peers saying wow, this person really knows their stuff has a lot of value. So the reputation system came from that. Um, so we were sort of frankensteining a bunch of stuff together in stack overflow like stuff we had seen working and we knew worked. Uh, and that became stack overflow and it over time we realized it wasn't really a discussion. It was very focused questions and answers. There wasn't a lot of room on the page for, let me talk about this tangential thing.

Speaker 2:          00:13:12       It was more like, okay, is it answering question? Is it clarifying the question or could it be an alternative answer to the same question? Cause there's usually more than one way to do it in program. There's like say five to 10 ways and one of the patterns we've got into early almost stack overflow is there are questions where there would be like hundreds of answers and we're like, wow, how can there be a programming question with 500200500 answers? And we looked at those and we realize those were not really questions in the traditional sense. They were discussions. It was stuff that we allowed early on that we eventually decided wasn't allowed. Such as what's your favorite programming food? You know, what's the funniest programming cartoon you've seen? Uh, and we had to sort of backfill once rules about like why isn't this allowed such as, is this a real problem you're facing?

Speaker 2:          00:13:55       Like nobody goes to work and says, wow, I can't work because I don't know what the funniest programming cartoonists, so sorry, can't compile this code now. Right? It's not a real problem you're facing in your job. If that was run rule and the second, like, what can you really learn from that? It's like what I call accidental learning or reddit style learning where you're just like, oh, I'll just browse some things and oh wow. You know, did you know tree frogs only live three years? I mean, I, I just made that up. I don't know if that's true, but, uh, I didn't really set out to learn that. I don't need to know that. Right. It's an accidental learning. It was more intentional learning. We're like, okay, I have a problem and I want to learn about stuff around this problem having. Right. And it could be theory, could be compiler theory, it could be other stuff, but I'm having a compiler problem.

Speaker 2:          00:14:31       Hence I need to know the compiler theory, that aspect of it. That gives me the, the gets me to my answer. Right? So kind of a directed learning. So we had a backfill of these rules as we sort of figured out what the heck it was we were doing. And the system came very strict over time. And a lot of people still complain about that. And I wrote my latest blog entry a what to stack overflow. One to be wanted to be when it grows out celebrating the 10 year anniversary. Yeah. Yeah. So 10 years and it, that system has trended towards strictness. There's a variety of reasons for this. One is people don't like to see other people get reputation for stuff as they view, they view as frivolous, which I can actually understand because if you saw a program or got like 500 up votes for funniest programming cartoon or funniest comment they had seen in code, it's like well why do they have that reputation is because they wrote the joke.

Speaker 2:          00:15:15       Probably not. I mean if they did maybe or the cartoon, right. They're getting a bunch of reputation based on someone else's work. It's not even like programming. It's just a joke, right? It's related to burn. So you begin to resent that. You're like, well that's not fair. And it isn't. At some level they're correct. I mean I empathize cause like it's not correct to get a reputation for that versus here's a really gnarly regular expression problem and here's a really clever, insightful, you know, detailed answer laying out, oh here's why you're seeing the paver that you're saying here. Let me teach you some things about how to avoid that in the future. That's, that's great. Like that's gold, right? You want people to reputation for that and not so much for, wow, look at this funny thing. And I saw, all right, great. So there's this very specific Q and a format and then take me through the journey towards discourse and Facebook and Twitter.

Speaker 2:          00:15:58       So you started at the beginning that stack overflow evolve to have a purpose. So where does this course, this uh, passion you have for creating community for discussion? What, where does that, well, when was that born and hollow? Part of it is based on the realization of the stack. Overflow is only good for very specific subjects where there's sort of a, it's, it's based on data. Facts and science were answers can be kind of verified to be true. Another form of that is there's the book of knowledge, like the Tome of of knowledge that defines like whatever it is, you can refer to that book. And I'll give you the answer. There has to be, it only works on subjects where there's like semi clear answers to things that can be verified in some form. Um, now again, there's always more than one way to do it.

Speaker 2:          00:16:39       Uh, there's complete flexibility in the system around that, but where it falls down as is stuff like poker and Lego like we had, if you go to stack exchange.com we have an engine that tries to launch different Q and a topics, right? And people can propose a Qa topics, um, sample questions and if he gets enough support within the network, we launched that Qa site. So some of the ones we launched were poker and Lego and they did horribly, right? Because, um, I mean they might still be there lingering on in some form, but it was an experiment. This is like a test, right? In some subjects works super well in the stack engine and some don't. But the reason Lego and poker don't work is because they're so social. Really. It's not about, you know, what's the rule here in poker? It's like, well, you know, what kind of cigars do we like to smoke while playing poker?

Speaker 2:          00:17:23       Or you know, what's, what's a cool set of cards to use when I'm playing poker? Or you know, what some strategies like say I have this hand come up with some strategies I could use. It's more of a discussion around like what's happening? Like with Lego, you know, same thing. Like here's this cool lego set I found. Look how awesome this isn't like, yeah, that's freaking awesome, right? It's not a question, right? There's all these social components that discussions that don't fit at all. Like we literally have to just allow those in stack overflow kids. It's not about being social, it's about problems that you're facing in your work that you need concrete answers for. Right? Like you have a real demonstrated problem that sort of blocking you and something nobody is blocked by. You know, what should I do when I have a straight flush, right?

Speaker 2:          00:17:57       Like started walking problem in the world. It's just an opportunity to hang out and discuss. So discourse was a way to address that and say, look, you know, a discussion forum software ha was very, very bad. And when I came out of stack overflow in late twenties, early twenties, early 2013 or early 2012, um, it was still very, very bad. I expected it, it improved in the four years since I last looked, but it had not improved at all. And I was like, well that's kind of terrible because I love these communities of people talking about things that they love. You know, that they're just communities of interest, right? And there's no good software for them. Like startups would come to me and say, Hey Jeff, I want to, you know, I have this startup, here's my idea. And I, the first thing I would say that it was like, well first, why are you asking me?

Speaker 2:          00:18:43       Like, I don't really know your, your field, right. US sincerely. Like, why aren't you asking like the community, like the people that are interested in this problem, the people that are using your product, why aren't you talking to them? And then they'd say, oh, great idea. Like how do I do that? And then that's when I started playing sad trombone because I realized all the software involving talking to your users, customers, audience, patrons, whatever it is, it was all really bad. You know, it was like stuff that I would be embarrassed to recommend to other people. And yet that's where I felt they could get the biggest and strongest, most effective input for what they should be doing with their product. Right. It's from their users, from their community. Right. That's what we did on stack overflow.

Speaker 3:          00:19:18       Oh, so what we're talking about with forms, the, what is it, the dark matter of the Internet? Uh, it's still, I don't know if it's still, but for the longest time it has some of the most passionate and fascinating discussions. And what's the usual structure? There's usually what? It's a, it's linear, so sequential. She posts one after the other and there's paging nation. So it's every, there's a 10 posts and you go to the next page. And that format still is used by, like, I'm a, we're doing a lot of research with Tesla of vehicles and there's a Tesla Motors club forum, which is extreme, really wanted to run that actually they pinged us about, I don't think we got it, but I really would have liked to gotten that one. But they've started before even 2012 I believe. I mean, they've been running for a long time. It's still an extremely rich source of information. So what's broken about that system and how you're trying to fix it?

Speaker 2:          00:20:12       I think there's a lot of power in, in connecting people that love the same stuff around that specific topic. Meaning Facebook's idea of connection is just any human that's related to another human right. Like, like through friendship or, you know, any other reason? Facebook's idea of the world is sort of the, the status update, right? Like a friend of yours did something ate at a restaurant, right. Um, whereas discussion forums were additionally around the interest graph. Like, I love electric cars specifically. I Love Tesla, right? Like I love the way they approach the problem. I love the style of the founder. I just love the, the design ethic and there's a lot to like about Tesla. If you saw the oatmeal, he did a whole love comic to Tesla and it was actually kind of cool because I learned some stuff. He was saying how great Tesla cars where it specifically like how they were built differently and he went into a lot of great detail.

Speaker 2:          00:20:59       That was really interesting to me. That oatmeal post, if you read it, is the genesis of pretty much all interest communities. I just really love this stuff. So like for me for example, there's Yoyos, right? Like I'm into the Yoyo communities and there's these interests. Communities are just really fascinating to me and I feel more connected to the Yoyo communities than I do to, you know, friends that I don't see that often. Right? Like to me the powerful thing is the interest graph and Facebook kind of dabbles in the interest graph. I mean they have groups you can sign up for groups and stuff, but it's really about the relationship graph. Like I, I, this is my coworker, this is my relative, this is my friend. Um, but not so much about the interest. So I think that's the, the linchpin of which forums and communities are built on that.

Speaker 2:          00:21:39       I personally love. Like I, I, I, like I said, leadership is about passion, right? And being passionate about stuff is, it's a really valid way to look at the world and I think it's a way, um, a lot of stuff in the world gets done. Like I want send, someone described me as, he's like, Jeff, you're a guy who you just get super passionate about a few things at a time and you just go super cheap from those things. And I was like, oh, that's kind of right. That's kind of what I do. I'll get into something and just be super into that for a couple of years or whatever and just learn all I can about it and go super deep in it. And, uh, that's how I enjoy experiencing the world, right? Like, not being shallow on a bunch of things, but being really deep on a few things that I'm interested in.

Speaker 2:          00:22:15       So forums kind of unlocked that. Right? And you know, you don't want a world where everything belongs to Facebook, at least. I don't, I want a world where communities can kind of own themselves, set their own norm, set their own rules, um, control the experience. Cause Com community is also about ownership, right? Like if, if you're meeting at the Barnes and noble every Thursday and Barnes and noble says, get Outta here, you guys don't buy enough books. Well, you know, you're kind of hosed, right? Barnes and noble owns you, right? Like you can't, but if you have your own meeting space, you know, your own clubhouse, you can set your own rules, decide what you want to talk about there and just really generate a lot better information than you could. It's like hanging out at Barnes and noble every Thursday at 3:00 PM. Right? Uh, so that's kind of the vision of discourse is a place where it's, it's fully open source.

Speaker 2:          00:22:57       You can take the software, you can saw it anywhere and you know, you and a group of people can go deep on whatever it is that you're into. And this works for startups, right? Startups are a group of people who go super deep on a specific problem, right? And they want to talk to the comedian. It's like wall installed this course, right? That's what we do at this course. That's what I did. A stack overflow. I spent a lot of time on metastatic overflow, which is our internal well public community feedback site and uh, just experiencing what the users were experiencing, right? Cause they're the ones doing all the work in the system and they had a lot of interesting feedback and there's that 90 10 rules, like 90% of the feedback you get is not really actionable for writing reasons. It might be bad feedback, it might be crazy feedback.

Speaker 2:          00:23:34       It might be feedback you just can act on right now. But there's 10% of it that's like gold. It's like literally gold and diamonds where it's like feedback, really good improvements to your core product that are not super hard to get to and actually make a lot of sense. And my favorite is about 5% of those stuff I didn't even see coming. It's like, oh my God, I never even thought of that. But that's a brilliant idea. Right? And I can point to so many features of stack overflow that we drive from metastatic overflow feedback and Mehta discourse, right? Same exact principle at discourse. You know, we're getting ideas from the comedian. I was like, oh my God, I'd never thought of that. But that's fantastic. Right? Like I love that relationship with the community from having built these communities. What have you, what have you learned about, what's the process of getting a critical mass of members in the community?

Speaker 2:          00:24:14       Is it luck, skill, timing, persistence? What is, uh, is it the tools like discourse that empower that community? Wha what's the key aspect of starting for one guy or Gal and then building it to two and then 10 and a hundred and a thousand so on. I think we are starting with an n of one. I mean I think it's persistence and, and also you have to be interesting, like somebody I really admire once, that's something that I always liked about blogging and he's like, here's how you blog. You have to have something interesting to say and have an interesting way of saying it. Right? Yeah. And then do that for like 10 years. So that's the genesis is like you have to have sort of something interesting to say. That's not exactly what everyone else is saying. And an interesting way of saying it, which is another way of saying kind of entertaining way of saying it.

Speaker 2:          00:24:59       And then as far as growing it, it's like ritual. You know, like you have to like say you're starting a blog, you have to say, look, I'm going to blog every week three times a week, and you have to stick to that schedule, right. Because until you do that for like several years, you're never gonna get anywhere. Like it just takes years to get where you need to get to. And part of that is having the discipline to stick with a schedule and it helps again, if it's something you're passionate about, this won't feel like work. Like I love this. I could talk about this all day, every day. Right? Uh, you just have to do it in a way that's interesting to other people. And then as you're growing the community, um, that pattern of participation within the community of like generating these artifacts and inviting other people to help you like collaborate on these artifacts.

Speaker 2:          00:25:36       Like even in the case of blogging, like I felt early in the early days of my blog, which I started in 2004 which is really the genesis of stack overflow. If you look at all my blog, it leads up to stack overflow, which was, I have all this energy in my blog, but I don't like 40,000 people were subscribing to me. And I was like, I want to do something. And then I met Joel and said, Hey Joel, I want to do something, take this ball of energy for my blog and do something. And all the people reading my blog saw that's like, oh cool, you're involving us. You're saying, look, you're part of this community, let's build this thing together. Like they picked the name, like we voted on the name for stack overflow on my blog, like we came up and naming is super hard for slight, the hardest problem in computer science is coming with a good name for stuff.

Speaker 2:          00:26:13       Right? Yeah. Um, but there you can go back to my log. There's the pole where we voted and stack overflow became the name of the site and all the early Beta users or stack overflow were, were audience of my blog plus Joel's blog. Right? So we started from like, if you look at the genesis of, Hey, I was just a programmer who said, hey, I love programming but I have no outlet to talk about it. So I'm just gonna blog about it because I don't have enough people to work to talk to about it. Because at the time I worked at place where, you know, programming wasn't the core output of the company was a pharmaceutical company. And I just love this stuff. You know, to an absurd degree. So I was like, I'll just blog about it and then I'll find an audience and eventually found an audience, eventually found Joel, and eventually build stack overflow from that one core of, of activity.

Speaker 2:          00:26:52       Right? But it was that repetition of feeding back in feedback from my blog comments, feedback from Joel, feedback from the early stack overflow community. When people see that you're doing that, they will follow along with you, right? There's like a cool, you're here in good faith. You're actually, you know, not listening to everything because that's impossible. That's impossible. But you're actually, you know, waiting our feedback and what you're doing because, and why wouldn't I? Because who does all the work on stack overflow? Me, Joel. No, it's the other programmers that are doing all the work. So you've got to have some respect for that. And then, you know, discipline around, look, you know, we're trying to do a very specific thing here on stack overflow. We're not trying to solve all the world's problems. We're trying to solve this very specific Q and a problem in a very specific way.

Speaker 2:          00:27:32       Not because we're jerks about it, but because these strict set of rules help us get really good results. Right. Um, and programmers, that's an easy sell for the most part because programs are used to dealing with ridiculous systems of rules like constantly, that's basically their job. So they're, they're very, oh yeah. Super strict system of rules that lets me get, I want that's programming, right? That's what stack overflow is. So, so you making it sound easy, but in 2004, let's go back there. In 2004, you started the blog I'm quoting or was it called that at the beginning? Just at the very beginning was one of the smart things I did. It's from a book by Steve Mcconnell Code Complete, which is one of my favorite programming books. Still probably my number one programming book for anyone to read. Uh, one of the smart things I did back then, I don't always do smart things when I start stuff.

Speaker 2:          00:28:16       I contacted Steven said, hey, I really like this. Uh, it was a sidebar illustration indicating danger in code, right? Coding horror was like, watch out. And I love that illustration because it spoke to me because I saw that illustration go, oh my God, that's me. Like I'm always my own worst enemy. Like that's the key insight in programming is every time you write something think, how am I going to screw myself? Because you will constantly, right? So that the icon was like, Oh yeah, I need to constantly hold that mirror up and look and say, look, you're very fallible. You're going to screw this up. Like how can you build this in such a way that you're not going to screw it up later? Like how can you get that discipline around making sure at every step I'm thinking through all the things that I could do wrong or the other people could do wrong.

Speaker 2:          00:28:57       Because that is actually how you get to be a better programmer a lot of times. Right. So that sidebar illustration, I loved it so much. I wrote Steve before I started my blog and said, hey, can I have permission to use this? Cause I just really like this illustration. And Steve was kind enough to give me permission to do that. And She just continues to give me permission. So you know, really. That's awesome. Uh, but in 2004 you started this blog, you know, you look at a Stephen King book on writing or Steven Pressfield's war of art book. I mean, it seems like writers suffer. I mean, it's a hard process of writing, right? It's like there's going to be suffering. I mean, I won't hit you like, well the work is suffering, right? Like doing the work. Like even when you're, every week you're like, okay, that blog post wasn't very good.

Speaker 2:          00:29:40       Or you know, people didn't like it or people, right. Said disparaging things about it. You have to like have the attitudes, like, you know, no matter what happens, I want to do this for me. Right. It's not about you, it's about me. I mean, in the end it is about everyone because this is how good work gets out into the world. But you have to be pretty strict about saying like, you know, I'm selfish in the sense that I have to do this for me. You know, you mentioned Stephen King, like his book on writing, but like one of the things I do for example, when, when writing is like I, I read it out loud. One of the best pieces of advice for writing anything is read it out loud like multiple times and make it sound like you're talking because that is the goal of good writing.

Speaker 2:          00:30:17       It should sound like you said it with, with slightly better phrasing because you have to more time to think about what you're saying. But like it should sound natural when you say it. And I think that's probably the single best writing advice and give anyone, it's just, just read it over and over, out loud. Make sure it sounds like something you would normally say and it sounds good. And what's your process of writing? So there's usually a pretty good idea behind the blog post. So ideas, right? So I think you gotta have the concept that there's so many interesting things in the world. Like, I mean my God, the world is amazing, right? Like it's, you can never write about everything that's going on cause it's so incredible. But if you can't come up with like let's say one interesting thing per day to talk about, then you're not trying hard enough because the world is full of just super interesting stuff.

Speaker 2:          00:31:00       And one great way to, to like mind stuff is go back to old books because they bring up old stuff that's still super relevant. And I did that a lot because I was like reading classic programming books and a lot of the early blog posts were like, oh, I was reading this program, but can they brought this really cool concept and I want to talk about it some more. And you get the, I mean, you're not claiming credit for the idea, but it gives you something interesting to talk about that's kind of evergreen, right? Like you don't have to go, what should I talk about it? So we'll just go dig up some old classic programming books and find something that, oh wow, that's interesting. Or how does that apply today? Or what about x and y? Or compare these two concepts. So pull a couple of sentences from that book and then a sort of play off of it.

Speaker 2:          00:31:34       Yeah, I agree or disagree that, so in 2007, uh, you wrote that you are offered a significant amount of money to sell the blog. He chose not to. What were all the elements you were thinking about? Cause I'd like to take you back, it seems like there's a lot of nonlinear decisions you made to life. Uh, so what was that decision like? Right, so I, one of the things I love is the choose your own adventure books, which I loved as a kid and I feel like their early programmer books cause they're, they're all about if then statements, right? If this then this and they're also very, very unforgiving. Like there's all these sites that map the, the, the classic choose your adventure books and how many outcomes are bad. It was a lot of bad outcomes. So part of the game it's like, oh I got a bad outcome and go back one step, go back one further steps.

Speaker 2:          00:32:17       Like how did I get here? Right? Like it's a sequence of decisions and this is true of life, right? Like every decision is a sequence, right? Individually, any individual Cision is necessarily right or wrong, but they, the lead you down a path, right? So I do think there's some truth that, so this particular decision, uh, the blog had gotten fairly popular. There's a lot of RSS readers that I discovered and this guy contacted me out of the blue from this like bug tracking companies like, oh, I really want to buy your blog for like, I think it was round, it was $100,000 maybe to like 80,000 but it was, it was a lot, right? Like, and that's, you know, at the time, like I would have a year's worth of salary all at once. So I really think about like, well, you know, and I remember talking to people at the time, it's like, wow, that's a lot of money, but then I don't even, like, I really liked my blog, right?

Speaker 2:          00:33:02       Like, do I want to sell my blog because they wouldn't really belong to me anymore at that point. And one of the guidelines that I like to, I don't like to give advice to people a lot, but one of the pieces of advice I do give, cause I do think it's really true and it's generally helpful is whenever you're looking at a set of decisions like, Oh gosh, should I do a, B or c, you got to pick the thing that's a little scarier in that list because not, you know, not like jump off a cliff. Scary. But the thing that makes you nervous because if you pick the safe choice, it's usually you're not really pushing, you're not pushing yourself. You're not choosing the thing that's going to help you grow. So for me, the scarier choice was to say no. I was like, well, no, let's just see where this is going, right?

Speaker 2:          00:33:38       Because then I own it. I mean, it belongs to me. It's my thing. Uh, and I can just take it and, and tell them some other logical conclusion, right? Because imagine how different the world would have been had I said yes and sold the blog. It's like they're probably wouldn't be stack overflow. Uh, you know a lot of other stuff. Would it change? So for that particular decision I think it was that same rule of like what scares me a little bit more. Do the thing that scares you. Yeah. So speaking of which startups, I think there's a specific, some more general questions that a lot of people would be interested in. You've started stack overflow, you started discourse. So what's the, there's one, two, three guys, whatever it is in the beginning. What was that process like? Do you start talking about it? Do you start programming?

Speaker 2:          00:34:21       Do you start like where does the birth and the catalyst that, actually I can talk about it in the context of us tech overflow in discourse. So if I think the key thing initially is there is a problem, something, there's some state of the world that's unsatisfactory to the point that you're upset about it, right? Like in that case it was experts exchange and Joel's original idea because I approached Joel's like, Look Joel, I have all this energy by my blog. I want to do something, I want to build something, but I don't know what it is cause I'm not, I'm honestly not a good idea person. I'm really not. I'm like the execution guy. I'm really good at execution, but I'm not good at like blue skying ideas, not my forte, which is another reason why I like the community feedback cause they blue sky all day long for you.

Speaker 2:          00:34:55       Right? So when I can just go in and cherry pick a blue sky idea from community, even if I have to spend three hours reading to get one good idea, it's worth it man. But anyway, so the idea of from Joel was, hey, experts exchange, it's got great data but the spirits is hideous, right? It's, it's trying to trick you. It feels like a used car salesman. It's just bad. So I was like, oh that's awesome. It feeds into community. It feeds into like, you know, we can make it creative Commons. So I think the core is to have a really good idea that you feel very strongly about it in the beginning. That like there's a wrong in the world that we will, uh, an injustice that we will write through the process of building this thing for discourse. It was like, look, there's no good software for communities to just hang out and like do stuff, right?

Speaker 2:          00:35:32       Like whether it's problem solving, start whatever forms are such a great building block of community and they're hideous. They were so bad. Right? It was embarrassing. Like I literally was embarrassed to be associated with the software, right? We have to have software that can be proud of. It's like this is competitive with Reddit, this is competitive with Twitter, this is competitive with Facebook. Right. That would be proud to have the software on my site. Um, so that was the genesis of discourse was feeling very strongly about, um, there needs to be a good solution for communities. So that's step one. Dennis is funny. You, you feel super strongly about it, right? And then people galvanize around the idea. Like Joel was already super excited about that idea. I was excited about the idea. So with the forum software I was posting on Twitter, I had researched as part of my research, I started researching the problem, right?

Speaker 2:          00:36:16       I found a game called forum wars, which was a parody of form. It's still very, very funny of like foreign behavior circle. Like I would take 2003 it's age, some, right, like the behaviors a little different in their of Twitter. But it was awesome. It was very funny and it was like a game. It's like an RPG and it had a forum attached to it. So it was like a game about forums with a forum attach. I was like this is awesome. Right. This is so cool. And the founder of that company or that project wasn't really, company contacted me, this Guy Robin Ward from Toronto and said, Hey, you know I saw you've been talking about forums and like I really love that problem space. It's like I'd still love to build really good forum software cause I don't think anything if there's any good. And I was like awesome.

Speaker 2:          00:36:54       At that point I was like, we're starting a company because like I couldn't have wished for a better person and walk through the door and say, I'm excited about this too. Same thing with Joel, right? I mean Joel was a legend in the industry, right? So when he walked through it, I'm excited about his problems. Like me too, man, we can do this, right? So the, that to me is the most important step. It's like hanging out of your super excited about and another person, a cofounder, right? Cause again, you get that dual leadership, right? Of like, am I making a bad decision? Sometimes it's nice to have checks of like, is this a good idea? I don't know. Right? So those are the, the crucial seeds. But then starting to build stuff, whether it's you programming types. So there's tons of research, there's tons of research.

Speaker 2:          00:37:31       Like what? What's out there that failed because a lot of people looked at its successes. Oh look at how successful Lexis, everybody looks at the successes. Those are boring. Show me the failures because that is what's interesting. That's where people were experimenting. That's where people were pushing but and they failed. But they probably failed for reasons that weren't directly about the quality of their idea. Right? Yeah. So look at all the failures. Don't just look what everybody looks at, which is like, oh Gosh, look at all these successful people, look at the failures, look at the things that didn't work. Research the entire field. And so that's the research that I was doing that led me to Robin Wright was that and then when we, for example, when we did a stack overflow, we're like, okay, well I really like elements of voting and Digg and reddit.

Speaker 2:          00:38:10       I like the, the, the Wikipedia, everything's up to date. Nothing is like an old tombstone that like has horrible out of date information. We know that works. We compete. He is an amazing resource. Blogging, the idea of ownership is so powerful, right? Like, Oh I, I Joe wrote this and look how good Joe is. Answer is right. Like all these concepts we were on together, researching all the things that are out there that were working and why they were working and trying to like fold them into that. Again, that Frankenstein's monster of what stack overflow is. And by the way, that wasn't a free decision because there's still a ton of tension in the stack overflow system. There's reasons people complain about stack overflow it because it's so strict. Right? Why is it so strict? Why you guys always close to my questions? It's because there's so much tension that we built into the system around like trying to get good, good results out of the system and you know, it it, it's not a free, that stuff doesn't come for free. Right? It's not like we were all have perfect answers and nobody will have to get their feelings hurt or nobody will have to get down voted like that. It doesn't work that way. Right.

Speaker 3:          00:39:06       So this is an interesting point. A small tangent. Yeah, you right about anxiety. So I've posted a lot of questions and answers on stack overflow and the questions I usually go to something very specific to something I'm working on it. This is something you talk about that really the goal of stack overflow isn't about, is to write a question, not that's not about you, it's about the question that will help the community

Speaker 2:          00:39:35       future. Right? But that's a tough sell, right? Because people are like, well, you know, I don't really care about the community. What I care about is my problem, my problem. Um, and then that's fair, right? It's, it's sort of that, again, that tension, that balancing active, we want to help you, but we also wanna help everybody comes behind you, right? The long line of people are going to come say, oh, I kind of have that problem too. Right? And if nobody's ever going to come up and say, I have this problem too, then that question shouldn't exist on stack overflow because the question is too specific and that even that's tension, right? How do you judge that? How do you know that nobody's ever going to have this particular question again? Um, so there's a lot of tension in the system.

Speaker 3:          00:40:06       Do you think that anxiety of asking the question, the anxiety of answering that tension is inherent to programmers is inherent to this kind of process or, or can it be improved? Can Be happy land where the, that tension is not quite so harsh?

Speaker 2:          00:40:26       Uh, I don't think stack overflow can totally change the way it works. One thing they are working on finally is the ask Paige had not changed since 2011. I'm still kind of bitter about this because I feel like you have a Qa system and what are the core pages and EK system? Well first of all, the question, all the answers and all the also the aspx page, particularly when you're a new user or someone tried to ask question, that's the point at which you need the most help and we just didn't adapt with the Times. But the good news is they're working on this from what I understand, and it's going to be more wizard based format and you could envision a world where as part of this wizard based program, when you're asking questions, okay, come up with a good title. What are good words to put in a title?

Speaker 2:          00:41:02       One word that's not good to put in the title is problem. For example, I have a problem. Oh you have a problem? Okay, a problem. That's great. Right? Like you need specifics, right? Like so it's trying to help you make a good question. Title for example, that step will be broken out. Um, all that stuff. But one of those steps in that wizard of asking could say, Hey, I'm a little nervous, you know, I've never done this before. Can you put me in a queue for like special mentoring? Right. You could opt in to a special mentor. I think that would be fantastic. Like I don't have any objection to that at all in terms of being an optin system because there are that are like, no, I just want to help him. I want to help a person, no matter what, I want to go above and beyond.

Speaker 2:          00:41:37       I want to spend like hours with this person. Um, I, it depends what their goals are, right? It's a great idea. Who am I to judge? Right? So that's fine. It's not precluded from happening, but there's a certain big city ethos that we started with. I'm like, look, we're up in New York City. You don't come to New York City and expect them to be, oh, welcome to the city. Joe. Has It gone? Come on in and let me show you around. That's not how New York City works, right? I mean, and you know, again, New York City's a reputation for being rude, which actually don't think it is. Having been there fairly recently, it's not real. People are just like going about their business right there. Look, look, I have things to do. I'm busy. I'm a busy professional, as are you. And since you're a busy professional, certainly when you ask a question, you're gonna ask the best possible question, right?

Speaker 2:          00:42:16       Because you're a busy professional and you would not accept anything less than a very well written question with a lot of detail about why you're doing it, what you're doing, what you researched, what you found right? Cause you're a professional like me, right? And this rubs people sometimes the wrong way and I don't think it's wrong to say, look, I don't want that experience. I want just a more chill place for beginners. And I still think sacrifice is not, was never designed for beginners, right? There's this misconception that you know, even Joel says something, Oh yes, stack overflow for beginners. And I think if you're a prodigy it can be all right. But that's not really representative, right? Like I think as a beginner you want a totally different set of tools you want like live screen sharing, live chat, you want access to resources, you want a playground, like a a playground.

Speaker 2:          00:43:01       You can experiment in and like test and all this stuff that we just don't give people because that was never really the, the audience that we were designing stack overflow for. That doesn't mean it's wrong. And I think it would be awesome if there was a site like that on the internet or if stack overflow. I said Hey, you know we're going to start doing this. That's fine too. You know I'm not there. I'm not making those decisions but I do think the pressure, the tension that you described is there for people to be, look I'm a little nervous cause I know I've got to do my best work. Right. The other one is something you talk about which is also really interesting to me is duplicate questions or do, it's a, it's a really difficult problem that you highlight super pro, super hard. Like you can take one little topic and you could probably write 10 2030 ways of asking about that topic and there will be all different.

Speaker 2:          00:43:48       I don't know if there's should be one page that answers all of it. Is there a way that stack overflow can help disambiguate like separate these duplicate questions or connect them together or is it a totally hopeless difficult, impossible task? I think it's a very, very hard computer science problem and partly because people are very good at using completely different words. It always amazed me on stack overflow. You'd have two questions that were functionally identical and one question had like zero words in common with the other question. I'm like, oh my God, from a computer science particular perspective, how do you even begin to solve that? And it happens all the time. People are super good at this, right? Accidentally at asking the same thing in in like 10 20 different ways and the other complexities, we want some of those duplicates to exist because if there's five versions with different words, have those five versions point to the one centralized answer, right?

Speaker 2:          00:44:39       It's like, okay, this is duplicating. No, no worries. This here's the, here's the answer that you want it over here on this, this, this, you know the, the prime example that we want to have rather than having 10 copies of the question and the answer because if you have 10 copies of the question you answered. This also devalues the reputation system. Which programmer's hate, as I previously mentioned, you're getting reputation for an answer that somebody else are gay. It's like, well it's an answer, but somebody or sorry gave that answer. So why are you getting reputation for the same answer as the other guy who gave it four years ago? People get offended by that, right? So the reputation system itself adds tension to the system in that the people who have a lot of reputation become very incentivized to enforce the reputation system. Um, and for the most part, this is good.

Speaker 2:          00:45:18       I know it sounds weird, but for most parts like look strict systems, I think to use stack overflow, you have to have the idea that okay, strict systems ultimately work better. And I do think in programming, uh, you're familiar with 'em loose typing versus strict typing, right? The idea that you can declare a variable, not declare a variable, rather just start using a variable and okay, I see it's implicitly an integer. Bam. Awesome. Duck equals five. Well, duck is now an editor, five, right? And you're like, cool, awesome. Simpler. Right? Why would I want to worry about typing? And for a long time, like in the Ruby community, they're like, yeah, this is awesome. Like you just do a bunch of unit testing, which is testing your programs validity after the fact to catch any bugs that, that, that strict typing and variables would have caught.

Speaker 2:          00:45:54       And now you have this thing called typescript from Microsoft, from the guy who built c sharp Manders who's one of the greatest minds in software development, right? Like in terms of languages on and says, no, no, no, we want to bolt on a strict type system to javascript because it makes things better. And now everybody's like, oh my God, we, we deployed typescript and found 50 Layton bugs that we didn't know about. Right. Like this is a super common. So I think there is a truth in programming that strictness, it's not the goal. We're not saying be super strict. His strictness is correct. No, it's no, no strict as produces better results. That's what I'm saying. Right. So strict typing of variables. I would say you almost universally have consensus now is basically correct. Should be that way in every language, right? Duck equals five should share it an error because you know, you didn't declare, you didn't tell me the duck was an editor, right?

Speaker 2:          00:46:42       That's a bug, right? Or maybe you missed time, you type deck, right instead of duck. Right? You never know. And this happens all the time, right? So with that in mind, I will say that the strict with the system is correct. Now that doesn't mean cruel. That doesn't mean mean. That doesn't mean angry. It just means strict. Okay? So I think where there's misunderstanding is, and people get cranky, right? Like in other question you asked is like why are programmers kind of means sometimes? Well, Huda programmers work with all day long. So I have a theory that if you're in a job and you work with assholes all day long, what do you eventually become? An asshole. An asshole. And what is the computer except the world's biggest asshole. Because the computer has no time for your bullshit. The computer, the minute you make a mistake, everything comes crashing down, right?

Speaker 2:          00:47:25       One semi-colon has crashed space missions, right? So that's normal. So you begin to internalize that. You begin to think, oh my coworker, the computer is super strict and kind of a jerk about everything. So that's kind of how I'm going to be because I work with this computer and I have to exceed to its terms on everything. So therefore you start to absorb that and you start to think, oh well, being really strict arbitrarily is really good and error of error code five six two, four nine is a completely good error message because that's what the computer gave me, right? So you kind of forget to be a person at some level and you know how they say great detectives, internalized criminals, and kind of are criminals themselves. Like this trope of the master detective is good because he can think like the criminal. Well, I do think that's true of programmers.

Speaker 2:          00:48:10       Really good programmers think like the computer because that's their job. But if you internalize it too much, you become the computer and you've come up kind of a jerk to everybody because that's what you've internalized. You're almost not a jerk, but you have no patience for lack of strictness. As you said, it's not out of a sense of meanness. It's accidental. But I do believe it's an occupational hazard of being a programmer is you start to behave like the computer. You're very unforgiving. You're very terse, you're very oh, wrong, incorrect, move on. It's like, well, can you help me? Like what could I do to fix up wrong, say next question. Right? Like that's normal for the computer, right? Just fail next. Right? Like out of you remember in Saturday night live, like in the 90s they had this character, it was an it guy. The move guy

Speaker 3:          00:48:55       move. Was that Jimmy Fallon? No, no. I can't play it on the, okay. Yeah, I remember

Speaker 2:          00:49:02       move. Right. And he had no patience for, it might've been mad TV actually. That might've been, it might've been, but anyway, that was the, that's always been the perception, right? You start to behave like the computer. It's like, oh, you're wrong. Out of the way. You know,

Speaker 3:          00:49:14       you've written so many blog posts about programming, about programs, programming, uh, programmers. What do you think makes a good, let's start with what makes a good solo programmer?

Speaker 2:          00:49:29       Well, I don't think you should be a solo program. I think to be a good seller programmer. It's kind of like what I talked about. I will, not on Mike, but one of the things, uh, John Carmack, one of the best points he makes in the book masters of doom, which is a fantastic book and it anybody listening to this who hasn't read it, please read it. It's such a great book, is that at the time they were working on stuff like Wolfen Stein and doom. Like they didn't have the resources that we have today. They didn't have stack overflow, they didn't have Wikipedia, they didn't have like discourse forums. They didn't have places to go to get people to help them write. They had to work on their own. And that's why it took a genius like Carmax to do this stuff. Cause you had to be a genius to invent from first principles.

Speaker 2:          00:50:07       A lot of the stuff he was, he was like, the hacks he was coming up with were genius, right? Genius level stuff. But you don't need to be a genius anymore and that means not working by yourself. You have to be good at researching stuff online. You have to be good at asking questions, really good questions that are really well researched, which implies, oh, I went out and researched for three hours before I wrote this question is like that's what you should be doing because that's what's gonna make you good. To me, this is the big difference between programming in like the 80s versus programming today is like you, you kind of had to be by yourself back then. Like where would you go for answers? I remember in the early days when I was a learning visual basic for windows, like I would call the Microsoft helpline on the phone when I had like program because I was like, I don't know what to do.

Speaker 2:          00:50:46       So I would like go and call and they have these huge phone banks and like, can you imagine how alien that is now? Like who would do that? Right? Like that's crazy. So there was just nowhere else to go when you got stuck. Right. Like I had the books that came with it. I read those, study, those religiously. I just saw a post from Steve Sinofsky that said this c plus plus virgin seven came with like 10,000 pages of written material because where else were you going to figure that stuff out and go to the library when you didn't have Wikipedia, you didn't have, you know, reddit, you know, anywhere to go to answer these questions. So you, you, you've talked about through the years basically not having an ego and not thinking that you're a, the best programmer in the world and it's always kind of just looking to improve the, become a better program than you were yesterday.

Speaker 2:          00:51:36       So how have you changed as a programmer and as a, as a thinker designer around programming over the past? What is it, 15 years really of being a public figure? I would say the big insight that I had is eventually as a programmer and you have to kind of stop writing code to be effective, which is kind of disturbing. Um, cause you really love it and, but you realize like being effective at program, at programming in the, in the general sense, it doesn't mean writing code and a lot of times you can be much more successful by not writing code and writing code in terms of just solving the problems you have essentially hiring people that are really good and like setting them free and like giving them basic direction, right? Like on strategy and stuff. Cause a lot of the problems you encounter aren't necessarily solved who like really gnarly code.

Speaker 2:          00:52:22       They're solved by conceptual solutions, which can then be turned into code. But are you even solving the right problem? I mean, so I would say for me the main insight of have is, is, is to succeed as a programmer you eventually kind of stopped writing code. That's going to sound discouraging. Probably two people hearing. But I don't mean it that way. What I mean is that you're coding at a higher level language eventually. Like okay, so we're coding in assembly language, right? That's the beginning, right? You're hard coded to the architecture then. Yes. Stuff like see where it's like, wow, we can abstract across the architecture and the right code, I can then compile that code for arm or you know, whatever, you know, x 86 or whatever else is out there and then even higher level than that. Right? Like you're looking at like python, Ruby interpreted languages and then to me as a program like, okay, I want to go even higher.

Speaker 2:          00:53:05       I want to go higher than that. How do I abstract higher than language? It's like, well you abstract in spoken language and written language, right? Like you're sort of inspiring people to get things done. Giving them guidance. Like what if we did this? What if we did this? You're writing in the highest level language that there is, which is for me English, right? Whatever your spoken languages. So it's all about being effective, right? And I think, uh, Patrick McKenzie patio 11 on Hacker News and works at Stripe has a great post about this of how calling yourself a programmer is a career limiting move at some level once you get far enough from your current. I really believe that. And I, and again, I apologize, this is sound discouraging. I don't mean it to be, but he's so right, because all this stuff that goes on around the code, like the people, like that's another thing.

Speaker 2:          00:53:49       If you look at my early blog entries, it was about wow, programming is about people more than it's about co, which doesn't really make sense, right? But it's about can these people even get along together? Can they understand each other? Can you even explain to me what it is you're working on? Are you solving the right problem? People were right. Another classic program book, which again up there with code complete, please read people where it's that software is people, right? People are the software first and foremost. So a lot of the skills that I was working on early on the blog, we're about figuring out the people parts of programming, which was the harder part, the hard part of programming. Once you get to certain skill of them programming, you can pretty much solve any reasonable problem that's put in front of you. You're not writing algorithms from scratch, right?

Speaker 2:          00:54:28       That just doesn't happen. So any sort of reasonable problems put in front of you are going to be able to solve. But what you can't solve is our manager is a total jerk. You cannot solve that with code. That is not a code solvable problem. And yet that will cripple you way more than, oh, we had to use the stupid framework I don't like or, or you know, Sam keeps writing bad code that I hate or you know, you know, Dave is off there in the wilderness writing, God knows what, right. These are not your problems, your problems, your manager or a coworker is so toxic to everybody else in your team that like nobody can get anything done because everybody's so stressed out and freaked out. Right. These are the problems that you have to attack. Absolutely. And so as you go to these higher level abstractions, as you've developed as a programmer to higher, higher level abstractions

Speaker 3:          00:55:10       go into natural language, you're also the guy who kind of preached, you know, building it, you know, just diving in and doing it and, and, and, and like learn by doing. Yes. Do you,

Speaker 2:          00:55:24       do you worry

Speaker 3:          00:55:26       that as you get to higher, higher level abstractions, you lose track of the lower level of just building a is like, do you worry about that? You know, even not maybe now, but 10 years from now, 20 years from now?

Speaker 2:          00:55:41       Well, no, I mean there is always that paranoia and oh gosh, I don't feel as valuable since I'm not writing code. But for me, like when we started the discourse project, it was ruby, which I didn't really know Ruby. I mean as you pointed out, and this is another valuable substrates from stack overflow, you can be super proficient at the, for example, c sharp, which I was working in. That's what we built, stack overflow and it still is written in and then switched to ruby. And you're a newbie again, right? Like I'm but, but you have the framework. I know what a four loop is. I don't, recursion is, I know, you know what a strat stack traces, right? Like I have all the fundamental concepts to be a programmer. I just don't know Ruby. So I'm still on a higher level. I'm not like a beginner, beginner, like you're saying. I'm just like, I need to apply my programming concepts of already know to ruby

Speaker 3:          00:56:20       what suddenly there's a question that's really interesting. So looking at Ruby,

Speaker 2:          00:56:24       how do you go about learning enough that your intuition can be applied? Well that carried over. I was trying to get to is like what I realized pretty when I started with just me and Robin. I realized if I bother Robin, I am now costing US productivity, right? Every time I go to Robin rather than building the, the, uh, our, our first Alpha version of discourse, he's now answering my stupid questions about Ruby. Is that a good use of his time? Is that a good use of my time? And the answer of the both of those was resoundingly no, right? Like we were getting to an Alpha and it was a pretty much like, okay, we'll hire more programmers. Right? Like we eventually hired Neil and then eventually Sam who came in as a co founder. Um, actually it was Sam first than Neil later.

Speaker 2:          00:57:04       But the answer, the problem is just higher other competent programs. It's not like teach now I shelter, pull myself up by my bootstraps and, and, and learn Ruby. But at some point, writing code becomes a liability to you in terms of getting things done. There's so many other things that go on in the project, like building the prototype like you mentioned, like, well how do you, if you're not writing code has a re keep focus on like what, what, what are we building? Well, first basic mockups and research, right? Look like, what do we even want to build? There's a little bit of that that goes on. Then very quickly you get to the prototype stage, like build a prototype, let's iterate on the prototype really, really rapidly. And that's what we do with this course. And that's what we demo to get our seed funding for discourse was the Alpha version of discourse, um, that we had running and ready to go in.

Speaker 2:          00:57:43       It was very, it was bad. I mean it was, I'll just tell you it was bad. Um, I have, we have screenshots of it. I'm just like embarrassed to look at it now. Um, but it was the prototype we were figuring out like what, what's working, what's not working? Because there's such a broad gap between between um, the way you think things will work in your mind or even on paper and the way they work once you sit and live in the software, like actually spend time living and breathing and sour. So different. So my philosophy is get to a prototype and then what you're really optimizing for speed of iteration, like how you can turn the crank, how quickly can we iterate. That's the absolutely critical metric of any software project. And I had a tweet recently that people liked and I totally, this is so fundamental to what I do is like if you want to measure the core competency of any software tech company, it's the speed at which somebody can say, hey, we really need this word.

Speaker 2:          00:58:30       And the product changed to this word, right? Because it will be more clear to the users, like what? Like instead of respondents reply or something. But there's some the, from the conception of that idea to how quickly that single word can be changing your software rolled out to users, that is your life cycle. That's your health, your, your heartbeat. If your heartbeat is like super slow, you're basically debt. No, seriously, like if it takes two weeks or even a month to get that single word change, there was, oh my God, this is great idea. That word is so much clearer. I'm telling me like a super, like, everybody's on board for this change. It's not like, let's just change a word because we're bored. It's like this is an awesome change. Um, and then it takes them months to roll out. It's like, well, your dad, like you can't iterate, you can't [inaudible] you can do anything. Right? Like, so anyway, about the heartbeat, it's like get the, the, the prototype and then iterate on it. That's, that's what I view is like the central tenant of modern software development. That's fascinating. You put it that way.

Speaker 1:          00:59:21       It's actually, so I work in, I build autonomous vehicles. And when you look at what, uh, maybe compared to Tesla to most other auto makers, uh, the psych, the whatever the heartbeat for Tesla is literally days now in terms of they can, um, over the air deploy software updates to all of their vehicles, which is markedly different than every other automaker, which takes years to update a piece of software. And so, uh, and that's reflected in everything that's, um, the, the final product. It's reflected in really how slowly they adapt to the times.

Speaker 2:          00:59:58       And to be clear, I'm not saying being a hummingbird is the goal either. It's like you don't, when a heartbeat that's like so fast, it's like you're, you're, when you, you know, you're just freaking out, but like it is a measure of health. You should have a healthy heartbeat. Right? And it's up to, for people listening this decide what that means, but it has to be healthy. It has to be reasonable because otherwise you just get me frustrating. Cause it's like that's how you build software. You make mistakes, you roll it out, you live with it. You see what it feels like and say, Oh God, that was a terrible idea. Or Oh my gosh, this could be even better if we did. Why? Right? You turn the crank and then the more you do that, the faster you get ahead of your competitors ultimately because you're its rate of change, right?

Speaker 2:          01:00:29       Delta v, right? How fast are you moving? Well, within a year you're going to be miles away. By the time they catch up with you, right? Like that's the way it works in plus users, like I as a software developer, he's or I love software that's constantly changing because I don't understand. People get super pissed off when like, oh, they changed the software. I mean, how dare they? I'm like, yes, change the software. Change it all the time, man. That's, that's what makes this stuff great is that it can be changed so rapidly and become something that that is greater than it is now. Now granted, there's some changes that suck. I admit I've seen him many times. But in general it's like that's what makes software cool, right? It's that it is so malleable, like fighting that is like weird to me cause it's like, well you're fighting the essence of the thing that you're building. Like that doesn't make sense. You want to really embrace that. Not not to be a hummingbird, but like embrace it to a healthy cycle of your heartbeat. Right.

Speaker 1:          01:01:18       So you talk about that people really don't change. It's true. The, that's why I probably, a lot of the stuff you write about and your blog probably will

Speaker 2:          01:01:26       remains true. There's a flip side of that coin. People don't change. So investing in understanding people is, is like learning Unix in 1970 because nothing has changed, right? Like yeah, all those things you've learned about people will still be valid 30 40 years from now. Whereas if you learn the latest javascript framework, that's going to be good for like two years. Right? Exactly.

Speaker 1:          01:01:46       So, but if you look at the future of programming, so there's a people component, but there's also the technology itself. Do you, what do you see as the future of programming? Will it change significantly or as far as you can tell, uh, people are ultimately programming and so it will not, it's not something that you foresee changing in any fundamental

Speaker 2:          01:02:09       well you've got to go look back on sort of the basics of programming and one thing that always shocked me is like source control. Like I didn't learn anything that source control on grand. I graduate from college in 1992 but I remember hearing from people like in La as ladies like 1998 1999 like even maybe today they're not learning source control. And to me it's like well how can you not learn source control? That is so fundamental to working with other programmers working in a way that you don't lose your work. Like just just basic soft, the bed literal bedrock software development is source control. Now you compare it today like get up, right? Like Microsoft to get help, which I think was incredibly smart. Acquisition move on their part. Now they have anybody who wants like reasonable source controls and go send them and get hub.

Speaker 2:          01:02:50       It's all set up for you, right? There's tons of walkthroughs, tons of tutorials. So from the concept of like has programming advanced from say 1999 it's like well hell we have get hub. I mean my God, yes. Right. Like it's, it's massively advanced over over what it was now as to whether programming is is significantly different. Um, I'm going to say no. But I think the baseline of like what we view as like fundamentals will continue to go up and actually get better like source control. Cause that's one of the fundamentals that has gotten, I mean hundreds of orders of magnitude better than it was 10 20 years.

Speaker 1:          01:03:23       So those are the fundamentals. Let me introduce to things that maybe you can comment on. So one is mobile phones, so that could fundamentally transform what PR, what programming is or maybe not. Maybe you can comment on that. And the other one is artificial intelligence, which promises to in some ways to do some of the programming for you, is one way to think about it. So it's really what a programmer is, is, is, uh, using the intelligence that's inside your skull to, to do something useful. Uh, the hope with artificial intelligence is that it does some of the useful parts for you will, you don't have to think about it. So do you see smart phones in fact, that everybody has one and they are getting more and more powerful as potentially changing programming? And do you see AI is potentially changing?

Speaker 2:          01:04:13       Oh, okay. So that's good. So that have definitely changed. I mean, since, you know, I guess 2010 that's when they really started getting super popular. I mean, in the last eight years the world has literally changed or I like everybody carries a computer around and that's normal. I mean, that is such a huge change in society. I think we're still dealing with a lot of the positive, negative ramifications of that. Right? Like everybody's connected all the time. Everybody's on the computer all the time. That was my dream world as a geek. Right. But it's like be careful what you ask for, right? Like wow. Now everybody has a computer. It's not quite the utopia that we thought it would be. Right. Computers can be used for a lot of stuff that's not necessarily great. Um, so to me that's the central focus of the smartphone is just that it puts a computer in front of everyone.

Speaker 2:          01:04:55       Granted a small touchscreen, smallish touchscreen computer. But as for programming, like I dunno, I don't think that I've kind of overtime come to subscribe to the Unix view of the world when it comes to programming. It's like you want to teach these basic command line things and that is just what program is going to be for I think a long, long time. I don't think there's any magical like visual programming that's going to happen. Um, I just, I don't know. I've, I've overtime if it become a believer in that unix philosophy, it was just, you know, they, they kind of had it right. With unix. That's going to be the way it is for a long, long time. And what we'll continue to, like I said, raise the baseline, the tools will get better, it'll get simpler, but it's still fundamentally going to be command line tools, you know, may fancy ideas. That's kind of it for the foreseeable future. I'm not seeing any visual programming stuff on the horizon because you kind of think like, what do you do on a smartphone that will be directly analogist to programming? Like I'm trying to think, right? Like, and there's really not much

Speaker 1:          01:05:52       so, uh, not necessarily analogous to programming, but the kind of things that the kind of programs do we need to, right. My need to be very different.

Speaker 4:          01:06:07       Yeah.

Speaker 1:          01:06:07       Yeah. And the kind of languages, I mean, but I probably also subscribed to the same, it's just because everything in this world might be written in javascript. Uh,

Speaker 2:          01:06:16       Oh yeah, that's definite. That's already happening. I mean, just courses. A bet on discourse is itself. Javascript is another bet on that side of the table. And I, I still trying and believe in that. So I would say smartphones have been mostly a cultural shift more than a programming shift. Now your other question was about artificial intelligence and like sort of vices predicting what you're going to do. And I do think there's some strengths to that. I think artificial intelligence kind of overselling it in terms of what it's doing. It's more like PR people are predictable, right? People do the same things. Like, let me give you an example. One, one check. We put in a discourse that's in a lot of big uh, commercial websites is say you log in from New York City. No. And then an hour later you log in from San Francisco. It's like, well, hmm, that's interesting.

Speaker 2:          01:06:56       How did you get from New York to San Francisco in one hour? So at that point you're like, okay, this is a suspicious login at that point. So we would alert you. It was like, okay, but that's an AI, right? That's just a heuristic of like, how did you in one hour get 2000 miles, right? That doesn't mean you grant, maybe you're on a VPN, there's other races happened. But that's just a basic prediction based on the idea that people pretty much don't move around that much. Like they may travel occasionally, but like nobody, I mean unless you're a traveling salesman, that's literally what traveling the world every day. Like there's so much repetition and predictability in terms of things you're going to do and I think good software anticipates your needs. Like for example Google, I think it's called Google now or whatever the Google thing is, it predicts your commute and predict them based on your phone location.

Speaker 2:          01:07:37       Like where are you every day? Well that's probably where you work. That kind of stuff. I do think computers can get a lot better at that, but I, I hesitate to call it like full blown Ai. It's just computers getting better at like first of all they have a tendency because everyone has a smartphone now all of a sudden we have all this data that we didn't have before about location, about like you know, communication and feeding that into some, some basic heuristics and maybe some fancy algorithms that turn it into predictions of anticipating your needs. Like, like a friend would write like, Oh hey, I see your home. Would you like some dinner? Right? Like, let's go get some food because that's usually what we do at this time of day. Right. In the context of actually the act of programming, do you see ids improving and making the life of programming is better?

Speaker 2:          01:08:17       I do think that is possible because there's a lot of repetition in programming, right? Oh, you know, clippy would be the bad example of, Oh, I see. It looks like you're writing a four loop. Um, but there are patterns in code, right? Like in, and actually libraries are kind of like that, right? Like rather than go code up your own http request library, it's like, well, you'd use one of the existing ones that we have that's already troubleshot, right? Like not AI per se, it's just, you know, building better lego bricks, bigger lego bricks that have more functionality in them so people don't have to worry about the low level stuff as much anymore. Like wordpress, for example, to me is like a tool for somebody who isn't a programmer to do something. I mean, you can turn word press into anything. It's kind of crazy actually through the plugins. Right. And that's not programming per se. It's just lego bricks stacking wordpress elements. Right. And a little bit of configuration glue. So I would say maybe in a broader sense what I'm seeing, like there'll be more gluing and less like actual programming and that's a good thing, right? Because most of the stuff you need is kind of out there already.

Speaker 3:          01:09:18       You said 19 seventy's Unix, you see PHB and these kind of

Speaker 2:          01:09:24       old

Speaker 3:          01:09:25       remnants of, of the uh, early birth of programming remaining with us for a long time. Like you said, Unix in itself. Do you see ultimately, you know, the stuff just being there out of momentum?

Speaker 2:          01:09:42       I kind of do, I mean I was a big believer in windows early on and I was a big, you know, I was like Unix, what a waste of time. But over time I've completely flipped on that where I was like, okay, the Unix guys were right and pretty much Microsoft and windows were kind of wrong, at least on the server side, not on the desktop. Right. You need a gooey know all that stuff. And yeah, the two philosophies like apple built on Unix effectively Darwin, um, and on the desktop is a slightly different story, but on the server side where you are going to be programming now it's question where the programming's going to be. I was going to be a lot more like client side programming because technically discourses client side programming, the way you get discourse, we deliver a big ball of javascript which is the next cue locally.

Speaker 2:          01:10:17       Um, so we were really using a lot more local computing power will still retrieve the data. Obviously we have to display the posts on the screen and so forth. But in terms of like sorting and a lot of the basic stuff we're using the host processor, um, but to the extent that a lot of programming is still going to be server side, I would say. Yeah, the UNIX philosophy definitely one and there'll be different veneers over the Unix, but it's still, if you, if you peel away one or two layers, it's going to be Unix C for a long, I think unix one I mean so definitively.

Speaker 3:          01:10:45       It's interesting to hear you say that because you've done so much excellent work on the Microsoft end side in terms of backend development. Cool. So what's the future hold for Jeff Atwood Mba? The discourse, continuing the discourse in trying to improve conversation on the web.

Speaker 2:          01:11:03       Well this course is that what I've read is a any originally I call it a five year project. Then really quickly revise that your 10 year project. So we're, we started in early the 2013 that's when we launched the first version. So we're still, you know, five years in. This is the part where it starts getting good. Like we have a good product now discourse. There's any, any project you built in software, it takes three years to build what you wanted to build anyway. Like v one is going to be terrible, which it was, but you ship in any way cause that's how you get better at stuff. It's about turning the crank thought about v one being perfect because that's ridiculous. It's about v one then let's get really good at v 1.1 1.2, 1.3 like how fast can we iterate? And I think we're iterating like crazy on discourse.

Speaker 2:          01:11:40       The point that like it's a really good product. Now we have serious momentum. Um, and my original vision was I want to be the wordpress of discussion. Meaning someone came to you and said, I want to start a blog. Although the very question is kind of archaic now it's like who actually blogs anymore? But uh, I wanted the answer to that to be it would be w d a wordpress normally cause that's the obvious choice for blogging most of the time. Uh, but if someone said, hey, I want to, I need a group of people to get together and do something, the answer should be discourse, right? That should be the default answer for people because it's open source. It's free, it doesn't cost you anything. You control it, you can run it. Um, your minimum server cross for discourse is five bucks a month at this point.

Speaker 2:          01:12:19       Um, they actually got the vps prices down. It used to be $10 a month for one gigabyte of Ram, which we were are dependent. We have a kind of heavy stack. Like there's a lot of stuff in discourse. You need PostgreSQL, you need Reddis, you need ruby on rails. Um, you need a sidekick for scheduling. It's not a trivial amount of stuff cause we were architected for like, look, we're building for the next 10 years. I don't care about shared PHP hosting. That's, that's not my model. My idea is like, hey, you know, eventually this is going to be very cheap for everybody and I want to build it right. Using again, you know, higher, bigger building block levels, right. That have more required

Speaker 1:          01:12:54       and there's a wordpress model of wordpress.org wordpress.com is there a central hosting for discourse or no,

Speaker 2:          01:13:00       there is. We're not strictly segmenting into the open source versus the commercial side. We have a hosting business. That's how discourse makes money is we host discourse instances and we have really close relationship with our customers of the symbiosis of them giving us feedback on the product. We definitely wait feedback from customers a lot heavier than feedback from somebody who just wanders by and gives feedback. Uh, but that's where we make all our money. But we don't have a strict division. Um, we encourage people to use discourse. Like the whole point is that it's free, right? Anybody can set it up. I don't want to be the only person that hosts discourse. That's absolutely not the goal, but it is a primary way for us to build a business. And it's actually kind of a great business. I mean, the business is going really, really well in terms of hosting.

Speaker 1:          01:13:41       So I, uh, I used to work at Google research as a company and is basically funded on an advertisement. So is Facebook, let me, let me ask if you can comment on it. I think advertisement is best. So you'd be extremely critical on what ads are. But at its best, it's actually serving you in a sense. It's giving you, it's connecting you to what you would want to explore. So it's like related posts to related content is the same. That's the best of advertisement. So discourse is

Speaker 2:          01:14:12       a connecting people based on their interest. It seems like a place where advertisement at its best could actually serve the users. Is that something that you're considering thinking about as a way to bring, um, to financially support the platform? That's interesting because I agree. I actually have a contrarian view of advertising, which I kind of agree with you. I recently installed that blocker like reluctantly because I don't like to do that, but like the performance of the ads man, like they're so heavy now and like it's just crazy. So like it's almost like a performance argument more than like I actually am pro ads and I, contrary, I have a contrarian viewpoint. I agree with you. If you do ads right, it's showing you stuff you'd be interested in any way. I don't mind that. That actually was kind of good thing. So plus I think it's, it's rational to want to support the people that are doing this work through seeing their ads.

Speaker 2:          01:15:02       And, but that said, I run ad block now, which I I didn't want to do but I was convinced by all these artists like 30, 40 megabytes of stuff just to serve you ads. Um, yeah, it feels like as now or like the experts exchange of a, whenever you started to stack overflow hose is a little bit, it's all, there's so many companies and ad tech though, it's embarrassing. Like you can do that if you see this logo charts of like just the whole page is like you can't even see them. They're so small. There's so many companies in the space. But since you brought it up, I do want to point out that very, very few discourse sites actually run using an ad supported model. It's not effective. Like it's too diluted. It's too weird. It doesn't pay well and like users hate it.

Speaker 2:          01:15:40       So it's a combination of like users hate it. It doesn't actually work that well in practice. Like in theory, yes, I agree with you. If he had clean fast ads that were exactly the stuff you would be interested in. Awesome. We're so far from that though, right? Like Google does an okay job, they retargeting and stuff like that. But in the, in the real world, discourse sites rarely can make ads work. It just doesn't work for so many reasons. But you know, what does work is subscriptions Patrion uh, affiliate codes for like Amazon of like just oh here, here's a cool Yoyo Click and then you click and go to Amazon and they get a small percentage of that, which is fair I think. I mean, cause you saw the Yoyo on that site and you click through and you bought it. Right. And that's fair for them to get 5% of that or 2% of that or whatever it is.

Speaker 2:          01:16:24       Those things definitely work. In fact, a site that I used to participate on a lot, I help the owner. One of the things I, I got them switched to discourse. I basically paid them to switch to discourse cause I was like, look, you guys gotta switch. I can't come here anymore on this terrible software. Um, but I was like, look. And on top of that, like you're serving people ads that they hate. Like you should just go full on Patriot because he had a little bit of Patriot on go fall on Patrion do the Amazon affiliates thing for any Amazon links they get posted and just do that and just triple down on that stuff. And that's worked really well for them in this creator in particular. So that stuff works. But traditional ads, I mean definitely not working at least on discourse. So the last question, you've created the code keyboard.

Speaker 2:          01:17:05       I've program most of my adult life and it can nieces keyboard. I have one upstairs now. Can you describe what a mechanical keyboard is and why is it something that makes you happy? Well, you know, this is another fetish item really, like not required. You can do programming on any kind of keyboard, right? Even like an onscreen keyboard. Oh God, that's terrifying, right? Like, well, you could touch, I mean if you look back to the early, it is competing. There were chicklet keyboards, which are, I mean those are awful, right? But what's the look you were, oh God. Okay. Well it's just like fit and rubber membranes or the rubber ones. Oh No, super bad. Right? Yeah. So it's a fetish item. All it really says is, look, I care really about keyboards because the keyboard is the primary method of communication with the computer, right?

Speaker 2:          01:17:46       So it's just like having a nice mic for this, this podcast. You want a nice keyboard, right? Cause it has t very tactile feel. I can tell exactly when I pressed the key, I get that little click. So, oh and it feels good. And it's also kind of a fetish shot. It was like, wow, I care enough about programming that I care about the tool, the primary tool that he's coming with a computer. Make sure it's as good as it feels good to use for me. And like I can be very productive with it. So to be honest, it's a little bit of a fetish item, but a good one and indicates that you're serious and in case you're interested, it indicates that you care about the fundamentals because you don't what makes you good programmer being able to type really fast, right? Like this is true, right?

Speaker 2:          01:18:20       So a core skill is just being able to type fast enough to get your ideas out of your head into the code base. So just practicing your typing can make you a better programmer. It is also something that makes you well, makes you enjoy typing. Correct. The actual act, uh, something about the process. Like I played piano, it's tactile, there's a tactile feel that ultimately feeds the passion. Makes you happy, right? No, totally. That's it. I mean and, and it's funny cause artisanal keyboards have exploded. Like Massdrop has gone ballistic with this stuff. There's probably like 500 keyboard projects on Massdrop alone and there's some other guy I follow on Twitter. I used to write for this, the site of the tech report way back in the day. And he's like, every week he's just posting like what I called keyboard porn of like just cool keyboards.

Speaker 2:          01:19:05       Like, oh my God, those look really cool. Right? Like that's like how many keyboards this guy has. It's got me with Yoyos. How many videos do you have? How many do you need? Well technically one, but I like a lot. I don't know why. So same thing with keyboards. So yeah, they're awesome. Like I highly recommend anybody that doesn't have a mechanical to research it. Look into it and see what you like and you know, it's ultimately a fetish item. But I think these sort of items, these religious artifacts that we have are part of what make us human like that. That part's important, right? It's kind of what makes life worth living. It's not necessary in the strictest sense, but ain't nothing necessary if you think about that. Right? Like so, yeah. Why not so sure. Jeff, thank you so much for talking today. Yeah, you're welcome. Thanks for having me.