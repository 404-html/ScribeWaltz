WEBVTT

1
00:00:01.840 --> 00:00:05.070
Check out the too many papers,
youtube channel for some cool research videos.

2
00:00:05.820 --> 00:00:07.320
Hello world,
it's Saroj.

3
00:00:07.380 --> 00:00:10.590
In this episode we're going to learn how to write a python script that uses

4
00:00:10.591 --> 00:00:15.300
Twitter to understand how people are feeling about a topic that we choose using

5
00:00:15.301 --> 00:00:18.630
the natural language library,
text Blob,
and just 14 lines of code.

6
00:00:18.690 --> 00:00:22.350
People really confused me like how does Donald Trump have so many supporters in

7
00:00:22.351 --> 00:00:26.580
2016 and why our beers,
manly and fruity drinks girly.
Oh,

8
00:00:26.640 --> 00:00:29.880
and why do people think anything is beautiful like what even is beauty?

9
00:00:31.320 --> 00:00:32.370
The soundtrack is beauty.

10
00:00:32.580 --> 00:00:36.930
Human preferences are practically unpredictable and we've invented the sciences

11
00:00:36.931 --> 00:00:40.380
of psychology and sociology to help us study these things.

12
00:00:40.560 --> 00:00:44.250
Both are the scientific study of people and all the emotion and relationships

13
00:00:44.251 --> 00:00:46.650
and behaviors that they display.
Traditionally,

14
00:00:46.651 --> 00:00:49.860
psychologists would formulate a hypothesis then to test it.

15
00:00:49.890 --> 00:00:52.380
They would find a subset of people that fit their category,

16
00:00:52.530 --> 00:00:53.670
bring them into the lab,

17
00:00:53.760 --> 00:00:56.880
then ask them to do some tasks while recording the results,

18
00:00:57.030 --> 00:00:58.740
but with data freely available.

19
00:00:58.800 --> 00:01:02.910
We data scientists can do the same thing with the best psychology tool out
there.

20
00:01:03.030 --> 00:01:05.610
Twitter.
Twitter is a treasure trove of sentiment.

21
00:01:05.700 --> 00:01:09.870
People around the world output thousands of reactions and opinions on every

22
00:01:09.871 --> 00:01:12.540
topic under the sun every second of every day.

23
00:01:12.690 --> 00:01:16.800
It's like one big psychological database that's constantly being updated and we

24
00:01:16.801 --> 00:01:20.970
can use it to analyze millions of text snippets in seconds with the power of

25
00:01:20.971 --> 00:01:21.804
machine learning.

26
00:01:24.000 --> 00:01:28.230
So how does sentiment analysis work?
Well,
when we received some input text,

27
00:01:28.260 --> 00:01:32.190
like a tweet,
we'll first want to split it up into several words or sentences.

28
00:01:32.340 --> 00:01:36.510
This process is called tokenization because we're creating small tokens from big

29
00:01:36.511 --> 00:01:40.170
text.
We can just count the number of times each word shows up.

30
00:01:40.200 --> 00:01:43.620
Once a text is tokenized,
this is called the bag of words model.

31
00:01:43.740 --> 00:01:48.030
Then we could look up the sentiment value for each word from a sentiment lexicon

32
00:01:48.120 --> 00:01:52.140
that has it all prerecorded to classify the total settlement value of our tweet.

33
00:01:52.200 --> 00:01:55.710
Okay,
so our process will be to registered to access Twitter's Api,

34
00:01:55.740 --> 00:01:59.130
install our dependencies,
then write our sentiment analyzer script.

35
00:01:59.250 --> 00:02:01.320
Let's start by signing up to use Twitter's API.

36
00:02:01.470 --> 00:02:05.370
An API or application programming interface is a gateway that lets you access

37
00:02:05.371 --> 00:02:08.520
some servers,
internal functionality in our case Twitter,

38
00:02:08.700 --> 00:02:12.900
so we'll be able to read and write tweets right from our app using Twitter's
Api.

39
00:02:13.110 --> 00:02:15.180
Let's sign up for it in the browser.
First of all,

40
00:02:15.181 --> 00:02:18.720
want to make sure that we have our own Twitter account set up with a verified

41
00:02:18.721 --> 00:02:21.090
phone number attached to it.
Once we have that,

42
00:02:21.120 --> 00:02:22.740
we can create our first Twitter app.

43
00:02:22.800 --> 00:02:26.430
We'll select the create new APP icon and typing a name and description of our

44
00:02:26.431 --> 00:02:27.900
app as well as a website.

45
00:02:28.020 --> 00:02:30.390
The website field is kind of like a liberal arts degree.

46
00:02:30.420 --> 00:02:31.320
It doesn't really matter.

47
00:02:31.560 --> 00:02:34.950
Then we can click the create button at the bottom and our APP is created.

48
00:02:35.100 --> 00:02:38.220
We can click on our APP and go to the keys and access tokens tab.

49
00:02:38.280 --> 00:02:42.360
We're going to need to use these keys in our script to let us authenticate or

50
00:02:42.361 --> 00:02:46.170
verify our identity with Twitter.
Okay.
Let's move on to installing.

51
00:02:46.171 --> 00:02:49.230
Our dependencies are first dependency is called [inaudible],

52
00:02:49.380 --> 00:02:51.960
which is our library for accessing the Twitter API.

53
00:02:52.050 --> 00:02:54.240
Our other dependency is called text blob,

54
00:02:54.330 --> 00:02:57.030
which will help us perform the actual sentiment analysis.

55
00:02:57.240 --> 00:02:58.470
Before we get to the code,

56
00:02:58.560 --> 00:03:02.530
let's do a text block demo right from the python interpreter in terminal,

57
00:03:02.800 --> 00:03:05.920
we can access the interpreter by typing in python.
That's it.

58
00:03:06.070 --> 00:03:08.140
Now we can write python directly into terminal.

59
00:03:08.320 --> 00:03:12.010
We'll start off by importing text blob.
Now let's create our first tech squad.

60
00:03:12.130 --> 00:03:15.490
This is just a piece of text we'll call our variable blog and assign it this

61
00:03:15.491 --> 00:03:16.570
value or rapid string.

62
00:03:16.571 --> 00:03:20.050
Using the textbook method in our string will be Saroj is angry.

63
00:03:20.051 --> 00:03:23.560
He never gets good matches on Tinder.
Now that we have our blog variable,

64
00:03:23.561 --> 00:03:26.980
if we want to see parts of speech,
we can just access the tags attribute.

65
00:03:26.990 --> 00:03:28.810
If we want to tokenize this text,

66
00:03:28.870 --> 00:03:31.960
we can just type in the words attribute and we can see the sentiment of this

67
00:03:31.961 --> 00:03:35.710
blog easily by accessing the sentiment.
That polarity attribute.

68
00:03:35.740 --> 00:03:38.980
That's on a scale between negative one and one.
All right.
First things first,

69
00:03:38.981 --> 00:03:42.700
we want to create four variables that authenticating with Twitter.
We'll require.

70
00:03:42.850 --> 00:03:46.120
We'll find these in the dashboard and we can copy and paste each of them as

71
00:03:46.121 --> 00:03:50.440
strings.
Let's authenticate with Twitter,
which basically means login via code.

72
00:03:50.530 --> 00:03:51.041
To do that,

73
00:03:51.041 --> 00:03:55.060
we'll create a variable called off for authentication and use the off Hendler.

74
00:03:55.061 --> 00:03:57.940
Method of tweet by this method takes two arguments,

75
00:03:58.000 --> 00:04:00.040
that consumer key and the consumer secret.

76
00:04:00.070 --> 00:04:03.820
This method was written inside of the tweet Pie Library with a bunch of code

77
00:04:03.821 --> 00:04:07.510
that is hidden to us.
We don't need to know the details for our use case.

78
00:04:07.630 --> 00:04:11.380
We can just name the method and all of its functionality is in our hands.

79
00:04:11.440 --> 00:04:15.100
The arguments are what the method uses to perform its internal calculation,

80
00:04:15.160 --> 00:04:17.920
whatever it is,
we're halfway through authentication.

81
00:04:18.010 --> 00:04:22.240
The other half is to call the set access token method on the author variable,

82
00:04:22.330 --> 00:04:26.110
which takes two arguments,
the access token and the access token secret.

83
00:04:26.260 --> 00:04:28.930
That's it.
We've created our authentication variable.

84
00:04:29.080 --> 00:04:32.530
Now we want to create our main variable from which we'll do all of our Twitter

85
00:04:32.531 --> 00:04:37.330
magic.
We'll call it API and assign it a value from the tweet by API method,

86
00:04:37.390 --> 00:04:41.320
which takes a single authentication argument,
which will fill in right here.

87
00:04:41.470 --> 00:04:43.330
Now that we have our API variable,

88
00:04:43.331 --> 00:04:46.240
we can perform a whole bunch of different possible methods,
but we're,

89
00:04:46.241 --> 00:04:49.150
we're going to do is search for tweets.
For our use case,

90
00:04:49.151 --> 00:04:52.840
we want to collect tweets that contain a certain keywords.
So to do that,

91
00:04:52.870 --> 00:04:56.770
let's create a public tweets variable that is going to store a list of tweets to

92
00:04:56.771 --> 00:04:59.440
fill it.
We'll call the search method of the API and variable.

93
00:04:59.470 --> 00:05:02.440
The search method takes a single argument.
Let's make it Trump.

94
00:05:02.590 --> 00:05:06.100
This method is going to retrieve a bunch of tweets that contain the word Trump.

95
00:05:06.160 --> 00:05:09.100
From here,
we can print them all out to terminal.
To do that,

96
00:05:09.101 --> 00:05:12.460
we'll create a for loop for tweet in public tweets,
colon,

97
00:05:12.560 --> 00:05:15.220
a four loop increments through every value in a list.

98
00:05:15.250 --> 00:05:18.520
So the question now is what do we want to do with each tweet?

99
00:05:21.250 --> 00:05:24.400
Okay,
let's print them out.
Each tweet has a text attribute,

100
00:05:24.401 --> 00:05:27.670
which is the string version of it,
so we'll print,
tweak that text.

101
00:05:27.700 --> 00:05:31.570
It's time to perform our sentiment analysis or create an analysis variable that

102
00:05:31.571 --> 00:05:35.800
we'll store our analysis and called text glob with our tweet string as the only

103
00:05:35.801 --> 00:05:39.970
argument.
Then we can print out the sentiment attribute of the analysis variable.

104
00:05:40.150 --> 00:05:43.570
We can see each tweet related to Trump as well as it's sentiment analysis,

105
00:05:43.600 --> 00:05:44.411
polarity measures,

106
00:05:44.411 --> 00:05:48.610
how positive or negative some text is and subjectivity measures how much of an

107
00:05:48.611 --> 00:05:51.760
opinion it is versus how factual.
So to break it down,

108
00:05:51.820 --> 00:05:56.110
sentiment analysis is the process of extracting and understanding human feelings

109
00:05:56.111 --> 00:06:00.080
from data on Api lets you access a servers,
internal functionality like Twitter,

110
00:06:00.200 --> 00:06:03.670
right from your app and the text Blob Python Library that you performed.

111
00:06:03.671 --> 00:06:05.930
Sentiment analysis and just a few lines of code.

112
00:06:06.080 --> 00:06:09.290
There's a lot more we can do with our sentiment analyzer and the challenge for

113
00:06:09.291 --> 00:06:13.760
this week's video is to extend this code to make it create a labeled CSV file

114
00:06:13.820 --> 00:06:17.300
with the clean tweets of whatever topic selected details are in the code.

115
00:06:17.301 --> 00:06:18.560
Read me poster,
get help,

116
00:06:18.561 --> 00:06:21.290
link in the comments and I'll announce the winner in next week's video.

117
00:06:21.320 --> 00:06:24.560
The winner for the gender classification challenge from the last episode is

118
00:06:24.561 --> 00:06:25.650
Naresh.
Now Basha,

119
00:06:25.880 --> 00:06:29.450
I especially liked how he created a dictionary at the end to store the result

120
00:06:29.451 --> 00:06:31.010
from each of the three classifiers.

121
00:06:31.160 --> 00:06:34.820
Then use the Arg Max function to print out the one with the best result rather

122
00:06:34.821 --> 00:06:38.360
than doing a bunch of,
if then statements,
bad ass of the week.
Also,

123
00:06:38.361 --> 00:06:41.660
the runner up is victor must say,
very clean code.
For more info,

124
00:06:41.661 --> 00:06:44.690
check out the links in the description and please subscribe for more programming

125
00:06:44.691 --> 00:06:48.320
videos.
For now,
I've got a surcharge.
The president is on the line.

126
00:06:48.440 --> 00:06:52.910
You're our only hope.
I've got to save the world,
so thanks for watching.

