WEBVTT

1
00:00:00.150 --> 00:00:01.310
Hello world.
It's Raj.

2
00:00:01.330 --> 00:00:05.550
Today we're going to be building a decentralized APP or doc in three minutes.

3
00:00:05.700 --> 00:00:09.090
Let's get started.
For this video,
we're going to be using embark,

4
00:00:09.091 --> 00:00:12.510
which is an awesome javascript framework for building decentralized
applications.

5
00:00:12.660 --> 00:00:15.900
It's integrating to theory and IPFS.
To start off,

6
00:00:15.901 --> 00:00:19.710
we want to go ahead and install it using NPM,
which is a node package manager.

7
00:00:20.280 --> 00:00:21.480
Once we have it installed,

8
00:00:21.481 --> 00:00:24.840
we can go ahead and look in our bash RC and make sure that we've linked it

9
00:00:24.841 --> 00:00:26.520
properly.
Once we're sure we've linked that,

10
00:00:26.521 --> 00:00:30.450
we can source our bash and run embark new test that's going to create a new

11
00:00:30.451 --> 00:00:33.330
embarked app just like you would generate a Django app or a rails app.

12
00:00:33.960 --> 00:00:37.260
Then we can go ahead and run our blockchain.
The blockchain runs on it theory,

13
00:00:37.470 --> 00:00:39.330
so what we were part of the theory of net,
what when we were in our APP.

14
00:00:39.720 --> 00:00:41.610
Then we can go ahead and type in embark run.

15
00:00:41.820 --> 00:00:45.060
We're just going to run our APP on our local host just like a Django app or

16
00:00:45.061 --> 00:00:48.030
rails app at port 8,000 there it is.
There's our APP.

17
00:00:48.540 --> 00:00:51.690
Now let's go ahead and see what it's like.
It's just a skeleton file.

18
00:00:51.780 --> 00:00:56.250
We've got contracts,
CSS,
html,
js,
standard things.
The contracts is,

19
00:00:56.251 --> 00:00:57.240
that is the interesting bit.

20
00:00:57.420 --> 00:01:00.350
All the front end logic of your code works just like an irregular,

21
00:01:00.360 --> 00:01:02.400
whether it's the backend that is different.

22
00:01:02.430 --> 00:01:04.710
So let's go ahead and create our first smart contract.

23
00:01:04.770 --> 00:01:07.920
We'll call it simple storage dot.
Sol,
which stands for solidity,

24
00:01:07.980 --> 00:01:12.360
the language of a theory contracts.
This contract is going to do a simple thing.

25
00:01:12.390 --> 00:01:15.180
It's going to get and set an integer in our blockchain.

26
00:01:15.540 --> 00:01:19.290
And the great thing about smart contracts as opposed to other types of contracts

27
00:01:19.500 --> 00:01:20.970
is it's decentralized there.

28
00:01:20.970 --> 00:01:25.500
Trustless you can have dynamic code that you would deploy to say Heroku that

29
00:01:25.501 --> 00:01:27.030
lives on a decentralized network.

30
00:01:27.300 --> 00:01:31.350
All notes have to verify that this code didn't indeed run the intended output.

31
00:01:31.740 --> 00:01:36.480
That's all it's going to do.
And in our CSS,
15 pixels for our margin,
uh,

32
00:01:36.510 --> 00:01:40.260
and then for html page we'll want to construct something more than the standard

33
00:01:40.320 --> 00:01:44.370
welcome to embark and it get button for it as well.
So once we have our html,

34
00:01:44.400 --> 00:01:46.950
we want to make sure that our javascript works as well.

35
00:01:47.190 --> 00:01:51.330
So let's go ahead and create our index dot js file and our index dot js file.

36
00:01:51.331 --> 00:01:53.500
We want three functions that run off of the dock.

37
00:01:54.180 --> 00:01:55.680
Whenever the user inputs at texts,

38
00:01:55.800 --> 00:01:58.950
we use simple storage outset and then use the value as a parameter.

39
00:01:59.310 --> 00:02:02.220
The same thing for get and that we append it to the log of what just happened

40
00:02:02.820 --> 00:02:04.260
and our contracts that yml.

41
00:02:04.350 --> 00:02:07.290
We want to make sure that we're running the contract that we've just created.

42
00:02:07.350 --> 00:02:11.100
So we'll say symbol storage and the argument will be however much we want to

43
00:02:11.101 --> 00:02:13.320
send as a currency transfer in this deck.

44
00:02:13.890 --> 00:02:17.530
On this case it will be 100 now you can use this for other things like you know,

45
00:02:17.550 --> 00:02:21.540
sending someone a picture on a social network court or some kind of financial

46
00:02:21.600 --> 00:02:23.730
app or gambling or poker.

47
00:02:23.940 --> 00:02:27.360
Anything that involves any kind of currency or data we want to pay people for or

48
00:02:27.361 --> 00:02:30.150
receive four,
that's when a smart contract would come into play.

49
00:02:31.020 --> 00:02:35.030
And embark will easily allow you to deploy your dap to IPFS by just typing in

50
00:02:35.040 --> 00:02:38.520
embark IPFS so we can get in,
set the value right here in html,

51
00:02:38.850 --> 00:02:42.210
and you can see it's creating transactions in the blockchain.
That's it.
Congrats.

52
00:02:42.211 --> 00:02:44.490
We got our first step up and running,
so think of it,

53
00:02:44.491 --> 00:02:48.750
theory him as a decentralized Heroku and IPFS as a decentralized database.

54
00:02:48.780 --> 00:02:52.290
You can utilize both for your dad.
For more information on decentralized apps,

55
00:02:52.380 --> 00:02:55.350
please check out the links in the description below and please subscribe for

56
00:02:55.351 --> 00:02:57.270
more technology videos.
Thanks for watching.

