WEBVTT

1
00:00:00.060 --> 00:00:02.610
Microsoft bucket and everything will be fine.

2
00:00:04.410 --> 00:00:09.180
Hello world.
It's Sir Raj and in this video I'll show you how to use get hub,

3
00:00:09.360 --> 00:00:12.360
the safe space for developers across the world.

4
00:00:12.660 --> 00:00:14.910
I'll describe how the good protocol works,

5
00:00:15.120 --> 00:00:19.920
show you how to make your own repository and give you some tips on how to

6
00:00:19.921 --> 00:00:23.220
promote your get hub code via social media.

7
00:00:23.640 --> 00:00:26.730
Over a decade ago,
the legendary programmer,

8
00:00:26.880 --> 00:00:31.880
Linus Torvalds was working on an operating system that had been his pet project

9
00:00:32.581 --> 00:00:33.960
for a couple of years.

10
00:00:34.260 --> 00:00:39.260
He was constantly making changes to his code and there were other developers who

11
00:00:40.141 --> 00:00:43.500
weren't interested in contributing to the project as well.

12
00:00:43.830 --> 00:00:48.830
He needed a way to track how the code changed over time,

13
00:00:49.050 --> 00:00:53.190
so if he messed up,
he could easily go back to a previous version.

14
00:00:53.580 --> 00:00:58.580
The simple way would be to continuously rename every new version of his source

15
00:00:59.281 --> 00:01:01.170
code,
but this was cumbersome.

16
00:01:01.440 --> 00:01:06.440
A better way would be to use some kind of lightweight protocol to track those

17
00:01:06.601 --> 00:01:08.130
changes over time.

18
00:01:08.490 --> 00:01:12.900
This would also help him work with other developers as it would give them a

19
00:01:12.901 --> 00:01:17.901
collection of notes on the most recently worked on project files as well as a

20
00:01:19.051 --> 00:01:22.350
nice chronological history of what had changed.

21
00:01:22.380 --> 00:01:24.150
There were existing tools out there,

22
00:01:24.151 --> 00:01:29.151
but Linus was not happy with any of them as in his hilariously strong opinion.

23
00:01:29.640 --> 00:01:32.370
They didn't work well enough for that reason.

24
00:01:32.400 --> 00:01:37.400
He wrote the get protocol to solve his problem and he used it to help him work

25
00:01:37.801 --> 00:01:40.020
on his operating system.
Linux,

26
00:01:40.410 --> 00:01:45.270
even though there are other version control systems out there get has since

27
00:01:45.271 --> 00:01:48.810
exploded in popularity becoming the most used.
It's

28
00:01:48.811 --> 00:01:53.811
now@theheartofprettymucheverymoderndevelopmentworkflowandthepopularwebsitegethub.com

29
00:01:56.070 --> 00:02:01.070
uses the get protocol to host code bases and allow developers to work together

30
00:02:01.501 --> 00:02:03.870
with a single shared interface.

31
00:02:04.390 --> 00:02:09.390
Get has a lot of different commands and its architecture can be confusing if

32
00:02:09.871 --> 00:02:14.820
it's your first time trying to understand it to make a get more intuitive.

33
00:02:14.940 --> 00:02:18.210
Let's use the analogy of an auto company like Tesla.

34
00:02:18.600 --> 00:02:23.550
Let's say Tesla has to release a new version of its model s every year with

35
00:02:23.551 --> 00:02:25.380
slightly updated features.

36
00:02:25.710 --> 00:02:30.710
The different teams of car designers at Tesla have a year long plan to execute

37
00:02:31.021 --> 00:02:36.021
those features for the latest version and along the way each team has to make

38
00:02:36.031 --> 00:02:40.500
sure there changes support the changes from other teams,

39
00:02:40.770 --> 00:02:45.750
so if we're on the body design team we need to create a body design that doesn't

40
00:02:45.751 --> 00:02:47.070
just look good.

41
00:02:47.220 --> 00:02:52.220
It has to work in tandem with the new features that say the interiors team is

42
00:02:52.471 --> 00:02:54.780
putting in the car like flame throwers,

43
00:02:55.200 --> 00:03:00.160
how do we best organize our workflow such that we can accommodate all of the

44
00:03:00.161 --> 00:03:04.390
teams as we are developing the body for the 2019 virgin,

45
00:03:04.510 --> 00:03:09.510
there are actually four versions of the design that exists at any given time.

46
00:03:10.100 --> 00:03:14.650
There's the live version that's the current version that's already on the market

47
00:03:14.680 --> 00:03:16.660
that customers know about.

48
00:03:16.990 --> 00:03:21.880
There's the currently planned version for the next year that will eventually go

49
00:03:21.881 --> 00:03:24.100
live once all the teams agree.

50
00:03:24.430 --> 00:03:27.130
This represents the remote repository.

51
00:03:27.460 --> 00:03:32.460
There's our own latest improved body designed version that takes into account

52
00:03:32.620 --> 00:03:34.870
suggestions from other teams,

53
00:03:35.020 --> 00:03:38.920
but that's yet to be presented to the rest of the team for approval.

54
00:03:39.100 --> 00:03:44.100
This represents the local repository and finally there's a design we are

55
00:03:44.531 --> 00:03:49.480
developing and excited about but still needs to be tested and reviewed by the

56
00:03:49.481 --> 00:03:52.270
team.
This is the staging area.

57
00:03:52.660 --> 00:03:57.660
Each stage represents a different level of commitment to the body design and

58
00:03:57.820 --> 00:03:59.770
similarly in a code base,

59
00:03:59.950 --> 00:04:04.480
our code must pass through four stages before it goes live.

60
00:04:04.840 --> 00:04:08.350
Just like in the car design process,
this is a great thing.

61
00:04:08.590 --> 00:04:13.450
We wouldn't want to just draft up a car design and immediately decide that,

62
00:04:13.480 --> 00:04:15.880
hey,
this is the final 2019 design.

63
00:04:16.270 --> 00:04:21.270
The whole team has to agree upon whether our design works in harmony with the

64
00:04:21.520 --> 00:04:25.840
other changes that are being made.
It's a democratic process.

65
00:04:25.900 --> 00:04:30.900
Unlike apple get has a set of commands that we can find via a simple cheat

66
00:04:31.091 --> 00:04:33.550
sheet.
Each has its own use case.

67
00:04:33.940 --> 00:04:38.440
We can use three commands in particular to highlight the different stages of

68
00:04:38.441 --> 00:04:42.790
review that our design must go through before it goes live.

69
00:04:43.150 --> 00:04:47.830
Each stage further lowers the risk that we'll make a decision that conflicts

70
00:04:47.831 --> 00:04:50.500
with features built by another team,

71
00:04:50.920 --> 00:04:55.920
get pad eclairs that we've finished a full design and that we feel good about

72
00:04:55.931 --> 00:04:56.560
it.

73
00:04:56.560 --> 00:05:01.000
It still needs to be tested and reviewed though as this design enters the

74
00:05:01.001 --> 00:05:06.001
staging area and get commit means we feel fully confident in the design.

75
00:05:06.070 --> 00:05:11.070
We've put it through all our standard tests and our features like revolving side

76
00:05:11.501 --> 00:05:13.240
mirrors to Olin place.

77
00:05:13.570 --> 00:05:18.550
This design is now copied it from the staging area into the local repository

78
00:05:18.551 --> 00:05:20.890
ready to present to the other teams.

79
00:05:21.310 --> 00:05:24.460
Once we're ready to present our car to the other teams,

80
00:05:24.730 --> 00:05:29.590
we can copy our designed from the local repository to the remote repository.

81
00:05:29.591 --> 00:05:34.591
Viet that get pushed command through remote repository is hosted in the cloud

82
00:05:34.901 --> 00:05:39.901
while our local one is hosted on our machine and once all the teams are happy

83
00:05:39.971 --> 00:05:41.110
with the new features,

84
00:05:41.290 --> 00:05:45.400
we can deploy it to our website or mobile app in production.

85
00:05:45.790 --> 00:05:47.830
This isn't actually a gift to command,

86
00:05:47.831 --> 00:05:51.940
it just represents the process of going live to production.
So far,

87
00:05:51.941 --> 00:05:56.890
we've assumed that we're all building just one new version of our car at a time,

88
00:05:57.320 --> 00:06:02.320
but the reality is that our car actually has three variations each with slightly

89
00:06:02.571 --> 00:06:04.070
different body designs.

90
00:06:04.490 --> 00:06:08.900
They have pretty much all their features in common except for the body design.

91
00:06:09.410 --> 00:06:12.680
We could just make new repositories for each,

92
00:06:12.860 --> 00:06:15.290
but since they share so many in common,

93
00:06:15.530 --> 00:06:18.920
we can just create branches for each branch's.

94
00:06:18.980 --> 00:06:22.490
Let us maintain multiple versions of the same code base.

95
00:06:22.850 --> 00:06:27.850
Each branch will have a few slight differences and if the marketing team learns

96
00:06:28.371 --> 00:06:32.780
that,
hey,
there isn't a demand for a certain version of our car,

97
00:06:33.200 --> 00:06:37.070
but it would be nice to have a certain feature of that car.
In our main version,

98
00:06:37.370 --> 00:06:41.270
we can use the merge command to integrate two branches.

99
00:06:41.630 --> 00:06:46.630
This eliminates one branch but brings the features of that branch into a single

100
00:06:46.761 --> 00:06:47.450
new branch.

101
00:06:47.450 --> 00:06:51.670
Let's say a team pushes a new feature like a car dashboard to the remote to

102
00:06:51.680 --> 00:06:55.970
repository.
We can update our local repository with get pull,

103
00:06:55.971 --> 00:07:00.950
pulling the new changes,
but if those changes conflict with our repository,

104
00:07:01.190 --> 00:07:05.870
we have what's called a merge conflict.
We have two options to resolve this.

105
00:07:06.200 --> 00:07:10.310
We can either tell that team to revert their changes to what they were

106
00:07:10.311 --> 00:07:15.311
previously or we can change our own body design so that it fits the new

107
00:07:15.591 --> 00:07:16.424
dashboard.

108
00:07:16.790 --> 00:07:21.790
Then push an updated version too remote to resolve the conflict and get helps us

109
00:07:21.981 --> 00:07:26.960
track all of these conflicts and quickly points out the exact lines that are in

110
00:07:26.961 --> 00:07:31.940
conflict.
So let's go ahead and create our own repository then put it on,

111
00:07:31.941 --> 00:07:36.590
get up.
We can sign up for get hub pretty easily on the website.

112
00:07:36.620 --> 00:07:38.780
After entering a few credentials,

113
00:07:39.140 --> 00:07:43.640
we'll want to add a picture and a description since it's essentially a social

114
00:07:43.641 --> 00:07:46.640
network for developers.
Once we do that,

115
00:07:46.641 --> 00:07:50.810
we can download the latest version of the good protocol and install it.

116
00:07:51.200 --> 00:07:53.060
After that's done in command line,

117
00:07:53.090 --> 00:07:58.090
we can set up get so it links up with get hub will define our get hub username

118
00:07:58.790 --> 00:08:01.550
and email using the get to config command,

119
00:08:01.610 --> 00:08:06.610
the same ones we used on github.com then we can create our first local get

120
00:08:07.251 --> 00:08:11.420
repository via command line using the get in it to command.

121
00:08:11.810 --> 00:08:16.460
We can check the status and see that we have absolutely nothing to commit right

122
00:08:16.461 --> 00:08:21.170
now,
so we'll just create a new file and add some code to it.

123
00:08:21.590 --> 00:08:26.590
Now we went to push these changes to get hub so we can add it to get straight to

124
00:08:26.931 --> 00:08:31.700
the staging area.
This is our initial design.
Then if we're satisfied,

125
00:08:31.701 --> 00:08:36.701
we can commit our changes to our local repository via the commit command.

126
00:08:37.250 --> 00:08:40.400
Before we push our code to the remote repository.

127
00:08:40.610 --> 00:08:42.980
Let's create another branch for fun.

128
00:08:43.190 --> 00:08:45.650
Then switch to it via the checkout command.

129
00:08:46.130 --> 00:08:49.280
We can modify the code a bit here.
Then committed.

130
00:08:49.880 --> 00:08:54.110
Now if we switch back to our main branch,
also called master,

131
00:08:54.470 --> 00:08:57.570
we can make change just for fun and committed.

132
00:08:57.660 --> 00:09:02.160
Now if we want to merge the changes from our new branch onto master,

133
00:09:02.220 --> 00:09:04.410
we can via the merge command,

134
00:09:04.560 --> 00:09:07.620
but alas there will be a merge conflict.

135
00:09:07.920 --> 00:09:10.200
This happens when we work with teams.

136
00:09:10.230 --> 00:09:13.230
Each developer working on their own branch,

137
00:09:13.500 --> 00:09:18.500
luckily get lets us resolve these conflicts by seeing the exact line of code in

138
00:09:19.051 --> 00:09:23.790
question.
We can resolve it locally to match,
then commit the resolution.

139
00:09:24.180 --> 00:09:26.730
This is why get resembles a tree.

140
00:09:26.790 --> 00:09:31.350
Different branches each with different commits can all represent nodes in a tree

141
00:09:31.590 --> 00:09:35.970
all leading up to the master node.
Now we can push our code to get hub,

142
00:09:36.090 --> 00:09:40.290
but first let's create an empty repository on our new get hub account.

143
00:09:40.620 --> 00:09:43.650
We'll copy the link it gives us and add a new remote.

144
00:09:43.920 --> 00:09:48.330
Then we can push to that remote via the push command and if we go to that

145
00:09:48.331 --> 00:09:51.990
repository on Github,
we can see our code there.
How dope is that?

146
00:09:52.440 --> 00:09:57.120
Get hub is a social network and you can follow other developers to keep up to

147
00:09:57.121 --> 00:10:01.230
date with their latest code.
The more developers that follow you,

148
00:10:01.231 --> 00:10:05.460
the more likely developers will contribute to your open source project.

149
00:10:05.940 --> 00:10:06.630
Currently,

150
00:10:06.630 --> 00:10:11.630
Linus Torvalds is the most followed developer out of 28 million on get up and

151
00:10:12.510 --> 00:10:15.810
right now I'm number 15 so watch out Linus.

152
00:10:15.960 --> 00:10:20.790
I found a lot of success promoting my get hub profile by using my social media

153
00:10:20.791 --> 00:10:25.791
accounts as a distribution channel to get up and good documentation goes a long

154
00:10:26.671 --> 00:10:29.370
way to getting developers to follow your code.

155
00:10:29.790 --> 00:10:33.780
Promoting code directly leaves a very niche audience to view,

156
00:10:34.410 --> 00:10:38.790
but if you wrap,
it would say a video or blog post or podcast,

157
00:10:39.060 --> 00:10:41.820
some kind of explainer content in general,

158
00:10:42.060 --> 00:10:46.080
then you'll be more likely to get people to actually view the code,

159
00:10:46.230 --> 00:10:51.230
get and get hub are both a lot of fun and I've listed some great learning

160
00:10:51.421 --> 00:10:55.020
resources for you in the video description,
so definitely check them out.

161
00:10:55.210 --> 00:10:55.980
Ready to come.

162
00:10:55.980 --> 00:11:00.270
<v 1>More pushes,
subscribe button,
and my art will merge with yours.
For now.</v>

163
00:11:00.360 --> 00:11:03.120
I've got to resolve a conflict,
so thanks for watching.

