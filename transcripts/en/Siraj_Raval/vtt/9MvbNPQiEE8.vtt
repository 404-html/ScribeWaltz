WEBVTT

1
00:00:00.060 --> 00:00:01.260
Go check out my friend Ryan.

2
00:00:01.261 --> 00:00:05.360
Shirley's youtube channel has some cool magic videos.
Hello world,
it's Saroj.

3
00:00:05.520 --> 00:00:09.120
In this video we're going to talk about perhaps the biggest unsolved mystery in

4
00:00:09.121 --> 00:00:13.050
all of computer science.
What are those?
Couldn't resist.

5
00:00:13.140 --> 00:00:17.700
Does p equals NP,
PA and NP both represent a class of decision problems?

6
00:00:17.820 --> 00:00:21.510
Do these two line segments have an intersection or can we beat the game of Pong

7
00:00:21.511 --> 00:00:23.760
and under three minutes or given a Rubik's cube?

8
00:00:23.761 --> 00:00:27.600
Can we always solve it in 20 moves or less?
So let's start to define our terms.

9
00:00:27.720 --> 00:00:30.060
We'll start with the first class of decision problems labeled.

10
00:00:30.090 --> 00:00:34.770
P P stands for polynomial,
which comes from the Greek phrase meaning many terms.

11
00:00:34.950 --> 00:00:39.270
A polynomial is a math expression that consists of is some of many terms like

12
00:00:39.330 --> 00:00:42.030
two x plus three or x cubed plus four x.

13
00:00:42.120 --> 00:00:45.900
And we can create strategies to solve any polynomial reasonably fast.

14
00:00:46.170 --> 00:00:50.610
So p is the class of decision problems that we can solve in polynomial time,

15
00:00:50.790 --> 00:00:54.660
which means reasonably fast.
An example of a p problem would be sorting,

16
00:00:54.810 --> 00:00:57.990
like can we sort of set of numbers and increasing order?
Yes,

17
00:00:57.991 --> 00:01:00.180
and there are several known strategies to do this.

18
00:01:00.420 --> 00:01:04.410
Another set of examples are any of the basic math operations like addition or

19
00:01:04.411 --> 00:01:05.244
subtraction.

20
00:01:05.310 --> 00:01:09.630
We can solve these problems reasonably fast or searching given a set of numbers

21
00:01:09.631 --> 00:01:11.190
does it number five exist in it.

22
00:01:11.340 --> 00:01:14.370
We can solve that pretty easily by checking each number in the set,

23
00:01:14.400 --> 00:01:16.950
so that's the set of decision problems that we call p,

24
00:01:17.100 --> 00:01:20.160
but there's another group of decision problems that we call NP.

25
00:01:20.430 --> 00:01:22.980
NP stands for non deterministic polynomial,

26
00:01:23.130 --> 00:01:26.880
which Hazmat terminology for problems that we can check the solution too easily

27
00:01:27.000 --> 00:01:28.920
but not solve easily on NP.

28
00:01:28.921 --> 00:01:32.670
Problem example would be can a traveling salesman drive across a given set of

29
00:01:32.671 --> 00:01:36.300
cities and return back to his home city without running out of gas?

30
00:01:36.450 --> 00:01:38.580
If someone proposes a possible solution,

31
00:01:38.730 --> 00:01:42.060
we could verify it instantly by calculating the amount of gas that will let him

32
00:01:42.061 --> 00:01:45.990
travel the given path in miles.
But to find the absolute best solution,

33
00:01:46.140 --> 00:01:49.890
we would have to try every single combination of routes to find the shortest
one,

34
00:01:49.980 --> 00:01:51.780
which would take forever to calculate.

35
00:01:51.960 --> 00:01:53.730
Let's look at what this looks like in code.

36
00:01:53.850 --> 00:01:56.460
Let's start by defining an empty list of routes.

37
00:01:56.580 --> 00:02:00.480
Then we'll define a list of paths between cities as a dictionary of dictionaries

38
00:02:00.690 --> 00:02:03.240
for each key,
which is defined by a city initial.

39
00:02:03.300 --> 00:02:07.440
We'll have a set of key value pairs which defined the distances between one city

40
00:02:07.441 --> 00:02:10.710
and another as an integer.
Now that we have our two variables defined,

41
00:02:10.740 --> 00:02:12.990
let's write our function to find the shortest path.

42
00:02:13.200 --> 00:02:17.340
This is what our function will look like when we call it our starting city is
RV.

43
00:02:17.440 --> 00:02:21.150
No,
it stands for river city.
Okay,
so let's add that to our empty list.

44
00:02:21.390 --> 00:02:25.350
Now we can calculate the path length from the current city to the last city.

45
00:02:25.470 --> 00:02:27.600
By looking up the distance in our dictionary,

46
00:02:27.630 --> 00:02:31.890
we'll check if our path contains all the cities and isn't a dead end with our if

47
00:02:31.891 --> 00:02:33.390
statement,
and if that's the case,

48
00:02:33.510 --> 00:02:36.330
we'll add the total distance and path to our routes list.

49
00:02:36.390 --> 00:02:40.380
We've done this for one possible path.
Now let's do it for all possible paths.

50
00:02:40.470 --> 00:02:41.400
Using this for loop,

51
00:02:41.460 --> 00:02:45.720
we'll call this function inside of itself to find paths for all possible cities.

52
00:02:45.780 --> 00:02:46.680
Not yet used.

53
00:02:46.710 --> 00:02:50.550
This technique of calling a function inside of itself is called recursion.

54
00:02:50.820 --> 00:02:55.050
It'll show us the shortest route in terminal when it's done in no time since the

55
00:02:55.051 --> 00:02:57.900
list of cities with small,
but for larger numbers of cities,

56
00:02:58.020 --> 00:03:00.120
this would take way too long to calculate it.

57
00:03:00.190 --> 00:03:04.450
So instead of trying to find the absolute best solution routing apps like Google

58
00:03:04.451 --> 00:03:07.870
maps instead estimate the best path using different techniques,

59
00:03:07.871 --> 00:03:11.920
which is way faster.
Another example of an NP problem is scheduling.

60
00:03:11.980 --> 00:03:15.340
Let's say we have a set of courses at a school and we want to schedule a final

61
00:03:15.341 --> 00:03:19.240
exams during finals week so that no student has to take two different exams on

62
00:03:19.241 --> 00:03:20.074
the same day.

63
00:03:20.260 --> 00:03:23.710
Calculating all the possible schedules for say a thousand students would be a

64
00:03:23.711 --> 00:03:25.990
huge number that would take years to solve,

65
00:03:26.200 --> 00:03:27.970
but if we were given a possible schedule,

66
00:03:28.120 --> 00:03:31.840
we could check it easily by seeing if it gave any student more than one exam on

67
00:03:31.841 --> 00:03:35.590
a given day or what.
If we wanted to find all the prime factors of a number,

68
00:03:35.740 --> 00:03:38.890
we could verify a solution easily if it was handed to us,

69
00:03:38.980 --> 00:03:42.820
but there isn't a way to solve it in a reasonable amount of time for huge
number.

70
00:03:43.210 --> 00:03:46.510
Any problem that can be solved easily.
It can also be checked easily.

71
00:03:46.720 --> 00:03:49.000
All p problems are always NP,

72
00:03:49.270 --> 00:03:52.690
but can any problem that can be checked easily like scheduling or prime

73
00:03:52.691 --> 00:03:55.150
factorization also be solved easily.

74
00:03:55.300 --> 00:03:59.800
Meaning are all NP problems always pee?
That is the question.

75
00:03:59.920 --> 00:04:03.760
Does p equal NP and the answer is we don't know.

76
00:04:04.000 --> 00:04:08.020
There's also a set of problems called NP hard that are really hard to solve at

77
00:04:08.021 --> 00:04:10.060
least as hard as the hardest NP problems.

78
00:04:10.300 --> 00:04:12.250
I mean some of them can be verified easily,

79
00:04:12.370 --> 00:04:14.560
but others can't even be verified easily.

80
00:04:14.710 --> 00:04:18.340
They can't be solved or verified easily.
An example would be the halting problem,

81
00:04:18.341 --> 00:04:20.950
which says,
given some computer program and an input,

82
00:04:21.160 --> 00:04:24.700
will that program finished running at some point or will it just continue

83
00:04:24.701 --> 00:04:28.510
running forever?
We can't solve that or verify solution to that easily.

84
00:04:28.690 --> 00:04:32.140
The only known way to check a possible solution like it'll just continue running

85
00:04:32.141 --> 00:04:34.000
forever is to wait forever.

86
00:04:34.180 --> 00:04:39.130
That intersection though of problems that are both NP hard and NP are called NP

87
00:04:39.131 --> 00:04:39.850
complete.

88
00:04:39.850 --> 00:04:42.890
These are problems we can't solve easily but can check even though they're

89
00:04:42.910 --> 00:04:44.110
pretty difficult to check.

90
00:04:44.380 --> 00:04:48.400
An example of an NP complete problem is finding the longest common subset

91
00:04:48.401 --> 00:04:51.340
between two sets,
so given two different sets of numbers.

92
00:04:51.520 --> 00:04:54.910
What is the longest common subset of numbers?
Can't solve it easily,

93
00:04:54.911 --> 00:04:58.600
but we can't check the solution with some effort and p complete problems are the

94
00:04:58.601 --> 00:05:00.190
hardest NP problems to check.

95
00:05:00.340 --> 00:05:03.580
If we were to find a strategy to solve any MP complete problem in reasonable

96
00:05:03.581 --> 00:05:04.180
time,

97
00:05:04.180 --> 00:05:07.930
then we could use that same strategy to solve any NP problem in reasonable time.

98
00:05:08.170 --> 00:05:10.420
It would prove that p equals NP,

99
00:05:10.540 --> 00:05:14.080
that means there would be a single strategy that could solve any problem.

100
00:05:14.140 --> 00:05:16.060
One Algorithm to rule them all.

101
00:05:16.120 --> 00:05:19.420
Proving p equals NP is the million dollar question.
Seriously,

102
00:05:19.421 --> 00:05:22.120
the clay institute is offering a million bucks.
Whoever can solve it.

103
00:05:22.420 --> 00:05:26.140
If p equals NP were true,
it would have profound effects on society.

104
00:05:26.350 --> 00:05:29.920
It would mean online security systems would all be vulnerable to attack because

105
00:05:29.921 --> 00:05:32.950
our current inability to efficiently factor huge numbers,

106
00:05:33.010 --> 00:05:36.160
an NP problem forms the basis of modern cryptography,

107
00:05:36.280 --> 00:05:39.490
which everything from national security to banking depends on.

108
00:05:39.670 --> 00:05:41.950
It would also mean that we could make everything more efficient.

109
00:05:42.130 --> 00:05:45.460
Transportation Schedules,
production cycles for manufacturers,

110
00:05:45.730 --> 00:05:48.850
protein folding simulations,
which would effectively solve cancer.

111
00:05:49.090 --> 00:05:51.880
All of it would be optimized to be faster and cheaper.

112
00:05:52.060 --> 00:05:54.070
It would mean Harami and would come back to life.

113
00:05:57.230 --> 00:05:59.930
Oh,
it doesn't hush.
On the flip side,

114
00:05:59.931 --> 00:06:02.570
if someone were to prove that p doesn't equal NP,

115
00:06:02.720 --> 00:06:06.410
it would be proof that there are some problems that no amount of data expertise

116
00:06:06.440 --> 00:06:09.280
or intuition could solve.
But unlike the other sciences,

117
00:06:09.290 --> 00:06:12.020
computer science is only 60 years old and because of that,

118
00:06:12.021 --> 00:06:14.870
I believe there is still a possibility that p equals NP.

119
00:06:15.050 --> 00:06:18.110
We just haven't found the right algorithm.
Anything is possible.

120
00:06:18.140 --> 00:06:21.260
So to break it down,
but p equals NP problem asks if,

121
00:06:21.261 --> 00:06:23.390
because we can easily check an answer to a problem,

122
00:06:23.540 --> 00:06:27.350
does that also mean we could solve it easily approximating an answer to NP

123
00:06:27.351 --> 00:06:27.771
problems?

124
00:06:27.771 --> 00:06:31.910
Let's avoid the huge computing requirements to find the optimal solution like in

125
00:06:31.911 --> 00:06:35.450
the traveling salesman problem and if someone were to solve p equals NP,

126
00:06:35.630 --> 00:06:38.870
it would mean we could solve any problem in a reasonable amount of time,

127
00:06:39.050 --> 00:06:39.883
which would be awesome.

128
00:06:40.100 --> 00:06:43.430
The winner of the genetic algorithm coding challenge from the last video is

129
00:06:43.431 --> 00:06:44.240
Nicole Rigby.

130
00:06:44.240 --> 00:06:48.020
She asked what the average global temperature would be in five years using the

131
00:06:48.021 --> 00:06:48.950
given climate data.

132
00:06:49.100 --> 00:06:52.940
She found an optimal solution estimate using genetic programming and documented

133
00:06:52.941 --> 00:06:57.410
her process in the read me with really cool visualizations that ass of the week

134
00:06:57.680 --> 00:06:59.240
and the runner up is nick van holes.

135
00:06:59.360 --> 00:07:02.570
He thought of a bunch of interesting questions to ask about the data and

136
00:07:02.571 --> 00:07:03.830
documented them in to read me.

137
00:07:04.070 --> 00:07:07.760
The coding challenge for this video is to prove that p equals NP.
No,

138
00:07:07.761 --> 00:07:08.300
I'm just kidding.

139
00:07:08.300 --> 00:07:11.750
The challenge is to write a script that estimates a solution to the traveling

140
00:07:11.751 --> 00:07:12.590
salesman problem.

141
00:07:12.770 --> 00:07:16.610
Instead of trying every possible path details are in the read me posts or get

142
00:07:16.611 --> 00:07:20.120
help link in the comments and I'll announce the winner and my video a week from

143
00:07:20.120 --> 00:07:22.250
now.
Please subscribe and share this video.
And for now,

144
00:07:22.280 --> 00:07:24.770
I've got to find the limits of computation in our universe.

145
00:07:24.890 --> 00:07:26.330
So thanks for watching.

