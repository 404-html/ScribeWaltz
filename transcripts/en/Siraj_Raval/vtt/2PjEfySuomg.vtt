WEBVTT

1
00:00:00.150 --> 00:00:01.710
Hello world,
it's the Raj.

2
00:00:01.740 --> 00:00:06.420
And today I want to talk about a decentralized application called Ascensia.

3
00:00:06.750 --> 00:00:08.220
So what ascension is,

4
00:00:08.221 --> 00:00:12.210
is essentially a gateway to the decentralized web.

5
00:00:12.240 --> 00:00:15.480
So if you are familiar with the decentralized web,

6
00:00:15.690 --> 00:00:18.750
then you know that there are a bunch and what even if you're not familiar,

7
00:00:18.780 --> 00:00:23.780
there are a bunch of different apps that run on these protocols that are not a

8
00:00:23.941 --> 00:00:27.600
part of the traditional web that we're used to,
right.
So you know,
Google,
apple,

9
00:00:27.601 --> 00:00:29.730
Facebook,
these are centralized apps,

10
00:00:29.880 --> 00:00:32.940
but there's a whole host of other types of apps,

11
00:00:32.970 --> 00:00:37.320
decentralized apps out there that normal people are not eight normal people,

12
00:00:37.321 --> 00:00:41.400
normal users of the Internet that are using a standard web browser like chrome

13
00:00:41.401 --> 00:00:42.234
or safari,

14
00:00:42.480 --> 00:00:47.040
they don't have access to them because in order to reach these decentralized

15
00:00:47.041 --> 00:00:47.640
apps,

16
00:00:47.640 --> 00:00:51.990
you need to a either download a chrome extension like Meta mask for example,

17
00:00:51.991 --> 00:00:54.840
for Atherium based apps or you to download,
you know,

18
00:00:54.841 --> 00:00:58.800
a separate browser like brave or you know,
whatever,
um,
missed.

19
00:00:59.190 --> 00:01:03.450
And this is just not the way to move forward with this field.

20
00:01:03.451 --> 00:01:08.400
We need something that's going to act as a gateway between the centralized web

21
00:01:08.610 --> 00:01:13.320
and the decentralized web.
And what Ascensia is,
is that it is that gateway.

22
00:01:13.750 --> 00:01:18.030
It's this interoperability layer between the centralized web and decentralized

23
00:01:18.150 --> 00:01:19.380
web.
So,
um,

24
00:01:19.470 --> 00:01:22.590
we're going to learn about essential in this video and also we're going to learn

25
00:01:22.591 --> 00:01:26.930
about a cross protocol bridging blockchains seeds.
A bunch of,
you know,

26
00:01:27.060 --> 00:01:29.880
different things about the blockchain just by learning about essential

27
00:01:30.210 --> 00:01:34.560
multisignature transfers,
encryption and cross chain atomic swaps.

28
00:01:34.830 --> 00:01:37.500
All of it to Mike is,
is very technical jargon.

29
00:01:37.501 --> 00:01:40.740
But in this video we're going to cover those,
those things as well.
Okay?

30
00:01:40.741 --> 00:01:43.950
So I want to start off with a demo of this service so you can access

31
00:01:43.951 --> 00:01:48.570
it@asencia.one definitely check out the link link is going to be in the video

32
00:01:48.571 --> 00:01:51.930
description.
But what you can do is you can try it out immediately.

33
00:01:51.990 --> 00:01:54.060
So you can put,
we can click on this tribe button.

34
00:01:54.420 --> 00:01:59.040
Essentially 1.0 15,000 users are already using this.
Great.
Um,

35
00:01:59.070 --> 00:02:02.670
so now I'm going to create a password,
password,
whatever I wanted it to be.

36
00:02:03.060 --> 00:02:04.920
And once I created a password,

37
00:02:06.270 --> 00:02:10.890
what is going to do is it's going to create my own profile in a decentralized

38
00:02:10.891 --> 00:02:13.140
way such that I own my data.

39
00:02:13.380 --> 00:02:16.200
And then if any service then wants to use my data,

40
00:02:16.201 --> 00:02:20.520
they have to ask me for that data.
Okay.
So it's a,
it's a user owned,
uh,

41
00:02:20.580 --> 00:02:22.650
the user owns their data in this gateway.

42
00:02:23.010 --> 00:02:26.160
And so the reason I call it a gateway is because there are so many different

43
00:02:26.161 --> 00:02:30.540
types of decentralized apps out there,
right?
There's steam it to,
there's Khyber,

44
00:02:30.541 --> 00:02:32.310
there's Crypto Kitty's,
there's,
you know,

45
00:02:32.311 --> 00:02:36.600
whatever augur tube and there should be a way to access all of them.

46
00:02:36.600 --> 00:02:41.600
Now some of them have this kind of bridge between http and whatever else they're

47
00:02:41.730 --> 00:02:46.680
storing their data on,
you know,
IPFS,
Sia,
what have you.
But some of them don't.

48
00:02:46.710 --> 00:02:50.400
And so this is a way to kind of combine all of them into one,

49
00:02:50.940 --> 00:02:54.480
one kind of,
yeah.
Gateway or view that you can see them all.

50
00:02:55.500 --> 00:03:00.430
So the first part of ascentia is,
it is,
it is a wallet for all whites.

51
00:03:00.431 --> 00:03:03.370
So you can have your theory molen in here.
You can have your bitcoin wallet,

52
00:03:03.371 --> 00:03:04.750
you can have whatever type of wallet,

53
00:03:04.990 --> 00:03:07.480
you can have it here and they're adding more over time,

54
00:03:07.481 --> 00:03:08.590
which I think is very cool.

55
00:03:08.591 --> 00:03:11.770
Like I want to use a service that can combine all these wallets together.

56
00:03:12.310 --> 00:03:15.340
So that's the first part.
The second part is storage,
right?

57
00:03:15.341 --> 00:03:19.180
So this is a decentralized storage platform.
We can use IPFS,

58
00:03:19.420 --> 00:03:21.450
we can use swarm,
we can use storage.

59
00:03:21.480 --> 00:03:24.190
And then once we have some file we can upload it.

60
00:03:24.460 --> 00:03:26.920
And so it's going to then store that file.

61
00:03:26.980 --> 00:03:30.670
And I'll talk about the use cases of this in a second,
but that's one part of it.

62
00:03:30.671 --> 00:03:35.670
The other part is for us to be able to log in to any of these blockchains,

63
00:03:35.830 --> 00:03:39.920
you know,
the theory and blockchain,
what have you.
And now,
good.

64
00:03:40.030 --> 00:03:43.180
I successfully logged in with my address,
continue.
Great.

65
00:03:46.570 --> 00:03:49.990
And there's also an exchange,
right?
So,
um,
this is,

66
00:03:49.991 --> 00:03:54.160
we're going to talk later about cross atomic swaps,
but this is an exchange.

67
00:03:54.161 --> 00:03:58.690
We can exchange any kind of coin with any other coin.
And lastly,
it's,
it's,

68
00:03:58.691 --> 00:04:02.530
it's uh,
it's adapt store and not an APP store.
But adapt store.

69
00:04:02.531 --> 00:04:06.640
So we can find other decentralized apps in this platform.
We can see,
you know,

70
00:04:06.641 --> 00:04:09.220
Aragon status.
I can add status.
Okay.

71
00:04:09.221 --> 00:04:13.930
So now I've added status and now,
now that I've added status,
it's here in my,

72
00:04:13.931 --> 00:04:18.040
in my dashboard.
So now I can use status,
I can send messages to people.
Status,

73
00:04:18.041 --> 00:04:20.620
by the way,
is a decentralized messaging platform.
It's,

74
00:04:20.760 --> 00:04:25.510
and now I have access to that.
Okay.
So very,
very cool stuff.

75
00:04:25.680 --> 00:04:29.800
Um,
and right,
so my point is,
is that a decentralized web,

76
00:04:29.801 --> 00:04:33.280
he's fragmented and there are so many different protocols out there.

77
00:04:33.280 --> 00:04:38.080
And just because there are so many different protocols that all,
you know,
say,

78
00:04:38.100 --> 00:04:41.080
say different things,
it doesn't mean that one is any better than the other.

79
00:04:41.380 --> 00:04:43.780
There should be a way to combine all of them together,
right?

80
00:04:43.781 --> 00:04:46.900
We're talking about not just us as developers or you know,

81
00:04:46.901 --> 00:04:50.350
enthusiasts in this technology using this we're talking about are,
you know,

82
00:04:50.450 --> 00:04:53.050
grandmas and our grandpas and just everybody,

83
00:04:53.051 --> 00:04:55.090
people who are not as familiar with technology,

84
00:04:55.270 --> 00:04:57.070
being able to access these services.
And,

85
00:04:57.160 --> 00:05:02.080
and this really does that in a great way.
And so one thing I found very,

86
00:05:02.380 --> 00:05:05.230
you know,
very cool about this was that when we log in,

87
00:05:05.260 --> 00:05:07.990
what it does is it creates a unique seed for us,
right?

88
00:05:07.991 --> 00:05:11.830
So it's a unique seed that acts as our identity.
Now this is an identity.

89
00:05:11.910 --> 00:05:12.820
And so first of all,

90
00:05:12.910 --> 00:05:17.910
many companies and people have tried to create one identity that accesses all

91
00:05:18.941 --> 00:05:21.160
the different services,
right?
All the way back to the nineties.

92
00:05:21.161 --> 00:05:23.050
Microsoft tried this with their,

93
00:05:23.130 --> 00:05:27.220
I think it was called one service or one something.
Anyway,
it didn't work out.

94
00:05:27.280 --> 00:05:30.760
But now that we have the blockchain and we have these new methods of distributed

95
00:05:30.761 --> 00:05:34.630
consensus,
that vision,
that dream is now possible.

96
00:05:34.631 --> 00:05:39.550
So there's one,
um,
one log in that you can use for all of these services.

97
00:05:39.551 --> 00:05:44.380
And so that's,
that's a great feature of essential,
right?
So,
and

98
00:05:45.570 --> 00:05:46.100
<v 1>yeah,</v>

99
00:05:46.100 --> 00:05:50.270
<v 0>what would it also lets us do is it also lets us bridge protocols together.</v>

100
00:05:50.271 --> 00:05:50.990
For example,

101
00:05:50.990 --> 00:05:55.990
http and say IPFS we are accessing this Ascensia app using http and we are then

102
00:05:58.280 --> 00:06:02.600
able to upload our data to say IPFS,
which is its own protocol,
right?

103
00:06:02.601 --> 00:06:06.890
It's IPFS,
colon slash slash,
whatever it is,
the content address,

104
00:06:06.891 --> 00:06:09.500
not the http address or the Ip address.

105
00:06:10.700 --> 00:06:12.620
So this is very cool.
And I want to,

106
00:06:12.800 --> 00:06:14.720
I want to show you for a second how this works,

107
00:06:14.721 --> 00:06:18.440
how this kind of cross bridging works.
So essentially uses this,
but if we look,

108
00:06:18.500 --> 00:06:18.741
you know,

109
00:06:18.741 --> 00:06:23.741
deep down the stack into how this works inside of IPFS is go a repository.

110
00:06:25.160 --> 00:06:28.750
We can see this.
Um,
we can see this file called gateway dot.
Go.

111
00:06:28.751 --> 00:06:31.610
So if you haven't done,
go before,
don't worry about it.

112
00:06:31.611 --> 00:06:35.960
And Go is a very beautiful,
elegant,
simple language which will learn,
um,

113
00:06:36.140 --> 00:06:39.050
which we'll see why,
you know,
as the video progresses,
but

114
00:06:40.610 --> 00:06:44.780
essentially think about it.
So you can be an IPFS node.
Anybody can be an IPFS,
no,

115
00:06:44.781 --> 00:06:48.950
they can store data on their computer.
And so there has to be some bridge to be,

116
00:06:49.040 --> 00:06:53.030
to,
to be able to access that IPFS data from the http web.

117
00:06:53.031 --> 00:06:56.160
And so this is one way to do that with this gateway.
And so the,

118
00:06:56.170 --> 00:07:00.500
what the gateway is,
is it says,
let's see,

119
00:07:00.950 --> 00:07:04.160
we can see inside of this function that any node can be a gateway.

120
00:07:04.161 --> 00:07:05.870
They have that option to be a gateway.

121
00:07:06.230 --> 00:07:10.940
So in the handler we can see that we have these Heteros for http that are being

122
00:07:10.941 --> 00:07:12.980
sent from this IPFS node.

123
00:07:13.220 --> 00:07:16.940
So it's essentially an IPFS node can double as an http node.

124
00:07:16.941 --> 00:07:20.720
So they have their own HTP server and they act as the bridge.

125
00:07:20.721 --> 00:07:24.770
So whenever you're accessing this HTP server slash IPFS node,

126
00:07:25.040 --> 00:07:29.090
you are then able to access everything that that IPFS can note is connected to,

127
00:07:29.210 --> 00:07:30.860
which is every other IPFS node.
Now,

128
00:07:30.861 --> 00:07:35.840
so does this take away from some of the benefits of decentralization?
Yes.

129
00:07:36.050 --> 00:07:39.830
But does it take away all of the benefits?
No.
Can,
what I mean is,

130
00:07:40.040 --> 00:07:43.130
can you censor that HTP node?
Yes.

131
00:07:43.340 --> 00:07:47.360
But the data will still live right,
so that HDP website can be censored,

132
00:07:47.361 --> 00:07:52.180
but the data will still live,
which is,
um,
which is a great thing.
Anyway,

133
00:07:52.190 --> 00:07:56.210
just wanted to talk a bit about why bridging is important in how Ascensia does

134
00:07:56.211 --> 00:08:00.980
that,
you know,
by,
by implementing this.
Okay.
So I'm one.
So it's got its,

135
00:08:01.100 --> 00:08:04.190
it's got some great features,
right?
So it's,
it,
it,
it does a lot.

136
00:08:04.220 --> 00:08:07.220
It's not just like a,
you know,
one wallet for everything.
It's,

137
00:08:07.340 --> 00:08:09.380
it's a wallet for different cryptocurrencies.

138
00:08:09.530 --> 00:08:11.150
There's voting's there's a voting system.

139
00:08:11.360 --> 00:08:14.960
You don't have to use a password for all of the,
all of these decentralized apps.

140
00:08:15.360 --> 00:08:17.100
It's multi-device.
So because it,

141
00:08:17.240 --> 00:08:19.850
because it runs in the browser and you don't need a chrome extension.

142
00:08:19.851 --> 00:08:22.580
You can run it on a phone,
you can run it on a desktop app,

143
00:08:22.581 --> 00:08:26.510
you can run it in your browser.
A lot of different options here.
And,

144
00:08:27.020 --> 00:08:31.460
uh,
one thing I think is very cool is that because it's got this decentralized

145
00:08:31.461 --> 00:08:33.050
storage option,

146
00:08:33.260 --> 00:08:38.260
you can upload your KYC information to it and then participate in multiple ICO

147
00:08:39.111 --> 00:08:42.260
shows with just a few clicks.
So if you are a crypto investor,

148
00:08:42.590 --> 00:08:45.740
then you can invest in all of them with just a few clicks.

149
00:08:45.741 --> 00:08:48.440
It's a very simple way to do that.
And so,
um,

150
00:08:50.150 --> 00:08:52.850
also because these different blockchains are integrated,

151
00:08:53.000 --> 00:08:56.160
you can program scripts in a single language,
which is very useful.

152
00:08:56.460 --> 00:08:59.250
And you can orchestrate operations between services.

153
00:08:59.280 --> 00:09:01.830
So they're working on an API and that's coming out soon,

154
00:09:01.831 --> 00:09:04.560
but that's going to let you,
you know,
work with these different blockchains.

155
00:09:05.550 --> 00:09:06.383
<v 1>Okay.</v>

156
00:09:06.480 --> 00:09:08.960
<v 0>So if you think about it,
like,
okay,
so it's got a lot of features.</v>

157
00:09:08.961 --> 00:09:13.560
So where does it fit into this space?
Right?
We have different options for,

158
00:09:13.590 --> 00:09:15.930
you know,
different things like,
you know,
a social network,

159
00:09:15.931 --> 00:09:18.540
decentralize a steam it for messaging.
It's not whatsapp,

160
00:09:18.541 --> 00:09:23.250
it's status for remote jobs on upwork.
It's Eith Lance,
uh,
for storage.

161
00:09:23.251 --> 00:09:26.490
It's not Google drive,
it's IPFS.
Um,
where does this fit in?

162
00:09:26.491 --> 00:09:30.090
What it's kind of at the operating system layer,
right?
If you think about it,

163
00:09:30.110 --> 00:09:32.700
it's,
it's a gateway.
It stores your identity and your data.

164
00:09:32.880 --> 00:09:35.920
That's something you want to keep really close to you.
Right?
So what,
what,

165
00:09:35.921 --> 00:09:39.630
what do you keep closer to you?
What's,
what's that?
The lowest level of the stack,

166
00:09:39.930 --> 00:09:43.560
right?
It's your operating system.
And so this acts as a,

167
00:09:43.561 --> 00:09:45.150
as an operating system layer.

168
00:09:47.530 --> 00:09:51.430
And um,
right.
So all of these different cryptocurrencies they use,

169
00:09:51.910 --> 00:09:52.870
they use a seed.

170
00:09:52.900 --> 00:09:57.900
They use a seed to verify that you are the unique owner up some wallets,

171
00:09:57.911 --> 00:09:58.121
right?

172
00:09:58.121 --> 00:10:01.960
So what essentially does is it creates a seed and that seed acts as your id for

173
00:10:01.961 --> 00:10:05.500
all of your wallets.
And um,
it doesn't in a very interesting way.

174
00:10:05.501 --> 00:10:07.930
So what I want to do is I wanted to

175
00:10:10.800 --> 00:10:15.270
talk about seeds.
So we're going to coat a seed in a second.
Okay.

176
00:10:15.930 --> 00:10:19.900
We are going to code a seed and we're going to do this in javascript.

177
00:10:19.950 --> 00:10:23.280
I still got this evolution simulator up.
I've got to remove that.

178
00:10:25.570 --> 00:10:27.850
<v 1>Okay?
Okay.</v>

179
00:10:29.280 --> 00:10:32.490
<v 0>So we're going to code this in,
in solidity.
To give you an example of,
you know,</v>

180
00:10:32.580 --> 00:10:35.000
how seating works in,
in the,

181
00:10:35.030 --> 00:10:39.690
in the context of ascentia and just in general because it's a great learning

182
00:10:39.990 --> 00:10:43.470
exercise.
So if we have a contract,
and this is in solidity by the way,

183
00:10:43.471 --> 00:10:45.390
but this is just like,
you can use any language for this.

184
00:10:45.391 --> 00:10:50.100
But so if we have a contract and we want to say generate a random number,
okay?

185
00:10:50.101 --> 00:10:52.290
So I see it is a random number.
Okay.

186
00:10:52.291 --> 00:10:57.090
And so one way we can do that is inside of a blockchain by looking at the blocks

187
00:10:57.091 --> 00:11:01.230
themselves and then model and then using those values to create a random number.

188
00:11:01.290 --> 00:11:02.250
So I'll show you how to do that.

189
00:11:02.640 --> 00:11:07.350
So we can create a function that is called random number,
Jen.
It's,
it's very,

190
00:11:07.380 --> 00:11:10.830
it's just one line.
It's a one liner function,
right?
So we have the header,

191
00:11:10.831 --> 00:11:14.130
which is random,
Jen,
and it's going to generate a random number,
uh,

192
00:11:14.280 --> 00:11:17.880
given some seats.
So I'm just going to say some value,
like two,
three,
four,

193
00:11:17.881 --> 00:11:20.520
some scalar value.
And what it's going to do is it's going to,

194
00:11:20.530 --> 00:11:24.480
to return a random number.
So I'll call this again,
this integer,

195
00:11:24.510 --> 00:11:27.450
a random number.
That's it.
Okay.
So how do we do this?

196
00:11:28.160 --> 00:11:28.993
<v 1>Okay,</v>

197
00:11:29.420 --> 00:11:32.450
<v 0>I'm going to get in one line.
I'm going to return.
Okay?</v>

198
00:11:32.451 --> 00:11:36.050
It's going to be an integer,
unsigned integer.
That's what that you means.

199
00:11:36.650 --> 00:11:38.900
And I'm going to use Sha three,
which is a,

200
00:11:39.020 --> 00:11:44.020
which is an encryption protocol to then encrypt the contents of this.

201
00:11:44.061 --> 00:11:47.910
And what is this?
This is a block.
This is not just a block in the blockchain,

202
00:11:47.930 --> 00:11:51.890
this is that blocks hash.
And if we're going to take that blocks number,

203
00:11:51.920 --> 00:11:53.590
we're going to subtract one it,

204
00:11:55.690 --> 00:12:00.690
combine that with the seed value that we had before run modular 100 which means

205
00:12:02.561 --> 00:12:06.400
that this is going to create a random number between zero and a hundred based on

206
00:12:06.401 --> 00:12:10.420
the last block Hash.
That's it.
Okay.
So we're going to do,
um,

207
00:12:10.600 --> 00:12:15.040
modular 100 and that's it.
This single line of code in solidity,

208
00:12:15.100 --> 00:12:20.080
we'll generate a random number based on the lax blocks hash between zero and

209
00:12:20.081 --> 00:12:23.470
100.
See how simple that was.
And this lives on the blockchain.

210
00:12:23.680 --> 00:12:27.600
It's using the randomness or the,
uh,
the d,

211
00:12:28.160 --> 00:12:33.160
The determinism of the blockchain to then create numbers.

212
00:12:33.910 --> 00:12:38.710
That's our non deterministic,
which you can do it in a single line of code.

213
00:12:38.711 --> 00:12:41.110
So I just wanted to show that for a second.
Uh,

214
00:12:41.470 --> 00:12:43.660
and there are different ways of generating unique numbers anyway,

215
00:12:44.410 --> 00:12:48.220
technical overview,
time of essential.
So there's a lot of modules here.

216
00:12:48.221 --> 00:12:49.360
If we look in the white paper,

217
00:12:49.361 --> 00:12:54.361
there are quite a lot of modules or 29 different modules in this white paper,

218
00:12:55.120 --> 00:12:57.940
which is very ambitious.
And if we look into it,

219
00:12:57.941 --> 00:13:02.941
you can see a list of all these boxes are the modules yet ESF as home s Corp

220
00:13:03.431 --> 00:13:06.100
Essbase as off as you know,
as config.

221
00:13:06.130 --> 00:13:10.060
And etherium is also very complex and a lot of blockchains are very complex.
So,

222
00:13:10.270 --> 00:13:14.680
and they've integrated with ethereum.
So,
so core is really interesting.

223
00:13:14.681 --> 00:13:19.600
So core is,
you know,
as you would think the core of the application,
um,

224
00:13:19.630 --> 00:13:24.370
it,
it allows the ID to destroy,
restore and backup,
you know,
itself.

225
00:13:24.680 --> 00:13:29.200
Um,
it also allows for the creation of multisignature capabilities.

226
00:13:29.201 --> 00:13:34.201
So multisignature transactions are very popular in the blockchain community and

227
00:13:34.511 --> 00:13:35.410
this allows for that.

228
00:13:35.411 --> 00:13:40.411
So the idea is that if I want to send you some money and I don't know you,

229
00:13:41.200 --> 00:13:45.850
I would need a third party to be that intermediary,
Amazon,
Ebay,
you know,

230
00:13:45.851 --> 00:13:49.540
upwork,
what have you.
But if we can automate that process,

231
00:13:49.600 --> 00:13:52.510
then that would make our lives easier and we can do this faster.

232
00:13:52.750 --> 00:13:57.040
So it multisignature transactions originated in the Bitcoin blockchain.

233
00:13:57.350 --> 00:14:01.660
The idea is that you have three people and it requires to have three signatures

234
00:14:01.840 --> 00:14:04.420
to then make that transaction happen,

235
00:14:06.750 --> 00:14:10.180
right?
So the third person would be a third party.
It could be a single person,

236
00:14:10.181 --> 00:14:12.910
it can be your friend,
it could be anybody.
It doesn't have to be a single,

237
00:14:12.930 --> 00:14:17.000
you know,
company.
It could be any person.
And so here's an example,
uh,

238
00:14:17.170 --> 00:14:20.260
in Java script using the Bitcoin library to show you an example of

239
00:14:20.290 --> 00:14:23.500
multisignature transactions,
which Ascensia uses.

240
00:14:23.530 --> 00:14:28.090
Essentially we see this list of private keys right here,
okay?

241
00:14:28.091 --> 00:14:32.230
These are my,
these are some private keys and we're going to take three of them.

242
00:14:32.260 --> 00:14:32.461
So right,

243
00:14:32.461 --> 00:14:36.610
it's for taking three of those keys and we're creating a script using those.

244
00:14:36.611 --> 00:14:39.760
Or in this script,
we're going to perform multisig,

245
00:14:41.410 --> 00:14:41.681
right?

246
00:14:41.681 --> 00:14:46.681
So now we're going to add an input and an output and sign,

247
00:14:46.930 --> 00:14:49.000
uh,
one of those transactions.
Okay?

248
00:14:49.001 --> 00:14:53.870
So right here we're going to push that transaction to the network,
right?

249
00:14:53.871 --> 00:14:57.050
So we've created a single transaction.
We pushed it to the network.

250
00:14:57.200 --> 00:15:00.400
Now we're going to do the same thing for another transaction right here,
right?

251
00:15:00.410 --> 00:15:01.430
The same exact thing.

252
00:15:01.790 --> 00:15:05.030
And then we're going to do that for a third transaction just like that.

253
00:15:06.500 --> 00:15:07.260
And the,

254
00:15:07.260 --> 00:15:11.660
the unique part here is this bitcoin dot script stop multisig output.

255
00:15:11.810 --> 00:15:15.380
So because we pushed all three of those transactions to the Blockchain,

256
00:15:15.620 --> 00:15:19.520
we've also signify to the blockchain that,
hey,
this is a multisignature output.

257
00:15:19.790 --> 00:15:24.020
So we have three transactions multisignature output on the blockchain,

258
00:15:24.110 --> 00:15:28.380
and now are each two of those three,
uh,

259
00:15:28.470 --> 00:15:33.020
addresses has to then send a transaction to the blockchain saying that,
yes,

260
00:15:33.050 --> 00:15:37.580
I agree.
And because of that,
that,
you know,
multisig output function there,

261
00:15:37.760 --> 00:15:39.800
if two of those three send that transaction,

262
00:15:40.160 --> 00:15:44.240
the funds are unlocked and that's multisignature.
Okay.
So,

263
00:15:44.720 --> 00:15:49.250
um,
yeah.
Anyway,
so about ess base,
so there's a,

264
00:15:49.310 --> 00:15:53.150
there's a base module as well,
and it basically you can,

265
00:15:53.300 --> 00:15:55.250
it acts as Api to court.

266
00:15:55.250 --> 00:15:59.870
So it's this high level Api to what's essentially the core of the,
of the system.

267
00:16:00.530 --> 00:16:02.570
Also for authentication there,
there's this,

268
00:16:02.810 --> 00:16:07.700
there's this off module that lets you control a different parts of this very

269
00:16:07.701 --> 00:16:11.330
complex network of modules which,
which,
which you need.

270
00:16:12.710 --> 00:16:14.060
And then there's a bridge,
right?

271
00:16:14.061 --> 00:16:19.061
So there should be some way either off chain on chain and a hybrid approach to

272
00:16:19.791 --> 00:16:24.770
be able to transfer value between all of these different blockchains that are

273
00:16:24.771 --> 00:16:26.060
integrated into ascension.

274
00:16:26.870 --> 00:16:30.200
And so the way to do this is an atomic cross chain swaps.

275
00:16:30.230 --> 00:16:33.050
And I want to talk about that at the end.
And,

276
00:16:33.080 --> 00:16:35.970
but there's one more module ess pay,
which uh,

277
00:16:36.670 --> 00:16:40.560
it encrypts the,
it encrypts the wallets.
Um,

278
00:16:40.561 --> 00:16:44.900
it acts as a plug in to connect and manage other payment processors and it,

279
00:16:44.940 --> 00:16:47.930
it's basically like the store of value for all of your different

280
00:16:47.931 --> 00:16:51.290
cryptocurrencies.
So essentially has its own cryptocurrency as well.

281
00:16:51.291 --> 00:16:55.550
And there's going to be an ICO on June 25th,
which is surprisingly soon.

282
00:16:55.910 --> 00:16:58.730
And you can see a link to that in the description.

283
00:17:00.990 --> 00:17:02.770
And when it comes to encryption,

284
00:17:03.400 --> 00:17:06.520
there's a lot of different ways to encrypt a,

285
00:17:06.660 --> 00:17:09.940
a payment or in general anything.
And this was what,

286
00:17:09.970 --> 00:17:12.970
this is what I mean when I say go is a great language because you can,

287
00:17:13.000 --> 00:17:17.260
you can encrypt so many different ways using the built in libraries.

288
00:17:17.261 --> 00:17:21.790
I mean look in this single crypto library that go has,
we can use Sha two,
five,

289
00:17:21.791 --> 00:17:24.850
six random a,
he has cipher hacks,
you know,

290
00:17:24.851 --> 00:17:28.530
and a bunch of different encryption algorithms and a single line,
right?

291
00:17:28.540 --> 00:17:32.260
So encrypt just means run these functions on this data essentially.

292
00:17:32.261 --> 00:17:34.370
And that's why if there were any,
um,
um,

293
00:17:34.930 --> 00:17:38.380
IPFS and a bunch of other blockchain protocols that essentially has integrated,

294
00:17:38.530 --> 00:17:43.140
has used go,
right.

295
00:17:43.141 --> 00:17:46.560
So the last thing I want to talk about our atomic cross chain swaps,

296
00:17:46.561 --> 00:17:48.720
which are essential to this.

297
00:17:49.620 --> 00:17:53.610
And in general it's a very important topic.
So the idea is that if I,

298
00:17:53.640 --> 00:17:57.720
if I have some etherium and you have some bitcoin and I want to transfer some

299
00:17:57.721 --> 00:18:00.990
ethereum to you and you want to transfer some bitcoin to meet,
how do we do that?

300
00:18:01.230 --> 00:18:04.350
So the way that traditional,
I guess you would say traditional,

301
00:18:04.351 --> 00:18:08.010
it's only been five years or whatever way to do this in cryptocurrency,

302
00:18:08.040 --> 00:18:11.040
is to have an exchange,
right?
So Coinbase or you know what APP,

303
00:18:11.120 --> 00:18:15.180
whatever cracking and they act as a third party.
So we got rid of banks,

304
00:18:15.181 --> 00:18:16.830
but we still have this third party.

305
00:18:16.831 --> 00:18:21.831
So the way to get over that is to implement what's called an atomic cross chain

306
00:18:23.431 --> 00:18:27.750
swaps.
And so this is a protocol of saying I'm person a,

307
00:18:27.751 --> 00:18:30.660
you're person B,
I want to transfer value to you.

308
00:18:30.660 --> 00:18:31.890
You want to transfer value to me.

309
00:18:31.920 --> 00:18:36.780
How do we do that with in an automated way so that what happens is person a me,

310
00:18:36.810 --> 00:18:41.160
my funds are sent to this escrow in the blockchain person,

311
00:18:41.161 --> 00:18:44.250
B's funds are sent to the escrow on their blockchain.
Okay?

312
00:18:44.251 --> 00:18:48.600
So then their funds are locked,
your funds are locked.

313
00:18:48.601 --> 00:18:51.570
We both receive a message that you know,
each other's funds are locked.

314
00:18:51.900 --> 00:18:55.800
And then off chain,
we're both going to agree on an exchange rate.
Okay?

315
00:18:55.801 --> 00:18:57.840
So we'll say,
you know what,
let's,
let's do it for this much.

316
00:18:57.841 --> 00:19:00.030
Two bitcoins is worth one ether or whatever.

317
00:19:00.720 --> 00:19:03.040
We'll then we'll then send a message to our,

318
00:19:03.120 --> 00:19:05.280
to our blockchains that indeed we did get it.

319
00:19:05.281 --> 00:19:09.120
And because that they got that message,
the funds will be transferred.

320
00:19:09.810 --> 00:19:14.210
And so cross chain atomic swaps are a subject that is,
it's a,

321
00:19:14.211 --> 00:19:15.720
it's a very interesting subject.

322
00:19:16.290 --> 00:19:19.310
If you want to see an example of this in solidity,
you know,
this,

323
00:19:19.320 --> 00:19:21.870
this is the most simple example I could find

324
00:19:24.330 --> 00:19:28.440
a,
but check out this example.
It's written in solidity,
very simple stuff.
Uh,

325
00:19:28.470 --> 00:19:32.280
but yeah,
anyway,
so decentralized gateways are very important to this space,

326
00:19:32.310 --> 00:19:34.820
essentially is a great example of that.
Uh,

327
00:19:34.950 --> 00:19:37.430
links to everything I've talked about are going to be in the video description.

328
00:19:37.500 --> 00:19:39.270
Please subscribe for more programming videos.

329
00:19:39.271 --> 00:19:42.690
And for now I've got a link all the blockchains.
So thanks for watching.

