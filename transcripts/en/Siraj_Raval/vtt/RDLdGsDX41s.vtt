WEBVTT

1
00:00:00.060 --> 00:00:02.940
Hello world,
it's Saroj and hash graph.

2
00:00:03.000 --> 00:00:06.120
I've had so many requests for this video.

3
00:00:06.560 --> 00:00:11.010
What I'm going to do in this video is explain what Hash graph is,
how it works,

4
00:00:11.160 --> 00:00:15.990
where it's from,
how it differs from a blockchain.
And we're going to at the end,

5
00:00:15.991 --> 00:00:18.720
go over the demo code that you're seeing behind me right now,

6
00:00:18.900 --> 00:00:23.790
which is a visualization of the hash graph.
Uh,
David structure.
Okay,

7
00:00:23.791 --> 00:00:26.400
so that's the demo that we're going to be you today.

8
00:00:26.520 --> 00:00:28.650
You can see the code for this in the video description,

9
00:00:28.651 --> 00:00:31.890
and I'll go over a bit of it at the very end.
But the start off,

10
00:00:31.920 --> 00:00:36.090
let's quotes none other than the CEO of Hash graph.
As he says,

11
00:00:36.240 --> 00:00:38.940
Hash graph is an alternative to blockchain,

12
00:00:39.180 --> 00:00:43.770
a first generation tech with severe constraints in terms of speed,
fairness,

13
00:00:43.771 --> 00:00:46.440
costs and security.
He's talking about the blockchain right here.

14
00:00:46.830 --> 00:00:50.340
A fundamental bottleneck has been the performance of the blockchain.

15
00:00:50.760 --> 00:00:55.260
How many applications are there that can run on a database that can do just five

16
00:00:55.261 --> 00:00:57.600
transactions a second?
Not many.

17
00:00:57.601 --> 00:01:00.390
So that was his critique of the blockchain.

18
00:01:00.420 --> 00:01:04.680
And he was saying that Hash graph is better in all of these features in terms of

19
00:01:04.681 --> 00:01:08.070
speed and fairness causing and security.
But is he correct?
Well,

20
00:01:08.071 --> 00:01:10.790
let's find out ourselves.
I'm going to try to be as,

21
00:01:11.550 --> 00:01:15.690
as non biased as I can be in this video because I'm,

22
00:01:16.470 --> 00:01:19.290
I,
uh,
you know what,
I just can't even do that.
I'm going to be biased.
I,

23
00:01:19.480 --> 00:01:24.120
I think it's a cool technology for sure.
But,
uh,
I'm skeptical.

24
00:01:24.150 --> 00:01:26.580
I'm just going to say I'm skeptical right at the start.

25
00:01:26.581 --> 00:01:29.250
But let's just go into this and let's,
let's,
let's talk about it here.
Right?

26
00:01:29.251 --> 00:01:31.990
So they've got this cool little picture hash graph versus blockchain.

27
00:01:32.480 --> 00:01:33.780
It is a data structure,
right?

28
00:01:33.781 --> 00:01:38.100
It is just like the blockchain in that a hash graph is a data structure with an

29
00:01:38.101 --> 00:01:40.980
associated distributed consensus algorithm.
Right.

30
00:01:40.981 --> 00:01:44.730
So what is that consensus algorithm we'd have to ask ourselves when it comes to

31
00:01:44.731 --> 00:01:48.570
any kind of blockchain?
Is it proof of work?
Is it proof of stake?
No.

32
00:01:48.571 --> 00:01:52.110
In this case it's neither.
It's a proprietary,

33
00:01:52.410 --> 00:01:55.920
I'm not a proprietary,
but a patented algorithm.
Okay.

34
00:01:55.921 --> 00:01:58.170
And its uses two techniques.

35
00:01:58.171 --> 00:02:02.430
The first is called gossip about gossip and the second is called virtual voting.

36
00:02:02.580 --> 00:02:06.630
I'll go into both after this.
But hatch was developed by a cool dude.

37
00:02:06.631 --> 00:02:07.590
His name was limit,

38
00:02:07.710 --> 00:02:12.710
his name is Lehman Baird who he has a phd from Carnegie Mellon while educated

39
00:02:12.991 --> 00:02:17.370
dude.
He's a worked for a couple of cool companies in his lifetime as a research

40
00:02:17.371 --> 00:02:21.340
engineer.
He's been Linda's blockchain space for about three years now.
Um,

41
00:02:21.390 --> 00:02:25.980
and he founded this company called swirled,
uh,
which patented,
uh,

42
00:02:26.010 --> 00:02:29.250
the Hash graph algorithm.
Oh,
so that's strike one for me.

43
00:02:29.520 --> 00:02:33.210
You don't want just patent software in this open source space,
right.

44
00:02:33.450 --> 00:02:36.990
And goes against the whole open source protocol thing.
But look,

45
00:02:38.190 --> 00:02:41.590
it's cool.
He's,
he's a kind guy.
Here's another thing,
the,

46
00:02:41.700 --> 00:02:45.990
so Ashcraft is very similar to Ibotta checkout this meme,
by the way,

47
00:02:46.380 --> 00:02:50.970
Hash craft is very similar to iota in that it offers a solution to scalability,

48
00:02:51.120 --> 00:02:54.210
right?
So bitcoin and ethereum and all these different blockchains,

49
00:02:54.360 --> 00:02:57.510
they have a problem when it comes to scalability and there's a lot of different

50
00:02:57.511 --> 00:02:59.920
solutions that people are offering in the communities.

51
00:03:00.290 --> 00:03:04.780
The proof of safe for one example or delegated proof of stake,
sharding,

52
00:03:04.900 --> 00:03:06.700
lightening network,
state channels,

53
00:03:06.760 --> 00:03:11.320
all these different ways to get around the fact that blockchain's do not scale.

54
00:03:11.590 --> 00:03:15.760
And Iota said,
let's just do away with uh,
all of these different features.

55
00:03:15.880 --> 00:03:19.540
Let's offer a different type of data structure.
It's not even a blockchain.

56
00:03:19.690 --> 00:03:22.330
And I'll talk,
it's called a tangle and I made a video on that.
Check it out.

57
00:03:22.331 --> 00:03:25.600
Just search Saroj Iota on youtube you'll find it first link,

58
00:03:26.440 --> 00:03:31.420
but it's similar to iota in that way in that it doesn't use a blockchain.

59
00:03:31.600 --> 00:03:33.550
It uses its own data structure.

60
00:03:34.540 --> 00:03:37.690
So this meme is kind of like you guys when you guys have been asking me for this

61
00:03:37.691 --> 00:03:41.590
hash grab stuff,
it's like,
you know,
blockchain's over here.
It's like Yo,
hold up.

62
00:03:41.591 --> 00:03:44.140
So it's considered fast.
Okay,

63
00:03:44.141 --> 00:03:48.190
so it's considered fast because of its use of the gossip about gossip protocol,

64
00:03:48.250 --> 00:03:53.110
which spreads messages across the network fast and it works in a private

65
00:03:53.111 --> 00:03:57.400
permission based setting.
Hold up,
what did I just say for a second?
Okay.

66
00:03:57.880 --> 00:04:02.290
They use these numbers,
they say 500,000 transactions,
a second,

67
00:04:02.291 --> 00:04:05.890
600,000 transactions a second,
you know,
meanwhile bitcoin is doing what?

68
00:04:05.890 --> 00:04:10.660
10 10 between 10 and 100 what does the theory I'm doing between 10 and 100 how

69
00:04:10.661 --> 00:04:12.670
could they possibly compete with Hash graph?

70
00:04:13.180 --> 00:04:17.920
Well guess what Hash [inaudible] is a private permission blockchain.

71
00:04:17.980 --> 00:04:19.510
Okay,
so I'll go over what that means right here.

72
00:04:19.570 --> 00:04:22.720
So here's the difference here between public and private blockchains.

73
00:04:22.990 --> 00:04:26.350
Public block chains are,
you know,
public,
anybody can read them.

74
00:04:26.530 --> 00:04:30.670
Anybody can become a node in this network.
It's public,
right?
So it's open,
read,

75
00:04:30.671 --> 00:04:33.460
write access to the database.
The database is the blockchain.

76
00:04:34.030 --> 00:04:37.270
Private ones are permissioned reader,
right?
Access to the database.

77
00:04:37.271 --> 00:04:40.720
That means that all of the nodes in a private blockchain,

78
00:04:40.721 --> 00:04:45.340
our permission beforehand,
that means their identity is no right?

79
00:04:45.341 --> 00:04:49.120
So you have to trust the nodes.
All the nodes are already trusted.

80
00:04:49.570 --> 00:04:53.260
What that means is that there is no possibility of a civil attack.

81
00:04:53.560 --> 00:04:57.280
A civil attack is when an attacker gains the majority of the nodes in the

82
00:04:57.281 --> 00:04:59.560
network,
right?
By creating a bunch of different accounts.

83
00:04:59.830 --> 00:05:03.160
And once it's attacker has the majority of the network that can approve their

84
00:05:03.161 --> 00:05:06.430
own transactions,
right?
And that causes the double spending problem.

85
00:05:06.880 --> 00:05:11.230
And bitcoin solve this by implementing what's called the proof of work
algorithm.

86
00:05:11.260 --> 00:05:13.330
So all the people in the network,
the miners,

87
00:05:13.390 --> 00:05:16.360
they have to solve these random mathematical problems.

88
00:05:16.361 --> 00:05:21.361
And then in order to have more than 51% of the network of that actor has to have

89
00:05:22.331 --> 00:05:24.190
more computing power than the majority of network,

90
00:05:24.220 --> 00:05:28.030
which nobody does because it's so vast.
But when it comes to this,

91
00:05:28.240 --> 00:05:31.330
because it's private,
uh,
there is no need for proof of work.

92
00:05:31.331 --> 00:05:35.350
So of course it's going to scale.
Proof of work is so expensive,
right?

93
00:05:35.560 --> 00:05:40.090
So if you have a private blockchain and all the nodes are already trusted,

94
00:05:40.330 --> 00:05:43.780
then you would need proof of work.
You wouldn't even need proof of stake.

95
00:05:44.050 --> 00:05:46.780
You would need some different kind of consensus mechanism,

96
00:05:46.781 --> 00:05:50.450
which we're going to talk about.
But of course it's going to be faster.
Uh,

97
00:05:50.600 --> 00:05:53.770
and what is a use case for something like this?
If you're IBM,

98
00:05:54.040 --> 00:05:58.670
if you're some kind of consortium of companies or banks for example,
you know,

99
00:05:58.671 --> 00:06:00.230
like ripple was used with banks.

100
00:06:00.560 --> 00:06:03.740
If you have assessed a set of trusted nodes,

101
00:06:03.980 --> 00:06:07.880
these are branches of your brand bank.
These are um,
you know,

102
00:06:07.881 --> 00:06:12.650
maybe some kind of security device for your iot ecosystem that you're trying to

103
00:06:12.651 --> 00:06:14.330
build.
You know,
you've got some thermostats here,

104
00:06:14.331 --> 00:06:16.790
you've got some little bit of this here,
a little bit this year,
you know,

105
00:06:16.791 --> 00:06:18.290
different types of types of devices.

106
00:06:18.440 --> 00:06:21.770
Then of course you can trust all of those nodes because they belong to you.

107
00:06:21.950 --> 00:06:24.020
So something like this would be helpful.

108
00:06:24.050 --> 00:06:28.770
It's not to say that hash graph is not a useful protocol.
Of course it is.
Uh,

109
00:06:28.890 --> 00:06:31.250
but it's,
it,
you have to be very specific.
You can't,

110
00:06:31.640 --> 00:06:35.900
my gripe is that people compare it to bitcoin and ethereum don't do that.

111
00:06:36.200 --> 00:06:39.140
If Hash craft went public,
then it would,

112
00:06:39.350 --> 00:06:42.440
it would be civil attacked in an in a day or less,
right?

113
00:06:42.441 --> 00:06:46.940
Because there is no consensus mechanism that prevents that.

114
00:06:47.540 --> 00:06:49.520
And what's working in a private setting,

115
00:06:49.521 --> 00:06:53.510
this virtual voting and gossip about gossip protocol,

116
00:06:53.511 --> 00:06:56.180
consensus mechanism will work in a public setting.

117
00:06:57.260 --> 00:06:59.000
So I just wanted to make that very clear.

118
00:06:59.150 --> 00:07:01.790
It's not a bad protocol is actually pretty cool,

119
00:07:01.970 --> 00:07:04.760
but don't compare it to bitcoin and don't just say like,

120
00:07:04.880 --> 00:07:09.260
oh well bitcoin can't scale and your hash graph sprinkle some hash graph on it.

121
00:07:09.290 --> 00:07:13.850
You know,
problems are over.
It's not like that.
So,
um,
in a non permission setting,

122
00:07:13.851 --> 00:07:14.810
like in Bitcoin,

123
00:07:15.020 --> 00:07:18.710
the nose participating in the consensus protocol are not known beforehand.

124
00:07:18.950 --> 00:07:22.250
That's in the bitcoin protocol.
So I can be someone who,
nobody knows.

125
00:07:22.400 --> 00:07:23.330
I can be anonymous,

126
00:07:23.450 --> 00:07:26.810
I can be synonymous and I can just join and I can be a part of the bitcoin

127
00:07:26.811 --> 00:07:29.660
network,
not.
So when it comes to hash graph,

128
00:07:30.980 --> 00:07:35.790
Hash Trough is considered an asynchronous Byzantine fault tolerant,
uh,

129
00:07:35.860 --> 00:07:40.280
protocol.
And it is not deterministic.
That is a mouthful to take in.

130
00:07:40.281 --> 00:07:44.690
But bitcoin solve this problem where you have two generals,
right?

131
00:07:44.691 --> 00:07:48.470
There's a val valley in the middle and they're trying to decide when to attack.

132
00:07:48.710 --> 00:07:50.870
But they can't trust the other side.
Like,
well,

133
00:07:50.871 --> 00:07:52.940
I don't know if he's going to attack first.
I don't know if the,

134
00:07:52.941 --> 00:07:53.930
he's going to attack first.

135
00:07:54.260 --> 00:07:56.870
They have to be able to attack in a trustless fashion.

136
00:07:56.871 --> 00:07:59.510
So that's why it's called the Byzantine General's problem.

137
00:07:59.690 --> 00:08:02.810
How do two nodes come to consensus,
right?

138
00:08:03.350 --> 00:08:07.850
Even if one of the nose is adversarial,
right?
So how do you create a network,

139
00:08:07.880 --> 00:08:08.610
a graph,

140
00:08:08.610 --> 00:08:13.490
a collection of nodes where you can operate this network?
It will run,

141
00:08:13.491 --> 00:08:18.140
they can come to consensus on some state without having to trust all of them

142
00:08:18.170 --> 00:08:22.580
like one or two or three or you know,
x number can be adversarial or bad notes.

143
00:08:22.880 --> 00:08:26.810
And so bitcoin solve that with the proof of work algorithm.
Um,

144
00:08:26.870 --> 00:08:29.210
and so hash ref solves that with the,
um,

145
00:08:29.600 --> 00:08:34.600
this gossip about gossip protocol slash a virtual voting algorithm is,

146
00:08:35.660 --> 00:08:38.810
uh,
not deterministic.
What do,
what do I mean by that?
Well,

147
00:08:38.840 --> 00:08:42.860
the deterministic algorithms are ones where you can predict how many steps that

148
00:08:42.861 --> 00:08:46.760
algorithm will take,
how long it will take.
You can determine them beforehand.

149
00:08:47.030 --> 00:08:52.030
But this is a probabilistic algorithm where you can't tell how many hops it's

150
00:08:52.701 --> 00:08:55.010
going to take or how many nodes that will connect to,

151
00:08:55.080 --> 00:08:59.400
to come to consensus or how long that will take.
It is probabilistic in that way.

152
00:08:59.401 --> 00:09:03.660
Like life is to,
to get kind of Meta.
Life is probabilistic,
not deterministic,

153
00:09:03.810 --> 00:09:07.140
unless you believe in fate,
which I don't.
You've got to make your own destiny.

154
00:09:07.320 --> 00:09:09.930
Words of advice thrown into hash graph explanations.

155
00:09:10.080 --> 00:09:12.150
So how does this thing compared to blockchain?
Really?

156
00:09:12.151 --> 00:09:14.480
Like why does it really compare to blockchain?

157
00:09:14.490 --> 00:09:18.210
So we know that the blockchain is a chain of blocks,
right?
Chains of blocks.

158
00:09:18.390 --> 00:09:20.070
These are data structures,
objects.

159
00:09:20.280 --> 00:09:24.550
We could code one up in 80 lines of python and I have see my video,
um,

160
00:09:24.630 --> 00:09:29.010
power of the blockchain.
Suraj just youtube that.
And so we have this blockchain,

161
00:09:29.011 --> 00:09:33.540
right?
So each block has a hash of its transactions and it has a pointer to the

162
00:09:33.541 --> 00:09:36.210
previous block and it's just a chain of blocks like that,
right?

163
00:09:36.240 --> 00:09:41.240
So the Hash scrap is different in that it's not a chain of blocks and it's,

164
00:09:42.220 --> 00:09:44.190
it,
it stores what are called events.

165
00:09:44.370 --> 00:09:46.890
I'm going to go into this in detail in five minutes.

166
00:09:47.040 --> 00:09:51.720
Let me just explain a few more things.
Okay.
Just,
just a few more things.
So,
um,

167
00:09:52.260 --> 00:09:54.270
it's hash craft ward to be in a public setting,

168
00:09:54.271 --> 00:09:59.271
it would face the same scalability problems as bitcoin and ethereum and ethereum

169
00:10:00.420 --> 00:10:03.030
is,
it uses pos for the Casper Protocol.

170
00:10:03.210 --> 00:10:07.500
Neo implements a decentralized Byzantine fault tolerance.

171
00:10:07.530 --> 00:10:11.580
Eos has delegated proof of stake.
These are all different solutions for scaling,

172
00:10:11.970 --> 00:10:12.181
right?

173
00:10:12.181 --> 00:10:16.920
And so we also have to define what do we mean when we say scalability or are we

174
00:10:16.921 --> 00:10:20.250
talking about scaling the number of users or are we talking about scaling the

175
00:10:20.251 --> 00:10:23.100
number of transactions or how about the size of the network?

176
00:10:23.130 --> 00:10:27.510
There's a lot of different dimensions to scalability and when you increase one

177
00:10:27.600 --> 00:10:29.070
you could decrease the other.

178
00:10:29.160 --> 00:10:34.050
So there's not a silver bullet that is a catch all solution for scalability as

179
00:10:34.051 --> 00:10:34.680
of now.

180
00:10:34.680 --> 00:10:39.680
And if I were to be working on blockchain research in blockchain consensus

181
00:10:40.231 --> 00:10:41.280
research specifically,

182
00:10:41.550 --> 00:10:45.240
I would focus nonstop on these scalability problem.

183
00:10:45.360 --> 00:10:49.410
How do we scale these things in a public way?
Because if we do that,

184
00:10:50.040 --> 00:10:52.690
then we get to the world where,
uh,

185
00:10:52.800 --> 00:10:57.720
amazing decentralized applications or possible,
see crypto Kitty's for example,

186
00:10:57.840 --> 00:11:01.200
crypto kitties overloaded the ethereum blockchain at one point,

187
00:11:01.350 --> 00:11:05.040
almost a third of transactions,
restoring these meaningless,
not meaningless,

188
00:11:05.041 --> 00:11:09.240
but like meaningless.
A cat,
a tradables,
right?
So there's that.

189
00:11:09.750 --> 00:11:13.500
So anyway,
uh,
that's hash graph.
Uh,
so,
so,
right,

190
00:11:13.501 --> 00:11:16.110
so this is what the Hash graph looks like compared to the blockchain.

191
00:11:16.230 --> 00:11:19.050
It looks a lot more complex.
There are a lot more connections.

192
00:11:19.200 --> 00:11:21.540
It's not as simple as just blocks connecting to each other.

193
00:11:21.690 --> 00:11:23.580
So let's just go into how this works,

194
00:11:23.581 --> 00:11:27.930
but actually one more really important bit to go over before we get into that.

195
00:11:28.230 --> 00:11:29.063
Um,

196
00:11:31.230 --> 00:11:33.720
so characteristics between hash drop and a blockchain.

197
00:11:33.960 --> 00:11:37.290
Check out this awesome list.
It goes over what we've already talked about.

198
00:11:37.500 --> 00:11:38.820
One is a chain of blocks.

199
00:11:38.970 --> 00:11:43.350
The other is a directed a cyclic graph that looks like a tree,
a Dag,
right?

200
00:11:43.351 --> 00:11:48.330
So iota is also a dag.
Modes of operation.
Blockchains are open source,

201
00:11:48.331 --> 00:11:51.570
permissionless public or private.
Hash graph is,
uh,

202
00:11:51.630 --> 00:11:56.410
well it says public or private.
It can be.
But right now this is,
this is private.

203
00:11:57.400 --> 00:11:59.260
It's private.
Uh,
the,

204
00:11:59.680 --> 00:12:03.990
it is patented and it is governed by a com,

205
00:12:04.090 --> 00:12:08.020
a company.
And this,
it's got that legal patent on top,
which I don't like.

206
00:12:08.021 --> 00:12:11.320
But anyway,
anyway,
so consensus models,

207
00:12:11.321 --> 00:12:14.590
they use proof of work versus proof of stake versus this cross of protocol.

208
00:12:14.740 --> 00:12:18.580
Probabilistic versus immediate trustless.
They're both trustless.
One is slow,

209
00:12:18.581 --> 00:12:23.020
one is fast,
one is inefficient,
one is cheap.
Yeah.
Yada,
Yada,
Yada.

210
00:12:23.350 --> 00:12:26.740
Decentralization,
questionable with the proof of work.
Because you know,

211
00:12:26.741 --> 00:12:31.180
these miners are controlling all these gigabytes of hash rates and stuff versus,

212
00:12:31.181 --> 00:12:35.710
yes,
this is decentralized.
So how now for the key stuff,

213
00:12:35.711 --> 00:12:38.080
thank you for waiting for this.
Now for the key stuff,

214
00:12:38.230 --> 00:12:42.760
how does it come to consensus?
So here we go.
Okay,
so stay with me.

215
00:12:43.050 --> 00:12:45.460
All right,
so here we go.
Let's,
let's get our brains.

216
00:12:45.880 --> 00:12:47.170
Let's get her brain's ready for this.

217
00:12:48.490 --> 00:12:52.360
So we've got four different nodes in this hash graph.

218
00:12:52.570 --> 00:12:57.490
We have Alice,
Bob,
Carol,
and Dave,
right?
So A,
B,

219
00:12:57.491 --> 00:13:00.910
c,
and d.
There are four nodes in our little hash draft right now.
Okay.

220
00:13:01.240 --> 00:13:05.980
Here's how it works.
Each member starts by creating an event,

221
00:13:06.340 --> 00:13:10.720
which is a small data structure in memory.
Okay,
this is an empty day structure.

222
00:13:10.840 --> 00:13:14.140
We've all got events,
memory,
good,
four of us.
Let's go.
Okay,

223
00:13:14.141 --> 00:13:18.730
so now what's going to happen is the community's going to run what's called a

224
00:13:18.731 --> 00:13:22.360
gossip protocol.
This has been around in computer science for a while,

225
00:13:22.600 --> 00:13:26.260
but basically if you have a network of nodes,
how do they talk to each other?

226
00:13:26.261 --> 00:13:30.430
How do they gossip?
Oh,
this person did this or this node did this.
Oh,

227
00:13:30.431 --> 00:13:33.370
and then the other note is like,
well,
this,
no did this.
And you know,
you know,

228
00:13:33.371 --> 00:13:36.880
it's like if you have a circle of people and you have a secret and you tell it

229
00:13:36.881 --> 00:13:38.890
to the next person and they tell it and they'd tell it.

230
00:13:38.891 --> 00:13:40.310
That's gossip in this case,
right?

231
00:13:40.500 --> 00:13:45.430
It's just means messages being passed between nodes in a network,
right?

232
00:13:45.431 --> 00:13:49.570
So here's what happens first.
All of this is random.
Remember,
it's probabilistic,

233
00:13:49.600 --> 00:13:52.870
not deterministic.
Some node will be chosen at random.

234
00:13:52.960 --> 00:13:57.610
It's going to be Bob in this.
In this case,
Bob will choose to call Dave.
Okay.

235
00:13:57.611 --> 00:14:02.611
So what that means is Bob is going to send a Dave in a message,

236
00:14:02.680 --> 00:14:06.910
gossip,
all of the events that he knew that Dave did not know yet.

237
00:14:07.180 --> 00:14:09.850
So this could be a single transaction that Bob has made.
Okay.

238
00:14:09.851 --> 00:14:12.730
So let's just say a single transaction.
He's sending it to Dave.

239
00:14:13.180 --> 00:14:17.410
Dave then records the fact that this same happened by creating a new event.

240
00:14:17.620 --> 00:14:19.060
And this is the new circle.
Okay.

241
00:14:19.061 --> 00:14:22.270
Which has lines going straight down to his last event.
So there,

242
00:14:22.300 --> 00:14:23.960
so watch my mouse here.
So there,

243
00:14:24.040 --> 00:14:28.480
so Bob now has a connection between himself and Dave and uh,

244
00:14:29.020 --> 00:14:33.640
from that down today,
right?
So there are two connections here.
There's one,

245
00:14:34.030 --> 00:14:36.940
two,
and then one,
and then Bob back to himself.

246
00:14:37.180 --> 00:14:41.730
So both Dave and Bob now have two connections on both of their,
in,

247
00:14:41.770 --> 00:14:43.420
in both of their histories,
right?

248
00:14:43.420 --> 00:14:48.420
So now this new event that Bob has just sent it today is called an event.

249
00:14:49.840 --> 00:14:53.660
So it's kind of like a block and that it's so it stores some transactions,

250
00:14:53.661 --> 00:14:56.330
it's going to be one transaction,
it could be several transactions.

251
00:14:56.510 --> 00:15:01.130
And they all point back to it's two parents,
right?
So in a tree,
you each,

252
00:15:01.340 --> 00:15:03.110
each leaf has to parent nodes.

253
00:15:03.290 --> 00:15:06.560
In this case case for this event that Bob passed to Dave,

254
00:15:06.830 --> 00:15:11.060
that those two parents will be Bob and Dave respectively.
Okay.
So that was that.

255
00:15:11.330 --> 00:15:14.060
Now,
okay,
so we had the first events happen,

256
00:15:14.390 --> 00:15:17.840
then Dave is going to send Bob all his events.
Remember,

257
00:15:17.870 --> 00:15:21.470
this is just random that he could have sent it to Carol,
whatever,
Alice.

258
00:15:21.680 --> 00:15:25.370
But he then sends Bob all the events,
including the new one he just created.

259
00:15:25.610 --> 00:15:29.300
So maybe Bob sent me,
made a transaction,
he gives it to Dave.

260
00:15:29.540 --> 00:15:33.110
Dave then made another transaction,
he gives it to Bob and so et cetera rights.

261
00:15:33.440 --> 00:15:36.170
And now they're passing all of these transactions,

262
00:15:36.350 --> 00:15:39.800
this history of transactions to each other in the form of events.

263
00:15:41.660 --> 00:15:46.520
Bob then randomly chooses Alice and sends over all four events he knows about to

264
00:15:46.521 --> 00:15:49.730
Alex,
right?
So let's say there are four transactions.
It can be more than that,

265
00:15:49.820 --> 00:15:52.430
but now Alice has that ledger.
Okay.

266
00:15:52.431 --> 00:15:55.970
So this just keeps continuing forever and ever and ever rent.

267
00:15:56.000 --> 00:15:57.830
Not Forever and ever.
But yes,
forever.

268
00:15:57.860 --> 00:16:01.160
As long as the network is operational to all the nodes,
just randomly.

269
00:16:01.161 --> 00:16:05.870
And it creates this directed a cyclic graph or hash graph.
Okay.

270
00:16:05.960 --> 00:16:09.310
And because all of these,
uh,
events contain hatches,

271
00:16:09.470 --> 00:16:10.970
it's called day hash graph,

272
00:16:11.420 --> 00:16:14.570
and each event contains it hatches and the event's below it,

273
00:16:14.840 --> 00:16:18.920
and it's digitally signed by it's creators similar to how blocks point back to

274
00:16:18.921 --> 00:16:20.270
previous blocks in the network.

275
00:16:22.040 --> 00:16:26.860
And it's useful to define around created for each event.
So we talked,

276
00:16:26.870 --> 00:16:30.800
so this,
this part was like us talking about how the gossip protocol works,
right?

277
00:16:30.801 --> 00:16:34.490
So how are these nodes gossiping?
Now comes the virtual voting,
right?

278
00:16:34.491 --> 00:16:37.910
So now what happens is all of these are,

279
00:16:38.480 --> 00:16:42.740
all of these transactions are split up into events.
So in this case,
I'll say one,

280
00:16:42.741 --> 00:16:45.950
two,
three,
four different events.
And once we have these events,

281
00:16:45.951 --> 00:16:48.710
it's just a way of organizing all of these transactions.

282
00:16:49.100 --> 00:16:51.770
We're going to create what are called witnesses and witnesses.

283
00:16:51.771 --> 00:16:56.240
We'll vote on the validity of transactions.
So,
uh,
the first,

284
00:16:56.600 --> 00:17:00.520
the first event for a single node will be called,
it's witnessed.

285
00:17:00.521 --> 00:17:05.300
So for Alis Dlba one and in the first event,
a two in the second 83 and then a,

286
00:17:05.720 --> 00:17:06.830
there's not an a four,
right?

287
00:17:06.831 --> 00:17:11.150
So a no doesn't necessarily have to have a witness in a single round.

288
00:17:11.840 --> 00:17:14.030
And then once we have all those witnesses,

289
00:17:14.031 --> 00:17:16.580
we have to determine if it is a famous witness.

290
00:17:16.760 --> 00:17:21.760
And in this case of famous witness is one that is used multiple times,

291
00:17:23.031 --> 00:17:24.320
right?
So how many times,

292
00:17:24.350 --> 00:17:28.700
and once we have famous with a famous witness that can have an election in which

293
00:17:28.730 --> 00:17:32.930
each of those witnesses will vote on whether or not a certain witness is famous,

294
00:17:32.931 --> 00:17:36.860
right?
So this is their voting mechanism between each of them.

295
00:17:37.130 --> 00:17:41.000
Is this witness famous?
Is it not?
How often has it been used?

296
00:17:41.001 --> 00:17:45.440
And what that means is how often is this transaction been passed,
you know,

297
00:17:45.441 --> 00:17:48.890
between different nodes.
And if it's valid,
it's been passed quite a lot,
right?

298
00:17:49.350 --> 00:17:53.120
It's been voted on quite a lot.
So the longer,
um,
a note,

299
00:17:53.121 --> 00:17:57.300
the longer some transaction is,
is maintained in this hash craft,

300
00:17:57.480 --> 00:18:01.890
the more trusted it can be because it's past this,

301
00:18:01.891 --> 00:18:05.100
both his virtual voting.
And this gossip protocol.
Okay.

302
00:18:05.101 --> 00:18:09.420
So that's how it's used in a,
at a very high level.
There's,

303
00:18:09.421 --> 00:18:12.450
there are more details here,
but I'll link to those in the video description.

304
00:18:12.780 --> 00:18:14.190
So who's using this thing?
Well,

305
00:18:14.191 --> 00:18:18.000
I found one cool partnership with vms software.

306
00:18:18.150 --> 00:18:23.150
So vms software has a bunch of different clients for mission critical systems,

307
00:18:23.730 --> 00:18:27.180
stock exchanges,
international banks,
global retail chains,

308
00:18:27.360 --> 00:18:32.340
and Hash crap has partnered with them to allow them to give their customers the

309
00:18:32.341 --> 00:18:36.420
ability to securely implement and operate the next generation in distributed

310
00:18:36.421 --> 00:18:40.890
applications.
So that is a cool application,
right?
This is a private company.

311
00:18:41.100 --> 00:18:45.270
They have their own private nodes and they want a way for their notes to be able

312
00:18:45.271 --> 00:18:49.540
to talk to each other in the fastest way possible and maintain a ledger.
Oh,

313
00:18:49.590 --> 00:18:51.960
perfect.
Use Case for a private blockchain

314
00:18:53.580 --> 00:18:57.570
now had there a hash graph is in the works,
right?

315
00:18:57.570 --> 00:19:01.830
So I am very skeptical because it's not done yet,
right?
So I'm not going to say,

316
00:19:01.860 --> 00:19:06.770
oh,
this is amazing.
Magical.
But Haddara is the public version of the Hash graph,

317
00:19:06.870 --> 00:19:09.360
a protocol,
right?
So it is them saying,

318
00:19:09.510 --> 00:19:14.510
let's make a public Bach blockchain using our technology that I just talked that

319
00:19:14.821 --> 00:19:19.230
I just explained how it works to you.
Right.
But then wait a second,

320
00:19:19.680 --> 00:19:23.490
the consensus mechanism we just talked about wouldn't work in a public case

321
00:19:23.550 --> 00:19:25.860
because all of the nodes can't be trusted,
right?

322
00:19:26.040 --> 00:19:30.180
These are random anonymous sometimes pseudonymous nodes.
Well they,
they,

323
00:19:30.181 --> 00:19:32.240
they are going to implement what's called,
it's,

324
00:19:32.260 --> 00:19:35.910
it's essentially called delegated proof of stake.
They're not calling it that,

325
00:19:35.911 --> 00:19:40.230
but it is delegated proof of stake in that they have a special counsel.

326
00:19:40.440 --> 00:19:42.780
This is a council of different organizations,

327
00:19:42.930 --> 00:19:45.210
which we'll vote on the validity of transactions.

328
00:19:45.330 --> 00:19:49.350
So it's not completely decentralized,
it's not completely centralized.

329
00:19:49.500 --> 00:19:50.580
It's somewhere in the middle.

330
00:19:50.610 --> 00:19:54.900
So I actually think delegated proof of stake is a pretty good idea and I'd like

331
00:19:54.901 --> 00:19:58.040
to see more,
uh,
blockchains use it.
But anyway,
uh,

332
00:19:58.120 --> 00:20:01.920
there they have some very ambitious aims for this Hadera platform where they

333
00:20:01.921 --> 00:20:04.860
want to offer smart contracts,
um,
micro storage,

334
00:20:04.861 --> 00:20:08.040
so decentralized storage and their own cryptocurrency for allowing for

335
00:20:08.041 --> 00:20:12.210
microtransactions.
So that's in the works.
So a lot of the problems I talk about,

336
00:20:12.211 --> 00:20:15.420
they're working on,
we'll see if it works out.
Um,
but,
um,

337
00:20:15.660 --> 00:20:19.350
I do think that it's cool that their founders are very nice in general nice

338
00:20:19.351 --> 00:20:21.540
people.
The founders of iota are not,

339
00:20:21.810 --> 00:20:26.670
they tend to disc people on Twitter and if you and dis their competitors,

340
00:20:26.910 --> 00:20:28.950
and generally in this day and age,

341
00:20:29.610 --> 00:20:34.470
if you are putting your competitors down,
you will not win because it's a very,

342
00:20:34.740 --> 00:20:38.340
it's a very tight knit ecosystem and you want to bring people up and not put

343
00:20:38.341 --> 00:20:42.120
people down.
And so I think that,
uh,
the founding team for Hash graph,

344
00:20:42.420 --> 00:20:44.460
they are good people and they'd never put people down.

345
00:20:44.461 --> 00:20:48.460
So that is one thing that I like and I,
I do as a good thing.
But anyway,
let's,

346
00:20:48.461 --> 00:20:53.230
let's look at this demo,
right?
So I found this really cool python demo of it,

347
00:20:53.231 --> 00:20:57.820
right?
So they haven't released their code will,
but it is on get hub.

348
00:20:58.030 --> 00:21:00.610
It's just that it has a patented license,

349
00:21:00.670 --> 00:21:03.160
so you have to talk to them if you want to use it in some way.

350
00:21:03.161 --> 00:21:06.370
So that's the only caveat to,
to,
to,
to think about.

351
00:21:06.371 --> 00:21:08.140
But let's go over some of this code here.

352
00:21:08.230 --> 00:21:13.230
So it's called twirled and it's in python and we can see what a note looks like

353
00:21:14.800 --> 00:21:19.690
here.
Uh,
but all the instructions are in the get hub remi,
uh,

354
00:21:19.780 --> 00:21:23.200
and in the video description,
but right here we can see what a node looks like,

355
00:21:23.201 --> 00:21:27.340
what's got head,
it's got around consensus votes,
witnesses.

356
00:21:27.460 --> 00:21:31.050
These are all features that I talked about,
right?
So it has,
um,

357
00:21:31.480 --> 00:21:35.380
it has attributes for all of these things.
You can create a new event.

358
00:21:35.600 --> 00:21:37.870
Is this event valid?
Let me add an event.

359
00:21:38.050 --> 00:21:41.470
And look at this just comes out to under 345 lines of code.

360
00:21:41.650 --> 00:21:45.880
I think this is the best code to look at if you want to get really technical

361
00:21:45.881 --> 00:21:48.740
understanding of this code base.
Uh,
but I think the,

362
00:21:48.741 --> 00:21:53.710
the most important bit here is this,
um,
let me see,

363
00:21:56.950 --> 00:22:01.900
is this algorithm I hear find order.
What is the order of transactions?
Right?

364
00:22:01.901 --> 00:22:05.110
So that's,
that's what all of these,
uh,
consensus mechanism,

365
00:22:05.111 --> 00:22:07.420
these blockchains dogs,
these ledgers,

366
00:22:07.421 --> 00:22:09.940
they all come down to what is the order of transactions?

367
00:22:09.941 --> 00:22:13.340
Can we agree on the order of transactions?
And,
uh,
if,

368
00:22:13.341 --> 00:22:15.220
if they can come to an order,
great,

369
00:22:15.370 --> 00:22:18.430
then they know that the network is going to maintain itself,

370
00:22:18.431 --> 00:22:22.300
that they can secure it at his trustless.
Indeed.
So that's,

371
00:22:22.420 --> 00:22:24.460
that's it for the code.
I'm definitely check it out.

372
00:22:24.520 --> 00:22:25.840
And I hope you found this video useful.

373
00:22:25.870 --> 00:22:27.730
Please subscribe for more programming videos.

374
00:22:27.731 --> 00:22:31.030
And for now I'm going to do some research.
So thanks for watching.

