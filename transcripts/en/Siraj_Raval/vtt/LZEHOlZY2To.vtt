WEBVTT

1
00:00:00.060 --> 00:00:00.751
Hello world.

2
00:00:00.751 --> 00:00:03.810
It's Saroj and we're going to talk about something a little different.

3
00:00:03.811 --> 00:00:08.730
This episode called the blockchain and how it can be used to improve AI.

4
00:00:09.000 --> 00:00:13.050
The worldwide web has only been around for a couple of decades and it's grown by

5
00:00:13.140 --> 00:00:14.940
orders of magnitude.
In that time,

6
00:00:15.300 --> 00:00:19.050
billions of machines are coming online as Internet connected devices,

7
00:00:19.170 --> 00:00:21.450
mainly phones are distributed globally.

8
00:00:21.660 --> 00:00:25.920
We've collectively define a standard for how they should communicate called the

9
00:00:25.950 --> 00:00:28.920
internet protocol suite.
At the lowest level.

10
00:00:28.950 --> 00:00:33.060
The link layer puts data on a wire than the internet layer routes.
This data,

11
00:00:33.210 --> 00:00:37.410
the transport layer persists it and the application layer delivers abstractions

12
00:00:37.411 --> 00:00:40.020
of it in the form of the apps that we all know and love.

13
00:00:40.350 --> 00:00:44.190
This has worked pretty well for our machines,
but there's a missing layer,

14
00:00:44.460 --> 00:00:47.370
a layer of smooth,
the refreshing manatees,
no.

15
00:00:47.700 --> 00:00:51.810
Where's the protocol to let them exchange,
not just data,
but value.

16
00:00:52.020 --> 00:00:56.370
The main way it's done right now was invented pre-internet and it requires using

17
00:00:56.371 --> 00:00:57.870
a centralized clearing house,

18
00:00:57.990 --> 00:01:02.130
so machines have to sometimes wait four days for a payment to transfer from one

19
00:01:02.131 --> 00:01:02.940
to the other,

20
00:01:02.940 --> 00:01:07.080
but in all other aspects they communicate with each other at a mind boggling

21
00:01:07.081 --> 00:01:11.580
rates.
What if they could send each other micropayments in the same way to meet a

22
00:01:11.581 --> 00:01:16.581
resources like electricity and storage space and computation all without having

23
00:01:16.711 --> 00:01:20.130
to wait for a middleman for a payment.
He's still my painting,
didn't he?

24
00:01:22.620 --> 00:01:26.430
No.
Bitcoin and other cryptocurrencies solve this problem.

25
00:01:26.580 --> 00:01:31.170
They act as a fifth protocol layer for value transfer and their underlying

26
00:01:31.171 --> 00:01:34.350
technology called the blockchain.
It makes this all possible.

27
00:01:34.590 --> 00:01:38.670
The blockchain for the first time allows machines to agree on value transfer

28
00:01:38.850 --> 00:01:42.450
without having to trust a central authority.
In the real world.

29
00:01:42.451 --> 00:01:46.140
If I create a painting,
I and only I own it,
but on the Internet,

30
00:01:46.320 --> 00:01:49.920
if I created a digital painting,
you could just copy it and then we both own it.

31
00:01:50.100 --> 00:01:54.270
There's no way of proving who owns it without using a central server that

32
00:01:54.271 --> 00:01:57.840
records that ownership.
We have to trust the server,
the middlemen,

33
00:01:58.260 --> 00:02:03.060
but the blockchain lets us reach consensus in a decentralized way that prevents

34
00:02:03.061 --> 00:02:05.610
a bad actor from falsely claiming ownership,

35
00:02:06.000 --> 00:02:09.930
not just for paintings but for any asset like bitcoin.

36
00:02:10.320 --> 00:02:13.470
But how can this be used to improve AI?
Well,

37
00:02:13.530 --> 00:02:17.970
one use case is giving both datasets and machine learning models a reputation.

38
00:02:18.390 --> 00:02:21.900
How do you know that the data or the pretrained model that you're using is

39
00:02:21.901 --> 00:02:24.690
quality,
that they haven't been tampered with?
You?

40
00:02:24.691 --> 00:02:28.320
Basically you have to trust a single source unless you use a blockchain.

41
00:02:28.730 --> 00:02:32.880
Deep mind is using a blockchain to create a publicly verifiable auditing system

42
00:02:32.940 --> 00:02:33.810
for healthcare data.

43
00:02:34.080 --> 00:02:37.590
It records every interaction they have with sensitive patient data.

44
00:02:37.710 --> 00:02:42.240
So patients know if a piece of their data has been used and a reason why it's

45
00:02:42.270 --> 00:02:46.470
right only.
So once a record of data use is added,
it can't be erased.

46
00:02:46.710 --> 00:02:50.580
That means patients can verify that no one has tampered with any of the entries.

47
00:02:52.620 --> 00:02:55.920
Another is a peer to peer network for training models.

48
00:02:56.160 --> 00:02:59.830
Instead of training your AI using services like AWS,
Google cloud,

49
00:03:00.100 --> 00:03:04.360
imagine a system where people could just rent out their spare computing power to

50
00:03:04.361 --> 00:03:07.540
help train models and get paid in tenser coin,

51
00:03:07.900 --> 00:03:10.870
or even a company that is run entirely by AI.

52
00:03:11.170 --> 00:03:14.920
Blockchains are decentralized databases,
so if an AI lives on a blockchain,

53
00:03:15.100 --> 00:03:16.180
no one could control it.

54
00:03:16.420 --> 00:03:20.170
It could leave as an independent entity on the web paying for whatever services

55
00:03:20.171 --> 00:03:23.320
it needs just to find an initial set of rules and set it free.

56
00:03:23.590 --> 00:03:28.270
One example would be a self driving car network run and maintained completely by

57
00:03:28.271 --> 00:03:30.250
Ai.
Yeah.
Oh,

58
00:03:30.610 --> 00:03:34.180
let's build our own simple blockchain in python to understand more about how

59
00:03:34.181 --> 00:03:35.700
this incredible Beta structure.
Yeah.

60
00:03:35.770 --> 00:03:38.380
<v 1>Well,
at first he lives,</v>

61
00:03:41.140 --> 00:03:44.740
he lives in me
only.

62
00:03:44.741 --> 00:03:49.600
You get access with your private key.
First,

63
00:03:49.600 --> 00:03:52.360
<v 0>let's define what eight block is.
For simplicity's sake,</v>

64
00:03:52.390 --> 00:03:55.420
let's say that each block represents a single transaction,

65
00:03:55.660 --> 00:03:57.730
a value transfer between two machines.

66
00:03:58.030 --> 00:04:00.880
We'll define the blocked object and its own class.
What they set up,

67
00:04:00.881 --> 00:04:05.440
important attributes the index represents.
It's ordering in the chain of blocks.

68
00:04:05.620 --> 00:04:08.170
It's timestamp shows when it was created.

69
00:04:08.470 --> 00:04:12.790
It will store some data that is defined by the sender as well as two hash
values,

70
00:04:12.990 --> 00:04:16.600
one for the previous hash and the chain of blocks and one for its own hash.

71
00:04:16.780 --> 00:04:19.240
The reason a block means a hash is dual purpose.

72
00:04:19.420 --> 00:04:23.200
It gives it a unique id and it verifies the integrity of the data.

73
00:04:23.590 --> 00:04:27.730
We use the popular crypto hashing algorithm called shot to five six to help

74
00:04:27.731 --> 00:04:31.780
generate a two 56 bit signature from the other attributes for each block in the

75
00:04:31.781 --> 00:04:34.720
hashing function.
So how has a block generated?
Well,

76
00:04:34.721 --> 00:04:37.420
the user provides some data in their transaction,

77
00:04:37.570 --> 00:04:40.660
so we use that as the only parameter in the generate function.

78
00:04:40.900 --> 00:04:44.050
And since each block is ordered we've got to fetch the last block.

79
00:04:44.320 --> 00:04:48.280
We'll use the last block to help define this blocks index as well as its hash.

80
00:04:48.490 --> 00:04:51.460
We'll also give it a timestamp so we know when it was generated.

81
00:04:51.670 --> 00:04:56.290
So each generated block points back to the previous block by storing its hash,

82
00:04:56.530 --> 00:04:59.020
it's a chain of blocks.
If blockchain,

83
00:04:59.470 --> 00:05:04.470
the first generated block is called the genesis block and we'll hardcoded in by

84
00:05:04.661 --> 00:05:07.330
predefining its attributes and its own function.

85
00:05:07.630 --> 00:05:11.500
Then we'll use it to initialize the blockchain and we'll store it as an in

86
00:05:11.530 --> 00:05:12.520
memory list.

87
00:05:12.790 --> 00:05:17.350
So remember how I said that a blocks hash serves as both its identity and

88
00:05:17.351 --> 00:05:18.760
verifies its integrity.

89
00:05:19.000 --> 00:05:22.930
We can use the hash to determine if a newly generated block is indeed valid

90
00:05:23.110 --> 00:05:26.920
given a new block and the previous block,
which is the last block in the chain,

91
00:05:27.100 --> 00:05:31.000
we can first check to see that it's got the right ordering via its index.

92
00:05:31.280 --> 00:05:35.650
Then we can check if it's previous hash attribute matches the already verified

93
00:05:35.651 --> 00:05:37.540
previous blocks hash.
Lastly,

94
00:05:37.541 --> 00:05:40.880
we'll calculate the hash for the new block and make sure it matches the hash

95
00:05:40.881 --> 00:05:43.600
site.
His stores,
if it passes these checks,
it's verified.

96
00:05:43.960 --> 00:05:46.540
Assuming all nodes store a copy of the blockchain.

97
00:05:46.690 --> 00:05:50.860
We need a way of choosing which blockchain to use in case there are conflicts.

98
00:05:51.010 --> 00:05:53.470
Let's say two nodes generate the same block number.

99
00:05:53.680 --> 00:05:57.070
Our solution will be to choose the chain that has the longest number of blocks.

100
00:05:57.170 --> 00:05:58.430
Since it's been around longer.

101
00:05:58.460 --> 00:06:02.270
It's more likely to be the true blockchain given a new blockchain will check if

102
00:06:02.271 --> 00:06:06.380
it's valid programmatically and if it has more blogs or replace our blockchain

103
00:06:06.470 --> 00:06:09.320
with a new one else,
we can just reject it as invalid.

104
00:06:09.560 --> 00:06:13.400
Since each node stores a copy of the blockchain in blocks are constantly being

105
00:06:13.401 --> 00:06:15.320
generated.
As transactions occur,

106
00:06:15.530 --> 00:06:19.970
we need a method of keeping each node blockchain in sync.
To do this,

107
00:06:20.060 --> 00:06:23.900
each node broadcast to all the others whenever it generates a new block.

108
00:06:24.110 --> 00:06:25.730
When a node connects to a new node,

109
00:06:25.850 --> 00:06:29.900
it queries for the latest block and when a note encounters a block with an index

110
00:06:30.050 --> 00:06:31.760
larger than its current known block,

111
00:06:31.970 --> 00:06:36.110
it can either add the blog to its current chain or query for the full
blockchain.

112
00:06:36.260 --> 00:06:40.880
And so the way we can encapsulate a node so that both the user can query it as

113
00:06:40.881 --> 00:06:44.240
well as other nodes would be to create an http server,

114
00:06:44.420 --> 00:06:47.900
we could create end points for a couple of actions that a user could take.

115
00:06:48.050 --> 00:06:50.810
One would be to list all the current blocks in the blockchain.

116
00:06:50.870 --> 00:06:53.180
Another would be to create a new block,

117
00:06:53.181 --> 00:06:57.590
given some data as a parameter by the user and another it could be to list all

118
00:06:57.591 --> 00:07:00.320
the other nodes in the network or even add new ones.

119
00:07:00.500 --> 00:07:05.120
So the user would control the note via http requests and he would communicate

120
00:07:05.121 --> 00:07:09.500
with other nodes via peer to peer web sockets.
So that's our simple blockchain.

121
00:07:09.650 --> 00:07:13.550
It's very minimal and doesn't include all the features that bitcoin's blockchain

122
00:07:13.551 --> 00:07:17.240
has.
But Hey,
it's an example.
However,
crucially,

123
00:07:17.270 --> 00:07:21.410
there is one key feature that I left out that we should talk about called the

124
00:07:21.411 --> 00:07:23.810
proof of work algorithm are naive.

125
00:07:23.811 --> 00:07:26.780
Blockchain is vulnerable to what's called a civil attack.

126
00:07:27.030 --> 00:07:30.770
This is when a bad actor creates a bunch of notes to get this report finitely

127
00:07:30.771 --> 00:07:32.480
large influence over the network.

128
00:07:32.780 --> 00:07:35.960
Once he has control of at least 51% of the network,

129
00:07:36.140 --> 00:07:38.210
he can validate his own transactions.

130
00:07:38.450 --> 00:07:42.650
It can spend the same money more than once or double spend to prevent this

131
00:07:42.860 --> 00:07:46.940
bitcoin mining nodes complete a series of really computationally expensive

132
00:07:47.090 --> 00:07:51.410
calculations to approve each transaction and get paid in bitcoin for their

133
00:07:51.411 --> 00:07:52.520
computational work.

134
00:07:52.790 --> 00:07:56.240
In order for a newly generated block to be accepted by the network,

135
00:07:56.390 --> 00:08:01.190
minors must complete a proof of work,
which covers all of the data in the block.

136
00:08:01.370 --> 00:08:06.020
At least 51% of nodes must reach consensus that a new block is valid for to be

137
00:08:06.021 --> 00:08:07.070
added to the blockchain.

138
00:08:07.340 --> 00:08:11.870
And so a bad actor has to have more computing power than half the network for

139
00:08:11.871 --> 00:08:12.351
bitcoin.

140
00:08:12.351 --> 00:08:16.160
This amounts and more computing power than the 500 fastest supercomputers in the

141
00:08:16.161 --> 00:08:19.750
world combined.
No one has that much computing Palette,
not even you.

142
00:08:19.751 --> 00:08:23.930
Mark Zuckerberg.
Jarvis also helps me get it ready in the morning.
Hell yeah.

143
00:08:24.230 --> 00:08:27.110
And that's why the bitcoin network is still secure.

144
00:08:27.140 --> 00:08:30.530
Even with a $50 billion market cap every week.

145
00:08:30.560 --> 00:08:35.030
New blockchains are being created with different use cases.
There is so,

146
00:08:35.031 --> 00:08:39.140
so much to talk about when it comes to the blockchain and we've barely begun to

147
00:08:39.141 --> 00:08:43.880
explore what happens when we use the blockchain as a way to improve our AI.

148
00:08:44.150 --> 00:08:48.860
It can help us verify the quality of our data and models create peer to peer

149
00:08:48.861 --> 00:08:51.320
exchanges where we trade them with each other,

150
00:08:51.470 --> 00:08:56.470
create never before possible businesses where we monetize aspects of Ai

151
00:08:56.910 --> 00:09:01.860
Development and even create independent organizations run entirely by AI.

152
00:09:02.190 --> 00:09:04.950
Last week's coding challenge winner is Charles David blocked.

153
00:09:05.190 --> 00:09:09.060
He used an earthquake dataset to predict the magnitude of future earthquakes

154
00:09:09.210 --> 00:09:11.370
given features like latitude and longitude.

155
00:09:11.610 --> 00:09:15.750
He built several optimizers from scratch for his neural network including Adam

156
00:09:15.990 --> 00:09:20.580
momentum and stochastic gradient descent.
All three are viewable in his graph.

157
00:09:20.640 --> 00:09:21.271
Awesome work.

158
00:09:21.271 --> 00:09:25.650
Charles David Wizard of the week and the runner up is Parmender Singh who also

159
00:09:25.651 --> 00:09:29.220
implemented all three optimizers from scratch to find the local minima of a

160
00:09:29.221 --> 00:09:30.054
function.

161
00:09:30.060 --> 00:09:34.260
This week's coding challenge is to write a simple scheme to encrypt a dataset so

162
00:09:34.261 --> 00:09:37.320
only someone with its private key can access it.
Check out the,

163
00:09:37.321 --> 00:09:40.380
read me for all the details and I'll announce a winner next week.

164
00:09:40.410 --> 00:09:42.330
Please subscribe to become a programming wizard.

165
00:09:42.331 --> 00:09:46.600
Check out this video right here and for now,
I've got to invest in it theory.
Um,

166
00:09:46.770 --> 00:09:48.120
so thanks for watching.

