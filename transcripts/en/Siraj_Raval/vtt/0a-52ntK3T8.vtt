WEBVTT

1
00:00:07.770 --> 00:00:08.603
Okay.

2
00:00:08.750 --> 00:00:09.583
<v 0>Okay.</v>

3
00:00:16.730 --> 00:00:17.563
<v 1>Okay.</v>

4
00:00:19.980 --> 00:00:24.370
<v 0>Oh,
we're old.
It's Raj.
Hi Guys.</v>

5
00:00:24.520 --> 00:00:28.000
How's it going?
Good to see you.
Hi everybody.

6
00:00:29.200 --> 00:00:32.800
Uh Wow.
So just start off with the request video requests,

7
00:00:33.220 --> 00:00:36.310
stock recommender system.
Uh,
that's going to happen in the future.

8
00:00:36.850 --> 00:00:41.680
I actually have a video on that.
Checkout predicting stock prices.
Anyway.

9
00:00:41.760 --> 00:00:46.090
Uh,
I would probably do another one.
The future.
Hi Guys.
Hello world.
Oh my God.

10
00:00:46.091 --> 00:00:49.780
Everybody is coming in.
I'm so happy to see all of you.
I'm going to,

11
00:00:49.781 --> 00:00:51.790
I'm going to listen names really quick.
Uh,

12
00:00:52.030 --> 00:00:56.590
George Herrick lists a odd son.
Nico.
Sanjay,

13
00:00:56.591 --> 00:01:01.480
mood it.
Luck Ya on John Above.
Yeah.
Arthur.
Hello everybody.

14
00:01:01.660 --> 00:01:05.620
Today we are.
Thank you.
I got it from open Ai.
I'm glad you liked my t shirt.

15
00:01:05.680 --> 00:01:08.230
I'm so proud to wear the t shirt even though I don't work for them.

16
00:01:08.620 --> 00:01:11.110
I love this tee shirt.
Okay.

17
00:01:11.111 --> 00:01:15.260
So today everybody,
uh,

18
00:01:15.280 --> 00:01:16.390
we are going to,

19
00:01:17.090 --> 00:01:22.090
we are going to build a tic tac toe and we're going to build a neural network

20
00:01:23.470 --> 00:01:26.830
that gets better and better at tic TAC toe over time.
Okay.

21
00:01:27.100 --> 00:01:30.520
That's what we're going to do.
Uh,
and,
uh,

22
00:01:30.580 --> 00:01:34.750
the first thing I want to do before we start building this neural net to defeat

23
00:01:34.751 --> 00:01:39.751
tic tac toe is I want to answer a few questions.

24
00:01:39.821 --> 00:01:42.550
So we're going to do a five minute Q and a and then we're gonna get right to the

25
00:01:42.551 --> 00:01:44.350
code and it's in javascript.

26
00:01:44.620 --> 00:01:49.420
I know it's in javascript and that's okay because javascript is my third

27
00:01:49.421 --> 00:01:51.100
favorite language.
It's like python,

28
00:01:51.340 --> 00:01:56.230
go and then javascript and javascript actually pure and it's into your

29
00:01:56.231 --> 00:01:59.320
javascript.
So we're not using any kind of j query or any of that.
Like,
you know,

30
00:01:59.321 --> 00:02:03.130
libraries.
We're using some pure javascript.
Okay.
So that's what we're gonna do.

31
00:02:03.190 --> 00:02:07.060
So let's start with a five minute Q and a and then we are going to,
uh,

32
00:02:07.660 --> 00:02:09.190
get started.
Okay.
Ready,
set,
go.

33
00:02:09.191 --> 00:02:12.910
And I'm going to show you guys a demo at the beginning and the end go five

34
00:02:12.911 --> 00:02:16.070
minute Q and.
A.
Why javascript?
Uh,

35
00:02:16.210 --> 00:02:20.110
because I want to show this to you in the browser.
And I don't know,
I'm just,

36
00:02:20.111 --> 00:02:22.500
I'm just kind of experimenting with Javascript.
You know,
like I'm,

37
00:02:22.501 --> 00:02:25.570
I'm changing as a,
as a,
as a programmer,
as an artist.

38
00:02:25.600 --> 00:02:27.390
I don't want to just like keep doing the same thing and,

39
00:02:27.391 --> 00:02:29.800
and you know what it's really about the,
the,

40
00:02:29.810 --> 00:02:32.570
the greater idea and I think it's going to,
it's,
you know,

41
00:02:32.650 --> 00:02:36.550
however many inputs I can show you like how a neural networks the better.
Okay.

42
00:02:36.910 --> 00:02:39.310
What do you think about Mark Zuckerberg is AI?
I think,
you know,

43
00:02:39.311 --> 00:02:42.560
I have a lot of respect for Zuckerberg that he did that and he wrote an essay,

44
00:02:42.610 --> 00:02:43.600
he wrote something about it.

45
00:02:43.840 --> 00:02:46.360
So I could bring as a CEO of a multibillion dollar company,

46
00:02:46.361 --> 00:02:51.190
any still programs that is something to admire.
A mini Max Algo.
Actually,

47
00:02:51.191 --> 00:02:52.690
no,
it's not going to be using the mini map.
Sal,

48
00:02:52.691 --> 00:02:55.840
grow PHP is the shittiest language.
You're absolutely right.

49
00:02:56.050 --> 00:02:58.510
Can we build a neural net to curb the overwhelming filming,

50
00:02:58.570 --> 00:03:03.540
feeling existential trend?
Yes.
Um,
we,
uh,

51
00:03:03.550 --> 00:03:06.250
a neural net that can read our emotional state that can we,

52
00:03:06.260 --> 00:03:08.320
we need some kind of like a brain computer interface,

53
00:03:08.321 --> 00:03:11.890
but it could read her emotional state and it could tell us what to do best.

54
00:03:11.891 --> 00:03:13.420
So kind of like a personal psychologist.

55
00:03:13.750 --> 00:03:16.210
When are you going to do the AI neural network for Daniel shipments?

56
00:03:16.211 --> 00:03:19.480
Asteroid Code?
Uh,
that's going to be either next week or the week after that,

57
00:03:19.481 --> 00:03:20.590
but I'm aiming for next week.

58
00:03:20.940 --> 00:03:23.020
Do you have a separate bag for your hair when you go to sleep?

59
00:03:25.930 --> 00:03:28.810
No.
Uh,
so Raj,

60
00:03:28.811 --> 00:03:31.120
please do a video on auto encoders for data compression.

61
00:03:31.270 --> 00:03:35.560
I do have a video on that.
It's called a build an auto encoder in five minutes,

62
00:03:35.561 --> 00:03:38.350
but I'll do another one soon.
How advanced is this?
JS is going to be,

63
00:03:38.351 --> 00:03:40.590
don't have much experience in Js,
uh,

64
00:03:42.550 --> 00:03:46.120
how advances are going to be in terms of javascript,
like raw javascript.

65
00:03:46.121 --> 00:03:48.220
It's not that advanced in terms of computer science theory.

66
00:03:48.221 --> 00:03:51.580
It's a little advanced because we're using something called bitwise operations,

67
00:03:51.700 --> 00:03:54.580
which I'll explain in the,
in the video.
Okay.
So which,

68
00:03:54.581 --> 00:03:56.800
which one is better SDM or neural network?
Uh,

69
00:03:56.830 --> 00:03:58.820
it depends on what you're trying to do a,

70
00:03:58.840 --> 00:04:02.220
but generally neural nets perform better,
uh,

71
00:04:02.410 --> 00:04:06.550
across a wide variety of tests,
a neural net firm.
But if you have a like,

72
00:04:06.580 --> 00:04:07.391
just very,
very,

73
00:04:07.391 --> 00:04:10.330
very little data and you're trying to do something simple like linear
regression,

74
00:04:10.450 --> 00:04:13.990
probably an SPM,
a neural net from scratch and js.
Exactly.

75
00:04:14.110 --> 00:04:18.280
What is your New Year's resolution?
I once,
uh,
next year I want to get,

76
00:04:18.880 --> 00:04:23.880
let's say probably 500,000 subscribers and I want to create a movie,

77
00:04:24.280 --> 00:04:28.750
um,
with starring myself and I direct it and I want to,
uh,

78
00:04:29.050 --> 00:04:32.470
interview Elan and uh,
yeah,
that's about it.

79
00:04:32.800 --> 00:04:35.300
Talk about ambition.
Right?
So Raj,

80
00:04:35.301 --> 00:04:39.340
please do a video on wind load power forecast.

81
00:04:40.600 --> 00:04:41.650
Uh,
yeah.
Okay.

82
00:04:41.680 --> 00:04:43.870
I mean something on whether it's something on whether I've actually been

83
00:04:43.871 --> 00:04:45.730
planning that.
What are you going to make today?

84
00:04:45.731 --> 00:04:48.580
I'm going to explain that in a second.
Uh,
we have two more minutes in this Q and.

85
00:04:48.581 --> 00:04:52.030
A.
Why is PHP so bad?
Because it doesn't have a lot of maintenance.

86
00:04:52.060 --> 00:04:55.240
It's a programming language is only as good as the people who maintain the

87
00:04:55.241 --> 00:04:56.210
language.
Now,

88
00:04:56.211 --> 00:04:59.920
many people who are good maintain PSP anymore because all of those resources are

89
00:05:00.010 --> 00:05:02.140
moving to python and go and javascript.

90
00:05:02.620 --> 00:05:06.250
Why not make an AI that directs a movie?
Someone actually did that.

91
00:05:06.251 --> 00:05:07.870
Check out AI and movie script.

92
00:05:08.130 --> 00:05:12.490
Google that what to do after Andrew Young's course built,

93
00:05:12.610 --> 00:05:15.100
watch my videos.
Okay.
By the way,

94
00:05:15.101 --> 00:05:18.490
I'm trying to interview Andrew on and I tweeted him directly.
So guys,

95
00:05:18.491 --> 00:05:19.390
check out the Twitter,

96
00:05:19.660 --> 00:05:23.140
check out my Twitter and then look at my tweets like tweets and replies and see

97
00:05:23.141 --> 00:05:27.520
the one that I asked Andrew on to interview for my channel,
like it.
Retweet it.

98
00:05:27.521 --> 00:05:30.970
Okay.
The more people who like and retweet it,
the more likely he is to say yes,

99
00:05:31.180 --> 00:05:33.790
I want to interview that guy.
Okay.
What is your secret sauce?

100
00:05:34.090 --> 00:05:38.650
My secret sauce is I genuinely truly from the bottom of my heart,

101
00:05:38.890 --> 00:05:42.880
I love what I do.
I love Ai,
I love neural networks.

102
00:05:43.120 --> 00:05:47.170
I love being a youtuber and it took me a lot of tries to,
to fail,

103
00:05:47.560 --> 00:05:49.270
fail to get to where I am.

104
00:05:49.271 --> 00:05:53.650
So my secret is that no matter how many times I failed,
I,
I,
I picked myself up,

105
00:05:53.920 --> 00:05:57.770
I talked to my friends and I,
and I,
and I just kept going.
Okay.

106
00:05:58.280 --> 00:06:00.110
So one more question and then we're going to get going.

107
00:06:00.880 --> 00:06:01.713
<v 2>Uh,</v>

108
00:06:03.430 --> 00:06:06.220
<v 0>I want to do a question I've never answered before.
Uh,</v>

109
00:06:08.140 --> 00:06:10.900
why Sarah Geology to Siraj Raval great question.

110
00:06:11.080 --> 00:06:14.650
I changed the name of my youtube channel and my just hold public persona to my

111
00:06:14.651 --> 00:06:17.650
full name because as I grow,
I,

112
00:06:17.850 --> 00:06:22.630
I'm becoming a public figure and I want to be known as my full name.
Saroj rebel.

113
00:06:22.631 --> 00:06:27.160
It's not Sarah Geology.
The game is over.
It Shit's getting real now.
Okay.

114
00:06:27.161 --> 00:06:31.390
So I am Saroj Ravell okay.
So just remember that.
Okay.
So here we go.

115
00:06:31.450 --> 00:06:34.060
That's it for the five minute Q and.
A.
Let's get started with the code.
Okay.

116
00:06:34.061 --> 00:06:37.090
So what we're gonna do is we're going to build a neural network,
uh,

117
00:06:37.150 --> 00:06:38.740
to beat the game of tic TAC toe.

118
00:06:38.770 --> 00:06:42.160
I'm going to go ahead and start screen sharing and then we are going to get

119
00:06:42.161 --> 00:06:45.010
started.
Okay.
Uh,
all right.
So here we go.

120
00:06:47.060 --> 00:06:49.700
Let's get started.
Screenshare

121
00:06:53.750 --> 00:06:57.170
okay,
so what I'm going to do is I'm going to demo this for you guys.

122
00:06:57.230 --> 00:07:00.320
This actually in the browser,
okay.
It's actually in the browser.

123
00:07:01.130 --> 00:07:01.963
<v 2>MMM.</v>

124
00:07:03.000 --> 00:07:04.630
<v 0>So this is what it looks like.
Let me just,</v>

125
00:07:04.870 --> 00:07:08.620
let me just move this to the side and let's see what you guys are saying here.

126
00:07:11.130 --> 00:07:15.170
Uh,
okay,
so this is what it looks like guys.
So what did,
what it's doing is it is,

127
00:07:15.500 --> 00:07:18.680
it is running a genetic algorithm.
Okay?
And it's going to look like this.

128
00:07:18.920 --> 00:07:20.570
These are,
these are the four board games.

129
00:07:20.571 --> 00:07:23.510
It's got four board games running simultaneously.
This is on the web.

130
00:07:23.660 --> 00:07:26.240
This is a web demo of the code that I'm going to do.

131
00:07:26.600 --> 00:07:29.650
And what it's doing is it's trying out a bunch of,
uh,

132
00:07:29.780 --> 00:07:33.800
it's for AI simultaneously trying out a bunch of moods and it's recording what's

133
00:07:33.801 --> 00:07:35.600
happening in the source code.
Okay?

134
00:07:35.930 --> 00:07:39.620
It's recording what's happening in the source code.
Okay?

135
00:07:40.690 --> 00:07:44.170
And we can take the source code.
The source is the weights while,
okay,

136
00:07:44.171 --> 00:07:47.710
the weights are the connection between the synapses in the neural network.

137
00:07:47.920 --> 00:07:51.140
We can take these weights and we can put them in our neural net and it's going

138
00:07:51.141 --> 00:07:54.580
to get better over time.
Okay,
so I'm going to explain this step by step.

139
00:07:54.581 --> 00:07:57.100
This is what it's going to look like.
Okay?
It's going to look like this.

140
00:07:57.280 --> 00:07:58.570
It's a game of tic TAC toe.

141
00:07:58.750 --> 00:08:02.830
We're going to build tictactoe from scratch and then we're going to build our

142
00:08:02.831 --> 00:08:06.730
girl network from scratch.
Okay.
And there's quite a bit of code here,

143
00:08:06.731 --> 00:08:07.840
so I'm just going to get started.

144
00:08:08.170 --> 00:08:10.780
Let me x out of this and we're going to get to the text editor.
Okay.

145
00:08:13.930 --> 00:08:17.190
All right.
Uh,
okay.

146
00:08:17.191 --> 00:08:20.280
So what I'm gonna do is I'm going to put this,
uh,

147
00:08:20.400 --> 00:08:23.580
on the side so I can see what you guys are saying.
Just like that.

148
00:08:24.270 --> 00:08:28.290
Palms are sweaty,
knees,
weak arms are heavy.
There's vomit on his sweater already.

149
00:08:28.530 --> 00:08:31.680
Moms Spaghetti.
Okay.
So let me make sure I'm in the screen this time.
Okay.

150
00:08:31.880 --> 00:08:36.360
I'm in the screen.
Okay.
So let's get started.
Okay,
I'm going to go to class filed.

151
00:08:37.420 --> 00:08:42.310
Why do you talk so fast?
It makes me nervous.
Okay.
Rightness.
I will.
You're right.

152
00:08:42.311 --> 00:08:46.720
Okay.
Everything's cool.
Everything's cool.
Okay.
So,
um,

153
00:08:47.020 --> 00:08:47.890
let's get started.

154
00:08:47.891 --> 00:08:51.850
The first thing we're going to do if we're going to build our neural network,

155
00:08:52.000 --> 00:08:55.680
okay,
sorry.
We're going to build the game.
We're going to build tic TAC toe.
Okay?

156
00:08:55.920 --> 00:09:00.510
It's going to be t t.
Dot.
Js.
Okay,
here we go.
Um,

157
00:09:02.400 --> 00:09:06.090
so let's get started.
The first thing,
okay,
so what does this,
let me,
let me,
uh,

158
00:09:06.180 --> 00:09:08.370
let me explain what we're going to do here.
We're going to,

159
00:09:08.670 --> 00:09:12.690
step one is we're going to generate
um,

160
00:09:13.860 --> 00:09:18.490
uh,
randomly size.
Let me make it bigger

161
00:09:20.770 --> 00:09:24.820
size population.
Are you guys thinking these comments?

162
00:09:24.880 --> 00:09:28.810
Can you build around me?
Can you build around it?

163
00:09:29.500 --> 00:09:32.320
Oh Man,
I love you guys,
man.
You guys are just the best.
Okay.

164
00:09:32.321 --> 00:09:34.540
So we're going to generate a randomly size population.

165
00:09:34.930 --> 00:09:38.530
It's going to be player versus computer.
Okay?
Excusing B player versus computer.

166
00:09:38.890 --> 00:09:39.251
Okay?

167
00:09:39.251 --> 00:09:42.840
So we're going to generate a randomly size population of neural nets of neural

168
00:09:42.841 --> 00:09:46.980
nets
or the best one.

169
00:09:49.110 --> 00:09:53.520
And then we're going to,
uh,
and then we're going to,
uh,

170
00:09:55.000 --> 00:09:55.833
we're going to,

171
00:09:55.970 --> 00:10:00.460
the top scoring ones are favored to pay to populate the next generation.
Uh,

172
00:10:00.870 --> 00:10:05.370
best once get to reproduce.
Okay?

173
00:10:05.400 --> 00:10:09.000
So that's how,
that's the basic logic of this game.
Okay.
Uh,
it's,
it's,

174
00:10:09.450 --> 00:10:12.060
we're going to use pure javascript.
It's going to use web workers.

175
00:10:12.210 --> 00:10:16.560
Why workers are,
and I haven't actually talked too much about parallelism,
uh,
but,

176
00:10:17.550 --> 00:10:22.410
but web workers are basically a concurrency.
Their threads in javascript.
We want,

177
00:10:22.470 --> 00:10:24.030
we want these things to be happening in parallel.

178
00:10:24.120 --> 00:10:25.890
Remember the demo I showed you guys at the beginning?

179
00:10:26.010 --> 00:10:29.070
There were four games happening at the same time.
Those are web workers.

180
00:10:29.071 --> 00:10:32.760
They are happening concurrently.
That means at the same time.
Okay.

181
00:10:34.460 --> 00:10:39.000
Uh,
we are using tabs,
not spaces.
Okay?
So let's go ahead and get started.

182
00:10:39.540 --> 00:10:42.660
Increase the font size.
I can do that.
Bump up,
up,
up.
How's that?
How about that?

183
00:10:42.750 --> 00:10:47.460
How's that?
How's that for big as f?
Okay,
so we're going to,

184
00:10:47.670 --> 00:10:50.760
we're going to define our neural net a.
And,

185
00:10:50.761 --> 00:10:53.370
W it's going to be called Ttt for tic TAC toe.
Sorry.

186
00:10:53.371 --> 00:10:57.630
We're going to define our game,
which is called tic TAC toe or TTT.
Okay.

187
00:10:57.631 --> 00:11:00.210
We're going to start off with the function and the function,

188
00:11:02.360 --> 00:11:07.280
um,
uh,
is going to be TPT.
All right?

189
00:11:07.640 --> 00:11:11.240
So that's the function.
And let's get started here and we're going to say,

190
00:11:11.330 --> 00:11:16.130
you know,
this is going to get a opening and then that,
and then,
okay,
so,

191
00:11:16.240 --> 00:11:20.710
all right,
let's get started.
Bigger than that,
my Twitter handle is Saroj.
Robble,

192
00:11:20.711 --> 00:11:24.200
Sra,
j r.
A.
V.
A.
L.
Let me make that even bigger for you guys.
Okay.

193
00:11:24.201 --> 00:11:28.820
So this is as big as we are going.
Okay?
So let's start off by defining,
um,

194
00:11:28.970 --> 00:11:33.590
are our three states.
So,
uh,
we're going to say bar x

195
00:11:35.620 --> 00:11:40.330
are,
um,
oh,
which is the,
which is the,
sorry,
this.

196
00:11:40.331 --> 00:11:44.110
And that's the borrow is x's and o's.
Okay.

197
00:11:44.111 --> 00:11:46.480
And then Bar Thai and the,

198
00:11:46.540 --> 00:11:50.080
and we're going to be x and the computer's going to be,
oh,
okay.
And Tie.

199
00:11:53.700 --> 00:11:58.500
Okay.
So now this is going to take about 45 minutes if I can,

200
00:11:58.560 --> 00:12:03.460
if I can.
Yeah,
that's right.
You guys don't need to see the chats.

201
00:12:04.390 --> 00:12:05.440
That's true.
That's true.

202
00:12:09.780 --> 00:12:11.520
All right.
I'm just going to,
so I'm not,

203
00:12:11.580 --> 00:12:13.230
I can't see what you guys are saying right now.

204
00:12:13.260 --> 00:12:17.070
I'm just gonna like start coding because that really makes it easier for me.
So,

205
00:12:17.071 --> 00:12:20.040
um,
and but I'll,
I'll,
I'll pop it up once in a once in a while.
Okay.

206
00:12:20.220 --> 00:12:22.180
So let me move this [inaudible].

207
00:12:24.870 --> 00:12:29.050
All right,
so let me make this a little bigger.
Okay,
so let's get started.
Okay.

208
00:12:29.051 --> 00:12:32.110
So the first thing we want to do is think about the squares,
the squares,

209
00:12:32.140 --> 00:12:33.550
like we're going to iterate through it through them,

210
00:12:33.551 --> 00:12:36.100
and it's going to look like this.
The iteration is going to look like this.

211
00:12:36.101 --> 00:12:40.990
It's going to be like,
it's going to be like zero.
One,
two,
three,
four,
five,
six,

212
00:12:40.991 --> 00:12:44.080
seven,
eight.
Okay.
There are eight a a game state is,

213
00:12:44.110 --> 00:12:49.090
remember I take that toe is 32 vertical lines and then there's a two horizontal

214
00:12:49.091 --> 00:12:51.610
lines.
Okay?
So it's good.
It's going to look at this and we'll iterate.

215
00:12:51.611 --> 00:12:53.950
Then we're going to iterate at the top left and we're going to move to the

216
00:12:53.951 --> 00:12:57.070
bottom right.
Okay.
Top left to bottom.
Right.
And it's going to look like that.

217
00:12:57.071 --> 00:12:59.170
So I just wanted to show you that for a second.
Okay.

218
00:12:59.171 --> 00:13:01.570
So now let's go ahead and initialize our board.

219
00:13:01.571 --> 00:13:03.540
So we're going to say function newborn and we're cool.

220
00:13:03.550 --> 00:13:07.630
We're going to start off by initializing our helper classes,
help or classes.

221
00:13:07.660 --> 00:13:09.610
Okay,
these are helper classes.

222
00:13:09.640 --> 00:13:14.560
That's what we all want to initialize or helper classes.
So,
um,
what is it?

223
00:13:14.590 --> 00:13:16.780
What does a new board,
well,
it's going to get nothing,
right?

224
00:13:16.781 --> 00:13:17.770
We're just initializing it.

225
00:13:17.771 --> 00:13:21.700
So we're going to return zero and new board gets absolutely no value.

226
00:13:21.701 --> 00:13:23.490
We're going to,
we're going to add value to that newborn.

227
00:13:23.920 --> 00:13:27.490
What's another helper function we need?
We want to check if the board is empty,

228
00:13:27.491 --> 00:13:29.140
right?
So let's check.

229
00:13:29.260 --> 00:13:33.420
Let's create a function called is empty and is empty checks.
Uh,

230
00:13:33.760 --> 00:13:36.400
what is the parameter or the board itself,
right?
What are we checking?

231
00:13:36.401 --> 00:13:39.400
We're checking if the board is empty,
right?

232
00:13:39.640 --> 00:13:44.640
So let's check out the board is empty and we can return is going to be a true or

233
00:13:46.181 --> 00:13:50.870
false value.
So we'll do a,
in javascript,
there are three equal signs too,

234
00:13:50.871 --> 00:13:55.180
for for this.
So we say return board zero.
Okay?
So if it's zero,

235
00:13:55.181 --> 00:13:56.770
then returned to die.
He's going to be true or false.

236
00:13:56.771 --> 00:14:01.030
It's going to be a boolean value.
Okay,
so that's,

237
00:14:01.031 --> 00:14:03.130
that's that helper function.
What else do we need here?

238
00:14:03.430 --> 00:14:08.170
Let's say we're going to get
the piece.
Okay,

239
00:14:08.200 --> 00:14:12.400
what is the piece?
The piece is what this has to retrieve.
Uh,

240
00:14:13.030 --> 00:14:16.930
what's,
What Square in the Tic Tac toe,
right?
Which square are we using here?

241
00:14:17.380 --> 00:14:21.340
Okay.
Um,
I say board,

242
00:14:21.400 --> 00:14:24.610
we're going to say square.
Okay.
Those are our two parameters.

243
00:14:24.611 --> 00:14:26.380
We've got the board and the square.
Which one?

244
00:14:26.560 --> 00:14:29.980
So we want to get the value of that piece.
And what are we doing here?
Well,

245
00:14:29.981 --> 00:14:31.060
guess what guys,

246
00:14:31.061 --> 00:14:36.061
we are defining each of these squares in our tic Tac toe,

247
00:14:36.550 --> 00:14:39.910
not as integers,
but as bits.
Okay.

248
00:14:39.911 --> 00:14:44.030
And why are we thinking of them as bits?
Each of these art two numbers there,

249
00:14:44.031 --> 00:14:47.410
there,
there,
there are bits that are two numbers long,
like zero,
one zero,

250
00:14:47.411 --> 00:14:50.590
two zero,
three like that.
And why are we doing that?
Well,

251
00:14:51.630 --> 00:14:56.360
it is faster to perform.
Uh,
uh,
it's,
it's just faster if we're,

252
00:14:56.370 --> 00:14:59.280
if we're operating at the bit level rather than an abstraction,

253
00:14:59.281 --> 00:15:01.980
which are integers.
If we're operating at the bit level,

254
00:15:02.130 --> 00:15:04.260
all of our operations are faster.
Okay.

255
00:15:04.261 --> 00:15:06.930
And that's one of the great things about javascript.
If we can do that.

256
00:15:07.430 --> 00:15:10.560
So we're going to operate at the bit level and what does that mean?

257
00:15:10.561 --> 00:15:13.890
That means that we're going to perform what are called bitwise operations.

258
00:15:14.790 --> 00:15:16.740
It was operations.
So let me,
let me,

259
00:15:16.800 --> 00:15:21.360
let me write this and then I'll explain what I mean by that.
Okay.
So board.

260
00:15:22.620 --> 00:15:24.060
Okay.
Um,

261
00:15:26.120 --> 00:15:29.060
and I'm going to pull up the chat in a second because I want to see if you guys

262
00:15:29.150 --> 00:15:33.830
know what I mean when I,
when I do this,
because this is going to be interesting.

263
00:15:34.280 --> 00:15:37.490
So
up,
up,
up,

264
00:15:38.210 --> 00:15:43.040
and three.
Okay.
So what does this mean?

265
00:15:43.070 --> 00:15:45.890
What does this mean?
This is,
this is a bit wise operation.

266
00:15:46.190 --> 00:15:51.140
So this essentially like,
so what this is saying is,
so for this,

267
00:15:51.230 --> 00:15:55.040
uh,
so for this like whatever's in the parenthesis here for the square,

268
00:15:55.310 --> 00:15:56.750
this basically means,
uh,

269
00:15:56.780 --> 00:16:01.670
take the square and multiply it by two to the one,
the first,

270
00:16:01.730 --> 00:16:04.730
which is the one died.
And that's the value we get for that.
That's,

271
00:16:04.850 --> 00:16:07.880
that's essentially a bitwise operators.
Um,

272
00:16:08.150 --> 00:16:10.720
and then what does it mean for the board?
Well for the board that,

273
00:16:10.721 --> 00:16:15.110
that the whole thing means we want to take the board and we want to divide it
by,

274
00:16:15.250 --> 00:16:19.130
uh,
whatever the value up here is.
Okay.
Whatever this value is.

275
00:16:19.310 --> 00:16:20.330
So it's going to be this.

276
00:16:22.450 --> 00:16:25.270
And then for that put the ant sign.

277
00:16:25.390 --> 00:16:30.160
We are going to do a bit whites and multiplies those,
uh,
those two values,

278
00:16:30.420 --> 00:16:33.960
uh,
by three B,
just because there are three squares,
uh,

279
00:16:34.260 --> 00:16:35.730
both horizontally and vertically.

280
00:16:35.940 --> 00:16:38.700
So what this is going to do is they're going to give us the big value of

281
00:16:38.701 --> 00:16:39.300
whatever,

282
00:16:39.300 --> 00:16:44.040
of wherever we are in the game that's going to give us that rob bit value and

283
00:16:44.041 --> 00:16:46.390
cause that's what this whole game is operating on.
Its,

284
00:16:46.550 --> 00:16:48.750
it's operating on big values.
Okay.

285
00:16:48.930 --> 00:16:52.020
Because it's just faster to run our neural net that way.
Okay.

286
00:16:52.470 --> 00:16:53.760
So that's what that's gonna look like.

287
00:16:53.761 --> 00:16:57.180
And I'm going to pull up the chat for a second.
I want to see if you guys are,
uh,

288
00:16:57.510 --> 00:17:00.150
let's see.
Hold on,
hold on.
Let me pull up the chat.

289
00:17:03.960 --> 00:17:08.260
Where are you guys?
Okay.

290
00:17:11.710 --> 00:17:16.280
All right.
Okay.
You guys are on point.
You know,

291
00:17:16.281 --> 00:17:20.700
I'm just going to keep this chat window because I want to see you guys because
I,

292
00:17:20.810 --> 00:17:24.410
you know,
just in case.
Okay.
All right.
Thanks guys.

293
00:17:25.520 --> 00:17:29.750
Okay.
Yes,
we understand this.
Okay,
cool.
Cool,
cool,
cool.
Okay.

294
00:17:30.400 --> 00:17:33.500
All right.
So,
so that's,
that's we're getting the piece,
uh,

295
00:17:33.560 --> 00:17:36.860
it is an open AI tee shirt.
Yes.
Not that I worked there,
but I love the tee shirt.

296
00:17:37.100 --> 00:17:37.601
Okay.
So,

297
00:17:37.601 --> 00:17:42.170
so now we've got the piece and now we're going to perform and move operation.

298
00:17:42.350 --> 00:17:46.550
So now we're going to just say move.
Um,
uh,

299
00:17:46.880 --> 00:17:51.740
so for the move operation,
what we want to do is,
um,
no,

300
00:17:51.741 --> 00:17:54.440
actually I'll close out.
Okay.
So now for the move operation,

301
00:17:54.620 --> 00:17:57.710
we're going to say we've got our board,
we have our square,

302
00:17:57.890 --> 00:18:01.370
and now we have our piece and we want to move that value to another position in

303
00:18:01.371 --> 00:18:05.330
the board.
Okay.
So,
uh,
what does move look like?
Well,
we want to say,

304
00:18:05.390 --> 00:18:07.640
we're going to,
again,
we're going to perform a fit wise operation.

305
00:18:07.700 --> 00:18:12.620
I'm going to explain how that works.
So we're going to say board or,
uh,

306
00:18:12.830 --> 00:18:17.270
let's see.
Peace.
Less than,
or not,
not it wise,
less.

307
00:18:17.660 --> 00:18:20.570
It's a shift operator.
It's not a lesson.
It's a shift operation.

308
00:18:21.020 --> 00:18:25.730
So square does it.
That one.
Okay.

309
00:18:26.350 --> 00:18:26.700
<v 1>Okay.</v>

310
00:18:26.700 --> 00:18:31.170
<v 0>Just like that.
And so we've got one,
two,
three.
Okay.
So what does this doing?</v>

311
00:18:31.200 --> 00:18:33.570
It's going to take,
it's combining those values.

312
00:18:33.670 --> 00:18:36.220
So that's what the or operation doing is combining those values.

313
00:18:36.360 --> 00:18:38.340
So let me to write a quick example of what I mean by that.

314
00:18:38.560 --> 00:18:41.790
If we have zero one zero one,
and then we had,
um,

315
00:18:43.170 --> 00:18:46.680
oh,
uh,
if we had oh one one,

316
00:18:46.681 --> 00:18:48.400
one one combined,

317
00:18:48.480 --> 00:18:51.330
what this is doing is it's combining those values to show the move.

318
00:18:51.331 --> 00:18:55.770
So this would become one,
uh,
one,
one,
one,
right?

319
00:18:55.771 --> 00:18:59.820
So it's taking,
it's that more operation.
So,
so just like that.

320
00:19:00.770 --> 00:19:05.060
Okay.
So that's a move value.
Okay.
So that's what's being for a move now.

321
00:19:05.960 --> 00:19:06.793
<v 1>MMM.</v>

322
00:19:08.600 --> 00:19:12.260
<v 0>So those are a helper methods and let go ahead and start writing our game up</v>

323
00:19:12.290 --> 00:19:15.350
functionality.
So we're going to say game functionality.
Uh,

324
00:19:15.410 --> 00:19:18.350
and so we have our board,
we have the turn,
whoever's turn it is,

325
00:19:18.560 --> 00:19:21.980
and we have the history of the,
of the game state.
Okay.
And this is stored using,

326
00:19:22.030 --> 00:19:26.640
it's a stored locally and we're using JavaScript's local storage,
uh,

327
00:19:27.320 --> 00:19:30.170
functionality that do this.
It's storing it locally in a cache,

328
00:19:30.410 --> 00:19:34.250
in a temporary cash.
Okay.
And that's the history of game states.

329
00:19:34.460 --> 00:19:37.190
And it's going to be an end and it's going to be a stack,

330
00:19:37.700 --> 00:19:41.420
a stack data structure so we can easily pop the top off and replace it.

331
00:19:41.450 --> 00:19:43.310
And we could push something new on it every time.

332
00:19:43.580 --> 00:19:45.620
That's why we were using a stack to that.
Okay.

333
00:19:46.250 --> 00:19:49.680
So let's go ahead and initialize our values here.
Uh,

334
00:19:49.800 --> 00:19:53.510
this is one of the annoying things about javascript.
Uh,
we just,
we,
we wanna,

335
00:19:53.570 --> 00:19:57.470
we want to initialize these,
uh,
these values.
Okay?

336
00:19:57.590 --> 00:19:59.180
So this dot turn hold on.

337
00:20:00.140 --> 00:20:00.800
<v 1>Okay.</v>

338
00:20:00.800 --> 00:20:02.720
<v 0>It's not turn equals turn.</v>

339
00:20:03.380 --> 00:20:07.550
And this dot history equals history kind of annoying,

340
00:20:07.551 --> 00:20:09.980
but we have to do that and it initializes those values.

341
00:20:10.150 --> 00:20:13.850
So now what we're going to do is we're going to define a prototype.

342
00:20:14.090 --> 00:20:19.010
So every javascript object has a prototype.
A prototype is also an object.

343
00:20:19.470 --> 00:20:23.840
And all javascript objects inherit properties,
uh,
uh,

344
00:20:23.870 --> 00:20:26.510
from their PR and the methods from their prototype.
Okay?

345
00:20:26.511 --> 00:20:30.740
So this is kind of like the,
the,
the god of the object,
the prototype.

346
00:20:30.910 --> 00:20:35.330
So we're going to follow the prototype of the game object and we're going to

347
00:20:35.331 --> 00:20:39.440
define a bunch of,
uh,
functions for this.
Okay?

348
00:20:39.530 --> 00:20:42.530
So the first one we want to do is to find the equals function.
Well,

349
00:20:42.620 --> 00:20:46.970
what's the equals function?
Doing?
The equals function says,

350
00:20:47.110 --> 00:20:48.600
let's take that,
um,

351
00:20:49.460 --> 00:20:54.460
gain equals a function that we already have a and we want to see if two places

352
00:20:54.851 --> 00:20:59.500
in the dream state or equal to each other.
Okay?
So we're going to say hold on

353
00:21:02.500 --> 00:21:06.130
and make sure that's all on point.

354
00:21:07.150 --> 00:21:10.300
Okay.
And,
okay.

355
00:21:10.301 --> 00:21:15.301
So what we're going to do is going to say returned a value of whether or not

356
00:21:15.491 --> 00:21:17.920
it's equal.
So we're gonna say we're going to check if the board,

357
00:21:18.250 --> 00:21:20.830
if the board equals,
uh,

358
00:21:21.100 --> 00:21:23.680
whatever the other board is and what does the other board,

359
00:21:23.681 --> 00:21:26.440
the other board is going to be the next state.
Okay.

360
00:21:26.441 --> 00:21:29.440
We want to check if they're equal to each other.
Okay.
Um,

361
00:21:30.760 --> 00:21:33.970
and uh,
the turn is the same as this

362
00:21:37.500 --> 00:21:42.060
other adopt term.
Okay.
Um,
and this is going to be,

363
00:21:45.120 --> 00:21:49.350
that's the equals value.
So we're checking if it's equal or not,
uh,

364
00:21:50.190 --> 00:21:53.220
and want to see where you guys are at.

365
00:21:56.580 --> 00:21:58.340
Okay.
Um,

366
00:22:02.030 --> 00:22:04.910
let's see.
Okay,
cool.
Okay.
So,
so that's,

367
00:22:04.911 --> 00:22:06.920
so that's that you guys are keeping up more or less.

368
00:22:07.160 --> 00:22:12.160
And now we are going to define the get peace method for the prototype.

369
00:22:13.500 --> 00:22:17.330
A proto-type
yet

370
00:22:21.370 --> 00:22:24.270
please
and,

371
00:22:24.340 --> 00:22:27.880
but get ps method is going to get the value of that piece from our prototype.

372
00:22:27.881 --> 00:22:32.710
Right?
Uh,
and the value is,
remember it's a bit wise,
it's a,
it's,
it's a bit.

373
00:22:33.220 --> 00:22:36.460
Um,
so we,
we have,
um,

374
00:22:36.790 --> 00:22:39.190
a local function for this and we're,
it's,

375
00:22:39.191 --> 00:22:42.880
we're going to initialize the prototype using that local function.

376
00:22:43.180 --> 00:22:47.290
The square is the actual,
the game state or,
sorry,
the board.

377
00:22:47.590 --> 00:22:50.610
And we're going to return,
we're going to return,
uh,

378
00:22:52.490 --> 00:22:55.750
the piece which is going to be when we give it two parameters,

379
00:22:55.751 --> 00:22:58.660
the board and the square,
right?
The board into square.

380
00:22:58.661 --> 00:23:01.120
Cause we've already defined that.
Get these method up there.

381
00:23:01.121 --> 00:23:04.780
Remember up here we defined it so we can just return that for the prototype.

382
00:23:04.840 --> 00:23:09.040
Okay.
Um,
let's see.
What else do we need?

383
00:23:09.041 --> 00:23:13.270
We need to,
uh,
oh,
a move function,
right?
So prototype,

384
00:23:13.820 --> 00:23:18.370
uh,
oh,
this is going to be fun to explain.
So prototype dot move.

385
00:23:18.850 --> 00:23:23.740
Um,
and then we're going to say,
well,
what's the game move?

386
00:23:23.770 --> 00:23:28.770
What is the game booth given the square that we are at,

387
00:23:29.110 --> 00:23:31.930
given the square that we are at,
what does this look like?
Okay,

388
00:23:31.931 --> 00:23:35.020
here's the fun part.
Here's the fun part.
So we're going to say,

389
00:23:36.340 --> 00:23:39.460
given our history and our local cache,
which is s which is a stack,

390
00:23:39.461 --> 00:23:43.510
remember I said it's a stack.
We're going to push the new value of this,

391
00:23:43.660 --> 00:23:48.500
the new state of the board onto our stack.
Remember if they stack of,

392
00:23:48.770 --> 00:23:53.330
of game states,
and then we're going to say,
uh,
let's get this.

393
00:23:54.590 --> 00:23:59.300
Let's take the board that we already have and perform a move because we just

394
00:23:59.301 --> 00:24:03.800
moved it,
right?
Uh,
given the board,
the square and the turn.

395
00:24:04.220 --> 00:24:07.970
Okay.
The turn of where we are.
Lastly,

396
00:24:07.971 --> 00:24:09.680
we want to define the turn

397
00:24:11.380 --> 00:24:14.650
and it's going to be this,
uh,
XR operator.

398
00:24:14.920 --> 00:24:19.420
This is going just do a bit wise xor operation and it's going to assign the

399
00:24:19.421 --> 00:24:22.330
result to the first operators.
Operands so what does that mean?

400
00:24:22.331 --> 00:24:24.160
It's going to basically,
it's shifting the bit.

401
00:24:24.161 --> 00:24:27.820
So it's either you or meet you or meet you or me,
right?
So that's,

402
00:24:27.821 --> 00:24:31.000
it just shifts one at one way or the other.
Okay.
So who's move?

403
00:24:31.001 --> 00:24:35.530
Is it yours or the ais?
Okay,

404
00:24:35.860 --> 00:24:38.500
so now we're going to,

405
00:24:38.860 --> 00:24:39.693
<v 2>uh,</v>

406
00:24:41.330 --> 00:24:44.550
<v 0>uh,
we also want an undo function,
right?
Game Dot prototype.</v>

407
00:24:47.700 --> 00:24:52.270
Undo.
Okay,
so function,
game,
undo.

408
00:24:55.140 --> 00:24:57.760
So what does this mean?
So if we want to undo one of our moves,

409
00:24:57.820 --> 00:25:00.370
this is what we have to do.
We've got to take the board we already had.

410
00:25:00.610 --> 00:25:03.100
And this is why it's great to have a stack for this,
right?

411
00:25:03.101 --> 00:25:04.900
The stack data structure is

412
00:25:05.490 --> 00:25:06.323
<v 2>mmm,</v>

413
00:25:07.170 --> 00:25:09.510
<v 0>great for this because we can easily,
we can,
uh,
it's,</v>

414
00:25:09.511 --> 00:25:13.020
it's a constant time retrieval of whatever we just pushed,
pushed on it.

415
00:25:13.260 --> 00:25:15.390
It's a constant time retrieval.
Okay.

416
00:25:15.391 --> 00:25:17.590
So we're going to say this is not history dot topic.

417
00:25:17.940 --> 00:25:20.640
We're going to pop it off the stack.
What was that last game?

418
00:25:20.641 --> 00:25:22.470
State what we want that game state.
And we're going to,

419
00:25:22.500 --> 00:25:24.660
we're going to get it and then

420
00:25:28.070 --> 00:25:29.120
are going to,

421
00:25:30.260 --> 00:25:31.093
<v 2>uh,</v>

422
00:25:31.120 --> 00:25:34.170
<v 0>remember we're going to switch that turned back using that expert operator.
It's,</v>

423
00:25:34.180 --> 00:25:38.500
it's back to you or it's back to me,
whoever.
It was the opposite.
Okay.

424
00:25:38.501 --> 00:25:43.420
And so now we want you to declare our winner.
So how do we declare a winner?
Well,

425
00:25:44.710 --> 00:25:49.240
we're going to do,
once again,
game dot prototype dot winter equals function.

426
00:25:50.110 --> 00:25:54.490
And then we have a function internally for who is the winner of the game given

427
00:25:54.491 --> 00:25:56.260
the board,
right?
Given the board,

428
00:25:56.290 --> 00:26:00.660
we can define who the winner is going to be and um,

429
00:26:02.180 --> 00:26:04.460
winter is going,
it's going to return the,

430
00:26:05.020 --> 00:26:07.670
the value of who is going to be given the,

431
00:26:08.960 --> 00:26:13.330
the board this thought for.
Okay.
So now,
um,

432
00:26:14.560 --> 00:26:16.480
there's one more thing I want to do in this class.

433
00:26:16.600 --> 00:26:18.520
There's one more thing I want to do.
We're going to,

434
00:26:18.550 --> 00:26:21.550
we're going to draw the board.
Okay.
We're going to draw the board.

435
00:26:21.790 --> 00:26:22.990
And before I draw the board,

436
00:26:23.260 --> 00:26:26.380
I'm going to write this out and I'm going to explain what this is.
Okay?

437
00:26:26.381 --> 00:26:30.520
CTX CTX is our canvas.
This is how we're drawing in javascript.

438
00:26:30.850 --> 00:26:34.930
Don't be confused that thing and think this is the context itch.
It's the,

439
00:26:34.931 --> 00:26:39.040
it's the canvas which we can think of as an object that we're passing around and

440
00:26:39.041 --> 00:26:43.030
how we draw on the screen.
It's a canvas object.
Uh,
and,

441
00:26:44.310 --> 00:26:49.080
uh,
we're,
we're going to step by step,
draw out this board,
okay.

442
00:26:49.260 --> 00:26:52.320
Uh,
and it's going to be a series of values here.
So we're going to start off by,

443
00:26:52.350 --> 00:26:55.710
we're going to initialize our canvas by saying began path.
Okay.

444
00:26:55.711 --> 00:26:57.900
And then we're going to say,
uh,

445
00:26:58.050 --> 00:27:01.470
we want to do a move to function and we're going to actually do this several

446
00:27:01.471 --> 00:27:06.120
times.
So I'm going to copy and paste this one,
two,
three.
Okay.

447
00:27:06.121 --> 00:27:07.860
Just like that.
And

448
00:27:10.360 --> 00:27:13.630
let me talk about what I'm doing here,
but first,
uh,
having my move to,

449
00:27:13.631 --> 00:27:17.650
and then I have my line to line two.
Okay.

450
00:27:18.700 --> 00:27:23.230
I am iteratively right here.
I am iteratively drawing out this,

451
00:27:23.530 --> 00:27:25.720
uh,
state.
Can anyone,
okay.

452
00:27:25.721 --> 00:27:28.450
So now I'm going to engage you guys for a second before I draw this.

453
00:27:28.540 --> 00:27:32.890
I haven't done this before.
So what I'm gonna do is I'm going to engage you guys.

454
00:27:33.010 --> 00:27:37.510
Can anyone tell me in their own words,
uh,
uh,
when,

455
00:27:37.960 --> 00:27:42.640
when to use a canvas.
Once you use a canvas in javascript.
Like what,

456
00:27:42.641 --> 00:27:44.200
what is an example beside this?

457
00:27:47.520 --> 00:27:51.900
Okay.
When,

458
00:27:51.901 --> 00:27:55.930
when is a good one?
When would we use a canvas?
Like besides a game,

459
00:27:55.931 --> 00:28:00.580
what's like another application?
I just want to make sure I've got you guys,
uh,

460
00:28:01.390 --> 00:28:02.860
no idea.
Okay.
So another,

461
00:28:02.920 --> 00:28:07.660
so another example would be drawing gys.
Exactly.

462
00:28:07.661 --> 00:28:11.260
Okay.
Any,
any kind of Gui,
image processing,
image processing.
Great example.

463
00:28:11.261 --> 00:28:16.180
Making animations.
Okay,
cool.
So,
so great to draw stuff.
Okay.
So you guys are maps.

464
00:28:16.270 --> 00:28:19.420
All right.
A lot of great,
great suggestions.
Okay,
so exactly.

465
00:28:19.510 --> 00:28:22.510
So we're going to draw this canvas.
So this is the,
this is the kind of like a,

466
00:28:24.350 --> 00:28:28.020
this is the kind of a little boring part,
but you know,

467
00:28:28.070 --> 00:28:30.320
I'm just going to write up these values and I'm gonna explain what I'm doing,

468
00:28:30.980 --> 00:28:32.810
which is always the,
you know,

469
00:28:34.640 --> 00:28:38.540
but that part about games where it's like,
you know,
you've got to manually,

470
00:28:39.170 --> 00:28:42.590
you know,
right up to the values for the coordinates and,
and

471
00:28:44.710 --> 00:28:49.430
um,
yes,
it's six,
six,
six.
I know.
Yes.
It's Hilarious,

472
00:28:49.431 --> 00:28:50.270
isn't it?
Okay.

473
00:28:50.330 --> 00:28:55.330
So I moved to your 0.9 5.33 and you'll notice that I'm using similar values

474
00:28:59.751 --> 00:29:03.420
here.
Moved to,
um,
so your point 56.
Okay,
so to,

475
00:29:03.460 --> 00:29:07.430
to move and then I want to end up with a stroke and that's going to be okay.

476
00:29:07.520 --> 00:29:11.840
Hold on.
So what's happening here?
Okay.

477
00:29:11.841 --> 00:29:13.790
So I'm drawing out each of those lines.
Okay.

478
00:29:13.791 --> 00:29:17.030
So I'm moving to a point and then I'm drawing a line and I'm saying,
what is it?

479
00:29:17.060 --> 00:29:21.200
What is the x,
y coordinate that?
I want to draw that or have that point.

480
00:29:21.380 --> 00:29:24.140
And what is the end point?
So basically it's saying,
okay,

481
00:29:24.170 --> 00:29:27.440
draw one line down vertically,
draw the next sign down,
vertically,

482
00:29:27.620 --> 00:29:29.390
dropped the other two lines horizontally,

483
00:29:29.600 --> 00:29:32.420
and then it does all that in one stroke.
And it's,

484
00:29:32.480 --> 00:29:34.490
it's called by the stroke function.
Okay?

485
00:29:34.940 --> 00:29:38.840
So that is what I'm going to do for the tic Tac toe code,

486
00:29:39.680 --> 00:29:43.240
and now I'm going to get straight the neural network.
Okay?

487
00:29:43.330 --> 00:29:47.430
So let's go ahead and get started with the neural network.
Um,
uh,

488
00:29:47.440 --> 00:29:51.940
the neural net code is going to use this,
this code,
um,
to,
uh,

489
00:29:52.030 --> 00:29:54.910
get better over time.
So now we're gonna write our neural net.
Okay.

490
00:29:55.240 --> 00:29:59.470
So I'm going to use on neural network.
Okay.
Code.

491
00:29:59.471 --> 00:30:02.530
I'm just gonna write that down and let me make sure,
you know,
you guys are,

492
00:30:03.100 --> 00:30:07.960
you guys are on point.
You guys are all good.
Everybody's,
everybody's Gucci.
Woo.

493
00:30:08.020 --> 00:30:10.960
All right.
Whew.
Okay.
Uh,

494
00:30:10.961 --> 00:30:15.340
we got people from all over the place and we're going to do a neural network
now.

495
00:30:15.370 --> 00:30:16.203
Okay.

496
00:30:16.770 --> 00:30:17.603
<v 2>MMM.</v>

497
00:30:18.480 --> 00:30:21.180
<v 0>Cool.
So let's get started.</v>

498
00:30:21.390 --> 00:30:26.130
So first we're going to do fine art neural net.
Buriable okay.

499
00:30:26.580 --> 00:30:30.690
And
how does that work?
Well,

500
00:30:30.810 --> 00:30:33.870
we were going to use this,
let me just,

501
00:30:35.490 --> 00:30:37.760
we're going just define on neural net.
Okay.
Uh,

502
00:30:38.070 --> 00:30:42.430
and we're going to write all of our functions inside of this neural net.
Um,

503
00:30:42.540 --> 00:30:47.210
and Oh,
we also want to make sure that we are,
I forgot about this.

504
00:30:47.290 --> 00:30:50.520
It's one of those javascript things about the browser use strict.

505
00:30:50.640 --> 00:30:54.810
So what does strict use strict allows you to place a program or function in a

506
00:30:54.870 --> 00:30:58.290
strict operating context?
What does that mean?
Uh,

507
00:30:58.650 --> 00:31:01.770
basically it prevents certain actions from being taken and,

508
00:31:01.920 --> 00:31:06.570
and throwing more exceptions.
So it's kind of like a safety check.
So,
you know,

509
00:31:06.571 --> 00:31:08.040
when you're in the browser you can have a,

510
00:31:08.041 --> 00:31:11.970
certain things happen that you don't want.
Like,
uh,
let's say,
I dunno,
some,

511
00:31:11.971 --> 00:31:16.170
some kind of crash or like a,
just an unexpected,
uh,
operation.

512
00:31:16.171 --> 00:31:19.800
Especially since we're using concurrency,
there can be problems like deadlocks,

513
00:31:19.950 --> 00:31:24.360
there can be problems like,
uh,
you know,
just like,
uh,

514
00:31:25.680 --> 00:31:26.820
and uh,

515
00:31:28.760 --> 00:31:32.110
just a lot of things can go wrong and strict helps prevent that.
Okay.
So,
so,

516
00:31:32.111 --> 00:31:35.990
so that's why we're using strict and,
uh,
let's go ahead and get started here.

517
00:31:35.991 --> 00:31:38.780
So we're going to write our,
our first function here for neural network,

518
00:31:39.020 --> 00:31:43.190
which is the get sizes function.
What does this do?
So,
okay,
let me,

519
00:31:43.191 --> 00:31:46.010
let me talk about this for a second and I'm going to have the chat open for this

520
00:31:46.011 --> 00:31:48.710
white,
we'll explain a little bit about this.
So,

521
00:31:48.840 --> 00:31:49.673
<v 2>mmm.</v>

522
00:31:51.160 --> 00:31:54.130
<v 0>Uh,
so,
so what we're doing here is we are building the neural net,
right?</v>

523
00:31:54.220 --> 00:31:56.230
This is a feed forward neural net.

524
00:31:56.260 --> 00:31:59.560
This is a feed forward neural net and a feed forward neural net.

525
00:31:59.620 --> 00:32:04.620
It's a three layer feed forward neural net with 128 hidden nodes.

526
00:32:04.950 --> 00:32:07.440
There are 128 it notes.
Okay.

527
00:32:07.740 --> 00:32:08.573
<v 2>MMM.</v>

528
00:32:09.470 --> 00:32:13.820
<v 0>And the,
and,
and why,
why are we doing this?
Uh,</v>

529
00:32:14.660 --> 00:32:17.150
the brain had,
oh,
let's think about the brain by the way.

530
00:32:17.360 --> 00:32:20.340
This is going to be a two minute tangent when I talk about the brain and then

531
00:32:20.341 --> 00:32:24.200
I'm gonna get back into the code.
Okay?
So the brain has like a hundred.

532
00:32:24.380 --> 00:32:26.750
It has a hundred billion neurons,

533
00:32:26.930 --> 00:32:30.140
which communicate through electral chemicals,
signals.

534
00:32:30.470 --> 00:32:33.950
And these neurons are connected through junctions,
known as synopsis,

535
00:32:34.250 --> 00:32:37.820
and each neuron receives thousands and thousands of connections with other

536
00:32:37.821 --> 00:32:41.270
neurons,
constantly signals to reach the cell body.
Okay?

537
00:32:41.360 --> 00:32:43.640
And the resulting some of the signal,

538
00:32:43.670 --> 00:32:47.450
if the resulting some of the signals surpasses a certain threshold,

539
00:32:47.750 --> 00:32:50.000
then our response is sent throughout the Axon.

540
00:32:50.360 --> 00:32:55.330
So we have to reach a certain threshold for that doubt,
for the value to,
um,

541
00:32:55.940 --> 00:32:59.780
continue to propagate forward through our,
through our neural network.
Okay?

542
00:33:00.770 --> 00:33:04.310
That's what we want to do.
I'm going to talk about the threshold in a second.

543
00:33:04.340 --> 00:33:08.090
Okay.
So let's go ahead and start with our good sizes function.
So forget sizes.

544
00:33:08.180 --> 00:33:11.360
And by the way,
guys,
check out.
Write this down.
Okay.
Write this down.

545
00:33:11.910 --> 00:33:15.470
MCB One 80 X.
I'll say it again.

546
00:33:15.570 --> 00:33:17.600
MCB One 80 x.

547
00:33:17.780 --> 00:33:21.530
It's a free course online by Harvard University,
which I took.

548
00:33:21.590 --> 00:33:23.730
I absolutely love.
It's going to it,

549
00:33:23.731 --> 00:33:27.830
it talks about the brain is the introduction to neuroscience and it provides a

550
00:33:27.831 --> 00:33:29.990
great gateway into neural networks.

551
00:33:30.110 --> 00:33:34.880
You see things like a feed forward recurrent,
these terms that we talk about,
uh,

552
00:33:34.900 --> 00:33:38.810
in,
in,
in machine learning.
They are actually there in the brain.

553
00:33:38.811 --> 00:33:42.620
And this is a great course to learn about the brain and kind of get biologically

554
00:33:42.621 --> 00:33:45.890
inspired by the beauty of our brain's internal neural networks.

555
00:33:45.891 --> 00:33:50.150
Remember MCB one adx great course.
Okay.
So let's get back to this.

556
00:33:50.390 --> 00:33:51.980
So what we're gonna do is we're going to return,

557
00:33:53.220 --> 00:33:53.850
<v 3>yeah,</v>

558
00:33:53.850 --> 00:33:58.290
<v 0>a collection of notes.
Notes are,
uh,
we have nodes in each layer of our network,</v>

559
00:33:58.291 --> 00:34:02.010
right?
A three layer feed forward neural network.
Each layer has a,

560
00:34:02.030 --> 00:34:03.750
an amount of notes.
So we'll,
we,

561
00:34:03.780 --> 00:34:07.410
what we want to do when this gets sizes function as we want to get the size of

562
00:34:07.411 --> 00:34:09.270
each layer and what is the size of each layer,

563
00:34:09.271 --> 00:34:13.170
it's going to be the number of nodes or neurons in each layer.

564
00:34:13.470 --> 00:34:17.100
So we're going to return nodes dot map funk and return notes up map.

565
00:34:17.730 --> 00:34:19.580
And we're going to say,
um,

566
00:34:21.330 --> 00:34:22.163
<v 3>okay.</v>

567
00:34:22.260 --> 00:34:26.330
<v 0>Uh,
for that layer,
that's a return,</v>

568
00:34:26.331 --> 00:34:28.880
that layers length.
All right?

569
00:34:28.881 --> 00:34:32.210
So we have the link is going to be a number of nodes in that layer.

570
00:34:32.750 --> 00:34:35.480
So that's going to give us the length.
This is a helper function.

571
00:34:35.840 --> 00:34:39.170
So the next one is,
well we,
we,
we know how to get the sizes,

572
00:34:39.171 --> 00:34:42.080
but let's make the actual node or neuron itself.

573
00:34:42.260 --> 00:34:43.550
So let's write a function for that.

574
00:34:43.760 --> 00:34:48.360
So we'll say make note given to layers index given,
uh,

575
00:34:48.380 --> 00:34:52.730
the index itself,
the sizes and the notes.
Okay?
Um,

576
00:34:55.540 --> 00:34:58.040
but so let's initialize this.
Hold on.

577
00:34:59.260 --> 00:35:00.660
<v 3>Mm.
Okay.</v>

578
00:35:05.630 --> 00:35:06.463
<v 0>Initialize it.</v>

579
00:35:08.520 --> 00:35:11.570
So each node,
let's,

580
00:35:11.580 --> 00:35:15.960
let's start off by initializing our node are note is going to have an input of

581
00:35:16.020 --> 00:35:19.770
zero.
That's going to be the initial input.
They have nothing.
Remember,

582
00:35:20.190 --> 00:35:23.160
there's nothing in there.
Uh,
it's going to start off at zero.

583
00:35:25.050 --> 00:35:27.540
And now we want to define our threshold

584
00:35:29.400 --> 00:35:30.780
fine threshold.

585
00:35:35.640 --> 00:35:40.230
Okay.
And I remember I about that threshold,
right?
The threshold is the,

586
00:35:40.360 --> 00:35:44.260
the,
the,
the top.
It is the,

587
00:35:45.140 --> 00:35:47.130
the threshold is the limit,
right?
And if,

588
00:35:47.190 --> 00:35:52.140
and if they amount of the sum of all the activation functions on the data from

589
00:35:52.141 --> 00:35:56.100
one net to the other,
if it reaches that threshold,
then it can propagate,

590
00:35:56.280 --> 00:36:00.270
but it has to reach that threshold for it to propagate just like in the brain.

591
00:36:00.690 --> 00:36:03.450
Okay?
So let's define the threshold and we're going to say if

592
00:36:05.190 --> 00:36:09.720
layers index,
it's less than the length of the sizes,

593
00:36:10.490 --> 00:36:12.720
uh,
of,
of the layers,

594
00:36:13.110 --> 00:36:17.370
then we're going to say get the threshold and we want you to initialize it as,

595
00:36:17.750 --> 00:36:22.530
um,
whatever comes out of this function.
Okay?
What is the function?

596
00:36:22.860 --> 00:36:26.630
We're going to say the type of nodes if it's undefined.
So as it,

597
00:36:26.730 --> 00:36:30.330
as in there's nothing there or,
uh,

598
00:36:30.360 --> 00:36:34.080
that value is one.
Then,
uh,

599
00:36:36.470 --> 00:36:37.240
the nodes,

600
00:36:37.240 --> 00:36:42.240
it's a get the layer index and the index.

601
00:36:43.100 --> 00:36:45.380
The other index,
let me,
let me talk about this.
What's,
what's happening here?

602
00:36:47.450 --> 00:36:49.690
Let's see.
Nope.

603
00:36:50.100 --> 00:36:53.580
Each node is connected to every other node in the next layer.

604
00:36:53.730 --> 00:36:58.590
So it's a two d matrix.
It's a two d matrix of values.
All right?

605
00:36:58.710 --> 00:37:01.170
Each node is connected to every other node.
Remember this,
weights,

606
00:37:01.171 --> 00:37:02.520
those connections,
those synapses,

607
00:37:02.880 --> 00:37:06.150
and it's a two d matrix and we're going to define the threshold just like that.

608
00:37:06.630 --> 00:37:11.190
Okay.
So now speaking of weights,
let's define our notes.
Weights.
Yeah,
we have.

609
00:37:11.360 --> 00:37:14.430
So let's define those ways.
So there's waste,
uh,

610
00:37:14.610 --> 00:37:18.700
are part of the node and we're going to say type of,
uh,

611
00:37:19.200 --> 00:37:23.940
nodes if it's undefined again.
So if there's,

612
00:37:24.060 --> 00:37:28.380
if there's nothing there or,
or if there's,
uh,
if there's,

613
00:37:28.381 --> 00:37:32.850
if there's nothing there or,
uh,
hold on.

614
00:37:37.550 --> 00:37:38.383
<v 3>Okay.</v>

615
00:37:38.970 --> 00:37:41.160
<v 0>You were re sizes</v>

616
00:37:45.770 --> 00:37:46.603
one,

617
00:37:48.090 --> 00:37:51.240
let me just write this down and then I'm going to define what I'm talking about

618
00:37:51.241 --> 00:37:55.980
here.
A layer index,
and then I'm going to pull up the chat for a second.

619
00:37:56.380 --> 00:38:00.900
So let's see where you guys are at.
Um,

620
00:38:02.820 --> 00:38:06.660
function
w

621
00:38:08.490 --> 00:38:13.050
and return.
Okay.
Okay.

622
00:38:13.051 --> 00:38:15.930
So let me talk about what's happening here.
Okay.
So,

623
00:38:18.290 --> 00:38:19.123
<v 3>oh,</v>

624
00:38:23.110 --> 00:38:28.030
<v 0>okay.
So we have our weights up,
our notes and if it is empty or there is,</v>

625
00:38:28.180 --> 00:38:32.760
if we,
uh,
if the notice empty or there's an,

626
00:38:32.800 --> 00:38:35.320
there's an array with,
with,
with some value it,

627
00:38:35.650 --> 00:38:39.760
then we want to return the number of weights in that,
in that node.

628
00:38:39.970 --> 00:38:43.130
And we're going to update though the,
the connections in that node.
Uh,

629
00:38:43.210 --> 00:38:45.820
bio this wait,
stop.
Map function.
Okay.
And we're,
we're,

630
00:38:45.880 --> 00:38:50.020
and we're going to return the value.
So let me define the weights.

631
00:38:50.050 --> 00:38:53.080
That's what this is doing is defining the weights.
Okay.

632
00:38:53.380 --> 00:38:57.250
Now let me see if anybody has any questions here.
See what do we got here?

633
00:38:57.251 --> 00:38:58.084
What have we got here?

634
00:38:58.970 --> 00:38:59.803
<v 3>MMM.</v>

635
00:39:04.620 --> 00:39:05.453
<v 1>Okay.</v>

636
00:39:05.570 --> 00:39:10.420
<v 0>Dah,
Dah,
Dah,
Dah.
Nothing in the chat.
All right,
cool.
Cool.
Cool.</v>

637
00:39:11.740 --> 00:39:14.350
Okay.
All right,
cool.
Cool.

638
00:39:17.770 --> 00:39:21.430
Okay,
so those are our functions and when we do a,

639
00:39:21.431 --> 00:39:25.840
and now we can return that note.
Okay.
That's the end of that,
uh,
function.

640
00:39:25.841 --> 00:39:28.720
And we can return our node.
Okay.

641
00:39:29.060 --> 00:39:29.893
<v 3>MMM.</v>

642
00:39:31.450 --> 00:39:36.240
<v 0>Boom.
So now let's define,
so that's the node.</v>

643
00:39:36.390 --> 00:39:40.770
Now it's defined the network itself,
the actual network.
It's a neural network.

644
00:39:40.840 --> 00:39:44.250
Let's define that network.
And for the input we should give it,

645
00:39:44.310 --> 00:39:46.980
we could either create are,
we can either initialize our network,

646
00:39:47.210 --> 00:39:51.000
the asides is value or a node value as in,
uh,

647
00:39:51.020 --> 00:39:54.570
the size of a layer is equal to the number of nodes.

648
00:39:54.750 --> 00:39:58.770
So we're just going to say sizes or nodes.
Okay.
We can initialize it either way.

649
00:40:00.400 --> 00:40:01.233
<v 3>MMM.</v>

650
00:40:02.090 --> 00:40:05.720
<v 0>And we'll define,
we'll define variables for both of these things.</v>

651
00:40:05.721 --> 00:40:09.680
So for the sizes and for the notes.
So we want to say if,
uh,

652
00:40:11.670 --> 00:40:16.670
the array is an array of sizes or nodes that value we had for the perimeter and

653
00:40:19.610 --> 00:40:24.530
the array is an array.
And if it's,

654
00:40:24.680 --> 00:40:28.490
so let me be more specific about what I'm doing here.
So,
um,

655
00:40:29.780 --> 00:40:31.610
sizes or nodes,
hold on.

656
00:40:32.540 --> 00:40:34.880
And if there's something in there

657
00:40:38.260 --> 00:40:39.093
<v 3>and,</v>

658
00:40:40.220 --> 00:40:43.610
<v 0>okay,
so first of all,
so what is it saying?
This is saying it,
it,
first of all,</v>

659
00:40:43.611 --> 00:40:46.880
if they're,
if the,
if the parameter is not empty,

660
00:40:47.180 --> 00:40:50.090
then we want to take those values and we're going to initialize them.

661
00:40:50.440 --> 00:40:54.200
I thought that the local variables that we initialize,

662
00:40:54.530 --> 00:40:58.000
we're going to use that get sizes function that we defined and we're going to

663
00:40:58.010 --> 00:41:02.690
use a sizer nodes,
a parameter,
and then we're going to initialize our notes.

664
00:41:02.840 --> 00:41:06.910
Okay.
There are two values that we're thinking about here.
Sizes or notes,

665
00:41:07.760 --> 00:41:12.030
um,
else,
uh,

666
00:41:12.140 --> 00:41:16.550
sizes equals sizes or notes.
Okay.

667
00:41:17.130 --> 00:41:20.480
Um,
that's our else value.

668
00:41:20.930 --> 00:41:25.930
And now we want to define how many nodes we have.

669
00:41:26.960 --> 00:41:31.910
Okay.
So now we're going to define how many notes we have.
So Blah,
blah,

670
00:41:31.911 --> 00:41:35.090
blah.
So how many notes do we have?

671
00:41:35.570 --> 00:41:38.390
The map function is going to help us get that,
that value.

672
00:41:39.010 --> 00:41:42.560
And it's going to be a callback.
It's going to be a be a function called back,
uh,

673
00:41:42.590 --> 00:41:44.710
where we have a size and the,
um,

674
00:41:45.510 --> 00:41:46.200
<v 1>okay.</v>

675
00:41:46.200 --> 00:41:49.180
<v 0>Iterator as a parameter.
Okay.
Which is,
which we're going to,</v>

676
00:41:49.500 --> 00:41:52.790
we're going to use to,
to,
to iterate through this,
uh,

677
00:41:54.370 --> 00:41:55.203
<v 3>mmm.</v>

678
00:41:57.250 --> 00:42:00.670
<v 0>Which is we're going to use it to iterate through the array count,
that number,</v>

679
00:42:00.671 --> 00:42:03.940
values.
And then that's going to be,
uh,
that at the number of nodes that we have.

680
00:42:04.330 --> 00:42:06.370
Okay.
So we're going to say bar,

681
00:42:07.660 --> 00:42:11.480
each layer is going to be an array,

682
00:42:12.150 --> 00:42:15.040
a initialized by a size.
Okay.
And so,

683
00:42:15.310 --> 00:42:18.850
and so Blair is initialized as an array of sizes.

684
00:42:18.851 --> 00:42:22.260
So let's do our iteration to count the number of notes we're going to have.

685
00:42:22.280 --> 00:42:25.700
We're going to count the number of notes.
So say bar j

686
00:42:27.580 --> 00:42:32.210
zero.
And uh,
Jay.
And remember Jay is just,
it's arbitrary.

687
00:42:32.330 --> 00:42:35.380
It's less than the size because we're iterating through the size and we're going

688
00:42:35.381 --> 00:42:38.950
to say a plus plus J.
Okay.
So we're going to iterate through peach.

689
00:42:41.370 --> 00:42:42.460
Uh,
and so,

690
00:42:42.580 --> 00:42:45.940
and then I'm going to pull up the chat and we'll answer a few questions or if

691
00:42:46.240 --> 00:42:51.190
any,
if there are.
And what is that?
So what does,
what does each layer,

692
00:42:51.500 --> 00:42:52.600
uh,
we're going to,
we're,
we're,

693
00:42:52.601 --> 00:42:57.601
we're giving those layers values here and we're saying make a node a given the

694
00:42:58.990 --> 00:43:03.880
length given where we are given the sizes and given the number of notes.

695
00:43:04.030 --> 00:43:06.580
Okay?
And that's how we're going to define each of our layers.

696
00:43:06.910 --> 00:43:09.110
And when we're done with that,
when we've,
when we've,
uh,

697
00:43:09.210 --> 00:43:11.590
initialize you two our layers,
we're doing two things here.

698
00:43:11.610 --> 00:43:15.250
We're defining our notes and we're initializing our layers at the same time.

699
00:43:15.850 --> 00:43:20.470
Okay.
That's so,
and then we'll return that value when it's done.
Okay.
And,

700
00:43:20.560 --> 00:43:23.230
uh,
so there's that.
Um,

701
00:43:27.110 --> 00:43:31.630
okay,
so who got that there?
Where do I get the t shirt?
Uh,

702
00:43:31.760 --> 00:43:35.750
guys,
just wait a second.
I'm going to,
I'm going to launch a,
a clothing line soon.

703
00:43:35.780 --> 00:43:39.400
Okay.
Right.
No self promotion guys.

704
00:43:40.780 --> 00:43:45.480
Uh,
okay.
So,
so that's that.
Um,

705
00:43:46.200 --> 00:43:49.350
okay.
One more function in this class.
One more function in this class.

706
00:43:49.860 --> 00:43:54.600
So we want to,
uh,

707
00:43:54.610 --> 00:43:59.410
we want to set the weight values.
Okay.
We're going to set the weight values.

708
00:43:59.810 --> 00:44:04.810
We're going to say the prototype of our neural network is going to set our

709
00:44:05.171 --> 00:44:06.070
weight values.

710
00:44:08.040 --> 00:44:08.873
<v 3>MMM.</v>

711
00:44:11.420 --> 00:44:13.460
<v 0>All right.
So we could also,
if we wanted to,</v>

712
00:44:13.461 --> 00:44:15.410
we could write a get punchy so we could get our weights,

713
00:44:15.411 --> 00:44:18.380
but we're just going to write a set weights function.
Okay.
Um,

714
00:44:20.440 --> 00:44:21.100
<v 1>okay.</v>

715
00:44:21.100 --> 00:44:25.600
<v 0>Function is going to be the neck thoughts.
Set weights.
Okay.
Um,</v>

716
00:44:27.040 --> 00:44:30.820
given the,
so we're going to give it weight as a parameter.

717
00:44:30.821 --> 00:44:34.320
What those weights going to be while they're going to be a two d matrix,

718
00:44:35.190 --> 00:44:37.620
each layer for each node,
each node.

719
00:44:37.910 --> 00:44:40.270
So in inside of each layer in our neural network,

720
00:44:40.271 --> 00:44:45.271
there are a collection of nodes and each node has a two d matrix of weights that

721
00:44:45.421 --> 00:44:48.510
connected to every other node in the next layer.

722
00:44:48.840 --> 00:44:52.890
And we want to set the values for those weights.
And how are we updating this?

723
00:44:52.920 --> 00:44:56.310
Well,
it's not through back propagation it through genetic algorithm,
right?

724
00:44:56.430 --> 00:45:00.170
So instead of just saying we're going to update the weights constantly,
um,

725
00:45:00.540 --> 00:45:04.260
the backpropagation,
uh,
uh,
and gradient descent,

726
00:45:04.530 --> 00:45:06.710
we're going to update the weights by putting them,
by,

727
00:45:06.770 --> 00:45:10.020
by having several neural nets and just having them play like I showed you in the

728
00:45:10.021 --> 00:45:12.810
web app.
And then taking those weights,
uh,

729
00:45:14.100 --> 00:45:16.670
taking the weight of the best ones and,
and,

730
00:45:16.730 --> 00:45:21.000
and updating the only the best neural nets and then having those and then,

731
00:45:21.180 --> 00:45:24.750
and then praying more from those.
Okay.
So,

732
00:45:26.690 --> 00:45:28.760
so,
okay,
so,
so for each

733
00:45:29.240 --> 00:45:30.073
<v 3>node</v>

734
00:45:34.470 --> 00:45:35.303
we're going to

735
00:45:40.240 --> 00:45:41.790
<v 0>say,
well,
where are we?</v>

736
00:45:41.940 --> 00:45:45.960
Where are we in terms of our layer and where are we in terms of the ways?

737
00:45:45.990 --> 00:45:49.530
So there are two indexes here,
the index of where we are in the layer,

738
00:45:49.531 --> 00:45:54.060
and then the index of where we are in though in the weights or a matrix.
Okay.

739
00:45:54.061 --> 00:45:58.610
So,
um,
we're going to take the weights of our note.

740
00:45:58.820 --> 00:46:01.810
And by the way,
this code is going on.
Get hub guys.
I'm going to,
I'm going to,

741
00:46:01.930 --> 00:46:05.690
within an hour of me finishing this,
I'm going to put post the code on get hub,

742
00:46:05.900 --> 00:46:10.580
the complete code,
including the html and the CSS,
which is actually quite long.

743
00:46:10.900 --> 00:46:13.520
Uh,
which I'm not going to do in this.
I'm just doing the logic.

744
00:46:13.910 --> 00:46:18.830
I'm just doing the hard logic for this,
the logic that matters.
Okay.
So,

745
00:46:18.860 --> 00:46:22.070
um,
so our weights are going to be,

746
00:46:26.060 --> 00:46:31.010
um,
we're going to take the index that we were,
we were given,

747
00:46:31.310 --> 00:46:34.730
and then we're going to take the index,
right?
Both of those were given.

748
00:46:35.000 --> 00:46:39.620
We're going to map it to,
um,
yeah,
this callback function.

749
00:46:39.650 --> 00:46:43.490
And then we're going to return the value of w,
which is going to be our,
uh,

750
00:46:43.730 --> 00:46:48.110
wait two d matrix.
Okay.
Uh,
now at the end of this,

751
00:46:48.380 --> 00:46:49.213
we're going to

752
00:46:51.140 --> 00:46:55.700
say that our neural net equals the neural net that we've just initialize.

753
00:46:56.270 --> 00:46:57.670
Okay.
And,
um,

754
00:46:58.920 --> 00:47:01.160
<v 3>and then we can return that.</v>

755
00:47:03.760 --> 00:47:06.640
<v 0>Okay.
So now let me see the chat and,</v>

756
00:47:11.030 --> 00:47:15.260
okay.
Okay.
So now,
so,
so,

757
00:47:15.261 --> 00:47:20.000
so let me,
let me show you guys the dent.
Okay.
So that's,
Oh,
um,
so let's,

758
00:47:20.060 --> 00:47:23.300
let's go over what I've,
what I've done so far.
Um,

759
00:47:23.510 --> 00:47:27.830
so what I've done is I've and utilize my board.
Uh,
I've initialize the,

760
00:47:27.860 --> 00:47:31.360
I've created a set of helper methods to get the pieces to check if it's empty,

761
00:47:31.670 --> 00:47:32.503
uh,

762
00:47:33.000 --> 00:47:33.560
<v 1>okay.</v>

763
00:47:33.560 --> 00:47:35.090
<v 0>To move it,
to get the pieces.</v>

764
00:47:35.390 --> 00:47:38.570
Then I've initialize the game state and I've used the prototype,

765
00:47:38.680 --> 00:47:41.840
a function of Javascript of that game.

766
00:47:41.841 --> 00:47:45.110
Objects to define a bunch of very important moves,

767
00:47:45.111 --> 00:47:47.450
like checking a two pieces are equal to check it.

768
00:47:47.451 --> 00:47:52.430
Two squares are equal to get the piece to,
to move,
um,
to see who the winner is.

769
00:47:52.431 --> 00:47:54.260
And then to draw the board is in canvas.

770
00:47:54.920 --> 00:47:58.860
I've created a neural net function or a neural net class.
Uh,

771
00:47:58.970 --> 00:48:03.380
that's that initializes unknown.
What is a node look like?
Well,

772
00:48:03.390 --> 00:48:04.640
and node is a,

773
00:48:04.940 --> 00:48:09.440
an object that has connections to every other node in every layer of our neural

774
00:48:09.441 --> 00:48:10.274
network.

775
00:48:10.390 --> 00:48:11.223
<v 3>MMM.</v>

776
00:48:12.030 --> 00:48:15.990
<v 0>There is a library called [inaudible] Vanette js cray by Andre Car Pafi,</v>

777
00:48:16.530 --> 00:48:20.760
which I've met.
He's a cool guy.
Um,
but um,

778
00:48:21.840 --> 00:48:25.500
yeah,
but that's not what we're doing right now.
I would thought about doing that.

779
00:48:25.501 --> 00:48:28.200
I might die.
I,
I will do that in a future video.
Um,

780
00:48:30.880 --> 00:48:34.420
and uh,
we've,
we've our node,
when this slides our network,

781
00:48:34.421 --> 00:48:38.290
we set the weight values for each of those.
Okay.
And so that's how,

782
00:48:39.840 --> 00:48:44.430
so that's how,
um,
that is working and,

783
00:48:45.000 --> 00:48:47.490
and I will fully comment the code and post this on get hub.

784
00:48:47.580 --> 00:48:50.910
It's not a recurrent net.
It is a feed forward neural net.
So let me,

785
00:48:50.911 --> 00:48:55.650
let me just show you guys this code.
Okay.
So
hold on.

786
00:48:56.730 --> 00:48:57.563
We'll just look like

787
00:48:58.520 --> 00:48:59.353
<v 3>mmm.</v>

788
00:49:00.840 --> 00:49:03.030
<v 0>So that's what that looks like and</v>

789
00:49:04.690 --> 00:49:05.400
<v 4>okay.</v>

790
00:49:05.400 --> 00:49:07.950
<v 0>Getting a call right now.
Do not call me while I'm alive,</v>

791
00:49:07.951 --> 00:49:10.200
you know what I'm saying?
Okay.
So,
so that's what that,

792
00:49:10.230 --> 00:49:15.230
what that has done and what I want to do is I want to show you guys what that

793
00:49:17.730 --> 00:49:18.660
looks like.

794
00:49:19.420 --> 00:49:20.253
<v 3>MMM.</v>

795
00:49:21.710 --> 00:49:25.820
<v 0>So we're going to go to the,
um,
that value.</v>

796
00:49:28.050 --> 00:49:29.700
I could run this up a local server.

797
00:49:30.510 --> 00:49:34.880
<v 3>MMM.
Um,</v>

798
00:49:35.960 --> 00:49:36.620
but

799
00:49:36.620 --> 00:49:41.600
<v 0>I don't want to do that right now.
I want to,
uh,
hold on.</v>

800
00:49:48.350 --> 00:49:50.500
Where was this now?
Open up chrome from second.

801
00:49:57.040 --> 00:49:59.170
What was it?
T

802
00:50:07.350 --> 00:50:12.100
was it,
what was it?
It was something,
but essentially,

803
00:50:12.210 --> 00:50:13.043
um,

804
00:50:15.280 --> 00:50:19.140
that was what it was and um,

805
00:50:21.520 --> 00:50:25.150
Oh god,
it's shit.
All right.
Okay.
So,
um,

806
00:50:28.440 --> 00:50:30.540
so that's what that was and

807
00:50:32.430 --> 00:50:37.150
go to showing you guys my history here.
Okay.
So that is our,
uh,

808
00:50:37.200 --> 00:50:42.100
Mac book is promoting itself,
right?
Okay.
So,
so that was the code and,

809
00:50:43.930 --> 00:50:44.763
<v 1>okay.</v>

810
00:50:45.010 --> 00:50:47.050
<v 0>Uh,
what I want to do is I want to,</v>

811
00:50:47.290 --> 00:50:51.370
if I can get the link to this show,
you guys,
you know what,

812
00:50:51.371 --> 00:50:55.060
I'm going to post the link in the description and uh,

813
00:50:55.480 --> 00:50:59.610
then I'm going to,
the link to the web app is going to be there.
But,

814
00:50:59.630 --> 00:51:04.480
but what happened was I,
I had that,
I had the demo,

815
00:51:04.481 --> 00:51:07.540
but I just can't find the link to it right now.

816
00:51:07.690 --> 00:51:12.690
So what I'm going to do is I'm going to stop the screen share here and

817
00:51:16.090 --> 00:51:19.420
stop screen sharing and I'm going to do me okay.
So,
uh,

818
00:51:19.421 --> 00:51:23.920
an ending five minute Q and a and then we can get started.
Okay.

819
00:51:24.220 --> 00:51:28.120
I'll say,
am I still up there?
Yes.
Yeah,
I'm still there.
Okay.
So yeah.
Okay,
cool.

820
00:51:28.240 --> 00:51:32.530
So a five minute Q and a,
can you make the same tic tac toe with Java?
Yeah,

821
00:51:32.531 --> 00:51:36.670
absolutely.
Uh,
I,
I,
uh,
don't have a link to that,

822
00:51:36.910 --> 00:51:41.050
but if you just search tic tac toe on get hub and then just Java,

823
00:51:41.051 --> 00:51:45.910
I promise you,
you will find results.
Okay?
Yes,
there we go.
Thank you.

824
00:51:45.911 --> 00:51:50.440
Chad Cha.
He showed,
uh,
where it's,
where it's at.
Where it's at.

825
00:51:50.530 --> 00:51:54.130
Exactly.
You know what,
I'm going to show you guys the demo of this.
Okay,

826
00:51:54.360 --> 00:51:57.010
let me see.
Let me show you guys then what?
You guys deserve a demo.
So,
so,
so,

827
00:51:57.011 --> 00:52:01.790
so I'm going to screen share.
Oh,
I'm so excited.
I mean,

828
00:52:01.840 --> 00:52:05.950
let me start the screen share.
Okay guys,
check this out.
Okay.
So what is,

829
00:52:05.951 --> 00:52:08.020
what's happening?
This is what is going to look like.
We take our,

830
00:52:08.050 --> 00:52:10.450
we take our weights,
we take our weights,
okay?

831
00:52:10.520 --> 00:52:15.190
So is it's going to learn via genetic programming and then we can,

832
00:52:15.280 --> 00:52:18.880
we can,
we can test it.
So what does that look like?
Hold on.

833
00:52:21.220 --> 00:52:22.900
Okay,
so we're going to say AI neural net,

834
00:52:23.410 --> 00:52:26.770
and we're going to paste those weights in the weights that it learned from

835
00:52:26.771 --> 00:52:30.760
genetic pro,
uh,
from,
from,
from this genetic environment.

836
00:52:31.060 --> 00:52:32.680
And we'll paste those weights in this.

837
00:52:32.681 --> 00:52:36.520
Remember these weights are a matrix of values of what it's learned through

838
00:52:36.521 --> 00:52:39.010
playing.
Okay?
And I'll play something.
It's going to think,

839
00:52:39.011 --> 00:52:39.990
and then it's going to play it.

840
00:52:40.270 --> 00:52:41.650
And then I'll play something and it's going to think,

841
00:52:41.651 --> 00:52:43.420
and then it's gonna be like,
look at the smart thing.

842
00:52:43.600 --> 00:52:45.520
It's trying to go in that bottom left corner.

843
00:52:45.700 --> 00:52:49.120
I am not going to let you because you are not smart enough to beat a human yet.

844
00:52:49.540 --> 00:52:51.670
Okay.
So that's what that looks like.
Okay.

845
00:52:51.671 --> 00:52:55.030
If I'm going to stop screen sharing again and back to my now three minute Q and

846
00:52:55.031 --> 00:52:58.840
a,
but,
uh,
whoever sent me the link to that.
Thank you so much.
Okay,

847
00:52:58.841 --> 00:53:02.020
so three more minutes,
Jupiter notebook that I'm going to,
you know what,

848
00:53:02.021 --> 00:53:06.910
I'm going to start using more Jupiter notebooks,
um,
for sure,
uh,

849
00:53:06.911 --> 00:53:11.820
in the future.
Great.
A great thing.
Uh,
thanks David for that compliment.
Uh,

850
00:53:12.310 --> 00:53:16.990
can you do more slow tutorials?
Focus more on understanding the theory?
Yes,

851
00:53:16.991 --> 00:53:21.280
absolutely.
Max,
I,
I'm getting better at this.
Where did you go to the schooling?

852
00:53:21.310 --> 00:53:24.880
I went to Columbia.
I studied myself on the Internet,
all this stuff on my,

853
00:53:25.710 --> 00:53:29.010
how is this better than simply writing a tic Tac toe game using the Monte Carlo

854
00:53:29.011 --> 00:53:30.270
method?
Um,

855
00:53:31.170 --> 00:53:34.890
so the Monte Carlo tree search is actually quite

856
00:53:36.540 --> 00:53:40.170
effective.
And,
uh,
and Alphago,

857
00:53:40.230 --> 00:53:44.660
Alphago used Monte Carlo,
how is it better if not better?
Actually?
Um,

858
00:53:44.700 --> 00:53:49.500
it's just different.
Did you add more Grady or hair spark?
Uh,
I didn't.

859
00:53:49.501 --> 00:53:51.420
It's just,
it's just always like that now,

860
00:53:51.720 --> 00:53:56.550
but I'm going to regret it in the future.
Is Training more with more training,

861
00:53:56.551 --> 00:53:59.010
more with more layers,
make the AI better.

862
00:53:59.960 --> 00:54:00.793
<v 2>Uh,</v>

863
00:54:02.140 --> 00:54:06.730
<v 0>generally the more layers you add,
the better your neural network is.
Uh,</v>

864
00:54:06.760 --> 00:54:11.290
but the trick is to just to just have as many layers as you need because the

865
00:54:11.291 --> 00:54:14.860
more layers you add,
the more computation there is.
Right?
So like always,

866
00:54:14.861 --> 00:54:17.310
there's that trade off.
It's Raj.
I would like you,

867
00:54:17.380 --> 00:54:21.040
I would like to suggest to you a simple game I made and went to implement a Bot

868
00:54:21.150 --> 00:54:26.150
intuit loose Oussama definitely post that in the comments which books are

869
00:54:26.771 --> 00:54:28.070
useful.
Um,

870
00:54:29.350 --> 00:54:33.820
Andrew on has a new book out called machine learning yearning.
Uh,
Ian Goodfellow,

871
00:54:34.090 --> 00:54:37.270
uh,
has a book out who's one of the researchers that opening I,
uh,

872
00:54:37.450 --> 00:54:40.420
called deep learning,
which I would definitely read.
Uh,

873
00:54:41.470 --> 00:54:43.810
read is the gray hair related to machine learning.

874
00:54:43.840 --> 00:54:47.320
The gray hair is just my style.
You know what I mean?
Which laptop are you using?

875
00:54:47.321 --> 00:54:51.970
A Mac book pro 2015.
No,
we didn't say macro pro 2016 with the force touch.

876
00:54:52.390 --> 00:54:56.170
Could you make a simple tutorial about deep learning which learned you from zero

877
00:54:56.171 --> 00:55:00.610
to hero in that field?
That is coming up next year and by next year,

878
00:55:00.611 --> 00:55:04.960
I mean in January it's going to be a from scratch series that I'm going to make.

879
00:55:05.510 --> 00:55:10.480
Um,
hi Saroj from where can we get the data set for an AI girlfriends?
Um,

880
00:55:11.740 --> 00:55:15.910
look for tat logs for um,
uh,
chat,

881
00:55:16.000 --> 00:55:19.290
chat room chat logs for like a dating sites.

882
00:55:19.720 --> 00:55:23.500
Are you slowly building a cell phoning I AI for Retro Games maybe in the future?

883
00:55:24.250 --> 00:55:26.070
Uh,
yes.
I,

884
00:55:26.071 --> 00:55:30.310
I mean I am going to focus more on games in the future.
Yes,
absolutely.

885
00:55:31.120 --> 00:55:36.040
Okay.
Do you recommend js or python for AI learning?
Python.

886
00:55:36.370 --> 00:55:38.170
Python.
Uh,
but,
but,

887
00:55:38.171 --> 00:55:42.250
but the con net js library by Andre is actually pretty good.

888
00:55:42.940 --> 00:55:47.110
Jake,
glad to have you heard my life.
Uh,
livecast harsh.
Thank you.

889
00:55:48.200 --> 00:55:51.070
Up a poor,
can we make more similar programs?
Yes.

890
00:55:51.080 --> 00:55:52.630
Do a neuron that for playing tetris.

891
00:55:52.660 --> 00:55:57.030
I eventually make a note on that percent personally.
Okay.
So,
um,
I,
I'm,

892
00:55:57.040 --> 00:56:01.240
I'm going to tell a short story and then we're done.
Um,
and video with the song.

893
00:56:01.270 --> 00:56:06.070
That's a great idea.
You know what I'm live,
so I'm just gonna Freestyle.
Okay.
So,

894
00:56:06.160 --> 00:56:06.993
<v 2>uh,</v>

895
00:56:07.800 --> 00:56:09.230
<v 0>by the way,
I had this,
uh,
my,</v>

896
00:56:09.280 --> 00:56:13.050
my mentor at meetup when I worked at meetup as an intern.
Yeah.
He was like,

897
00:56:13.410 --> 00:56:15.090
I remember like being really confused.
I was,
it was,

898
00:56:15.091 --> 00:56:18.450
I was an ios programmer at meetup for the summer and I was like trying to figure

899
00:56:18.451 --> 00:56:21.300
out this problem and it,
and if any of you guys have used x code before,

900
00:56:21.480 --> 00:56:23.590
you know that when something goes wrong and you have a break point,

901
00:56:23.740 --> 00:56:26.830
it shows a bunch of assembly,
which I've always kind of just like ignored.

902
00:56:27.130 --> 00:56:28.780
But he was like,
I was like,
I had,

903
00:56:29.350 --> 00:56:32.560
I was focusing on his problem for like four or five hours and I just couldn't

904
00:56:32.561 --> 00:56:36.520
figure it out.
And then if he comes in,
uh,
my mentor Michael Gray,

905
00:56:36.760 --> 00:56:37.391
and he's just like,

906
00:56:37.391 --> 00:56:40.150
you looked at the assembly and he's just like within 30 seconds,
he's like,

907
00:56:41.080 --> 00:56:45.640
that's a problem.
Looking at the assembly.
How gangster is that?

908
00:56:46.420 --> 00:56:50.380
So yeah,
a neural network for assembly.
Maybe a,
but maybe in the future.

909
00:56:50.590 --> 00:56:52.840
So I'm going to end this with that freestyle rap.
Someone did.

910
00:56:52.900 --> 00:56:56.410
And I'll freestyle about machine learning.
So someone give me a topic,
I'll go,

911
00:56:56.560 --> 00:57:00.160
it's going to be a one minute freestyle.
I want to say a topic,

912
00:57:00.730 --> 00:57:03.490
just someone say a topic.
I'll just wait for a topic.
Here we go.

913
00:57:03.491 --> 00:57:08.470
Whatever is the first topic,
uh,
assembly as bad.
So let's just do assembly.

914
00:57:08.590 --> 00:57:11.500
Okay.
I love assembly.
I'm like,

915
00:57:11.950 --> 00:57:15.850
it's like my enemy because it's so hard that I cannot see what is happening.

916
00:57:16.090 --> 00:57:19.450
My mind is so free when I look at it,
it looks at me and it says,

917
00:57:19.510 --> 00:57:22.810
you can't beat me because I'm better than you.
Don't.
You see?
Okay.

918
00:57:22.811 --> 00:57:26.590
So that was my short 15 second freestyle.
Okay.

919
00:57:26.591 --> 00:57:30.370
So anyway,
thanks guys for watching.
For now.

920
00:57:30.400 --> 00:57:34.090
I've got to go focus on this video.
I'm making,

921
00:57:34.480 --> 00:57:36.880
so thanks for watching.
I love you guys.

922
00:57:38.300 --> 00:57:41.140
Code is going up very soon.
Join the slack channel,
by the way.

923
00:57:41.290 --> 00:57:43.390
There's a slack channel.
Continue the conversation there.

924
00:57:43.510 --> 00:57:47.110
It's in the description of every one of my videos now.
Wasn't even a minute.

925
00:57:47.140 --> 00:57:52.030
I know I,
I'm getting better.
Okay,
so thanks guys.
Love you.
Okay,

926
00:58:01.010 --> 00:58:03.080
how do I end the session?
There we go.

