WEBVTT

1
00:00:00.050 --> 00:00:03.810
Oh world.
It's the Raj and initial coin offerings.

2
00:00:03.840 --> 00:00:05.880
There's lots of misinformation out there,

3
00:00:05.881 --> 00:00:10.620
so let's talk about what they really are and then we'll create our own ICO using

4
00:00:10.621 --> 00:00:13.170
a newer programming language called solidity.

5
00:00:13.710 --> 00:00:17.610
There's a reason that there is a really high concentration of startups and the

6
00:00:17.611 --> 00:00:19.980
SF bay area raising venture capital.

7
00:00:19.981 --> 00:00:23.760
Money is much easier there than anywhere else in the world,

8
00:00:23.910 --> 00:00:25.260
but if we look at the data,

9
00:00:25.410 --> 00:00:29.490
there isn't a corresponding large concentration of blockchain startups there.

10
00:00:29.700 --> 00:00:31.740
Those are way more distributed globally.

11
00:00:32.190 --> 00:00:35.790
That's because token sales have democratized funding for startups.

12
00:00:36.030 --> 00:00:41.030
Anyone anywhere can now raise insane amounts of capital ics or a new way to fund

13
00:00:41.491 --> 00:00:43.740
projects through the sale of crypto coins,

14
00:00:43.770 --> 00:00:47.520
also called Tokens and the rabbit hole goes deep learning.

15
00:00:48.240 --> 00:00:50.950
So let's start with some cryptocurrency one-on-one.

16
00:00:51.570 --> 00:00:55.560
As the Internet became mainstream in the nineties innovation absolutely

17
00:00:55.561 --> 00:00:56.394
flourished.

18
00:00:56.430 --> 00:01:00.270
People started realizing that the Internet enabled the creation of new types of

19
00:01:00.271 --> 00:01:02.100
businesses with global reach.

20
00:01:02.310 --> 00:01:06.450
The need for an online payment network became apparent and software was created

21
00:01:06.451 --> 00:01:11.160
to incorporate legacy money transfer systems like ACH and visa online.

22
00:01:11.490 --> 00:01:14.310
This worked well enough,
but payments needed a clearinghouse,

23
00:01:14.340 --> 00:01:18.180
a middleman to facilitate all transactions.
Because of this,

24
00:01:18.181 --> 00:01:20.280
transactions were slow and required a fee.

25
00:01:20.520 --> 00:01:24.930
A few early pioneers realize that a payment protocol could transmit value

26
00:01:24.931 --> 00:01:28.950
directly without middlemen and that would be a faster and cheaper solution.

27
00:01:29.250 --> 00:01:30.800
A few attempts at this were made.

28
00:01:30.810 --> 00:01:34.110
A computer scientist named Nick Sabo created big gold,

29
00:01:34.260 --> 00:01:37.920
but none of them were able to succeed because they didn't utilize the correct

30
00:01:37.921 --> 00:01:40.020
combination of technical ideas.

31
00:01:40.260 --> 00:01:45.260
Then in 2008 on unknown programmer named Satoshi Nakamoto released a white paper

32
00:01:45.871 --> 00:01:49.560
and associated code for a digital currency he called bitcoin.

33
00:01:49.830 --> 00:01:52.200
Bitcoin is a peer to peer protocol.

34
00:01:52.230 --> 00:01:56.580
It's a set of rules that govern the storage creation and transmission of

35
00:01:56.581 --> 00:01:59.880
monetary value online.
It's not owned by anyone,

36
00:01:59.881 --> 00:02:02.490
but anyone can build applications on top of it.

37
00:02:02.730 --> 00:02:06.390
Similar to how no one owns email protocols like I map and pump three,

38
00:02:06.391 --> 00:02:09.870
but Google and Yahoo have built email services on top of them.

39
00:02:10.140 --> 00:02:14.070
The bitcoin protocol uses public key cryptography to create a key pair that

40
00:02:14.071 --> 00:02:15.870
controls access to bitcoins.

41
00:02:16.110 --> 00:02:20.880
The key pair consists of a private key and derived from it.
A unique public key.

42
00:02:21.060 --> 00:02:25.380
The public key is used to receive bitcoins and the private key is use it signed

43
00:02:25.381 --> 00:02:27.690
transactions to spend those bitcoins.

44
00:02:27.900 --> 00:02:32.040
Think of the public key as similar to a bank account number and the private key

45
00:02:32.041 --> 00:02:33.600
as similar to the secret pin.

46
00:02:33.810 --> 00:02:37.620
All transactions are arranged into chunks of data called blocks.

47
00:02:37.800 --> 00:02:39.690
These blocks linked to one another,

48
00:02:39.840 --> 00:02:42.750
thus forming a chain of blocks or a blockchain.

49
00:02:43.020 --> 00:02:48.020
Computers that verify and record these transactions called miners store a copy

50
00:02:48.241 --> 00:02:49.110
of this blockchain.

51
00:02:49.380 --> 00:02:54.000
They solve random useless but difficult math problems using their computing

52
00:02:54.001 --> 00:02:59.001
power and get paid in Bitcoin by offering proof of their computational work.

53
00:02:59.950 --> 00:03:04.150
This is how the network is secure.
It's what makes the blockchain immutable.

54
00:03:04.270 --> 00:03:08.500
An attacker would need more computing power than 51% of the network to

55
00:03:08.501 --> 00:03:13.120
manipulate the blockchain and spend money they don't actually own and it's

56
00:03:13.121 --> 00:03:14.800
remained secure all these years.

57
00:03:14.801 --> 00:03:19.801
So illuminati confirmed developers immediately saw the potential of blockchain

58
00:03:20.801 --> 00:03:25.540
technology for other use cases and many of them forked the bitcoin source code,

59
00:03:25.750 --> 00:03:30.520
added some new features to it and launch their own cryptocurrencies like light

60
00:03:30.521 --> 00:03:33.100
coin and mastercoin.
But creating,

61
00:03:33.101 --> 00:03:37.360
securing and maintaining a blockchain network from scratch is hard AAF.

62
00:03:37.600 --> 00:03:42.430
So in late 2013 a developer named Vitalik Buterin created a new blockchain

63
00:03:42.460 --> 00:03:47.020
called Atherium to make it easy for anyone to create blockchain applications on

64
00:03:47.021 --> 00:03:51.100
top of it without having to bootstrap a blockchain network themselves.

65
00:03:51.370 --> 00:03:56.020
Etherium has its own built in programming language that is touring complete.

66
00:03:56.320 --> 00:04:00.100
That means you can write software with it that can solve any reasonable

67
00:04:00.101 --> 00:04:04.540
computational problem.
Bitcoin also has its own scripting language,

68
00:04:04.630 --> 00:04:08.260
but Sitoshi limited its functionality for security reasons.

69
00:04:08.410 --> 00:04:11.290
It can't perform looping or recursion,
for example,

70
00:04:11.590 --> 00:04:13.720
with etherium is language solidity.

71
00:04:13.900 --> 00:04:16.930
Anyone can create what are called smart contracts.

72
00:04:17.140 --> 00:04:21.100
A smart contract is a protocol that defines financial rules.

73
00:04:21.190 --> 00:04:26.190
Would they clear cryptographic way of verifying transactions in a De centralized

74
00:04:26.231 --> 00:04:29.140
way?
That means without the use of a central server.

75
00:04:29.260 --> 00:04:32.140
It's a network that proves it's fair red,

76
00:04:32.141 --> 00:04:35.230
just we don't need of God in encryption,

77
00:04:35.410 --> 00:04:40.410
we trust so bitcoin and in fact every cryptocurrency can each be considered a

78
00:04:40.571 --> 00:04:41.500
smart contract.

79
00:04:41.800 --> 00:04:45.430
Smart contracts can also be used to create all sorts of decentralized

80
00:04:45.431 --> 00:04:46.270
applications.

81
00:04:46.450 --> 00:04:51.070
These are pure to pure autonomous applications that are owned by the community

82
00:04:51.220 --> 00:04:54.790
rather than a central group theory and blockchain calls.

83
00:04:54.790 --> 00:04:57.990
It's intrinsic token ether and like bitcoin.

84
00:04:58.000 --> 00:05:01.330
It also contains a log of transaction like events,

85
00:05:01.570 --> 00:05:05.740
but it can be filled with a much wider variety of event information when a

86
00:05:05.741 --> 00:05:08.350
transaction is sent to a contract account,

87
00:05:08.740 --> 00:05:13.510
the code associated with the contract account is executed by the etherium

88
00:05:13.511 --> 00:05:16.330
virtual machine run by minors.

89
00:05:16.540 --> 00:05:20.170
Each miner goes through the transactions listed in a block,

90
00:05:20.320 --> 00:05:25.210
runs the associated code and stores the resulting values getting rewarded with

91
00:05:25.240 --> 00:05:29.560
ether.
That's why ethereum is sometimes called a world computer.

92
00:05:29.710 --> 00:05:31.840
It's like a decentralized Horoku.

93
00:05:31.990 --> 00:05:36.280
This means you can programmatically create any kind of financial contract like a

94
00:05:36.281 --> 00:05:41.281
derivative or a bond or insurance in any legal jurisdiction without needing to

95
00:05:41.861 --> 00:05:43.540
pay millions in legal fees.

96
00:05:43.720 --> 00:05:47.860
Software is eating both finance and law and as these technologies come to

97
00:05:47.861 --> 00:05:48.694
fruition,

98
00:05:48.760 --> 00:05:53.760
we've seen an absolute explosion in a type of smart contract called an initial

99
00:05:53.831 --> 00:05:58.010
coin offering.
It's a way to crowd fund by issuance of a Tolkien.

100
00:05:58.430 --> 00:06:02.570
This token could be used to access some scarce resource of the project,

101
00:06:02.690 --> 00:06:05.030
like in the case of file,
coin storage space,

102
00:06:05.180 --> 00:06:09.470
or in the case of open mind datasets,
you can create your own economic model,

103
00:06:09.471 --> 00:06:12.080
defining economic incentives using a token.

104
00:06:12.380 --> 00:06:16.010
This is really important because we live in a world where being able to generate

105
00:06:16.250 --> 00:06:20.210
a lot of capital doesn't necessarily mean creating a lot of value.

106
00:06:20.570 --> 00:06:22.460
Take Nikki Minaj for example,

107
00:06:22.461 --> 00:06:27.050
or the fact that some companies generate lots of capital for wrecking the ocean

108
00:06:27.290 --> 00:06:28.340
and on the flip side,

109
00:06:28.400 --> 00:06:33.050
lots of open source projects like the Linux distro generate a lot of value,

110
00:06:33.051 --> 00:06:36.530
but the creators didn't generate a lot of capital.
In Ai,

111
00:06:36.531 --> 00:06:40.580
we call this the credit assignment problem.
How do we properly propagate,

112
00:06:40.581 --> 00:06:41.510
reward back?

113
00:06:41.900 --> 00:06:46.900
I can help better approximate the relationship between the two bitcoin and

114
00:06:46.911 --> 00:06:51.770
ethereum where the first examples of that early developers got rewarded big
time.

115
00:06:52.010 --> 00:06:56.120
Anyone with a nice landing page and a white paper detailing their project can

116
00:06:56.121 --> 00:07:00.830
potentially raise tens of millions of dollars in seconds leading to a lot of

117
00:07:00.831 --> 00:07:01.760
scam attempts.

118
00:07:02.060 --> 00:07:06.160
The space definitely has all the characteristics of a bubble right now as

119
00:07:06.200 --> 00:07:09.200
governments are still trying to figure out how to regulate it.

120
00:07:09.350 --> 00:07:14.350
It is the wild west of fundraising that can be open to both accredited and

121
00:07:14.540 --> 00:07:16.370
nonaccredited investors.

122
00:07:16.550 --> 00:07:20.300
Unlike an IPO that requires up to six months of filing requirements and

123
00:07:20.301 --> 00:07:24.440
professional oversight by the Sec,
anyone can perform an ICO,

124
00:07:24.590 --> 00:07:29.480
but the successful ISOS are the product of careful thoughts on economics and

125
00:07:29.481 --> 00:07:30.314
game theory.

126
00:07:30.380 --> 00:07:35.090
They are well planned events that have generated interest beforehand.
Nonprofits,

127
00:07:35.120 --> 00:07:36.530
open source projects,

128
00:07:36.740 --> 00:07:40.760
things that provide real value to the world that aren't necessarily heavily

129
00:07:40.761 --> 00:07:44.690
incentivized right now are great opportunities to Ico n,

130
00:07:44.810 --> 00:07:48.980
so let's create a token and an ICO contract for it.
With the help us some tools,

131
00:07:49.340 --> 00:07:53.180
we'll use a framework called truffle that makes building apps on top of
ethereum.

132
00:07:53.240 --> 00:07:54.140
Very simple.

133
00:07:54.350 --> 00:07:59.180
We'll also use open Zeplin for its ability to help us create secure smart

134
00:07:59.181 --> 00:08:02.480
contracts.
One small bug in a smart contract.

135
00:08:02.570 --> 00:08:04.700
Could mean we could lose a lot of money,

136
00:08:04.820 --> 00:08:07.850
so it's best to use tried and trusted solutions.

137
00:08:08.030 --> 00:08:11.540
Rather than reinventing the wheel for our blockchain node,

138
00:08:11.690 --> 00:08:16.340
we'll just use test RPC.
Since it's fast and developer friendly in terminal,

139
00:08:16.370 --> 00:08:18.590
we'll install our packages using npm.

140
00:08:18.950 --> 00:08:23.930
We'll install each package and create directories for our ICO and initialize our

141
00:08:23.931 --> 00:08:24.764
project.

142
00:08:24.890 --> 00:08:29.890
This adds the Zeplin solidity folder to node modules and inside we'll find smart

143
00:08:30.291 --> 00:08:34.010
contract templates from the Open Zeplin Library r Tolkien.

144
00:08:34.011 --> 00:08:36.170
We'll have an emergency stop mechanism,

145
00:08:36.350 --> 00:08:40.880
which means we'll be able to pause transfers with the token so if something

146
00:08:40.881 --> 00:08:42.470
happens during the crowdfund,

147
00:08:42.650 --> 00:08:46.340
we can halt the process to better understand what's going on.

148
00:08:46.700 --> 00:08:49.940
Will first create the token contract.
This is solidity,

149
00:08:49.941 --> 00:08:52.460
this smart contract language of etherium.

150
00:08:52.670 --> 00:08:57.670
It looks a lot like Java script open provides a nice token creation template for

151
00:08:57.901 --> 00:09:02.640
us.
We just need to define some key attributes of our token,
like its name,

152
00:09:02.670 --> 00:09:07.620
symbol and supply.
Now we'll create a crowd sale contract.
Again,

153
00:09:07.621 --> 00:09:09.000
we have a template for this.

154
00:09:09.180 --> 00:09:11.790
We just need to call the token we've named previously,

155
00:09:11.940 --> 00:09:15.180
as well as give a few parameters to the constructor function.

156
00:09:15.480 --> 00:09:19.050
One hour is estimated to be about 212 blocks,

157
00:09:19.320 --> 00:09:23.100
the rate of token per ether and the wallet address of the contract owner.

158
00:09:23.430 --> 00:09:28.170
Now we'll want to deploy this contract to the test chain,
so let's first run it.

159
00:09:28.410 --> 00:09:30.810
Then in the deploy contract javascript file,

160
00:09:30.840 --> 00:09:33.450
we'll modify it to include our custom parameters.

161
00:09:33.690 --> 00:09:38.490
The crowd sale contract is what we will deploy and it will create our token back

162
00:09:38.491 --> 00:09:41.330
in terminal.
We'll compile truffle and migrate it.

163
00:09:41.520 --> 00:09:45.180
We can see it in the test RPC tab that the contract was successfully deployed.

164
00:09:45.600 --> 00:09:49.560
Let's open the truffle console and interact with the deployed contract via the

165
00:09:49.561 --> 00:09:52.410
web three dot js Api from our account.

166
00:09:52.500 --> 00:09:55.920
We'll buy some tokens and check our account to see if we bought them.

167
00:09:56.160 --> 00:09:58.950
And yes we did.
It worked.
Moving forward,

168
00:09:58.951 --> 00:10:02.540
we could build a web app around this that lets users interact with the crowd

169
00:10:02.541 --> 00:10:06.810
sale token contract and add more functionality to the contract itself.

170
00:10:06.960 --> 00:10:10.140
I could deadline and a token cap.
So what have we learned?

171
00:10:10.290 --> 00:10:14.850
Bitcoin's blockchain for the first time provides an immutable peer to peer

172
00:10:14.851 --> 00:10:15.630
database.

173
00:10:15.630 --> 00:10:20.520
Etherium built on that idea by creating a Turing complete version of the

174
00:10:20.521 --> 00:10:24.990
blockchain that lets developers create peer to peer applications on top of it

175
00:10:25.140 --> 00:10:25.973
easily.

176
00:10:25.980 --> 00:10:30.270
And an initial coin offering is a token sale that people can use to crowd fund

177
00:10:30.271 --> 00:10:33.630
their project,
which ethereum makes very easy to do.

178
00:10:33.950 --> 00:10:37.490
<v 1>Wizard of the week is out that his toe got shit.
He builds accustomed.</v>

179
00:10:37.570 --> 00:10:41.810
Quantum circuit demonstrate the bell states the simplest example of entanglement

180
00:10:41.811 --> 00:10:43.100
between a pair of cubits.

181
00:10:43.400 --> 00:10:46.970
Make sure to give it a star in second place goes to Eric Al Qaeda.

182
00:10:47.360 --> 00:10:49.250
He eliminated Grover's out rhythm,

183
00:10:49.310 --> 00:10:53.210
a quantum search algorithm that runs quadratically faster than any equivalent

184
00:10:53.211 --> 00:10:54.890
classical algorithm.
Great work.

185
00:10:55.320 --> 00:10:59.310
<v 0>This week's challenge is to create a more advanced token sale contract using</v>

186
00:10:59.311 --> 00:11:03.090
solidity details are in the read me get humbling scope in the comments and what

187
00:11:03.091 --> 00:11:06.450
is announced next Friday.
Please subscribe for more programming videos.

188
00:11:06.451 --> 00:11:10.500
And for now I've got to get sec regulation,
so thanks for watching.

