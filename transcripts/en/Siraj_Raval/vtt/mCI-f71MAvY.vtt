WEBVTT

1
00:00:00.030 --> 00:00:04.320
So it requires math to help arms move.
Thanks brain.

2
00:00:04.950 --> 00:00:05.780
Hello world.

3
00:00:05.780 --> 00:00:10.140
It's or Raj and robots are a lot of fun to read about and imagined,

4
00:00:10.170 --> 00:00:13.830
but they're also used in a ton of real world applications.

5
00:00:14.070 --> 00:00:18.780
We're going to go over two really important concepts in robotics forward and

6
00:00:18.781 --> 00:00:23.781
inverse kinematics so that we can program a robotic arm in a simulated

7
00:00:24.151 --> 00:00:28.740
environment to pick up an object in front of it.
It's a simple task,

8
00:00:28.741 --> 00:00:33.240
but to solve it,
we'll need to make use of both trigonometry and calculus.

9
00:00:33.570 --> 00:00:34.710
If you're new to this channel,

10
00:00:34.711 --> 00:00:38.220
hit subscribe to stay updated on my educational content.

11
00:00:38.670 --> 00:00:42.690
Robots come in all sorts of shapes and sizes on land.

12
00:00:42.691 --> 00:00:44.250
We've got autonomous cars,

13
00:00:44.251 --> 00:00:48.720
which can be considered robots and they're already street legal in Frisco,

14
00:00:48.721 --> 00:00:50.340
Texas.
Drive dot.

15
00:00:50.341 --> 00:00:55.341
Ai is running a pilot program offering rides to over 10 k people using their app

16
00:00:56.430 --> 00:00:56.780
Ip.

17
00:00:56.780 --> 00:01:01.780
Dole humanoids are being trained to complete complex rescue operations for both

18
00:01:01.860 --> 00:01:03.960
militaries and private industry.

19
00:01:04.350 --> 00:01:08.700
Just don't expect them to know how to balance and let's not forget Tesla,

20
00:01:08.760 --> 00:01:12.630
where robots are building thousands of electric cars in there.

21
00:01:12.631 --> 00:01:17.010
Gigafactory in an almost completely automated pipeline.

22
00:01:17.011 --> 00:01:19.560
The first of its kind in the air.

23
00:01:19.561 --> 00:01:23.700
Drones are used for everything from video production to crop monitoring.

24
00:01:24.090 --> 00:01:28.890
Even underwater robots are exploring the deep sea and helping mind for

25
00:01:28.891 --> 00:01:29.850
resources.

26
00:01:30.150 --> 00:01:34.800
And while all of these robots might look different and perform different tasks,

27
00:01:35.070 --> 00:01:40.070
one thing that the vast majority of them have in common is having an arm more

28
00:01:40.441 --> 00:01:41.130
formally.

29
00:01:41.130 --> 00:01:45.630
We can call it a robotic manipulator and it's one piece of robotics that is

30
00:01:45.631 --> 00:01:49.680
quintessential to study for any aspiring roboticist.

31
00:01:49.980 --> 00:01:54.030
I built one of these myself a couple of years ago,
uh,
using a three d printer,

32
00:01:54.150 --> 00:01:56.520
some motors,
open source software,

33
00:01:56.670 --> 00:01:59.430
and lots of late nights in the lab with no Netflix.

34
00:01:59.790 --> 00:02:04.110
The project was called in move and help me learn a lot about mechatronics and

35
00:02:04.111 --> 00:02:08.760
control theory.
Robotic manipulators are used to pick up objects,

36
00:02:08.940 --> 00:02:13.530
manipulate control panels,
and build components all autonomously.

37
00:02:13.920 --> 00:02:18.720
Studying robotics gives us a deeper appreciation for our brain's own incredible

38
00:02:18.721 --> 00:02:19.650
capabilities.

39
00:02:20.100 --> 00:02:25.100
Robots like us are able to reach several points in space from multiple angles

40
00:02:25.561 --> 00:02:27.060
and joined configurations.

41
00:02:27.390 --> 00:02:32.280
This type of task requires a robot to do some planning and it's why roboticists

42
00:02:32.281 --> 00:02:33.960
must study kinematics.

43
00:02:34.410 --> 00:02:39.330
Kinematics is the branch of classical mechanics that describes the motion of

44
00:02:39.331 --> 00:02:40.110
points,

45
00:02:40.110 --> 00:02:45.110
objects and systems of groups of objects without reference to the causes of

46
00:02:45.151 --> 00:02:46.500
motion.
In fact,

47
00:02:46.501 --> 00:02:51.180
a lot of times the study of kinematics is referred to as the geometry of motion

48
00:02:51.600 --> 00:02:56.520
and we can actually divide kinematics into two subfields forward and inverse

49
00:02:56.521 --> 00:02:57.354
kinematics.

50
00:02:57.750 --> 00:03:02.620
Inverse kinematics takes a point in space as input and tells us how to move our

51
00:03:02.621 --> 00:03:05.980
arm optimally to reach that point forward.

52
00:03:05.980 --> 00:03:10.930
Kinematics solves the opposite dual problem.
Knowing how our arm works,

53
00:03:10.960 --> 00:03:14.110
it tells us which points in space it can reach.

54
00:03:14.470 --> 00:03:17.320
Let's start with a simple robotic arm in simulation.

55
00:03:17.350 --> 00:03:19.120
Anyone can view this in the browser.

56
00:03:19.121 --> 00:03:24.010
It was built with a simple javascript library specifically for simulating

57
00:03:24.011 --> 00:03:25.030
robotic motion.

58
00:03:25.480 --> 00:03:30.220
This robotic arm is made up of limbs connected by joints and since the arm has

59
00:03:30.221 --> 00:03:31.840
three independent joints,

60
00:03:31.960 --> 00:03:36.790
we can say that this robot has three degrees of freedom.
If it had four joints,

61
00:03:36.820 --> 00:03:39.070
we'd say it has four degrees of freedom.

62
00:03:39.430 --> 00:03:44.140
Each joint is controlled by a motor which allows it to move the connected link

63
00:03:44.290 --> 00:03:45.490
to a certain angle.

64
00:03:45.760 --> 00:03:50.760
We can't in fact draw out a very precise schematic of the joints by hand to help

65
00:03:51.311 --> 00:03:52.600
us better visualize it.

66
00:03:52.990 --> 00:03:57.820
We will assume that each joint can only rotate on a single access for this demo.

67
00:03:58.150 --> 00:03:59.500
Depending on the context,

68
00:03:59.501 --> 00:04:02.590
we can count the end effector has a degree of freedom or not,

69
00:04:02.950 --> 00:04:05.620
but right now let's not for simplicity's sake,

70
00:04:05.621 --> 00:04:08.080
we can advance to terminator robots later.

71
00:04:08.500 --> 00:04:13.500
Each joint here is able to rotate on a specific axis and the state of each joint

72
00:04:13.811 --> 00:04:17.770
is measured as an angle by rotating each joint to an angle.

73
00:04:17.890 --> 00:04:22.120
We caused the end effector to reach different points in space and remember

74
00:04:22.150 --> 00:04:26.950
knowing where the end effector is given the angles of the joints is known as

75
00:04:26.951 --> 00:04:30.040
forward kinematics.
This is an easy problem,

76
00:04:30.070 --> 00:04:34.960
meaning for each set of angles there is one and only one result which can be

77
00:04:34.961 --> 00:04:36.190
calculated precisely.

78
00:04:36.670 --> 00:04:41.530
Understanding how this arm moves depending on the inputs that we provide to each

79
00:04:41.531 --> 00:04:46.531
of its motors is a crucial step in finding a solution to its dual problem.

80
00:04:46.810 --> 00:04:48.250
Of Inverse kinematics.

81
00:04:48.490 --> 00:04:53.490
So how do we solve both of these problems both forward and inverse kinematics

82
00:04:53.650 --> 00:04:54.483
for our arm.

83
00:04:55.030 --> 00:04:59.680
Each joint contributes to the local rotation of it's forward chain of links.

84
00:04:59.950 --> 00:05:03.160
When the second joint rotates a given number of degrees,

85
00:05:03.280 --> 00:05:06.160
we again see our arms configuration change.

86
00:05:06.580 --> 00:05:10.180
The first degree change determine the position of the first joint,

87
00:05:10.240 --> 00:05:14.320
but the position of the second joint is affected by the degree change for both

88
00:05:14.321 --> 00:05:18.620
the first and second joint.
The arrows are oriented according to this,

89
00:05:18.630 --> 00:05:22.630
some of the rotations of the earlier chain of links they're connected to.

90
00:05:22.720 --> 00:05:25.900
To solve the problem of forward kinematics for our arm,

91
00:05:25.901 --> 00:05:30.790
we need to be able to calculate the position up nested objects in this chain,

92
00:05:31.060 --> 00:05:35.290
do their rotation if we had just two joints.
Once we solve for two,

93
00:05:35.291 --> 00:05:38.890
we can replicate it in sequence to solve chains of any length.

94
00:05:39.250 --> 00:05:42.490
In the simple case where the first joint is in its starting position,

95
00:05:42.610 --> 00:05:47.440
we can simply say that the position of the second joint is equal to the position

96
00:05:47.470 --> 00:05:50.410
of the first plus a distance Vector d.

97
00:05:50.680 --> 00:05:52.660
When the first joint is not zero,

98
00:05:52.661 --> 00:05:57.530
we have to rotate the distance factor at rest around the first joint by that

99
00:05:57.531 --> 00:06:01.940
many degrees and by replicating the same logic we can derive the equation for

100
00:06:01.941 --> 00:06:05.660
this second joint.
Looks like there is a generalized pattern here.

101
00:06:05.661 --> 00:06:09.920
We can just add more joints in the equation gets bigger to encompass those

102
00:06:09.921 --> 00:06:10.754
variables.

103
00:06:10.970 --> 00:06:15.200
We can write out a general equation here that will output the position of any

104
00:06:15.201 --> 00:06:18.380
joint given the joints and angles that came before it.

105
00:06:18.770 --> 00:06:20.780
Thanks to the rules of trigonometry.

106
00:06:20.781 --> 00:06:25.040
We can write this out such that the value of any joints position can be

107
00:06:25.041 --> 00:06:29.450
expressed in relation to the value of the other joints and angles of our arm.

108
00:06:29.870 --> 00:06:32.810
Because of this,
when one of our variables is known,

109
00:06:32.960 --> 00:06:37.960
we can solve for the others forward and inverse kinematics problems are very

110
00:06:38.241 --> 00:06:42.950
common and there are several approaches to solving them.
One of them,
for example,

111
00:06:42.951 --> 00:06:45.770
associates for parameters with each joint.

112
00:06:45.800 --> 00:06:48.830
They're called the denovate Herzenberg parameters.

113
00:06:49.070 --> 00:06:53.600
They're easy to manipulate in a matrix format and are absolutely perfect to

114
00:06:53.601 --> 00:06:55.850
solve inverse kinematics analytically,

115
00:06:56.270 --> 00:07:00.830
but solving identified Herzenberg Matrix take some time and is overly

116
00:07:00.831 --> 00:07:05.420
complicated compared to an optimization technique that all machine learning

117
00:07:05.421 --> 00:07:09.950
engineers know and love popularized by neural networks called gradient descent.

118
00:07:10.970 --> 00:07:14.570
We can summarize the behavior of our system in two equations.

119
00:07:14.720 --> 00:07:18.650
The first one we'll describe the rotation of a joint which is the sum of the

120
00:07:18.651 --> 00:07:22.850
rotations of all previous joints and we have the position of a joint.

121
00:07:23.270 --> 00:07:27.940
If we write our forward kinematics function for our robot,
it will take us input,

122
00:07:27.950 --> 00:07:30.650
an array of float values called angles.

123
00:07:30.860 --> 00:07:33.980
Each angle is there local rotation for each joint.

124
00:07:34.250 --> 00:07:37.880
The function will need to return the position of the end effector.

125
00:07:38.000 --> 00:07:42.920
In global coordinates rotations are often described with Euler angles.

126
00:07:43.100 --> 00:07:47.750
These are three numbers that correspond to the rotation of an object along the

127
00:07:47.780 --> 00:07:49.760
x,
y,
and z access.

128
00:07:50.150 --> 00:07:54.740
But using these angles can be expensive to compute a better way to work with

129
00:07:54.741 --> 00:07:56.960
angles.
It's a used quaternions.

130
00:07:57.440 --> 00:08:01.580
These are the mathematical objects that are used to represent rotations.

131
00:08:01.970 --> 00:08:03.350
Euler angles,
however,

132
00:08:03.351 --> 00:08:07.970
represent orientations a quaternary and represents a way to go from one

133
00:08:07.971 --> 00:08:11.840
orientation to another.
We can imagine it as a rotation.

134
00:08:11.870 --> 00:08:16.820
If we take an object in space,
multiply,
it's positioned by a quaternary in,

135
00:08:17.000 --> 00:08:21.170
we get a rotation and if we multiply two quaternions to create a new one,

136
00:08:21.290 --> 00:08:23.300
it will incorporate both rotations.

137
00:08:23.720 --> 00:08:28.610
A multiplication between a quaternary and and a vector applies the rotation.

138
00:08:28.880 --> 00:08:30.410
So for our forward kinematics,

139
00:08:30.411 --> 00:08:33.590
when we have a specific point in space we want to reach,

140
00:08:33.890 --> 00:08:38.060
we can estimate how close we are given the current joint configuration.

141
00:08:38.240 --> 00:08:40.730
The distance from the target is a simple function.

142
00:08:40.760 --> 00:08:43.040
Finding a solution for inverse kinematics,

143
00:08:43.041 --> 00:08:48.041
however means we want to minimize the value returned that measures the distance

144
00:08:48.321 --> 00:08:52.280
between the end effector and the target.
Ideally it's zero,

145
00:08:52.400 --> 00:08:54.140
which means we've reached our target.

146
00:08:54.200 --> 00:08:59.040
This is a mathematical optimization problem and gradient descent is a technique

147
00:08:59.190 --> 00:09:03.480
that can be used to find the minimum in a landscape of possibilities.

148
00:09:03.840 --> 00:09:08.070
We can imagine it like dropping a ball into a valley where we have two axes,

149
00:09:08.340 --> 00:09:12.330
one for the possible errors and one for the possible parameter values.

150
00:09:12.600 --> 00:09:14.250
Once we drop a ball in,

151
00:09:14.280 --> 00:09:18.120
the ball will eventually rest at the minimum where the error is smallest,

152
00:09:18.360 --> 00:09:21.420
which will give us the optimal parameters for our arm.

153
00:09:21.690 --> 00:09:25.800
We have a function which we'll take a parameter for each joint of our robotic

154
00:09:25.801 --> 00:09:29.280
arm.
That parameter is the current angle of the joint.

155
00:09:29.640 --> 00:09:32.160
Given a particular configuration of joints,

156
00:09:32.310 --> 00:09:36.930
the function will return a single value that indicates how far the end effector

157
00:09:36.960 --> 00:09:41.190
is from the target points to find the values for the joints that minimizeF ,

158
00:09:41.730 --> 00:09:46.140
we first calculate the gradient of a function for the current joint angle.

159
00:09:46.410 --> 00:09:50.760
The gradient is a vector that indicates the direction of the steepest ascent.

160
00:09:50.970 --> 00:09:54.750
It's an Arrow that tells us the direction in which the function grows.

161
00:09:55.020 --> 00:09:59.880
Every element of our gradient is an estimation of the partial derivative of f.

162
00:10:00.360 --> 00:10:05.310
The power of calculus helps us compute change in our system are weights that

163
00:10:05.311 --> 00:10:09.960
will be updated.
In this case are our joint angles for each of our robots.

164
00:10:09.961 --> 00:10:10.740
Three joints.

165
00:10:10.740 --> 00:10:15.510
Our function will take in all three parameters and output a gradient that we can

166
00:10:15.511 --> 00:10:19.950
use to iteratively update our joint angles until we reached the target.

167
00:10:20.190 --> 00:10:21.600
Once we have these functions,

168
00:10:21.601 --> 00:10:25.980
we can easily click on a point in space and watch as our robot moves optimally.

169
00:10:25.981 --> 00:10:30.150
To that point,
I've got helpful links and code for you in the video description.

170
00:10:30.180 --> 00:10:33.630
Check it out.
Robots are so bay.
Have you built one before?
If so,

171
00:10:33.631 --> 00:10:37.170
share your experience with us in the comments section.
I'd love to learn more.

172
00:10:37.530 --> 00:10:41.100
Please subscribe for more programming videos,
and for now I'm going to fly,

173
00:10:41.160 --> 00:10:42.510
so thanks for watching.

