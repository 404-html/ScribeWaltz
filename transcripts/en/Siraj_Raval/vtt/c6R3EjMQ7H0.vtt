WEBVTT

1
00:00:00.070 --> 00:00:04.780
Directions to the nearest water source.
He knows the way.

2
00:00:09.420 --> 00:00:12.010
Hello world walking into your geology.
In today's episode,

3
00:00:12.011 --> 00:00:14.980
we're going to build a chat Bot with an API.
In a previous episode,

4
00:00:14.981 --> 00:00:18.880
we talked about how to build a generative model Chat Bot by training it on your

5
00:00:18.881 --> 00:00:22.030
own Dataset with no hardcoded responses whatsoever.

6
00:00:22.060 --> 00:00:25.180
This time we're going to go the API route because let's face it,

7
00:00:25.210 --> 00:00:28.270
it is the year of the chat bots in the past few months.

8
00:00:28.340 --> 00:00:31.960
Tell him Liz companies have released chat Bot Api Apis so that you can integrate

9
00:00:31.961 --> 00:00:34.330
it with their service.
Chatbots are like the new apps.

10
00:00:34.360 --> 00:00:37.840
If you think of a startup idea,
there's probably an APP for it,
but no chat Bot.

11
00:00:37.900 --> 00:00:39.810
We're going to build a flower delivery chatbots,

12
00:00:39.820 --> 00:00:43.150
so I did a little Api shopping and there were four services that really stood

13
00:00:43.151 --> 00:00:46.510
out to me with nuance Siri Kit and API dot.
Ai.

14
00:00:46.570 --> 00:00:48.340
Let's talk about the pros and cons of each of them.

15
00:00:48.450 --> 00:00:50.650
It is a chat Bot Api that was acquired by Facebook,

16
00:00:50.651 --> 00:00:53.350
so they've got the benefit of the Facebook marketing machine behind them.

17
00:00:53.380 --> 00:00:55.780
It's free so you can spend your money on things that matter.

18
00:00:55.810 --> 00:00:57.490
Speech recognition is included.

19
00:00:57.520 --> 00:01:01.180
The thing I really like about the service was the use of open instances.

20
00:01:01.270 --> 00:01:02.560
If someone else designs a Bot,

21
00:01:02.590 --> 00:01:05.950
you can just fork it and use that fork as your new chat backend.

22
00:01:05.980 --> 00:01:08.350
But the problem is when I attempted to build a Bot with this,

23
00:01:08.380 --> 00:01:10.330
it was super annoying and buggy.

24
00:01:10.360 --> 00:01:13.600
The documentation isn't dense enough so there's a lot of ambiguity.

25
00:01:13.630 --> 00:01:17.230
I got frustrated because there was no option to create synonyms for entities and

26
00:01:17.260 --> 00:01:20.590
I also just didn't have time to learn how the story modeled work more time for

27
00:01:20.591 --> 00:01:23.230
Minecraft.
Another service I looked at was nuance mix.

28
00:01:23.260 --> 00:01:26.020
You guys remember dragon naturally speaking from back in the day?
Yeah,

29
00:01:26.021 --> 00:01:29.500
these guys made that so they definitely have speech recognition as a capability

30
00:01:29.530 --> 00:01:32.920
right out of the box and it seems like they really pay attention to that feature

31
00:01:32.950 --> 00:01:36.070
because they have a bunch of Spec papers on their site detailing their speech

32
00:01:36.071 --> 00:01:37.180
recognition technology,

33
00:01:37.210 --> 00:01:40.450
40 different languages or supported in any different texts to speech voices are

34
00:01:40.451 --> 00:01:41.740
available reading their docs.

35
00:01:41.770 --> 00:01:45.330
They use terms like literals and concepts that add another layer of abstraction

36
00:01:45.380 --> 00:01:46.510
or it doesn't seem necessary.

37
00:01:46.540 --> 00:01:49.480
I tried to sign up and they said they'd get back to me in two business days.

38
00:01:49.510 --> 00:01:50.680
Ain't nobody got time for that.

39
00:01:50.710 --> 00:01:53.080
Nuance has been known to stick to big enterprise deals.

40
00:01:53.081 --> 00:01:55.690
If you're an independent Dev,
probably not the best fit.

41
00:01:55.720 --> 00:01:59.290
Then there's Siri Kit Apple announced at WWDC this year that they opened up Siri

42
00:01:59.291 --> 00:02:01.840
to third party developers.
The extensions.
Finally,

43
00:02:01.870 --> 00:02:05.800
it's got great documentation but that's really the only pro I found by the way

44
00:02:05.801 --> 00:02:07.290
WWDC this year.
Apple,

45
00:02:07.380 --> 00:02:08.213
<v 1>what the</v>

46
00:02:08.860 --> 00:02:12.190
<v 0>Siri Kit is limited to just six different APP types so you can't tell her to</v>

47
00:02:12.191 --> 00:02:13.630
make you soil and just yet,

48
00:02:13.660 --> 00:02:16.900
and those limitations are already baked into the API with functions like in book

49
00:02:16.901 --> 00:02:20.200
restaurant intent and only works with apple devices.
So yeah,

50
00:02:20.230 --> 00:02:23.170
the garden is quite waltz.
Finally,
there's api.ai.

51
00:02:23.200 --> 00:02:25.070
This was the easiest service from me to you.

52
00:02:25.180 --> 00:02:27.760
I built a pretty useful chat Bot with this in just two hours.

53
00:02:27.761 --> 00:02:31.480
The documentation and interface or just way easier to understand than any other

54
00:02:31.481 --> 00:02:32.314
service I've found.

55
00:02:32.350 --> 00:02:35.440
It's got this integrations feature where you literally just flip a switch and

56
00:02:35.441 --> 00:02:39.220
it'll integrate with your service provider of choice to be that slack or
Twillio.

57
00:02:39.250 --> 00:02:42.580
You just build your boss once and then deploy it to whichever platform you want.

58
00:02:42.640 --> 00:02:46.840
Also,
they have the most client libraries and STKs I found for a chat Bot Api.

59
00:02:46.900 --> 00:02:48.340
That makes me a very happy day.

60
00:02:48.400 --> 00:02:51.160
Speech recognition functionality is built into the SDKS.

61
00:02:51.180 --> 00:02:54.880
The only con is that while it is free as you scale,
there are pricing tiers,

62
00:02:54.881 --> 00:02:57.250
but hey,
if I were going to build a production grade,

63
00:02:57.251 --> 00:03:01.990
service quality is the number metric I'd be optimizing for and it seems api.ai

64
00:03:01.991 --> 00:03:04.240
is leading the charge,
so let's build this baby.

65
00:03:04.241 --> 00:03:07.090
We're going to build a flower delivery chat Bot using API dot.

66
00:03:07.091 --> 00:03:08.740
Ai is console and a python client.

67
00:03:08.770 --> 00:03:11.530
We'll start by writing up an ideal conversation with our box.
The user,

68
00:03:11.531 --> 00:03:14.320
let's the BOT know they're interested in buying flowers.

69
00:03:14.350 --> 00:03:17.660
Then specifies the type of flowers followed by the color and then the address

70
00:03:17.661 --> 00:03:19.060
they'd like it to be delivered to.

71
00:03:19.090 --> 00:03:23.170
They can exit the conversation or ask for more flowers in the process loops.

72
00:03:23.171 --> 00:03:27.070
We need to codify this conversation and the api.ai console makes it relatively

73
00:03:27.071 --> 00:03:28.750
simple.
To do this,
we'll create a new agent,

74
00:03:28.751 --> 00:03:30.460
click on domain and turn on small talk.

75
00:03:30.490 --> 00:03:33.400
Now our BOT is already capable of very basic conversation.

76
00:03:33.430 --> 00:03:35.320
Then we'll see the intents and entities tab.

77
00:03:35.350 --> 00:03:38.530
An entity is a model object that you referred to in your conversation at some

78
00:03:38.531 --> 00:03:41.500
point.
So we want three entities,
flower color and address.
Well,

79
00:03:41.501 --> 00:03:44.050
create the flower entity.
We'll define three synonyms.

80
00:03:44.110 --> 00:03:47.110
These will be the types of flowers we want.
We'll do the same for color.

81
00:03:47.140 --> 00:03:51.570
Then for address,
cool.
Now that we have our entities,

82
00:03:51.600 --> 00:03:53.290
let's build our intense unintended,

83
00:03:53.330 --> 00:03:56.070
it's an abstraction of a specific request a user makes,

84
00:03:56.071 --> 00:03:58.680
which then maps it to an action and a speech response.

85
00:03:58.710 --> 00:04:00.900
We'll create our first intent and call it proposal.

86
00:04:00.930 --> 00:04:03.780
We want to think of a couple of possible statements.
A user can say,

87
00:04:03.781 --> 00:04:07.290
the system will be able to recognize not just these hand coded possible

88
00:04:07.291 --> 00:04:10.710
statements,
but statements that are worded differently and have the same meaning.

89
00:04:10.740 --> 00:04:13.230
Once the system has recognized what the user has said,

90
00:04:13.260 --> 00:04:16.320
it can perform an action and action is an event that fires.

91
00:04:16.321 --> 00:04:17.970
Once an intent has been recognized,

92
00:04:18.000 --> 00:04:21.150
well then type out our speech response and this will fire when it recognizes the

93
00:04:21.151 --> 00:04:23.100
intent of the user statements.
Finally,

94
00:04:23.160 --> 00:04:26.670
we'll add an output context context or how the system keeps track of what is

95
00:04:26.671 --> 00:04:29.100
being said.
It's what makes the BOT conversational.

96
00:04:29.160 --> 00:04:31.020
We know that after this proposal intense,

97
00:04:31.021 --> 00:04:33.390
we want our chat Bot to then ask what type of flowers,

98
00:04:33.391 --> 00:04:37.470
so we'll set the output context to our next intent called type.
Specification.

99
00:04:37.500 --> 00:04:41.040
For type specification are Alpa context is color specifications.

100
00:04:41.070 --> 00:04:44.490
We are looking for a one word answer from the user at specifies type.

101
00:04:44.550 --> 00:04:46.240
Our system will detect the word.
If it's uptight,

102
00:04:46.320 --> 00:04:48.330
flour and performing yet undefined action.

103
00:04:48.331 --> 00:04:51.630
We'll call saved flower type well adding or speech responds asking for the color

104
00:04:51.660 --> 00:04:53.580
and do the same for color specification.

105
00:04:53.610 --> 00:04:56.250
The output context is addressed specification.
The user.

106
00:04:56.251 --> 00:04:59.280
We'll say a one word answer,
which will determine to be an entity of type.

107
00:04:59.281 --> 00:05:03.180
Color will perform the save color action and ask for the address.
Lastly,

108
00:05:03.210 --> 00:05:04.470
in address specification,

109
00:05:04.500 --> 00:05:08.010
we'll write out an example address and they'll recognize it of type addressed by

110
00:05:08.011 --> 00:05:09.330
using the address system entity.

111
00:05:09.331 --> 00:05:12.780
It'll perform the create order action and we'll use the address variable name to

112
00:05:12.781 --> 00:05:15.990
repeat the address back to the user.
We can set the output context,

113
00:05:15.991 --> 00:05:19.380
act to the proposal in case the user wants to continue buying flowers.

114
00:05:19.410 --> 00:05:22.500
Now that we have our backend setup,
let's write our client in python.

115
00:05:22.530 --> 00:05:26.460
We'll import our dependencies,
adjacent parser and the api.ai python wrapper.

116
00:05:26.530 --> 00:05:29.730
Then initialize our agents then create functions for each of our actions will

117
00:05:29.731 --> 00:05:32.670
leave these blank,
but you can add any kind of functionality you'd like.

118
00:05:32.671 --> 00:05:33.630
Then in our main method,

119
00:05:33.631 --> 00:05:37.200
we'll create a while loop and retreat the user input from the command line then

120
00:05:37.201 --> 00:05:39.960
posted to the agent and retrieved the Jason Response.
Well,

121
00:05:39.961 --> 00:05:42.210
Parsa Jason to display the bots reply.

122
00:05:42.240 --> 00:05:45.570
If we detect an action will fire one of our action helper methods.
Hey,
what's up?

123
00:05:45.600 --> 00:05:49.170
I want flowers.
Tulips.
What color?
Blue one infinite loop order created.

124
00:05:49.200 --> 00:05:52.230
I totally get why everybody is raving about this service on hacker news.

125
00:05:52.231 --> 00:05:54.600
Check out the links down below.
Please subscribe for more ml videos.

126
00:05:54.630 --> 00:05:57.270
I've got to go fix a race condition,
so thanks for watching.

