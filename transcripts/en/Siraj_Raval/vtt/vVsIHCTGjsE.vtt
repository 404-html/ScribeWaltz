WEBVTT

1
00:00:00.120 --> 00:00:01.590
Hello world,
it's a Rod.

2
00:00:01.740 --> 00:00:05.490
And we're going to talk about a peer to peer chat protocol.

3
00:00:05.580 --> 00:00:09.240
So you don't need to use a server.
And this is what etherium uses.

4
00:00:09.390 --> 00:00:13.140
It's a protocol called whisper.
And I have a demo of it right here.

5
00:00:13.141 --> 00:00:14.910
So let's check it out.
So my name,

6
00:00:14.911 --> 00:00:18.780
I'm going to put Saroj and then I'll put the chat as hello world,

7
00:00:19.140 --> 00:00:22.530
I'll hit send,
boom.
And if I have another peer in the network,

8
00:00:22.560 --> 00:00:24.960
it's going to send that message to that pier.

9
00:00:25.200 --> 00:00:28.800
No server involved from one peer to the other,
peer to peer.

10
00:00:29.130 --> 00:00:33.510
And let me say that one more message.
Hello again.
And we send it.

11
00:00:33.660 --> 00:00:36.420
So in this video,
we're gonna look at this app at the very end,

12
00:00:36.421 --> 00:00:38.970
the code programmatically.
But before we get there,

13
00:00:39.060 --> 00:00:42.660
we've got to talk about the architecture of the whisper protocol because it's

14
00:00:42.690 --> 00:00:47.370
very important to the web 3.0 stack.
So that's what we're going to do at the end.

15
00:00:47.371 --> 00:00:49.890
But let's start off with talking about this stack.

16
00:00:50.070 --> 00:00:55.070
So recall that before I talked about the consensus layer and the consensus layer

17
00:00:55.140 --> 00:00:57.210
is the etherium blockchain.

18
00:00:57.510 --> 00:01:02.280
So what it's used for is for the network to come to consensus specifically any

19
00:01:02.281 --> 00:01:03.870
kind of depth that you're building,

20
00:01:04.140 --> 00:01:08.400
it has to come to consensus on what are called application level constructs.

21
00:01:08.610 --> 00:01:12.650
These can be usernames,
tweets,
timestamps,
anything unit,

22
00:01:12.660 --> 00:01:15.510
the anything you need the network to agree upon,

23
00:01:15.750 --> 00:01:19.170
that's when you would use a blockchain.
So that's one part of the stack.

24
00:01:19.200 --> 00:01:23.850
So we'll get these three gray boxes here.
The other two boxes,

25
00:01:23.851 --> 00:01:26.760
one is for whisper,
and that's the messaging stack,

26
00:01:26.761 --> 00:01:30.900
right when you need your app to communicate with other apps dapps.

27
00:01:31.170 --> 00:01:33.990
And then the third is swarm,
which is the storage layer,

28
00:01:33.991 --> 00:01:36.750
which we're going to use IPFS for,
which we'll talk about later.

29
00:01:36.960 --> 00:01:38.690
But right now we're going to talk about whispers.

30
00:01:38.691 --> 00:01:41.430
Since we talked a bit about the EVM before,

31
00:01:41.431 --> 00:01:44.790
and we'll talk about that more as well,
but let's,
let's get right on into it.

32
00:01:44.791 --> 00:01:47.690
So if we look at the etherium stack,
clearly they,

33
00:01:47.691 --> 00:01:50.820
they've had whisper as a very crucial part of the stack.

34
00:01:51.120 --> 00:01:55.050
Notice that the smart contracts live on the ethereum consensus layer.

35
00:01:55.410 --> 00:02:00.410
Swarm is used for file storage and in whisper is for dynamic communication

36
00:02:00.540 --> 00:02:02.730
between peers,
peer to peer,
right?

37
00:02:03.120 --> 00:02:08.010
So it's a communication protocol for gaps to communicate with each other and

38
00:02:08.040 --> 00:02:12.540
they,
the main feature that whisper has that other chat protocols don't have is

39
00:02:12.570 --> 00:02:13.440
darkness.

40
00:02:13.620 --> 00:02:18.450
So what I mean by darkness is no one can trace who you are if you send a message

41
00:02:18.451 --> 00:02:21.930
to somebody.
And even if they received the message and it's meant for them,

42
00:02:22.200 --> 00:02:25.830
they have plausible deniability.
What that means is no one could,

43
00:02:26.040 --> 00:02:29.580
could tell that that message was sent to them.
And you might be thinking,

44
00:02:29.610 --> 00:02:32.310
how is that possible if that message lives on their computer?

45
00:02:32.490 --> 00:02:34.920
Of course it was meant for them.
Well,

46
00:02:35.280 --> 00:02:39.960
the way whisper is set up is such that messages are continuously routed between

47
00:02:39.961 --> 00:02:42.810
all peers,
whether or not that person is the recipient,

48
00:02:43.080 --> 00:02:45.330
they will receive the message and forward it along.

49
00:02:45.331 --> 00:02:48.750
And I'll talk about that in a second.
It uses darkness as a feature,

50
00:02:49.020 --> 00:02:51.480
but it comes at a high cost.
And we'll talk about that as well.

51
00:02:51.750 --> 00:02:54.210
So remember this is happening off chain.

52
00:02:54.240 --> 00:02:56.310
This has nothing to do with the blockchain.

53
00:02:56.490 --> 00:02:59.010
This is just a pure to pure communication protocol.

54
00:03:00.250 --> 00:03:03.340
And then we can think of whisper as kind of a distributed hash table.

55
00:03:03.370 --> 00:03:08.020
So a hash table has key value stores is the data structure I distributed hash

56
00:03:08.021 --> 00:03:12.340
table is the same idea except the stores of values are distributed across a

57
00:03:12.341 --> 00:03:13.390
network of peers.

58
00:03:13.630 --> 00:03:17.800
So we can think of it that way because messages are the values that are being

59
00:03:17.801 --> 00:03:21.520
keyed in via the identity of the peers in a distributed way.

60
00:03:21.521 --> 00:03:23.380
The nodes in the theory of network,

61
00:03:23.740 --> 00:03:26.290
or we can think of it as a datagram messaging system,

62
00:03:26.291 --> 00:03:29.650
peer to peer messaging system.
You could think about it different ways,

63
00:03:29.651 --> 00:03:33.430
but it is a messaging system that lives in a distributed network.

64
00:03:35.380 --> 00:03:37.810
So this is just an example of a bunch of nodes.

65
00:03:37.840 --> 00:03:40.090
They're passing messages between each other.

66
00:03:40.330 --> 00:03:44.680
So the way whisper works is that every message is delivered to every node.

67
00:03:44.860 --> 00:03:48.880
So if I'm,
if I'm a node in the network and I want to deliver you a message,

68
00:03:49.240 --> 00:03:52.330
I'm going to first send that message to my nearby peers.

69
00:03:52.630 --> 00:03:56.710
And what's going to happen is this message is meant for you because you have a

70
00:03:56.711 --> 00:04:00.550
key that can unlock that message.
You and only you have that key.

71
00:04:00.910 --> 00:04:03.250
But regardless of whether or not it's meant for you,

72
00:04:03.430 --> 00:04:07.840
I'm going to send it to all these peers.
Why for darkness?
Because these peers,

73
00:04:07.841 --> 00:04:09.430
no,
it's not for them,

74
00:04:09.580 --> 00:04:13.660
but they're going to receive it anyway and they're going to forward it to their

75
00:04:13.690 --> 00:04:18.310
neighbors until eventually that message reaches your intended recipients.

76
00:04:18.580 --> 00:04:20.080
Right?
So that the point of this,

77
00:04:20.140 --> 00:04:24.220
instead of sending it directly to the recipient is so that it's untraceable and

78
00:04:24.221 --> 00:04:26.920
once the recipient receives that message,

79
00:04:27.130 --> 00:04:31.450
the recipient will then forward it on anyway to other peers nearby it to

80
00:04:31.451 --> 00:04:33.790
completely have it be a dark protocol.

81
00:04:33.910 --> 00:04:38.320
Now we can configure how dark we want it to be in that we can configure how much

82
00:04:38.321 --> 00:04:43.321
we want to give up in terms of speed and bandwidth and computational cost in

83
00:04:43.991 --> 00:04:48.490
terms of preserving.
That's kind of a identity hiding,

84
00:04:50.110 --> 00:04:51.860
right?
So nodes or message to neighboring nodes,

85
00:04:51.880 --> 00:04:54.820
etc. And it's an identity based messaging system,

86
00:04:54.821 --> 00:04:57.070
so everybody in the network has an identity.

87
00:04:57.071 --> 00:05:02.071
This is a unique key that's generated via via the Sha two five six hashing

88
00:05:02.201 --> 00:05:06.010
algorithm.
So at its most secure mode of operation,

89
00:05:06.011 --> 00:05:09.250
it can theoretically does deliver 100% darkness.

90
00:05:09.580 --> 00:05:13.630
So there's a trade off though between the level of privacy you desire and the

91
00:05:13.631 --> 00:05:18.400
performance it's included by default in the go.
If theory,

92
00:05:18.401 --> 00:05:21.610
I'm client get under the peer to peer package PTP.

93
00:05:24.190 --> 00:05:27.460
And so crucially,
in order to prevent ddosing,

94
00:05:27.461 --> 00:05:30.970
so if you think about this idea of how the messages are being routed,

95
00:05:31.150 --> 00:05:32.770
you might be wondering,
wait a second,

96
00:05:32.920 --> 00:05:36.670
can someone just spam the network by sending millions of messages to all the

97
00:05:36.671 --> 00:05:40.030
peers and then it's just going to call some of the peers to go offline because

98
00:05:40.031 --> 00:05:43.300
of the amount of bandwidth and storage it's requiring,

99
00:05:43.330 --> 00:05:45.460
even though it's a femoral.
Well,

100
00:05:45.490 --> 00:05:49.030
the way they prevent that is by using a proof of work algorithm.

101
00:05:49.300 --> 00:05:54.300
So messages will be process it process and forward if further only if the proof

102
00:05:55.631 --> 00:05:59.300
of work exceeds a threshold,
otherwise they will be dropped.

103
00:05:59.540 --> 00:06:02.960
So all the notes are performing a proof of work on the message.

104
00:06:03.140 --> 00:06:07.310
So there's a kind of computational threshold to the amount of messages you can

105
00:06:07.311 --> 00:06:09.950
send and this prevents spamming the network.

106
00:06:11.120 --> 00:06:13.370
So what are the use cases of with of whisper?

107
00:06:13.370 --> 00:06:18.020
So what I have here is a diagram of a decentralized games,
specifically chess.

108
00:06:18.350 --> 00:06:22.160
And so notice that there are two players in this game and these players are

109
00:06:22.161 --> 00:06:25.160
using the blockchain for the application level construct.

110
00:06:25.490 --> 00:06:28.820
What do the players have to agree upon?
I think about it for a second.

111
00:06:29.960 --> 00:06:34.010
They have to agree upon the state of the game.
Who's winning,
who's losing,

112
00:06:34.190 --> 00:06:37.550
how many pieces is each player having the game we can store that made it

113
00:06:37.551 --> 00:06:41.690
metadata on the blockchain,
right?
And when it comes to the actual storage,

114
00:06:41.691 --> 00:06:43.160
the heavy loads of,
you know,

115
00:06:43.190 --> 00:06:47.090
what these objects look like and the shades and all that that we can store in a

116
00:06:47.091 --> 00:06:50.240
distributed hash table like for storage,
right?
Swarm.

117
00:06:50.540 --> 00:06:51.890
But when it comes to whisper,

118
00:06:52.100 --> 00:06:55.820
whisper is used for them to communicate with each other as in,
okay,

119
00:06:55.850 --> 00:06:58.280
we see that this player is in a new state,

120
00:06:58.430 --> 00:07:02.240
let's sign the new state and increment the move count until the other player.

121
00:07:02.480 --> 00:07:05.840
Right?
So it's kind of a message,
passage passing framework.

122
00:07:07.190 --> 00:07:12.190
And so that's neat to publish small amounts of nonpersistent information with a

123
00:07:12.411 --> 00:07:15.620
preset TTL.
That means time to live,
right?
We can,

124
00:07:15.621 --> 00:07:19.550
it can be anywhere from 10 minutes to two days.
Right.
If you're dap needs that,

125
00:07:19.580 --> 00:07:21.560
then this was a good use case.
Right?

126
00:07:21.710 --> 00:07:26.030
And if your dap needs to communicate with another one prior to actually sending

127
00:07:26.031 --> 00:07:28.580
a transaction,
this would be a good use case.
Right?

128
00:07:28.581 --> 00:07:33.050
So before let's say two nodes want to send a transaction to each other,

129
00:07:33.170 --> 00:07:34.640
they need to set up a deal,
right?

130
00:07:34.641 --> 00:07:38.750
And they need to settle how much they want to send to each other.
When a,

131
00:07:38.751 --> 00:07:40.820
what are the preconditions for that transaction?

132
00:07:40.970 --> 00:07:43.190
Whisper would be a great use case for that.
Right?

133
00:07:43.191 --> 00:07:46.250
Cause so they can communicate and before they send the transaction,

134
00:07:47.480 --> 00:07:50.450
if you have adapt that provides non realtime updates,

135
00:07:50.660 --> 00:07:54.050
this would be useful as well.
So remember at whisper is not in real time.

136
00:07:54.051 --> 00:07:59.051
There is that cost in latency and in speed to ensure darkness and status is an

137
00:08:00.891 --> 00:08:04.010
example of an of a messaging APP.
Look up status.
Just status.

138
00:08:04.030 --> 00:08:09.030
If theory that is using whisper in production and they raised $44 million in a

139
00:08:12.320 --> 00:08:17.210
few minutes using an ICO and they're probably the most widely used APP that uses

140
00:08:17.211 --> 00:08:20.210
a theory I'm today and it's specifically the whisper protocol.

141
00:08:21.860 --> 00:08:25.840
So there have been a lot of existing solutions that whisper has built on.
Uh,

142
00:08:25.880 --> 00:08:28.940
for example,
UDP,
which is a similar at an API level,

143
00:08:29.090 --> 00:08:33.110
they kind of took bits and pieces of these ideas from similar protocols and just

144
00:08:33.140 --> 00:08:36.620
use the best of them,
which is generally how good research should happen.

145
00:08:37.130 --> 00:08:40.610
They've got a big message was another example,
Tele Hash talks.

146
00:08:40.970 --> 00:08:42.410
They all had their pros and cons,

147
00:08:42.411 --> 00:08:45.860
but they kind of tried to synthesize the best ideas from all of them,

148
00:08:45.861 --> 00:08:50.210
similar to how IPFS was created.
But it has some really great features.

149
00:08:50.211 --> 00:08:54.800
So when it comes to whisper,
the API is only exposed to contracts,

150
00:08:54.830 --> 00:08:57.720
never to user accounts.
It's low bandwidth.

151
00:08:57.721 --> 00:09:00.270
So it's only designed for smaller data transfers.

152
00:09:00.390 --> 00:09:03.000
You shouldn't be sending giant movies on this thing,
right?

153
00:09:03.001 --> 00:09:06.750
Just think about texts,
right?
Just strings of data.

154
00:09:07.620 --> 00:09:11.160
There's an unpredictable latency because there is a probabilistic routing

155
00:09:11.161 --> 00:09:14.580
mechanism here.
So this adds to the darkness feature that I want to talk about,

156
00:09:14.581 --> 00:09:18.230
right?
So because the routing isn't deterministic,

157
00:09:18.240 --> 00:09:22.530
meaning that we can't know who you're going to send those messages to,

158
00:09:22.531 --> 00:09:25.920
which order appears,
there's a probabilistic aspect to it,

159
00:09:26.190 --> 00:09:29.640
then we can never trace back who it was or what that route was.

160
00:09:29.641 --> 00:09:32.250
We can't predict the route.
So that's just for the darkness.

161
00:09:32.251 --> 00:09:36.210
But because of that probabilistic nature,
we cannot predict the latency,

162
00:09:36.270 --> 00:09:38.220
how long it's gonna take to get your recipient.

163
00:09:40.860 --> 00:09:44.430
And so all API calls for whisper are contained in the web,

164
00:09:44.431 --> 00:09:46.770
three dot s h h object,
all of them.

165
00:09:47.070 --> 00:09:51.060
And we can type that into an interactive consult to get a list of all functions

166
00:09:51.300 --> 00:09:55.080
and variables that are provided.
So if we look at this code snippet here,

167
00:09:55.380 --> 00:09:59.190
Var f equals web three dot.
S H h.
Dot filter.

168
00:09:59.400 --> 00:10:02.670
And then we'll have a topic.
This is a topic for the message.
What is it about?

169
00:10:02.970 --> 00:10:06.600
It's kind of an identifier.
We'll say,
we'll use a get function to retrieve that.

170
00:10:06.930 --> 00:10:07.560
And we'll say,

171
00:10:07.560 --> 00:10:12.180
let's get the message via the topic and then post the message via that,
right?

172
00:10:12.181 --> 00:10:14.820
So we can get the message,
we can post it via the topic,

173
00:10:14.821 --> 00:10:16.590
that's the parameter that we can use.

174
00:10:16.770 --> 00:10:20.910
And we have these other parameters as well in terms of payload,
TTL worked,

175
00:10:20.960 --> 00:10:24.750
approve,
et cetera.
So the payload would be the message.

176
00:10:25.010 --> 00:10:26.460
TTL is a time to live,

177
00:10:26.580 --> 00:10:31.110
how long we want it to remain active in storage and work to prove is how much,

178
00:10:31.320 --> 00:10:35.850
how much work do we want it to require to,
uh,
compute that proof of work.

179
00:10:36.210 --> 00:10:37.770
So let's get right into the architecture.

180
00:10:37.771 --> 00:10:42.000
And I've got this really cool image of a solidity extension for visual studio

181
00:10:42.001 --> 00:10:46.590
just because it's awesome,
but it has nothing to do with the actual architecture.

182
00:10:46.591 --> 00:10:48.570
But yeah,
check that out.
If you use visual studio,

183
00:10:48.571 --> 00:10:51.930
this is a really cool way to integrate solidity into your ide.

184
00:10:52.640 --> 00:10:53.330
<v 1>Okay.</v>

185
00:10:53.330 --> 00:10:55.120
<v 0>Right?
So let's talk about the message object.</v>

186
00:10:55.350 --> 00:10:58.030
There are really two key objects here.
When we're talking about whisper,

187
00:10:58.031 --> 00:11:02.380
we had the message and then we have the envelope.
And so true,
true their name.

188
00:11:02.410 --> 00:11:05.890
We can store the message in the envelope and we send that to the user.

189
00:11:05.891 --> 00:11:07.060
These are just objects.

190
00:11:07.330 --> 00:11:11.920
So each message is accompanied by a unique process of message,
ceiling.

191
00:11:11.980 --> 00:11:14.860
So ceiling is the proof of work algorithm compression,

192
00:11:14.890 --> 00:11:18.490
which is just compressing it for faster data transfer and encryption.

193
00:11:18.520 --> 00:11:20.440
And this was just for security purposes.

194
00:11:20.890 --> 00:11:23.530
Each message has a lifespan of up to two days,
right?

195
00:11:23.531 --> 00:11:27.340
The TTL and the proof of work infusing consists of a simple shot,

196
00:11:27.341 --> 00:11:28.270
three hour them.

197
00:11:28.450 --> 00:11:32.550
And what we try to find the smallest number within a given timeframe,

198
00:11:32.770 --> 00:11:36.580
and this requires computing power to find the smallest number in a given

199
00:11:36.660 --> 00:11:40.320
timeframe.
So it kind of looks like this.

200
00:11:40.321 --> 00:11:44.220
So sending a whisper,
whisper message required you to number one,

201
00:11:44.221 --> 00:11:47.670
create a new whisper message.
Number two,
seal it.
Optionally,

202
00:11:47.671 --> 00:11:50.940
you can encrypt it and sign and supply with the topic of your choice.

203
00:11:51.240 --> 00:11:55.320
And number three is send it to your,
so this is in go right if you,
if,

204
00:11:55.380 --> 00:11:57.910
if we want it to write this and go,
we could,
uh,

205
00:11:57.940 --> 00:11:59.970
but just because the client has written in gold,

206
00:11:59.971 --> 00:12:03.190
but we can easily write it with javascript.
It doesn't matter if you don't know,

207
00:12:03.191 --> 00:12:07.360
go just,
just take a look at this four lines snippet of code.
So we have a topic,

208
00:12:07.390 --> 00:12:11.290
a message,
an envelope,
we seal it and then we send it.
Boom.
Just like that,
right?

209
00:12:11.320 --> 00:12:15.790
Very easy.
Four steps that we can do the same if we want to listen to messages,

210
00:12:15.791 --> 00:12:19.780
right?
So if we're,
if we are a recipient,
if we're intending to receive a message,

211
00:12:19.960 --> 00:12:20.381
we can say,

212
00:12:20.381 --> 00:12:24.670
well this is the topic that we are waiting for and now we can use the watch

213
00:12:24.880 --> 00:12:29.140
event listener of the whisper object to wait for that topic to,
to come into our,

214
00:12:29.470 --> 00:12:32.590
to our network and then we can print out what it is once we receive it.

215
00:12:32.980 --> 00:12:36.910
Very similar to event listeners in javascript.
So how does this ceiling work?

216
00:12:36.911 --> 00:12:40.990
Right?
So proof of work.
We know that in Bitcoin and etherium in general,

217
00:12:40.991 --> 00:12:45.250
they be consensus layer uses a proof of work algorithm using Sha two five,
six.

218
00:12:45.640 --> 00:12:48.640
Well,
this one uses shot through to find the smallest number.

219
00:12:49.780 --> 00:12:50.613
<v 1>Okay.</v>

220
00:12:50.680 --> 00:12:55.570
<v 0>What I mean by that is we have to hash the contents of the message over and over</v>

221
00:12:55.571 --> 00:12:59.590
and over again into the smallest possible number that we can get it to via a

222
00:12:59.591 --> 00:13:01.990
proof of work that that is the proof of work.

223
00:13:01.991 --> 00:13:06.280
The work that is being computed by the minor.
In this case,

224
00:13:06.281 --> 00:13:10.900
it's any node can be a minor in terms of whisper is how small can we make that

225
00:13:10.901 --> 00:13:12.720
number by repeatedly hashing it

226
00:13:15.020 --> 00:13:17.870
and we can set how long we want to do that,
right?
That's that.

227
00:13:17.900 --> 00:13:19.760
That's that parameter.
When we send a message,

228
00:13:19.970 --> 00:13:24.350
how much do we want to offer the proof of work?
So the cost of computing,

229
00:13:24.351 --> 00:13:27.680
it can be regarded as the price you pay for allocated resources.

230
00:13:27.860 --> 00:13:30.980
If you want the network to store your message for a specific time.

231
00:13:31.250 --> 00:13:31.620
<v 1>Yeah,</v>

232
00:13:31.620 --> 00:13:33.480
<v 0>and we can call this the best bit.</v>

233
00:13:33.510 --> 00:13:38.340
The best bit is the number of leading zeroes of zero bits in the hash divided by

234
00:13:38.341 --> 00:13:39.870
the message size and TTL.

235
00:13:39.990 --> 00:13:43.440
And that is the proof of work that just repeats over and over and over and over

236
00:13:43.441 --> 00:13:43.830
again.

237
00:13:43.830 --> 00:13:48.090
But it results in a single aggregated parameter for the message rating or a

238
00:13:48.091 --> 00:13:51.420
scaler.
What that means is us,
we as developers,

239
00:13:51.570 --> 00:13:54.420
if we want our messages to have priority over others,

240
00:13:54.690 --> 00:13:58.080
then we'll need to spend more computational resources sealing them.

241
00:13:58.230 --> 00:14:03.230
So we can set that parameter higher if we want to have priority over others in

242
00:14:04.111 --> 00:14:08.920
the network,
meaning faster data transfer for your message.
So,

243
00:14:08.960 --> 00:14:11.500
uh,
with for messages are encrypted by default.

244
00:14:11.680 --> 00:14:16.680
Now the [inaudible] developers encourage developers to use their own form of

245
00:14:17.981 --> 00:14:20.840
encryption on top of the standard encryption.
Uh,

246
00:14:20.860 --> 00:14:25.660
but that just exists as a kind of default state and they can be encrypted either

247
00:14:25.710 --> 00:14:30.320
symmetrically or asymmetrically.
Remember for symmetric encryption,
uh,

248
00:14:30.400 --> 00:14:34.420
they use the same key for encrypting and decrypting.
For asymmetric encryption,

249
00:14:34.600 --> 00:14:37.240
we use different keys for encrypting and decrypting,
right?

250
00:14:37.270 --> 00:14:39.370
Public private key pair similar to bitcoin.

251
00:14:42.410 --> 00:14:43.243
<v 1>Okay.</v>

252
00:14:44.230 --> 00:14:46.240
<v 0>Right?
So when it comes to decrease decryption,</v>

253
00:14:46.241 --> 00:14:48.040
this takes place using a private key.

254
00:14:48.070 --> 00:14:52.730
If the message envelope was encrypted by no more than one sender.
Okay.

255
00:14:52.731 --> 00:14:55.880
So that's it for encryption decryption ceiling.

256
00:14:56.030 --> 00:14:59.450
We know the kind of routing mechanism that whisper uses.

257
00:14:59.540 --> 00:15:03.290
We know that it's a part of the theory I'm stack when it comes to communication

258
00:15:03.291 --> 00:15:05.600
between dapps.
Let's look at this example.

259
00:15:05.601 --> 00:15:08.930
I have here about a way to send it to other peers in the network.

260
00:15:09.380 --> 00:15:12.740
So I've got the,
the DAP that I just showed you in the browser.

261
00:15:12.890 --> 00:15:16.340
I've got get up and running here as well,
so we can see the blockchain running.

262
00:15:16.341 --> 00:15:18.680
But,
uh,
let's,
let's look at this.

263
00:15:18.681 --> 00:15:22.190
So it's using Vue Vue,
which is,
uh,

264
00:15:22.250 --> 00:15:26.780
which is a very simple framework for building web apps,
right?

265
00:15:26.781 --> 00:15:29.390
So in our case,
this would be a web three APP,

266
00:15:30.860 --> 00:15:34.500
but let's take a look in,
in this file,
whisper,
chat dot Vue,
which is really the,

267
00:15:34.740 --> 00:15:38.840
the main code that we want to look at.
So it starts off with some html,
you know,

268
00:15:38.890 --> 00:15:43.280
Hetero is dibs.
This is our chat application.
Here are some,
uh,

269
00:15:43.370 --> 00:15:47.030
variables that we are computing before the asymmetric public key because we're

270
00:15:47.031 --> 00:15:50.120
using asymmetric encryption.
In this example,

271
00:15:50.330 --> 00:15:53.960
here's our public key that ended up send a message easily hitting this button

272
00:15:54.170 --> 00:15:57.310
and then it's going to send it to everybody else.
Now here is the really the,
the,

273
00:15:57.311 --> 00:15:58.610
the key bit here.
So,

274
00:15:59.520 --> 00:16:00.353
<v 1>okay,</v>

275
00:16:00.550 --> 00:16:03.670
<v 0>so now we're going to look at these constant values here.</v>

276
00:16:03.671 --> 00:16:05.800
So it's using a little bit of embedded go.

277
00:16:05.980 --> 00:16:08.650
Don't worry if you haven't used go before.
It's a very simple language.

278
00:16:08.651 --> 00:16:10.810
I'm going to go through it with you right now.

279
00:16:10.960 --> 00:16:13.090
We're going to import some very important libraries.

280
00:16:13.091 --> 00:16:17.200
Web three is if [inaudible] the library for communicating with its stack in

281
00:16:17.201 --> 00:16:21.220
general.
We have two libraries for symmetric and asymmetric encryption.

282
00:16:21.400 --> 00:16:22.850
And then we have a Hex,
uh,

283
00:16:23.050 --> 00:16:26.650
a hexadecimal encoding a library as well.

284
00:16:26.980 --> 00:16:29.530
So the first thing we're going to do is we're going to say,
okay,

285
00:16:29.531 --> 00:16:32.800
this is our data.
We have some message,
it's got an associated key,

286
00:16:33.070 --> 00:16:34.240
it's got a private key,

287
00:16:34.420 --> 00:16:37.990
and we're going to create a new key pair for this data specifically.

288
00:16:38.380 --> 00:16:43.260
And then we're going to return that data.
So now we have this data object,
right?

289
00:16:43.650 --> 00:16:47.670
So the next step for us is going to be to define this.
Send a message,

290
00:16:47.700 --> 00:16:50.910
function call,
right?
So in send message,
we create a message.

291
00:16:50.970 --> 00:16:53.190
The message has a text,
it's got a name,

292
00:16:53.550 --> 00:16:56.550
and then it has those key parameters we talked about before,
right?

293
00:16:56.730 --> 00:16:59.970
What's the TTL is by default,
it's going to be seven.
What's the topic?

294
00:16:59.971 --> 00:17:03.480
We're going to use hexadecimal for the topic.
Just for simplicity sake.

295
00:17:03.840 --> 00:17:07.350
What's our proof of work?
Target.
Let's say 2.01.
Remember it's a scaler,

296
00:17:07.560 --> 00:17:11.070
how long a hundred.
What's the payload?

297
00:17:11.071 --> 00:17:13.890
And that is going to be our message,
right?
We're going to string a Phi,

298
00:17:13.891 --> 00:17:17.250
that message encoded to hexadecimal,
and that's our payload for the message.

299
00:17:17.251 --> 00:17:21.300
That's what we,
the data that we want to send in this,
uh,
in this envelope

300
00:17:23.270 --> 00:17:26.300
we have another function for updating the symmetric key if necessary.

301
00:17:26.750 --> 00:17:31.250
And then we have a configuration function as well.
But the really,
the really key,

302
00:17:31.290 --> 00:17:36.140
uh,
function here is us saying this.
We're going to say,
get the filter messages.

303
00:17:36.350 --> 00:17:38.840
And then we're going to receive those messages as well,

304
00:17:39.020 --> 00:17:41.120
and then we're going to push them,
right?
So we can eat a,

305
00:17:41.121 --> 00:17:44.660
receive those messages or we can push those messages to other peers.

306
00:17:44.990 --> 00:17:48.920
And when we pushed them,
we can use the push function right here and we can sit,

307
00:17:48.930 --> 00:17:52.050
we can print them out here,
we can set our variables,
et Cetera,
et cetera.

308
00:17:54.860 --> 00:17:57.570
Well,
yeah,
it's,
it's a,
it's a pretty simple protocol.
Um,

309
00:17:57.650 --> 00:18:00.320
all the API is available in the documentation.

310
00:18:00.640 --> 00:18:03.380
I'm going to have great links for you in the description as well,

311
00:18:03.530 --> 00:18:05.150
but definitely take a look at this protocol.

312
00:18:05.151 --> 00:18:07.970
I think it's very cool and it's going to be a crucial part,

313
00:18:07.971 --> 00:18:12.140
whether it's whisper or some other peer to peer chat protocol of Building Adap,

314
00:18:12.230 --> 00:18:14.420
right?
We cannot store everything in the blockchain.

315
00:18:14.600 --> 00:18:17.600
We cannot store anything on a server if we're building adapt or else it's not

316
00:18:17.601 --> 00:18:20.930
decentralized and we cannot store everything in IPFS.

317
00:18:21.140 --> 00:18:25.550
We have to have some way for notes and communicate in as close to real time as

318
00:18:25.551 --> 00:18:29.180
possible while preserving darkness while preserving privacy.

319
00:18:29.360 --> 00:18:32.690
Please subscribe for more programming videos.
And for now,
I'm going to go dark,

320
00:18:32.990 --> 00:18:34.190
so thanks for watching.

