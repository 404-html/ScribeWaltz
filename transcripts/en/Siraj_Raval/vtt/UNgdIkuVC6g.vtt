WEBVTT

1
00:00:00.240 --> 00:00:03.600
Use Ai to fight bad guys.
Hello world,

2
00:00:03.630 --> 00:00:08.630
it's Saroj and internet fraud is a huge problem and fraud techniques get more

3
00:00:09.181 --> 00:00:10.740
sophisticated every day.

4
00:00:11.220 --> 00:00:15.840
We'll build a demo APP in this video that uses AI to identify fraudulent

5
00:00:15.841 --> 00:00:18.300
transactions from a transaction dataset.

6
00:00:18.780 --> 00:00:23.550
Millions of consumers are victims of identity theft or fraud every year,

7
00:00:23.880 --> 00:00:27.210
and that number seems to be going up in the past few years.

8
00:00:27.570 --> 00:00:29.160
The numbers are pretty shocking.

9
00:00:29.340 --> 00:00:34.340
Just last year there was a larger share of young people between the ages of 20

10
00:00:34.620 --> 00:00:37.080
and 29 that had fraud complaints.

11
00:00:37.260 --> 00:00:42.260
Then there were senior citizens age 70 or older according to a report from the

12
00:00:42.271 --> 00:00:43.104
FTC,

13
00:00:43.530 --> 00:00:47.580
and it's not even about how educated a victim is.

14
00:00:47.820 --> 00:00:52.820
More than half of the people who suffered a fraud related financial loss had a

15
00:00:52.891 --> 00:00:57.891
financial degree in 2016 today's fraud risks aren't just about payments.

16
00:00:58.380 --> 00:01:00.840
All companies,
both small and large,

17
00:01:00.990 --> 00:01:04.530
have to protect themselves and their users from identity theft,

18
00:01:04.830 --> 00:01:07.650
fake user accounts,
man in the middle attacks,

19
00:01:08.070 --> 00:01:09.840
there's a lot of risks to manage.

20
00:01:10.350 --> 00:01:15.350
I really hope content got hacked and the world of cryptocurrency has opened up a

21
00:01:16.171 --> 00:01:21.171
Pandora's box of deception from shady exchanges to pyramid schemes to pump and

22
00:01:22.381 --> 00:01:24.000
dumps.
As you can see,

23
00:01:24.030 --> 00:01:29.030
there's a massive need for solutions to help both consumers and businesses keep

24
00:01:29.761 --> 00:01:32.760
themselves safe,
but how is this being done right now?

25
00:01:33.210 --> 00:01:38.210
Over 90% of online fraud detection platforms use transaction rules to direct

26
00:01:39.390 --> 00:01:42.780
suspicious transactions through a human review process.

27
00:01:43.140 --> 00:01:46.230
This is a traditional rule based approach.
For example,

28
00:01:46.231 --> 00:01:50.580
we could programmatically define that if a purchase is made in a dangerous

29
00:01:50.581 --> 00:01:55.581
location like Zuckerberg office and the purchase amount is over some threshold,

30
00:01:56.640 --> 00:01:58.290
then we can label it as fraud.

31
00:01:58.770 --> 00:02:03.770
The result of this process is generally a binary labeling of a transaction as

32
00:02:04.261 --> 00:02:05.940
either authentic or fraud.

33
00:02:06.390 --> 00:02:11.390
The huge disadvantage here is that this process has a very high occurrence of

34
00:02:11.670 --> 00:02:12.810
false positives.

35
00:02:13.170 --> 00:02:17.730
That means just your average consumer wanting to make a purchase is going to get

36
00:02:17.731 --> 00:02:21.600
flagged as fraudulent for no reason.
This is a big no,
no.

37
00:02:21.630 --> 00:02:24.240
It means they won't shop at a business again,

38
00:02:24.241 --> 00:02:27.300
since no one wants to be flagged for no reason.

39
00:02:27.750 --> 00:02:32.750
It also means that businesses have to invest time and money into exhaustive

40
00:02:33.871 --> 00:02:37.500
training for employees to work on manual review,

41
00:02:37.620 --> 00:02:41.430
which ends up increasing the time required to fulfill an order.

42
00:02:41.460 --> 00:02:44.970
There's gotta be a better way.
Consumers generate lots of data.

43
00:02:44.971 --> 00:02:49.350
The web is rich with data.
It's everywhere and it's surrounds everything.

44
00:02:49.351 --> 00:02:51.270
It's like the force IRL.

45
00:02:51.780 --> 00:02:56.780
Why create rule based systems when we can use algorithms to learn from the rich

46
00:02:57.150 --> 00:03:01.570
detailed datasets that consumers are generating just by browsing the web.

47
00:03:01.990 --> 00:03:06.990
I mean machine learning is the science of designing and applying algorithms that

48
00:03:07.721 --> 00:03:10.360
are able to learn from the past,
right.

49
00:03:10.600 --> 00:03:15.600
Ai Can detect and recognize thousands of patterns of a user's purchasing journey

50
00:03:16.720 --> 00:03:21.040
instead of the few captured by creating rules,
fraud patterns.

51
00:03:21.041 --> 00:03:26.041
We wouldn't even think of tracking like time spent hovering the mouse over a

52
00:03:26.231 --> 00:03:28.030
specific region of the screen.

53
00:03:28.270 --> 00:03:32.290
While mining tron coin online businesses want fast,

54
00:03:32.380 --> 00:03:37.380
scalable and efficient solutions for fraud detection and AI startups can provide

55
00:03:37.601 --> 00:03:39.940
that for them.
Junio,
for example,

56
00:03:39.941 --> 00:03:44.941
helps businesses authenticate potential customers by letting them take a picture

57
00:03:45.250 --> 00:03:50.250
of their photo id and use their phone or computer to scan their face.

58
00:03:50.740 --> 00:03:55.740
They use computer vision to verify that the person matches the photo in the ID I

59
00:03:56.440 --> 00:04:01.330
iovation is another startup that helps businesses prevent mobile fraud by

60
00:04:01.360 --> 00:04:05.530
automatically collecting information about the consumer's device.

61
00:04:05.830 --> 00:04:06.430
For example,

62
00:04:06.430 --> 00:04:11.290
eye ovation could notice a device was used to make a big purchase in the

63
00:04:11.291 --> 00:04:12.820
previous 12 hours.

64
00:04:13.180 --> 00:04:18.180
Then check to see if a phone number is connected to more than say three devices

65
00:04:18.730 --> 00:04:22.210
and see if the purchase is coming from a high risk location.

66
00:04:22.570 --> 00:04:27.570
Bio catch builds user profiles based on over 500 cognitive parameters including

67
00:04:28.541 --> 00:04:29.770
behavioral patterns.

68
00:04:30.040 --> 00:04:33.670
This way it learns what it looks like when fraudsters create accounts,

69
00:04:33.850 --> 00:04:36.580
purchase products,
or even browse websites.

70
00:04:37.000 --> 00:04:39.850
So how do we solve this problem using AI?

71
00:04:40.330 --> 00:04:44.950
The first step in this process is to gather in segments some quality transaction

72
00:04:44.951 --> 00:04:46.600
data.
If we can find this,

73
00:04:46.601 --> 00:04:51.310
we can train a model on it to predict the probability of a transaction being

74
00:04:51.311 --> 00:04:52.144
fraudulent.

75
00:04:52.330 --> 00:04:57.330
Ideally we can find a labeled data set and we can use Google to find some where

76
00:04:57.550 --> 00:05:01.390
each transaction is labeled as either valid or fraudulent.

77
00:05:01.690 --> 00:05:06.340
A quality dataset is especially important in this case because we're talking

78
00:05:06.341 --> 00:05:07.900
about the payments industry.

79
00:05:08.290 --> 00:05:13.290
Usually government websites from across the world will be a good source for this

80
00:05:13.570 --> 00:05:17.050
based off the types of transactions that are available to us.

81
00:05:17.260 --> 00:05:20.830
We can pick a specific niche to target easily.

82
00:05:21.130 --> 00:05:26.130
We can't verify our hypotheses of a potential solution by browsing online

83
00:05:26.411 --> 00:05:31.411
communities where ecommerce business owners converse and see if they are having

84
00:05:31.661 --> 00:05:33.370
the problem we're trying to solve.

85
00:05:33.730 --> 00:05:37.900
Then share a landing page of our stealth product to see if we can get any

86
00:05:37.901 --> 00:05:40.930
signups.
If we do,
we have market validation.

87
00:05:41.050 --> 00:05:45.250
The main use case of machine learning in fraud detection is the prediction.

88
00:05:45.550 --> 00:05:50.500
We want to predict the value of some help put that would be a boolean value in

89
00:05:50.501 --> 00:05:51.334
our case,

90
00:05:51.520 --> 00:05:55.600
fraud or not fraud given some input values like the country,

91
00:05:55.601 --> 00:05:59.210
the card was issued in where it was used,
et cetera.

92
00:05:59.480 --> 00:06:03.680
When we build our model,
we have to decide what kind of prediction problem.

93
00:06:03.890 --> 00:06:08.150
This will be either a classification problem or a regression problem.

94
00:06:08.540 --> 00:06:12.920
Let's pick classification.
Since we're trying to classify a transaction.

95
00:06:13.280 --> 00:06:17.720
One very simple model to use for classification is a decision tree.

96
00:06:17.890 --> 00:06:22.400
There are essentially a set of rules that are trained slash updated using

97
00:06:22.401 --> 00:06:25.640
examples of fraud that clients face.

98
00:06:25.850 --> 00:06:28.790
The creation of a tree ignores irrelevant features.

99
00:06:28.970 --> 00:06:33.410
It can also be inspected visually so we can understand why a certain decision

100
00:06:33.411 --> 00:06:38.150
was made by following the list of rules triggered by a certain customer.

101
00:06:38.420 --> 00:06:42.590
It gives us a probability score of fraud based on earlier scenarios.

102
00:06:42.890 --> 00:06:47.240
We can use the popular psychic learn library to do this in just a few lines of

103
00:06:47.241 --> 00:06:47.960
code.

104
00:06:47.960 --> 00:06:52.960
All of it can be done in python and the accuracy can be tested just as easily.

105
00:06:53.300 --> 00:06:56.270
Another model we can use is called logistic regression.

106
00:06:56.540 --> 00:07:00.590
This doesn't try to predict the value of a numeric variable given a set of

107
00:07:00.591 --> 00:07:02.060
inputs.
Instead,

108
00:07:02.090 --> 00:07:07.040
the output is a probability that the given input point belongs to in a certain

109
00:07:07.041 --> 00:07:11.090
class.
It measures the strength of cause and effect relationships.

110
00:07:11.260 --> 00:07:15.620
In structured data sets by assessing the predictive power of individual

111
00:07:15.621 --> 00:07:20.621
variables or combinations of variables as part of a larger fraud strategy.

112
00:07:21.380 --> 00:07:25.850
The authentic transactions are compared with the fraudulent ones to create an

113
00:07:25.880 --> 00:07:30.470
algorithm and eventually it can be used to predict whether a transaction is

114
00:07:30.471 --> 00:07:35.030
fraudulent or not.
We can do this with psychic learn as well.
Simple Algorithm,

115
00:07:35.270 --> 00:07:37.490
few lines of code,
and we can train it locally,

116
00:07:37.730 --> 00:07:42.680
but of course the real fun occurs when we apply deep learning that our neural

117
00:07:42.681 --> 00:07:46.880
networks,
yes,
it requires a big dataset and lots of computing power,

118
00:07:47.090 --> 00:07:51.410
but it blows all the other models out of the water in terms of accuracy.

119
00:07:51.800 --> 00:07:55.430
If we have those two things,
so let's solve it or die trying.

120
00:07:56.000 --> 00:08:00.230
Ideally we don't even need labels.
We could do this unsupervised.
In other words,

121
00:08:00.470 --> 00:08:02.630
we could just remove the labels from our dataset.

122
00:08:03.020 --> 00:08:06.110
So many different types of neural nets for us to choose from.

123
00:08:06.410 --> 00:08:10.670
We need one that can learn and memorize the patterns of the normal transactions

124
00:08:10.671 --> 00:08:11.504
during training,

125
00:08:11.660 --> 00:08:16.460
since those are the majority of transactions on auto encoder would be perfect.

126
00:08:16.730 --> 00:08:21.730
This is a type of network that approximates the function f of x equals x meaning

127
00:08:22.250 --> 00:08:23.330
given an input x,

128
00:08:23.540 --> 00:08:28.130
the network will learn to output f of x that is as close to aix as possible.

129
00:08:28.430 --> 00:08:31.250
It will reconstruct the input as it's output.

130
00:08:31.340 --> 00:08:34.520
Sounds counterintuitive and useless,
right?
Wrong.

131
00:08:34.820 --> 00:08:39.200
The difference between the output and input is measured as the error.

132
00:08:39.440 --> 00:08:42.890
It's what we tried to minimize during training so that the output looks more

133
00:08:42.891 --> 00:08:44.450
like the input over time.

134
00:08:44.840 --> 00:08:49.280
An autoencoder follows a typical feed forward neural network architecture,

135
00:08:49.460 --> 00:08:54.230
except that the output layer has exactly the same number of neurons as the input

136
00:08:54.231 --> 00:08:58.080
layer it the input data itself as its target value.

137
00:08:58.110 --> 00:09:00.270
Half of the network is considered the encoder.

138
00:09:00.510 --> 00:09:05.190
It's job is to embed the input data into a lower dimensional representation.

139
00:09:05.400 --> 00:09:09.810
This is a group of numbers that represents the input data in the most dense way

140
00:09:09.811 --> 00:09:12.810
possible.
Think of it like a compressed file.

141
00:09:13.050 --> 00:09:15.390
The other half of the network is the decoder.

142
00:09:15.450 --> 00:09:19.770
It tries to decode the embedded representation back into the original one.

143
00:09:19.800 --> 00:09:24.630
We are relying on an autoencoder to learn the common patterns shared by the

144
00:09:24.631 --> 00:09:27.960
majority of the training data during the reconstruction period.

145
00:09:28.110 --> 00:09:32.250
The era will be high for the data points that don't conform to those patterns.

146
00:09:32.520 --> 00:09:36.330
These are the anomalies were detecting which will hopefully be the fraudulent

147
00:09:36.331 --> 00:09:37.164
transactions.

148
00:09:37.440 --> 00:09:41.940
We can build this in tensorflow with the same amount of layers for both the

149
00:09:41.950 --> 00:09:44.970
encoder and the decoder.
After training,

150
00:09:45.030 --> 00:09:49.080
they will tell us transactions that are very likely fraudulent and we can apply

151
00:09:49.081 --> 00:09:53.820
this learned model to the transaction data set of one of our first clients to be

152
00:09:53.821 --> 00:09:54.240
saved.

153
00:09:54.240 --> 00:09:58.950
We can manually review those transactions as well at first and continually fine

154
00:09:58.951 --> 00:10:03.090
tune and improve our model algorithmically by adding more data and more

155
00:10:03.091 --> 00:10:03.960
computing power.

156
00:10:04.200 --> 00:10:08.310
If some transaction is above a certain threshold that we define in terms of

157
00:10:08.311 --> 00:10:11.850
fraud likelihood,
we can put it on hold for manual human review.

158
00:10:12.210 --> 00:10:14.370
Three closing points to remember wizards.

159
00:10:14.640 --> 00:10:17.970
Fraud is a massive problem for online businesses.

160
00:10:18.210 --> 00:10:23.210
It's nowhere near being solved and AI startups can offer them an awesome

161
00:10:23.551 --> 00:10:28.530
solution to reduce it.
We can use decision trees,
logistic regression models,

162
00:10:28.650 --> 00:10:32.070
and auto encoders to perform anomaly detection,

163
00:10:32.100 --> 00:10:36.870
identifying fraudulent transactions in a Dataset and auto encoders.

164
00:10:36.990 --> 00:10:38.490
Reconstruct the input data,

165
00:10:38.640 --> 00:10:41.700
which makes it an unsupervised machine learning technique.

166
00:10:42.630 --> 00:10:44.190
You made it to the end of the video.

167
00:10:44.220 --> 00:10:48.210
Pat Yourself on the back and pat that subscribe button for now.

168
00:10:48.270 --> 00:10:50.940
I've got to catch a fraudster,
so thanks for watching.

