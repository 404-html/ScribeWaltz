WEBVTT

1
00:00:00.060 --> 00:00:00.770
Hello world,

2
00:00:00.770 --> 00:00:05.490
it's Saroj and today we're going to build a blockchain in five minutes using

3
00:00:05.491 --> 00:00:07.470
python.
Ready?
Let's get started.

4
00:00:07.740 --> 00:00:12.150
A block is a data structure that contains data and some attributes.

5
00:00:12.420 --> 00:00:15.720
Blocks can be linked together to form a chain of blocks.

6
00:00:15.750 --> 00:00:17.160
This is called a blockchain.

7
00:00:17.340 --> 00:00:21.990
The bitcoin protocol uses of blockchain data structure to store transaction

8
00:00:21.991 --> 00:00:22.590
data,

9
00:00:22.590 --> 00:00:27.180
but we can store any kind of data in a blockchain to understand how it works.

10
00:00:27.210 --> 00:00:31.830
Let's code our own in the browser together using Google's colab environment.

11
00:00:32.070 --> 00:00:35.970
We'll also periodically view a blockchain demo in the browser as well.

12
00:00:35.971 --> 00:00:38.010
While we code for better comprehension,

13
00:00:38.160 --> 00:00:42.570
this will be a four step process in port our dependencies.
Create a blog,

14
00:00:42.690 --> 00:00:45.660
create a blockchain,
then print out the blog chain.

15
00:00:45.810 --> 00:00:50.250
First we'll want to import daytime so that we can generate timestamps for each

16
00:00:50.251 --> 00:00:52.860
block will also import hash lives.

17
00:00:52.860 --> 00:00:56.940
Since it contains an important algorithm will use to define our block.

18
00:00:57.180 --> 00:01:01.590
We can define our block as a python class.
Then define its attributes.

19
00:01:01.800 --> 00:01:06.450
Each block has seven attributes and we can list each as a distinct variable.

20
00:01:06.690 --> 00:01:10.950
First the number of the block so we can index each of them.
Next,

21
00:01:10.980 --> 00:01:12.750
the data we'll store in this block.

22
00:01:13.020 --> 00:01:15.780
Bitcoin's blockchain stores transactions in here,

23
00:01:15.870 --> 00:01:18.720
but we'll just store text strings in here.
For simplicity,

24
00:01:19.050 --> 00:01:23.610
we'll define a pointer to the next block as well as the hash of this block.

25
00:01:23.970 --> 00:01:28.530
A Hash is a function that converts data into a number within a certain range.

26
00:01:28.890 --> 00:01:33.450
The Hash serves as both a unique identifier for a block and verifies its

27
00:01:33.451 --> 00:01:34.284
integrity.

28
00:01:34.320 --> 00:01:39.320
More on that in a second we'll define a nonce or number only used once.

29
00:01:39.450 --> 00:01:42.780
We'll later use it to help compute a unique hash for our block.

30
00:01:43.140 --> 00:01:46.710
Then we'll define a previous hash which will store the hash of the previous

31
00:01:46.711 --> 00:01:51.540
block in the blockchain when we actually build a blockchain.
And lastly,

32
00:01:51.541 --> 00:01:55.380
we'll define a timestamp for a block using the daytime library.

33
00:01:55.920 --> 00:01:57.720
Now that we've defined our attributes,

34
00:01:57.721 --> 00:02:00.240
we can write the in it function for our class.

35
00:02:00.270 --> 00:02:04.830
It defines how we initialize a block using some provided data as the only

36
00:02:04.831 --> 00:02:08.610
parameter will also need to define a hash function for a block.

37
00:02:08.880 --> 00:02:13.880
The Hash Library contains the Popular Sha two five six algorithm,

38
00:02:14.130 --> 00:02:19.130
which generates a unique 256 bit signature that represents some piece of text.

39
00:02:20.010 --> 00:02:24.690
The input to our algorithm will be a concatenated string that consists of five

40
00:02:24.691 --> 00:02:26.130
of our block attributes.

41
00:02:26.160 --> 00:02:29.700
See how a hash is created using the unique attributes of a block.

42
00:02:30.030 --> 00:02:33.990
This means that if someone tries to change the hash of a block in a chain of

43
00:02:33.991 --> 00:02:38.991
blocks every block after it is changed since each blocks hash is generated in

44
00:02:39.301 --> 00:02:44.160
part using the hash of the previous block.
And before we finish our block class,

45
00:02:44.250 --> 00:02:48.000
let's write a small print function that will print out the value of a block.

46
00:02:48.390 --> 00:02:52.230
Now that we've defined our block class,
we can define our blockchain class.

47
00:02:52.410 --> 00:02:56.550
We'll define two key attributes of our chain of blocks or blockchain.
First,

48
00:02:56.790 --> 00:02:58.620
the genesis block and the head.

49
00:02:58.860 --> 00:03:02.620
The genesis block is what we call the first block and a block chain and we'll

50
00:03:02.621 --> 00:03:05.110
store this string genesis inside of it.

51
00:03:05.530 --> 00:03:09.910
The head will be the newest addition to our block as we add more blocks to our

52
00:03:09.911 --> 00:03:13.750
chain,
this head will be updated.
Speaking of adding blocks,

53
00:03:13.840 --> 00:03:17.920
let's write our ad function.
This will add a given block to the chain of blocks.

54
00:03:18.160 --> 00:03:22.390
The block to be added is the only parameter will need blockchains are just

55
00:03:22.391 --> 00:03:24.250
glorified linked lists.

56
00:03:24.490 --> 00:03:28.450
We can set the hash of a given block as our new blocks previous hash and set the

57
00:03:28.451 --> 00:03:33.010
block number of our new block as a given blocks number plus one since it's next

58
00:03:33.011 --> 00:03:36.370
in the chain.
Then we'll set the next block equal to itself.

59
00:03:36.580 --> 00:03:38.440
This is the new head of the blockchain.

60
00:03:38.980 --> 00:03:42.430
We now have one more function to write the mining function.

61
00:03:42.670 --> 00:03:46.360
This is what let's nodes in a network that don't necessarily know each other.

62
00:03:46.361 --> 00:03:50.170
Come to consensus on what the one true chain of blocks looks like.

63
00:03:50.470 --> 00:03:54.820
A chain that is immutable.
It requires computing power to mine a block.

64
00:03:54.850 --> 00:03:57.940
This is a defense mechanism and bitcoin's blockchain.

65
00:03:57.941 --> 00:04:01.570
An attacker would need the majority of the computing power in the network to

66
00:04:01.571 --> 00:04:05.110
modify a block and give themselves money they don't rightfully have.

67
00:04:05.380 --> 00:04:06.610
In the bitcoin network.

68
00:04:06.640 --> 00:04:11.050
51% of the computing power is more computing power than the 500 fastest

69
00:04:11.051 --> 00:04:12.490
supercomputers in the world.

70
00:04:12.491 --> 00:04:16.600
Combined and since no one has anything close to that much computing power,

71
00:04:16.780 --> 00:04:19.120
the network has survived for almost a decade.

72
00:04:19.121 --> 00:04:23.500
Now we'll need to define three additional attributes in our blockchain class,

73
00:04:23.620 --> 00:04:27.670
the Max nonce,
which is two to the 32nd it's the biggest number.

74
00:04:27.670 --> 00:04:31.720
We can store it in a 32 bit number.
Then a mining difficulty.

75
00:04:31.900 --> 00:04:35.320
We use the mining difficulty value to compute our target hash.

76
00:04:35.470 --> 00:04:38.440
It's going to be two to the 256 minus.

77
00:04:38.441 --> 00:04:42.220
Our difficulty in our mining function will determine if a given block,

78
00:04:42.221 --> 00:04:46.750
which will input as a parameter can be added to the blockchain for a range of

79
00:04:46.751 --> 00:04:50.800
numbers from zero to two to the 32nd or Max nones value.

80
00:04:50.890 --> 00:04:55.180
We'll check to see if the value of the given blocks hash is less than our target

81
00:04:55.181 --> 00:04:59.230
value.
This is exactly what bitcoins mining function does as well.

82
00:04:59.410 --> 00:05:00.221
If it's less,

83
00:05:00.221 --> 00:05:04.450
we'll add that block to the blockchain and break out of the loop else will

84
00:05:04.451 --> 00:05:08.350
increment the nones and repeat the process until we reached the end of the loop.

85
00:05:08.710 --> 00:05:13.510
The mining difficulty sets how computationally expensive it is to mine a block.

86
00:05:13.840 --> 00:05:16.420
The higher the number,
the longer it will take to mine,

87
00:05:16.630 --> 00:05:19.690
and the value of the nones after mining reflects that.

88
00:05:20.050 --> 00:05:23.740
Now that we've defined both classes,
we can initialize a blockchain.

89
00:05:24.070 --> 00:05:26.830
Then we'll write a loop to mind.
10 blocks.

90
00:05:27.010 --> 00:05:30.610
Each of them will be initialized by a unique string.
Finally,

91
00:05:30.611 --> 00:05:34.600
we'll print out each block in the blockchain.
If we compile this code,

92
00:05:34.601 --> 00:05:38.500
we'll see each block and our blockchain with its associated attributes,

93
00:05:38.530 --> 00:05:42.220
including the unique hash,
the data,
and the timestamp.

94
00:05:42.310 --> 00:05:44.080
I hope you found this tutorial useful.

95
00:05:44.290 --> 00:05:47.170
Please subscribe for more programming videos,
and for now,

96
00:05:47.200 --> 00:05:50.410
I've got to break the great firewall,
so thanks for watching.

