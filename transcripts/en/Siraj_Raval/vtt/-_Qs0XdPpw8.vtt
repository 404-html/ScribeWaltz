WEBVTT

1
00:00:00.120 --> 00:00:03.990
Hello world,
it's a Raj and today I'm going to go over etherium.

2
00:00:04.140 --> 00:00:08.610
That is the second biggest cryptocurrency behind bitcoin that lets us do

3
00:00:08.611 --> 00:00:09.870
incredible things.

4
00:00:10.200 --> 00:00:15.200
The demo that I'm going to build in this episode is a decentralized conference

5
00:00:15.451 --> 00:00:19.680
ticket purchasing web APP.
Let me show you what it looks like.
It's very simple.

6
00:00:19.681 --> 00:00:23.910
You can buy a ticket,
you can refund a ticket,
you can create a wallet,

7
00:00:24.090 --> 00:00:27.690
but the only functionality that we really care about is buying a ticket.

8
00:00:27.900 --> 00:00:31.560
So if we have some ticket price,
I can input some address.

9
00:00:31.690 --> 00:00:35.760
So that is my address and I can buy a ticket with the money that I have.

10
00:00:35.970 --> 00:00:39.360
And then the amount of registrants increases by one.

11
00:00:39.630 --> 00:00:42.810
It's a very simple web app that lets you buy tickets for a conference,

12
00:00:42.870 --> 00:00:47.160
but it's decentralized.
What benefits is decentralized offer in this case?

13
00:00:47.340 --> 00:00:52.200
Very few benefits.
One,
you don't have to worry about a third party taking a fee,

14
00:00:52.201 --> 00:00:55.140
so it's cheaper for both parties.
And two,

15
00:00:55.170 --> 00:00:57.300
it's censorship resistant,

16
00:00:57.450 --> 00:01:01.140
which isn't that big a deal for a conference ticket web APP.

17
00:01:01.290 --> 00:01:06.090
But the point is to talk about etherium and learn how contracts and the model

18
00:01:06.091 --> 00:01:09.720
view controller architecture of Web apps all play together.
Okay.

19
00:01:09.810 --> 00:01:12.510
So first of all,
what is a theory them?

20
00:01:12.750 --> 00:01:17.750
So if [inaudible] is a platform to easily build decentralized applications using

21
00:01:18.211 --> 00:01:19.260
blockchain technology.

22
00:01:19.380 --> 00:01:24.380
So we know that bitcoin was the first blockchain application and etherium does

23
00:01:25.321 --> 00:01:26.520
two applications.

24
00:01:26.521 --> 00:01:30.870
What bitcoin did for money that is removes the need for a trusted third party.

25
00:01:31.320 --> 00:01:32.640
So for the Bitcoin blockchain,

26
00:01:32.641 --> 00:01:37.440
we had blocks and these blocks are just are just objects,
right?
That store data,

27
00:01:37.620 --> 00:01:41.970
it's basically the blockchain is basically a glorified the linked list.
Okay.

28
00:01:41.971 --> 00:01:46.380
That store on everybody's computer and the etherium blockchain is very similar,

29
00:01:46.530 --> 00:01:50.310
except it's different in that what's stored in those blocks are not just

30
00:01:50.311 --> 00:01:55.170
transactions.
You can also store code snippets in those blocks,
smart contracts.

31
00:01:55.710 --> 00:01:59.880
That's really the key bit here.
Etherium is a programmable blockchain.

32
00:01:59.881 --> 00:02:03.570
While bitcoin isn't,
well,
bitcoin does have its own scripting language,

33
00:02:03.571 --> 00:02:08.100
but it's not as awesome or complete or capable as Ethereum's.

34
00:02:09.060 --> 00:02:10.830
And that's for security reasons.
But anyways,

35
00:02:11.100 --> 00:02:13.290
you can build decentralized applications and you might be asking you a

36
00:02:13.291 --> 00:02:17.790
decentralized what a decentralized application looks.
Kind of like this.

37
00:02:17.791 --> 00:02:19.590
It's a different stack entirely.

38
00:02:19.740 --> 00:02:23.280
So at the bottom we have a blockchain and a blockchain allows for a

39
00:02:23.670 --> 00:02:28.080
decentralized consensus over application level constructs.

40
00:02:28.160 --> 00:02:32.400
There are so many things in an APP that different parties need to agree upon.

41
00:02:32.670 --> 00:02:36.390
Is this a valid username?
Is this a valid identity?
Is this a valid address?

42
00:02:36.420 --> 00:02:40.860
Is this a valid reputation score?
Is this a valid tweet?
Is this a valid owner?

43
00:02:40.920 --> 00:02:44.970
Is this a valid owner of this data that you need consensus,
right?

44
00:02:44.970 --> 00:02:48.690
If we had a server,
there's no need for consensus,
right?
There's no democracy,

45
00:02:48.691 --> 00:02:51.360
it's a dictatorship and the server controls everything.

46
00:02:51.600 --> 00:02:54.870
But in a decentralized application,
we need consensus.

47
00:02:54.871 --> 00:02:59.440
And the blockchain was really that missing ingredient to reach consensus in a

48
00:02:59.441 --> 00:03:01.150
distributed decentralized way.

49
00:03:01.151 --> 00:03:05.710
So at the bottom of the stack is the blockchain in 2.0 means the theory on

50
00:03:05.711 --> 00:03:10.390
blockchain or any blockchain that allows for smart contracts.
On top of that,

51
00:03:10.391 --> 00:03:14.830
we have a storage layer,
right?
Normally we use AWS,
we use Google cloud.

52
00:03:15.010 --> 00:03:19.150
There are a bunch of service providers for storing your data in the cloud that

53
00:03:19.151 --> 00:03:20.770
are controlled by one entity,

54
00:03:21.130 --> 00:03:24.850
but in this case we would want a decentralized version of storage that is peer

55
00:03:24.851 --> 00:03:27.880
to peer owned by no entities and IPFS.

56
00:03:28.000 --> 00:03:30.910
The interplanetary file system is one great example of that.

57
00:03:31.300 --> 00:03:34.990
On top of the storage provider comes the smart contracts,

58
00:03:35.080 --> 00:03:39.240
so the smart contracts are code snippets that live on the blockchain.

59
00:03:39.280 --> 00:03:43.300
They are decentralized computation while storage and content delivery is

60
00:03:43.301 --> 00:03:48.301
decentralized by IPFS computation is decentralized by the theory and blockchain

61
00:03:49.330 --> 00:03:52.300
smart contracts.
On top of that,

62
00:03:52.301 --> 00:03:56.500
then we could start adding application level constructs,
identity,
reputation,

63
00:03:56.530 --> 00:03:57.363
attention,

64
00:03:57.460 --> 00:04:02.440
a eyes and on using all of this we can create ADAP or a decentralized

65
00:04:02.441 --> 00:04:03.274
application.

66
00:04:03.370 --> 00:04:07.480
It doesn't depend on any specific party existing and it's not about one party

67
00:04:07.481 --> 00:04:10.270
selling it's services.
It's more about a network,

68
00:04:10.300 --> 00:04:15.300
a community of people who all share in ownership of some piece of software and

69
00:04:15.401 --> 00:04:19.510
so everybody profits and everybody contributes in some way.
It's a more communal,

70
00:04:19.720 --> 00:04:23.680
more progressive way of building software that is emerging and will soon be the

71
00:04:23.681 --> 00:04:27.640
mainstream way to build software.
What are some examples of Dapps?

72
00:04:27.670 --> 00:04:30.340
I'm sure there are a lot.
There are,
there are quite a few.

73
00:04:30.550 --> 00:04:32.980
Check check this one out.
So way fund is one.

74
00:04:32.980 --> 00:04:37.810
So way fund is a decentralized Kickstarter,
right?
We know how Kickstarter works.

75
00:04:37.990 --> 00:04:40.630
It's all about crowdfunding and way fund.

76
00:04:40.631 --> 00:04:45.631
Use a smart contract technology to let people crowd fund certain applications or

77
00:04:46.300 --> 00:04:49.300
projects or really anything like that.
Uh,
that's one example.

78
00:04:49.301 --> 00:04:53.150
Another one is all girl,
which is pretty interesting because it's all about uh,

79
00:04:53.290 --> 00:04:54.071
forecasting,

80
00:04:54.071 --> 00:04:58.840
right about getting rewarded for your predictions and it's controlled by no

81
00:04:58.841 --> 00:05:02.680
party and it's,
it's all publicly verifiable.
All the bets,

82
00:05:02.681 --> 00:05:06.670
all the amount of funds,
it's all publicly verifiable.
There is no trust involved,

83
00:05:06.820 --> 00:05:08.590
which is a great use case.

84
00:05:08.620 --> 00:05:12.610
Providence is another one to providence is all about making supply chains

85
00:05:12.611 --> 00:05:16.450
transparent.
If you're a business and you're getting some kind of uh,

86
00:05:16.510 --> 00:05:20.440
ingredient or some kind of tool from some third party company and you want to

87
00:05:20.441 --> 00:05:23.950
know what's in that and you want to know where it's been and who created it,

88
00:05:24.190 --> 00:05:28.150
instead of having to trust that company,
you can verify all of that publicly.

89
00:05:28.150 --> 00:05:32.410
On a blockchain because every product has a story.
What a great tagline,
right?

90
00:05:32.710 --> 00:05:34.270
That's some,
that's some good marketing right there.

91
00:05:34.271 --> 00:05:38.290
But empowering the whole supply chain for everybody.
It's a win,
win,
win,

92
00:05:38.291 --> 00:05:42.040
win situation.
So great use case here,
but there are lots,

93
00:05:42.070 --> 00:05:44.320
those were just three that I just kind of randomly picked.

94
00:05:44.321 --> 00:05:46.300
There's a lot and there's a lot more to come.

95
00:05:46.780 --> 00:05:51.340
So let's get to the architecture of etherium,
right?
So if theory them,
uh,

96
00:05:51.370 --> 00:05:55.750
is it,
it provides the consensus layer.
Okay.

97
00:05:55.751 --> 00:05:59.150
So it provides both the consensus layer,
the economic layer,

98
00:05:59.151 --> 00:06:03.950
and the blockchain services layer.
So the bottom three layers,
etherium kind of,

99
00:06:04.010 --> 00:06:07.040
Eh,
it solves,
right?
So for consensus,
like I said,

100
00:06:07.041 --> 00:06:11.810
we need some way to agree upon all of these application level constructs on top

101
00:06:11.811 --> 00:06:13.250
of the consensus mechanisms.

102
00:06:13.460 --> 00:06:18.460
We need some kind of economic token to incentivize all of these nodes to do the

103
00:06:18.561 --> 00:06:22.220
computation or do the storage or to do whatever is necessary,
right?

104
00:06:22.220 --> 00:06:26.330
And so that's where the crypto tokens come into play it.
On top of that,

105
00:06:26.360 --> 00:06:29.210
we can start offering services,
right?
These are,
these are,

106
00:06:29.330 --> 00:06:33.980
these are code snippet that actually do things,
name registries,
smart contracts,

107
00:06:34.100 --> 00:06:37.910
messaging,
Oracle's distributed hash table for storing data.

108
00:06:38.840 --> 00:06:42.110
Right?
On top of that we have interoperability.

109
00:06:42.111 --> 00:06:46.400
So in this decentralized world where we are just imagining all of these

110
00:06:46.460 --> 00:06:48.920
different apps and they all have their own tokens,

111
00:06:49.190 --> 00:06:54.190
how are you supposed to exchange value between all of these tokens silos?

112
00:06:54.380 --> 00:06:54.591
Well,

113
00:06:54.591 --> 00:06:59.591
the answer is to have a universal wrapper around all cryptocurrencies such that

114
00:06:59.781 --> 00:07:03.890
there is one currency that you have to deal with and you don't have to think

115
00:07:03.891 --> 00:07:05.150
about any other currency,

116
00:07:05.151 --> 00:07:08.690
whether that's your state currency or whether that's bitcoin or whatever it is.

117
00:07:08.900 --> 00:07:10.670
And under the hood,
this protocol,

118
00:07:10.671 --> 00:07:15.671
this exchange protocol would transfer value or transmit value between all of

119
00:07:16.011 --> 00:07:19.160
these different tokens as you use different services,
right?

120
00:07:19.160 --> 00:07:20.920
So you can think of kind of a lay,

121
00:07:20.940 --> 00:07:25.790
a stack of decentralized API APIs that all use their own token.
You pay this,

122
00:07:25.970 --> 00:07:28.430
you pay the top Api with whatever token you want,

123
00:07:28.700 --> 00:07:32.870
and it pays all the other Api APIs and the tokens that they require using this

124
00:07:32.871 --> 00:07:36.560
kind of decentralized exchange protocol,
which you can just use in your app.

125
00:07:36.561 --> 00:07:40.460
And there's a lot of them.
A stellar is a great one,
the stellar protocol.

126
00:07:40.730 --> 00:07:45.230
But there are a lot.
And on top of all of this,
we have the browser,
right?

127
00:07:45.231 --> 00:07:48.890
This is how we access the decentralized applications.
Now,

128
00:07:48.891 --> 00:07:53.570
ideally the mainstream browsers that we know and love chrome,
Firefox,

129
00:07:53.660 --> 00:07:57.410
Internet explorer,
no,
I'm just kidding.
That one really sucks a opera.

130
00:07:57.650 --> 00:08:01.460
They would accept these decentralized protocols natively so we wouldn't have to

131
00:08:01.461 --> 00:08:05.690
create another browser and hopefully,
and I think they will very soon.

132
00:08:05.690 --> 00:08:06.740
But in the meantime,

133
00:08:06.920 --> 00:08:11.720
we have browsers that are made for decentralized applications like mist and

134
00:08:11.721 --> 00:08:15.080
Maelstrom and all of these other ones.
And once we have all of that,

135
00:08:15.140 --> 00:08:19.610
then we can build dapps on using all of this technology.
Uh,

136
00:08:19.730 --> 00:08:23.330
just scratch out store j though,
because those guys had been vaporware forever,

137
00:08:23.331 --> 00:08:26.510
but everything else looks good.
Open bazaar is dope and Dallas.

138
00:08:26.511 --> 00:08:30.740
And all of this stuff.
But store Jay,
come on,
show,
show,
show us what you got,

139
00:08:30.800 --> 00:08:34.490
right?
So like I said,
we want to store the data in Ipfs,
right?

140
00:08:34.700 --> 00:08:38.690
You don't want to store data directly in the blockchain because it's too big,

141
00:08:38.691 --> 00:08:42.080
right?
Every miner has to download a copy of this blockchain,

142
00:08:42.290 --> 00:08:43.580
all of the transactions,

143
00:08:43.700 --> 00:08:46.430
and that includes code and whatever else is in those transactions.

144
00:08:46.610 --> 00:08:50.270
But if we're storing movies and really big files in the blockchain,

145
00:08:50.480 --> 00:08:52.220
that thing's going to get way too huge.

146
00:08:52.250 --> 00:08:54.590
So no one's going to be able to download all of it,
right?

147
00:08:54.591 --> 00:08:59.591
So the way to fix that is to store it in some distributed hash table like IPFS.

148
00:09:00.260 --> 00:09:05.190
What what IPF has gives back is a hash a content address for all of that

149
00:09:05.191 --> 00:09:08.580
content.
And that is what we store in the blockchain,
right?

150
00:09:08.670 --> 00:09:10.770
So we store it in a distributed hash table,

151
00:09:10.980 --> 00:09:14.610
get back to hash and store that Hash in the blockchain,

152
00:09:14.730 --> 00:09:16.950
which then points to the data storage,
right?

153
00:09:18.600 --> 00:09:22.500
So in terms of the architecture,
the etherium white paper is quite,

154
00:09:22.710 --> 00:09:27.020
is quite extensive and there's a lot happening here in this huge diarrhea.

155
00:09:27.030 --> 00:09:30.930
But let's go over it a little bit,
right?
So w the ethereum blockchain,

156
00:09:30.931 --> 00:09:35.610
you have blocks and these blocks are all linked together and inside each block

157
00:09:35.730 --> 00:09:40.730
is a list of transactions and all of those transactions contain state and other

158
00:09:41.791 --> 00:09:44.360
programmable parameters.

159
00:09:44.550 --> 00:09:48.720
So what the ethereum blockchain does it store it on every miner's computer.

160
00:09:48.900 --> 00:09:53.900
It currently uses the proof of work algorithm to verify all to verify the entire

161
00:09:54.451 --> 00:09:55.260
network.

162
00:09:55.260 --> 00:10:00.260
And inside each of these blocks they run the computation that smart contract

163
00:10:00.510 --> 00:10:02.070
contained in each block.

164
00:10:02.790 --> 00:10:06.290
And then once that computation has been successfully,
uh,

165
00:10:06.600 --> 00:10:10.320
done on each miner's computer,
the whole network,
we'll do the same thing.

166
00:10:10.321 --> 00:10:12.090
And then the majority of the network,

167
00:10:12.360 --> 00:10:16.020
if they can agree on the computation of that code snippet,

168
00:10:16.230 --> 00:10:19.710
it is then added to the blockchain as an immutable construct.

169
00:10:20.310 --> 00:10:21.270
So let's,

170
00:10:21.330 --> 00:10:24.860
so I mean there is so much that we could talk about when it comes to blockchains

171
00:10:24.890 --> 00:10:28.770
and,
and all this stuff and in particular the theory and blockchain.

172
00:10:29.340 --> 00:10:33.990
But next week I'm starting this reinforcement learning course.
So I,

173
00:10:34.590 --> 00:10:36.510
this is really the last week of blockchain stuff.

174
00:10:36.511 --> 00:10:38.850
Before we get into some reinforcement learning stuff,

175
00:10:38.851 --> 00:10:40.650
I'm going to keep my lips closed on that one.

176
00:10:40.650 --> 00:10:44.340
But there is one thing that I do want to talk about and that is the Merkle tree

177
00:10:44.341 --> 00:10:48.750
data structure.
So notice that inside of each block there is a,

178
00:10:49.230 --> 00:10:53.070
there is a tree,
right?
There is a Merkle tree.
So it looks kind of like this.

179
00:10:53.071 --> 00:10:55.440
This is the Bitcoin blockchain,
right?
Like I said,

180
00:10:55.441 --> 00:11:00.210
it's a glorified singly linked list.
It's got a pointer to the previous hash,
uh,

181
00:11:00.211 --> 00:11:05.010
of the,
of the previous block.
It's got a nonce to ensure a novelty,
right?

182
00:11:05.011 --> 00:11:09.210
A number only used once.
It's got a timestamp and then it's got a Merkle route.

183
00:11:09.450 --> 00:11:13.620
So the Merkle root is the head note of a tree,
a Merkle tree.

184
00:11:13.920 --> 00:11:15.510
So you might be thinking,
wait a second,

185
00:11:15.660 --> 00:11:20.660
why can't a block just store a bunch of transactions as a list into one big

186
00:11:21.361 --> 00:11:24.870
block header?
Why does it have to store it as a tree?
Well,

187
00:11:24.871 --> 00:11:28.860
the answer is if we just started all as one big list that would provide some,

188
00:11:28.890 --> 00:11:31.890
that would,
that would cost them huge scalability issues.

189
00:11:32.820 --> 00:11:36.870
So to get around this,
the Merkle tree data structure is used,

190
00:11:36.990 --> 00:11:40.620
which is a way to hash a large number of chunks of data together,

191
00:11:40.740 --> 00:11:43.290
which relies on splitting the chunks into buckets.

192
00:11:43.440 --> 00:11:46.290
And each bucket only contains a few,
a few chunks.

193
00:11:46.410 --> 00:11:48.900
So it's Hash is all the way down the chain.

194
00:11:49.080 --> 00:11:51.900
And you could think of this kind of like a file directory,
right?

195
00:11:51.901 --> 00:11:55.570
You have the root directory,
you have child directories,
and it just keeps going.

196
00:11:55.930 --> 00:12:00.280
And the reason we use a Merkle tree is because it allows for Merkle proofs,

197
00:12:00.370 --> 00:12:01.540
which consists of a chunk,

198
00:12:01.570 --> 00:12:05.470
the root hash of the tree and the branch consisting of all the Hash is going up

199
00:12:05.471 --> 00:12:07.510
along the path from the chunk to the root.

200
00:12:07.780 --> 00:12:12.310
And so anyone reading that proof can verify that the hashing is consistent going

201
00:12:12.311 --> 00:12:16.590
all the way up to up the tree.
So,
uh,

202
00:12:16.750 --> 00:12:21.370
the Bitcoin,
so the Bitcoin blockchain uses a very simple Merkle tree,
right?

203
00:12:21.400 --> 00:12:22.690
And it's got these parameters,

204
00:12:22.900 --> 00:12:27.520
but the limitation of that Merkle tree is that it can't prove anything about the

205
00:12:27.521 --> 00:12:28.420
current state.

206
00:12:28.570 --> 00:12:32.590
That means who's holding some digital asset name registrations,

207
00:12:32.710 --> 00:12:34.840
the status of some financial contract.

208
00:12:35.080 --> 00:12:39.280
And so with the etherium blockchain does is it modifies that Merkle tree to

209
00:12:39.281 --> 00:12:43.770
store and store is not in stores,

210
00:12:43.780 --> 00:12:47.680
not just one Merkle tree,
but three trees for three kinds of objects,

211
00:12:47.830 --> 00:12:49.720
transactions,
receipts,

212
00:12:49.750 --> 00:12:53.050
which are essentially a piece of data is showing the effect of each transaction

213
00:12:53.290 --> 00:12:56.050
and state,
which is the state of your code,
right?

214
00:12:56.170 --> 00:13:01.170
It's a decentralized computer that can store state and they call this instead a

215
00:13:01.601 --> 00:13:05.620
Patricia tree,
not a Merkle tree because it's modified to store state,

216
00:13:06.700 --> 00:13:10.240
which then allows clients to easily make and get verifiable,

217
00:13:10.300 --> 00:13:12.040
verifiable answers to queries.

218
00:13:12.250 --> 00:13:16.300
Like tell me all the instances of an event of type x like that.

219
00:13:16.360 --> 00:13:20.530
An x could be a crowdfunding contract reaching its goal,
et cetera.
Right?

220
00:13:20.531 --> 00:13:25.390
So the Patricia tree allows for s two store allows a blockchain historic state.

221
00:13:26.500 --> 00:13:29.440
So there's a lot,
right?
So if we look at the ethereum get hub,

222
00:13:29.441 --> 00:13:34.180
there are so many repositories there,
but really there are three key bits here,

223
00:13:34.181 --> 00:13:36.880
right?
You have the etherium virtual machine,

224
00:13:37.000 --> 00:13:39.760
which calculates elements that run contract logic.

225
00:13:39.761 --> 00:13:44.470
Now this is kind of encapsulated by the etherium client.
Then you have swarm,

226
00:13:44.471 --> 00:13:47.530
which is the storage layer,
which we can just use IPFS for.

227
00:13:47.740 --> 00:13:50.920
And then whisper is for all the nodes to be able to message each other.

228
00:13:51.070 --> 00:13:53.470
And for that we can actually also use IPFS.

229
00:13:53.620 --> 00:13:56.830
So really all you need are etherium and IPFS.

230
00:13:57.940 --> 00:14:00.790
And so to run it theory and you can just download the client yourself,

231
00:14:00.791 --> 00:14:03.160
just like you would bid torrent or bitcoin.

232
00:14:03.430 --> 00:14:06.310
And then with that client you can connect to the etherium network.

233
00:14:06.400 --> 00:14:10.330
You can explore it.
The urine is blockchain runs,
smart contracts,
mine new blocks,

234
00:14:10.331 --> 00:14:11.500
the whole deal,
right?
So the,

235
00:14:11.650 --> 00:14:16.180
so the client is our gateway into the theory of network,
whoever you are.

236
00:14:16.660 --> 00:14:21.460
And so if we,
if we think about all of the pieces here,
you have eith or ether,

237
00:14:21.461 --> 00:14:24.370
which is the inbuilt currency,
it's the cryptocurrency itself.

238
00:14:24.730 --> 00:14:26.500
You have the ethereum virtual machine,

239
00:14:26.501 --> 00:14:29.950
which allows for decentralized computation like Heroku,

240
00:14:30.610 --> 00:14:34.390
IPFS and IPFS for storage and for communication.

241
00:14:34.690 --> 00:14:37.920
You have smart contract programming language and the really the,

242
00:14:37.921 --> 00:14:40.210
the one that we should care about his solidity,

243
00:14:40.211 --> 00:14:44.530
which is very similar to Java script and it's currently the most popular of
them.

244
00:14:45.940 --> 00:14:50.620
And then you have the client of course,
uh,
uh,
guests,
which is in go,

245
00:14:50.621 --> 00:14:53.360
you have eith which is in c plus plus,
and you have pie.

246
00:14:53.380 --> 00:14:57.470
Each app which is written in Python,
but the best one is go.

247
00:14:57.500 --> 00:15:01.340
So go was a language created by Google to handle distributed computing.

248
00:15:01.341 --> 00:15:04.910
They in fact upgraded from c plus plus to go.

249
00:15:04.940 --> 00:15:08.940
So because it was,
it was more efficient for the sea,

250
00:15:09.470 --> 00:15:14.120
it was more efficient for computing on Google's huge distributed computing

251
00:15:14.121 --> 00:15:16.310
stack.
So if Google uses it,
you know,

252
00:15:16.311 --> 00:15:19.490
it's a good language and go is just a beautiful language.
If you,

253
00:15:19.491 --> 00:15:22.670
if you've never looked at it before,
I would highly recommend checking out go.

254
00:15:22.820 --> 00:15:25.970
It's really a beautiful language that it's,
it's pretty new.
Uh,

255
00:15:25.980 --> 00:15:28.880
it was designed with a lot of the elements of distributed computing.

256
00:15:28.881 --> 00:15:31.310
And even the centralized computing in minds,

257
00:15:31.520 --> 00:15:36.470
it's currently the ethereum client that is getting the most activity and it's

258
00:15:36.471 --> 00:15:36.681
just,

259
00:15:36.681 --> 00:15:40.130
it's just great practice practice because I think we're going to start saying a

260
00:15:40.131 --> 00:15:43.320
lot more artificial intelligence is and a lot more,
uh,

261
00:15:43.340 --> 00:15:47.360
fundamental architectures being built with go right.

262
00:15:47.360 --> 00:15:50.720
So death is the one to,
to,
to look at.

263
00:15:51.050 --> 00:15:53.200
And then you've got the smart contract languages.
Uh,

264
00:15:53.240 --> 00:15:57.350
you've got lll which is kind of like lisp,
which no one uses a serpent,

265
00:15:57.351 --> 00:16:00.680
which used to be similar,
which is similar to python.
And then solidity,
solidity,

266
00:16:00.681 --> 00:16:04.730
which is the most popular and it's very similar to javascript and it's the one

267
00:16:04.731 --> 00:16:09.290
that we'll use.
So there's a workflow for deploying smart contracts.

268
00:16:09.291 --> 00:16:12.980
The first step is to download your ethereum node and then you will write your

269
00:16:12.981 --> 00:16:17.540
solidity code and then compile it,
usually using a framework like truffle,

270
00:16:17.810 --> 00:16:20.300
and then you can deploy your contract to the network.

271
00:16:20.540 --> 00:16:23.810
And then once you've deployed your contract to the network,

272
00:16:24.020 --> 00:16:28.160
then you can call that contract using web three dot.
Js,

273
00:16:28.340 --> 00:16:32.420
which is the front end client that speaks to the ethereum blockchain.
Right?

274
00:16:32.421 --> 00:16:36.830
So the idea is that,
you know,
when you're writing these web apps,

275
00:16:36.831 --> 00:16:40.370
you have this model view controller architecture,
right model view controller,

276
00:16:40.371 --> 00:16:41.810
we're all familiar with that.

277
00:16:42.020 --> 00:16:44.900
It's like ruby on rails uses it and angular and all of these apps.

278
00:16:45.080 --> 00:16:48.280
So in all these software stacks,
so in,
in,

279
00:16:48.281 --> 00:16:50.210
in the case of decentralized applications,

280
00:16:50.360 --> 00:16:55.360
the controller is instead of speaking to a server it speaking cube blockchains

281
00:16:55.401 --> 00:16:59.810
and to distributed hash tables in terms of a model that kind of stays very

282
00:16:59.811 --> 00:17:00.500
similar,

283
00:17:00.500 --> 00:17:04.490
but you also have this other type of model and that model is the smart contract.

284
00:17:04.491 --> 00:17:08.660
You can kind of think of smart contracts like models that the controller will

285
00:17:08.661 --> 00:17:13.040
speak to.
And the same kind of logic applies when building here.

286
00:17:13.190 --> 00:17:16.850
We need smart models,
thin controllers and dumb views.

287
00:17:16.851 --> 00:17:20.570
And your views are your html and CSS and javascript files,
right?

288
00:17:20.571 --> 00:17:25.571
So all of the storage is happening in IPFS does distributed storage network and

289
00:17:26.571 --> 00:17:29.690
the application level constructs,
those are usernames.

290
00:17:29.930 --> 00:17:33.530
Anything that you need two people to agree upon,
right?
Game scores,

291
00:17:33.680 --> 00:17:37.430
all of that is stored on the blockchain.
And,
uh,

292
00:17:37.431 --> 00:17:40.850
we can use smart contracts to,
to help facilitate that.

293
00:17:40.851 --> 00:17:45.210
So let's just get started with building this APP,
right?
So in order to,
uh,

294
00:17:45.230 --> 00:17:49.140
run this code that I'm going to show you,
there's very,
very few steps.
All right.

295
00:17:49.141 --> 00:17:53.340
So our first step is to use NPM,
the node package manager and using it,

296
00:17:53.341 --> 00:17:57.510
we can install the test RPC chain,
which is the test block chain rights.

297
00:17:57.511 --> 00:18:02.050
This is a blockchain we can use for development purposes that we can spend fake

298
00:18:02.120 --> 00:18:06.150
money on and no real money is used.
So it's super useful for us.

299
00:18:09.560 --> 00:18:12.410
And once that ends that's installed,
we can install truffle.

300
00:18:12.411 --> 00:18:17.411
So truffle is a smart contract framework that offers templates for smart

301
00:18:17.541 --> 00:18:20.360
contract building so you don't have to start from scratch right there,

302
00:18:20.361 --> 00:18:23.420
scaffolds that you can use to build software faster.

303
00:18:23.660 --> 00:18:27.440
And once I've installed truffle and then we can go ahead and run the test RPC

304
00:18:27.441 --> 00:18:30.740
chain directly in terminal in its own console window.

305
00:18:31.190 --> 00:18:33.050
Once test RPC is running,

306
00:18:33.080 --> 00:18:37.190
then we can go ahead and run truffle compile on our code and then truffled

307
00:18:37.191 --> 00:18:40.370
migrate troubled test and then truffle surf.
But there's,

308
00:18:40.400 --> 00:18:42.980
there's one thing that I want to do first.
If we look at our APP,

309
00:18:42.981 --> 00:18:47.960
we can see the in html,
all of the constructs that we created right here,
right?

310
00:18:47.961 --> 00:18:50.690
So buy a ticket,
refunded ticket,
create a wallet.

311
00:18:50.810 --> 00:18:55.540
We can see them in all of these sections and they are calling javascript,
right?

312
00:18:55.540 --> 00:18:59.750
So javascript would be the buttons here and Javascript.

313
00:19:00.080 --> 00:19:03.970
The javascript is identified by the IDS.
If we look in the javascript,

314
00:19:03.980 --> 00:19:07.610
we can see the application,
the APP dot Js,

315
00:19:07.850 --> 00:19:12.350
which contains all of the code,
right?
So w we initialize a conference,

316
00:19:12.560 --> 00:19:15.350
we are calling these functions on these objects,
right?

317
00:19:15.351 --> 00:19:20.000
So these functions from my conference instance are from the smart contract

318
00:19:20.001 --> 00:19:20.751
directly,
right?

319
00:19:20.751 --> 00:19:24.710
So these are functions that we embed in the smart contract that my conference

320
00:19:24.711 --> 00:19:28.310
instance,
think of it like a class,
right?
So the smart contract as a class,

321
00:19:28.490 --> 00:19:31.910
and we can call all the functions that we ride right inside the contract

322
00:19:32.060 --> 00:19:35.900
directly from APP dot js because we're using web three dot js.

323
00:19:36.080 --> 00:19:39.890
The framework for talking to the ethereum blockchain.
So it's pretty simple.

324
00:19:39.891 --> 00:19:43.100
So we would just have to write out our smart contract,
like so,
right?

325
00:19:43.101 --> 00:19:47.270
So let's write out our smart contract for the conference and then we can run it.

326
00:19:47.330 --> 00:19:50.120
It's just like a class,
right?
So we'll say,
all right,
what are our,

327
00:19:50.510 --> 00:19:54.110
what are our global values here?
Right?
We have an address for the public,

328
00:19:54.111 --> 00:19:57.080
for the organizer of the contract.
We have some sort of mapping,
right?

329
00:19:57.081 --> 00:20:01.100
Because we want unaddressed to map directly to an integer value.

330
00:20:01.220 --> 00:20:04.460
It's because that integer value represents the,

331
00:20:06.640 --> 00:20:10.300
a number of registration registering that we're paid,
right?

332
00:20:10.301 --> 00:20:12.160
We want to keep track of this stuff.

333
00:20:12.430 --> 00:20:15.040
And then under that we want to more variables,

334
00:20:15.041 --> 00:20:17.530
one for the number of registered registrants,

335
00:20:18.910 --> 00:20:20.470
and then one for the,

336
00:20:24.630 --> 00:20:28.000
and then one for the,
and then one for the quota.
Like how much,

337
00:20:28.290 --> 00:20:32.880
what is our maximum limit of,
uh,
tickets that we will let people buy?

338
00:20:33.270 --> 00:20:38.100
Then we'll have a function for the deposit so we can log the event,

339
00:20:38.101 --> 00:20:42.240
right?
So we've got a log,
how much is being deposited into this smart contract?

340
00:20:42.420 --> 00:20:46.460
And we have those parameters in place for that.
One more,
uh,

341
00:20:46.560 --> 00:20:49.990
event is for,
uh,
refunds,
right?

342
00:20:49.991 --> 00:20:53.710
We're going to log how many refunds are being processed here,
right?

343
00:20:53.711 --> 00:20:58.060
From what address are they coming from the amount,
and then the type,

344
00:20:58.061 --> 00:20:58.900
which is an Integer,

345
00:20:59.890 --> 00:21:03.310
we can then construct our function using this constructor function.

346
00:21:03.340 --> 00:21:06.910
We can then construct our conference using the constructor function.

347
00:21:07.060 --> 00:21:10.150
So it's a function conference and then we can go ahead and initialize those

348
00:21:10.151 --> 00:21:11.980
variables that we defined beforehand.

349
00:21:12.310 --> 00:21:15.760
We're getting some message from whoever sends the transaction to the smart

350
00:21:15.761 --> 00:21:19.510
contract.
We have a set quota that initially is initializes euro,

351
00:21:19.810 --> 00:21:23.020
and then we have a number of registrants that starts off at zero is a quota,

352
00:21:23.021 --> 00:21:26.830
is a hundred,
and then number of registrants is zero.
Under that,

353
00:21:26.831 --> 00:21:29.800
we can go ahead and finally write our by ticket function,
right?
This,

354
00:21:29.801 --> 00:21:33.100
this function is going to let anybody buy a ticket.
And like I said,

355
00:21:33.101 --> 00:21:36.790
we can call this function directly from our APP dot js.

356
00:21:36.791 --> 00:21:40.930
So we will say initialized conference and then we can run conference.buy ticket.

357
00:21:41.110 --> 00:21:42.910
And so whenever someone clicks on buy ticket,

358
00:21:43.060 --> 00:21:46.240
it would then call this contract directly.
Just like that,
right?

359
00:21:46.241 --> 00:21:48.600
So then we can say,
well,
if the number of [inaudible],

360
00:21:48.670 --> 00:21:50.830
so we'll start off the a function by saying,

361
00:21:51.760 --> 00:21:56.760
if the number of registrants is greater than the quota that we have in place,

362
00:21:57.760 --> 00:22:01.870
then okay,
then we need to,
we need to go ahead and write a thorough statement,

363
00:22:01.900 --> 00:22:04.720
which will ensure that the funds will be returned.
All right?

364
00:22:04.721 --> 00:22:07.990
So that's it for our contract.
Very simple stuff,
right?
And then like I said,

365
00:22:08.110 --> 00:22:12.340
we can call this contract from APP dot js and it's going to run the contract

366
00:22:12.341 --> 00:22:15.190
just like normal.
Okay.
So,
uh,
that's a demo.

367
00:22:15.191 --> 00:22:17.440
I hope you liked learning about ethereum.

368
00:22:17.560 --> 00:22:19.140
There's so much more I could talk about.

369
00:22:19.160 --> 00:22:22.510
There's some great links in the video description and hope you like watching

370
00:22:22.511 --> 00:22:25.330
this video.
If you find this stuff interesting and you want to see more,

371
00:22:25.331 --> 00:22:27.970
go ahead and hit the subscribe button for now.

372
00:22:28.030 --> 00:22:31.720
I've got to go invest in myself and not any other cryptocurrency for the moment.

373
00:22:31.930 --> 00:22:33.220
So thanks for watching.

