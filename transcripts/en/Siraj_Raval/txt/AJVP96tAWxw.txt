Speaker 1:          00:04          Hello world. Welcome to Suraj Ology. Today we're going to be building sentiment analysis in four minutes. Let's get started. Sentiment analysis is the process of determining the opinion or feeling of a piece of text. We humans are pretty good at this. I can look at this tweet and immediately know that it's negative. It feels like the writer sentiment is one of anger and disgust due to the negative wording. Companies across the world have implemented machine learning to do this automatically. It's super useful for gaining insight into customer opinions. Once you understand how the customer feels after analyzing their comments or reviews, you can identify what they like and dislike and built things like recommendation systems. One more targeted marketing campaigns for them. In this demo, we're going to be building a sentiment analysis program in python that will identify whether a movie review is positive or negative based on the text.

Speaker 1:          00:51          In the review, we'll get our training and testing data, a bunch of labeled reviews from a site called Kaggle. We'll start off by importing our dependencies will import the operating system module to help us perform command line functions. Then we'll want to import the psychic learn module, which is a machine learning library in python with a fast learning curve. Then we'll import a helper class that will help us clean our data. Pandas helps us read our data, CSV files, and NLTK will be used to remove unnecessary words from our dataset. All right, so step one is to just read the data from our heart desk will import the label training data and the testing data. Then we'll print out that were first review to the command line to ensure we read the data set correctly. Once we've read in our data. Step two is to clean it.

Speaker 1:          01:33          That means ensure that we remove all the html non letters and stop words. Stop words are words that are insignificant. We can download them from the Nlt,K or natural language toolkit library words like the or two or as since it's hard to analyze emotion from them. We'll iterate over every review in our training dataset and fill our new queen review array with the cleaned reviews are helpful. Class, we'll do the cleaning for us. Step three is to create a bag of words. The bag of words model is a simple numeric representation of a piece of text that is easy to classify. We just count the frequency of each word in a piece of tax and create a dictionary of them. This is called tokenization in natural language processing. We'll use the count vectorize or object and the psychic learn package to create it. We'll set the Max features to 5,000 to keep things simple, so our bag of words will contain at Max 5,000 words and their associated frequencies.

Speaker 1:          02:27          Then we'll use a fit transform method to fit a model to the bag of words and create the feature vectors. We can then store the feature vectors in an array. Step four is to create the classifier. A classifier is a machine learning model that will be used to classify whether a piece of tax is positive or negative. In this example, our classifier is a random forest consisting of 100 trees or random forest is a set of decision trees. Decision trees are graphs, the model, the possibilities of certain outcomes. So let's say a piece of tax has a word hate appear more than 20 times the that it's negative could be something like 80% then based on other word frequencies, we increased or decreased that probability accordingly until we get to the leaf of the tree, which will be a positive or negative rating. This is different from a standard regression classifier where if a data point is on a certain side of the line of best fit, we can easily classify it or random forest tree is more like a series of lines one for every tree.

Speaker 1:          03:22          That segments are possibilities. Once we've mapped all the lines onto the graph and we plot a new data point or review based on its coordinates, we can then classify based on whether it's in a positive or negative space, it's time to test our classifier on our testing data. So let's format the test data by cleaning the reviews and creating a bag of words. Once we have our feature vectors for test data, we can move on to the last step. The last step is for our program to correctly classify the reviews in the testing dataset. As positive or negative. We'll use our random forest to make a prediction. Well, then take the result and write it to a new CSV file. That's it. Let's run our program and see what happens. Okay. It printed out the first review. That means it's correctly reading our dataset. Then it's going to clean and parts of training set.

Speaker 1:          04:05          Create the bag of words, train the classifier, then predict the test labels. Awesome. Let's test. The first three predictions or one is positive and zero is negative. Let's see. The first three are one zero and one so positive, negative, and positive. Let's skim these. It's truly a masterpiece. Positive. It's so awful that once you know, okay, negative, awesome. It looks like it's performing sentiment analysis like a charm. Sentiment analysis is still an evolving field of machine learning. There's so many grammatical nuances and misspellings and slangs involved in human language that we haven't really taken into account, but we can with more powerful algorithms. So check out the links in the description below. For more information and please, please subscribe for more technology videos. There's so much I want to make. Thanks for watching.