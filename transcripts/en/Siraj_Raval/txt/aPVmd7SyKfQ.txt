Speaker 1:          00:00          Hello world. It's Raj. And welcome to the first video in the decentralized applications course. This video is called web 3.0 explained pretty self explanatory title. But what I'm going to do is explain why we need web 3.0 how it works, how a block chain works. And at the very end we're going to write out our own smart contract and the solidity programming language to the language of etherium. So it's, it's going to look kind of like this where we'll say, okay, here's the integer create, it's going to create a value in this contract object. And this is on a decentralized virtual machine. I know right now it sounds like a bunch of crazy. What are you talking about? But don't worry, we have so much to cover in this video. I'm so excited. So just sit back, relax, and get ready for some amazing, amazing stuff because this stuff is just, it blows my mind every time I look at it, it blows my mind.

Speaker 1:          00:51          So that's, that's the demo at the end of the video. But we have some things to cover first. So this is the only part that's going to be non technical at the beginning. And that is the why. Why does web 3.0 matter, okay now that's very important. So web 1.0 we've, that was the birth of the Internet web 2.0 was the creation of the services that we all know and love. Google, you know all the social networks, the snapchat, everything. That's web 2.0 now we need to move to web 3.0 so I'm going to explain why. Okay, so this is actually a multivariate problem. There are multiple reasons why we need to move to web 3.0 so, but I think the easiest reason, the easiest, the main reason I could give people that people would care about the most is that if you want to build a startup that can compete with the big giants, this is the only way to really do that.

Speaker 1:          01:42          Or it's the best way. It's the best way to do that. So if we look at web 2.0 the first problem is there is no room for competition. Look at these services that control the Internet. At this point, all traffic goes through Google and Microsoft and Facebook. By do Amazon. These companies have the most money. They have all the data, they have the best talent to create the best algorithms. They have the most computing power. How is anyone supposed to compete with these people, right? They have everything. They have all the resources. How are you supposed to start a startup in this day and age? Well, the answer is decentralized applications, so that's just the first problem with web 2.0 the second problem is that we have a shrinking economy. It's a winner take all economy right now. What I mean by that is the rise of these services, the rise in terms of the valuation and the data and the computing power and the talent.

Speaker 1:          02:36          As they grow bigger and bigger and bigger, they have created this kind of winner take all economy via the Internet and it's responsible for a lot of the income inequality because all of these services that used to be, they used to belong to the creators to say, for example, the music industry. Now it's all those profits are being concentrated, centralized into these giant, what Jerome Linear, one of the pioneers of the Internet calls, siren servers, Amazon, Google, Facebook, etc. So take the music industry, for example, the Internet liberated the distribution of music. Great Spotify, Pandora, iTunes. But what happened is working class musicians, their earnings have consistently gone down over the years and they become this underpaid underclass who can no longer count on royalties as the basis of a sustainable middle class life. The Internet rocked everything in the music industry rights and now I'm musicians can't get paid.

Speaker 1:          03:32          So this is uh, this is a problem, right? This is this a real problem because in a good economy we should be monetizing more and more. But in a bad economy, we're monetizing less and less. And that's exactly what's happening as all the data, the real value in this new world that we're building, all of it is being owned, controlled, and monetize by a few key entities. You are not owning your data, which brings me to the third problem. Data ownership. We no longer feel like we can control our data. You don't own it. You're giving away your free data in return for a free service, and this works well enough. However, it's caused the economy to shrink over time. Your data is being used to spy on you. Take prison, for example, advertised to you to things you wouldn't even know. I was talking to a friend the other day and then I saw the ad for the topic I was talking about show up in my Facebook messenger.

Speaker 1:          04:22          They are listening in our phones. They're listening in our Google homes. They're listening everywhere, okay, and they can do that because we've given them the permission to do that. We're giving them all our data and they are profiting off of our data. We should be profiting off of our data. Fourth Point, accountability. Right? Edward Snowden became infamous when he told the world about prison, right? That US government and it say surveillance service. He said, well, look, all of these companies have partnered with the NSA to give away your email, your chat, your videos, your photos, all this stuff, and we can't really do anything about it, right? There's no oversight. It's, there's no transparency into what these services are doing with our data. There's no, it's a one way street. You give them your data, they decide what to do with it. That's it. Hands off.

Speaker 1:          05:09          They'll govern how it's used. This is a problem. Okay, so another person is a Tristen Harris. So Tristan Harris is an x design ethicist at Google and Tristan Harris says that these siren servers like Facebook, Google, Amazon, uh, are competing for attention. We have, we are moving to an attention economy. The Facebook newsfeed for example, is optimizing for your attention because that's what drives their ad revenue business model. However, this is a problem because what's what gets your attention isn't necessarily what's beneficial to you. It isn't necessarily what's good for you. What they should be optimizing for is your time well spent and that's a movement that he's, he's working on election tampering. We have no say in the governance of how these systems are created. Fifth point artificial general intelligence. Okay. We have got way too many problems in the world. Climate Change, existential crisis. He's like asteroid impact and pollution and disease and warfare.

Speaker 1:          06:10          And this is way too many problems in the world. But if we saw AI, we can say solve for x and it will solve literally everything. If we solve real intelligence, Aka artificial general intelligence, so it is to be seen that Agi is the most important thing we can work on to solve all of these other problems. Beneficial Agi, maybe there is a missing link to creating AGI. What is that missing link? So if we think about an AI as a control system, right? A control system that has a controller, it has a state, it has systems for sensing the world motor sensors for moving around, internal forwarding mechanisms to transmit all this data. You don't have to understand all this right now. This is kind of just a, an abstract general idea of how an AI runs. How can we let this AI make decisions on its own and learn by itself in a way that's not controlled by humans right now we store our AI on a server and we control everything about it. But what if we let it free and live into the live in the world and make its own decisions? What we would need some kind of decentralized service not controlled by anybody, right?

Speaker 1:          07:17          So if we create what's called an AI distributed autonomous organization, don't worry if you don't understand that word, but what that means is it's a new breed. It's another word for decentralized application, Dao, dao. It's a new way of creating companies, of entities on the web is. So if we link these two technologies together, AI and blockchain, we can see that the AI, it's getting its missing link resources like cryptocurrency that it doesn't depend on any central third party, right? And the DA, oh, the blockchain gets its missing link, autonomous decision making. So we put these things together and we create something like a living entity that lives on the web.

Speaker 1:          07:58          And the last, the last problem is data permanence. So there's this idea of book burning, right? In the Middle Ages, book burning was considered heresy. It was considered one of the worst things that anybody could do because books where the store of information, right? So book burning was a really bad thing. So right now, the way we store our data, it can be lost over time, right? Yes, it's stored in a data server and yes, you know, that server could go down, but maybe there's a backup. But ideally all data is replicated hundreds of times across the web. So you could never, never, never destroyed data. Think about all the things that really mattered to us. Scientific discoveries and diaries and memories of your loved ones and lost, you know, things over time he never wanted to lose. So we need a way to create data permanence.

Speaker 1:          08:43          So six, six reasons. Okay, so six reasons for this. So I'm going to take all those reasons and provide a single solution called a decentralized application. Okay. So what is now possible with the advent of the Bitcoin blockchain? A couple of years ago we discovered that it was possible to create what's called a decentralized application. That is an application that that is not controlled by any single entity. So if we look at this map of different types of networks, the centralized network is like this where the main, all the other nodes, like let's say humans or computers rely on a single server. Okay? So that's a centralized model. There's the distributed network like this. Okay? The one on the far right's where there, it could still be centralized, but it's not just dependent on a single node. It can happen. It can be distributed. So for example, it's type of system can be both centralized and distributed.

Speaker 1:          09:37          Facebook, for example, it doesn't have a single server. It's got multiple servers, but it's controlled by a single entity. So it's both centralized and distributed across the world, but it's still controlled by a single entity. Now, decentralize is a new type of system that was enabled by bitcoin. It was the first decentralized system. What that means is if you take away one of those notes, the system will still run because it doesn't depend on any node. However, for a distributed network that's centralize, you take away the central node, the whole thing collapses. But for a decentralized system, you can never destroy it. So you can now create an APP that's number one, open source and profitable. That's never been possible before. Either it's closed source like Microsoft office or APP, anything by apple and it makes money or it's open source like Ubuntu or Firefox, and you don't make any money for the first time.

Speaker 1:          10:30          You can make an application that's both open source and profitable. Second of all, this can be a community governed slash controlled application. All of these actions that we perform inside of this network, whether that be, you know, what to spend our money on, what, who to hire, how to market the product, how to make sales. We can create a structure using the blockchain where the people who use the APP can also opt in. They can also say, let me vote on what we should be doing. I'll get into how all of this is possible later on. And lastly, it can create, we can create apps that are censorship resistance. So this is an example of, you know, the APP store rejecting a certain APP because it, it's, it's doesn't abide by Chinese law, et Cetera. You know, the Chinese firewall blocks a lot of applications from entering.

Speaker 1:          11:20          Um, because all of the apps that are mainstream on the internet today are not censorship resistant. But if we build a decentralized APP, no one, not the Chinese government, not any kind of negative entity could block your application. Like the Chinese government can't stop Bitcoin, they can also not stop any other kind of be centralized application that we built. So there's a lot of hype behind decentralized applications. Okay. But the problem is it's kind of like this trade off, right? So right now a lot of the decentralized applications out there, we are sacrificing speed and cost and scalability and sometimes even user interface for one single thing. And that is censorship resistance. However, as more people build these decentralized applications, this seesaw is gonna is gonna tear this way. So it's going to be more even. And then all of those things will go to the, to the left side.

Speaker 1:          12:14          So we're going to gain back some of these things that we're sacrificing for the sake of censorship resistance. So that's what we're building. We're trying to get there. We are getting there very fast. All of these problems are being worked on. So how do we get started? Okay, so how do we get started with web 3.0 well it all starts with what I like to call the linked list. So this is in python, don't worry if you don't understand it. It's just a very, very basic class with some functions. But the link lists is a simple data structure that we learn in data structures. One Oh one the link lists is basically a way to store data. So a liquids is like this. Let's say you have a phrase like hello stack overflow, and you want to store that in some kind of data structure.

Speaker 1:          12:57          Let's say a link list. This is how it would look. Okay, so we'd say, let's create a class. It's called class node and this represents a single node, like this little box inside of a linked list. Now this node is going to have several functions that will create the first function is the constructor function. We'll, we'll say, what is the data that we want to give this and what's the next node in the list? So we'll say initialize it with hello and then say self dot. Next equals none. Well, we're going to set what the next note is so it just kind of block out all the other, the other two boxes, there's only one box and now will secrete functions for getters and setters. So get data says return whatever we store it in that single node, which would be, hello, get next. We'll say we'll get the data in the next node that it's connected to set data.

Speaker 1:          13:41          We'll say set what's inside of that note. So we'll say set data, hello or whatever you want to store in there. And lastly, set next. We'll say we'll set the data in the next node, which would be stack and then set next again would be overflow. So now we have this link list of hello stack overflow three different strings stored in three different nodes. The whole thing is considered a link list. So this link lists is an immutable data structure. We can change the values in this link list. But what if we could not change the values in this link list? What if it was an immutable link lists? So once you store data in there, you cannot change it. So if we create what's called an immutable linked list, we would call it a blockchain. Okay? That is what a blockchain is. A blockchain is a glorified linked list on immutable linked list.

Speaker 1:          14:39          And instead of calling them nodes, we call them blocks. And inside of these blocks we store data. The data is in the form of water called transactions. Okay? So I'm gonna explain how this works. So a blockchain is essentially a linked lists that you cannot change the values of what's inside of there. You cannot change. How does this happen? Well, so Toshi said, let's create this system. Bitcoin was, and it's going to use this data structure called the blockchain on my computer. I'm going to store this length list, a block chain of transactions. You know, Bob sent to Mary, Mary Center, blah, blah, blah. All these transactions of people sending money. And I'm going to store it on my computer. And then other people, let's say 10 other people will store the same exact data structure. Okay, the blockchain, how do I make sure that no one can change the values in this list?

Speaker 1:          15:29          Right? You don't want your bank changing the values in your account, right? You, it would change your account balance, right? That's what we have banks. But what Sitoshi said was, oh, I have a, I have a genius way of preventing people from changing the value in this blockchain. So Toshi said, in order for someone to change the value in their blockchain, they would have to have more computing power in the majority of the network. And what happened was the bitcoin network grew so fast, it, it, it had more computing power than the 500 fastest supercomputers in the world combined. So in order to change any of those values in a single block of that actor would have to have more computing power than the 500 fastest supercomputers in the world combined. And no one has that much computing power. So the blockchain has remained immutable and this has been a revolution, right?

Speaker 1:          16:17          For the first time. We don't need to trust a bank or any kind of central party to say, we're not going to modify your, your data structure. Now we have this network where no one can change that. No one controls. Now we can use this to apply it to different things. But the way the proof of work algorithm works is by doing several things. The first is a node is, so a note in the block chain, a miner will say, I'm going to retrieve a pending transaction. Okay? So they're going to retrieve that transaction. It's got to several features, a Hash, a block id, uh, transactions hash. And then what they're going to do is they're going to calculate the proof of work. It's going to take some time. They're going to stand, send the blog and prove to the node, update the blockchain, and then broadcast.

Speaker 1:          17:01          So what is the proof of work look like? So the proof of work looks like this. They're going to say, okay, here are some proposed transactions. Okay, I get you. I get the transactions. Now I'm going to hash it using what's called the Sha two five six hashing algorithm. Don't worry if you don't understand this, we're going to go over this in the future, but let's just say the block, we'll take the, the minor will take this transaction and try to compete compute some random string from this transaction. If the computed Hash is below a threshold value, then he'll say, okay, I won the game and now this is my proof of work, but if it hasn't, it's got to Redo it again. She's got to keep redoing that hash calculation over and over and over and over and over over again until the value is below this threshold and then it can say, okay, this is the proof of work.

Speaker 1:          17:46          I proved it, I've solved it, done. That's the basic. Now, if all the miners do this, they all do. Then the amount of computing power that the network has, his giant, gigantic, right? Because there there's so many minors and that's why it's secured that no one can change it because they would have to have more computing power than all of these minors or half of them, which is no one has that much computing power. So the best way to really explain how this blockchain thing works is by looking@avisualdemothatifoundbythisguyandrewandrews.com so here's, so hashing is basically taking some value and creating some fixed outputs. So taking an input, doing some kind of function to it, some series of operations and the computing an output, which we couldn't call a hash. So let's say I have some data, like y'all notice how every letter I type the hash below changes.

Speaker 1:          18:32          So if I type in a, B, c, d, a unique hash shows up, let me try it again. A, B, c, d, the same exact unique hash shows up. So no matter what, if someone has, if someone wants to create a hash that looks like this, the only input data that could create this hash is the word a, B, c, d. That's it. So that's, that's the hashing function. Okay. That and then so bitcoin uses what's called the Sha two five six. I'll go into the details of that later on, but it's a type of hashing function. So that brings us to the block. Okay. So for block we're going to say, let's have some data and it's got this hashing function. Okay? So this is blocked number one. So what are, what a minor will do is they'll mind that block to find what's called the knots. The number only used once, it's called a nonce, but it's got to find what is, what is the, what is a valid nonce for this data to create a hash. So I hit mine.

Speaker 2:          19:28          Okay.

Speaker 1:          19:29          Okay. And then it shows this correct knots. So now it's mine. The block, it's computed like exactly what I said before from, from the proof of work, a demo right here. What is that threshold value? Got It. Here's the nones. It's kept trying to calculate this nonce for this data such that the hash looks just like this. Okay? So that's how mining works. Now a blockchain then is like this. So it's a series of these blocks until minor. We'll say, okay, here's the data for this block. Let me mine it.

Speaker 2:          20:00          Okay,

Speaker 1:          20:01          Kay.

Speaker 1:          20:06          So in order to be able to mine any of these blocks, the miner has to have the, the previous block before it, right? So each block depends on the hash value of the previous block. What happens is the p, the Meyers with the longest chain are considered the most valid because they'd been around the longest time. So if I tried to break any of this, if I, if I change the value here, notice how this one turned red as well. The whole blockchain breaks. So the miners with the longest chain are considered the most valid during this proof of work mechanism. I just wanted to give you kind of fly by overview of how a block chain works. We'll go into more of those details later, but I just wanted to give you some idea of a blockchain. It's not, you know, it's super complicated thing.

Speaker 1:          20:49          It's actually very simple thing. It's a glorified linked list. It's immutable at a bunch of people store secured by a proof of work algorithm, which uses hashing, which is which the topic in computer science, which I'll go over in detail later. So let's move on to the web 3.0 stack. So for Web 2.0 if you want to build an app you use for computation, use Amazon Ece to Heroku, right? These are services that provide computation in the cloud, but now you can use what's called etherium. Okay, I'll talk about that in a second. For file storage, you would use [inaudible], Google cloud, Floyd hub, one of these storage providers. But now you can use what's called IPFS. For external data, you use a third party Api to pull data from the web. But now you use what's called an oracle. For Monetization, you would say, okay, it's gotta be the ad model, but now we've got the token model for payments.

Speaker 1:          21:43          You'd use paypal, visa, AMX, all of these depend on banks. But now we can use bitcoin like coin etherium. So each aspect of web 2.0 is now decentralized and we can use all of these services. So am I going to talk about every single one of these etherium IPFS Oracle's token in this video? No, that'd be far too much. We've got a lot to cover. Like I said, okay. We understand the basics of how blockchain works, which is fine for now. Now let's just go over a theory. I'm just, just a little bit, just a very little bit. We have so much to cover. Don't worry. I know it's a lot. But the, if the idea behind ethereum was the founders said, let's take this idea of bitcoin where we have this blockchain and immutable data structure and say, well, we don't have to trust a bank to store this data.

Speaker 1:          22:30          What else can we use this for? Well, we can use this to say, we can basically decentralize everything that exists right now, right? Insurance, uh, social networks. We have to trust the central party for social networks, ride sharing, uh, everything, games, blizzard and world of Warcraft. There's always some kind of central middlemen that we have to trust between all these services. So we can basically disrupt everything and just apply blockchain to every single idea. And, and now it's a new type of startup that couldn't have been possible before. So what they said was, let's create a blockchain that we can store code inside of. Okay, not just transactions. Transactions are fine, but what if we started code inside of this thing? Well, then we can decentralize what's called like Heroku, right? Computation. Now it's a world computer. We can create an APP and let it live on this network, not Heroku, but on a network that nobody controls.

Speaker 1:          23:26          So it's essentially an unstoppable application. No one can shut down this application. So that's just the first bit, right? There's a lot of different things going on here and noticed how the etherium blockchain look similar to the bitcoin blockchain, except there's a whole bunch of other features and variables in there. We don't have to worry about that. Just notice code bid right here. That's it for now. It's stores code. It's like the Bitcoin blockchain except for, except it doesn't just store transactions. It stores code. It's a decentralized Heroku. That's it. Okay. So when I say it stores code, it stores a specific type of code that's called a smart contract. And a smart contract looks like this. Okay? A theory, I'm has its own language called solidity, which we're going to go into so much over the coming weeks, but it's called solidity. And what you can do is you can write code in this language that goes on the ethereum blockchain that no one can shut down.

Speaker 1:          24:22          It's, it's unstoppable, unchangeable, immutable code. And generally if solidity contracts have four parts, they've got an address that you know, identifies what, where that contract is. They've got to balance, they've got some code and they have a state. Okay? So what we're going to do right now is we're going to code our first simple solidity contract. So what I've got here is the remix solidity compiler. What this is, is is a browser compiler for solidity. So we can compile solidity contracts in the browser, very useful stuff. It's that you can find it@remixdotethereum.org so all of the solidity contracts and in dot Sol because is its own language. It's very similar to Java script, so we're going to have to take some getting used to, I'm going to teach you a lot about this over the coming weeks, but let's just try it. A very simple one. Okay?

Speaker 1:          25:13          So the first thing we're going to do for solidity is important is say, well, what is the version of solidity we want to use? So we always have to say pragmatic, just kind of an identifier to say, here's the version of solidity we want to use. And I'm going to say it's going to be point a 4.16 now I'm going to say, okay, I'm going to create my contract. So this is my contract object and I'm going to call it test contract. So this is my contract class, okay? It's a class object, right? Object oriented programming. This is my class. This is my object. That's called test contract. Now what I'm going to do is I'm gonna say, okay, well this contract has a single value called in called value. Okay? That's all it's gonna do. It's going to store this value. And what I'm gonna do is I'm going to create getters and setters to help set the value here and get the value here.

Speaker 1:          26:02          So the first function that I'm going to create in this test contract class is called a test contract. And the input is going to be an integer. And this is essentially notice how this name of this function is the same as the object's name, which means it's called a constructor. Exactly. It's called the constructor. It's okay if you don't know that it's a constructor which basically says, if I initialize this object, here's the value I'm setting for value, for value, right when we start. So I can, I can initialize it as whatever value I want to. Now I'll create the set, uh, uh, create a set function called set p, which stands for set payable. What this means is there is this called payable that solidity contracts use that say whether or not we can, the contract will accept any kind of payment in the form of ether, right?

Speaker 1:          26:52          And this can be used for different things, whether it's a store up, an auction, a shop, you know, all these different things. We'll dysfunction except we'll this object, this test contract except payments, yes or no. And so for this last function is called not payable and it says, well you can't pay this object anymore. It doesn't accept payments. And here's the value that we want to set it to as well. So for this last part, I'm going to say, let's create a getter function. So it's called get constant returns and it's going to return the value of value, right? Right here, that's all it does. And then it says return, boom. Just like that. And now that's our contract, right? We've created this test contract object, it's got these tests, these getters and setters, and now we can run this thing. So let me go ahead and refresh this page

Speaker 1:          27:50          and then say, start to compile. Okay, so now I've compiled it and now I can create some value for this. I'll say, well, here's the value I want to add to the test contract. Object create. So I've initializes test contract object. It now exists on the ethereum blockchain. This is a test. Blockchain is not the, it's not the production blockchain, but now it exists. And now I can execute one of these functions I created. Get set, not payable and set payable. So I'll say set payable 20 okay, and now let's get the value. Oh, it's 20 right? So let me set, not payable 10 so now it's not payable, I can't pay it. And now I get, and it's zero, right? So if we can set payable, I'm going to say 300 set payable yet. And now that, now that that object, that tests contract object, it's not initialized and exists on the blockchain, on the test block chain, and it has a value of 300 of 300 that's that, that variable we coded up here.

Speaker 1:          28:49          So super simple solidity contract. I know, but it's a very easy way to get started to just have this thing run yourself, all this other stuff, gas environment, value, the debugger, all this stuff we're going to get to. But just for now, be okay with saying, okay, I get why we need web 3.0 I get what a blockchain is. Basically, I get the, the theory and blockchain is saying, let's take the Bitcoin blockchain and just put code in it so we can have decentralized computation. And I get that solidity is the language of ethereum that I can run smart contracts with that are censorship resistant. And this, and this is an example of one. If you get that you're good and I can't wait to see you next time, please subscribe for more programming videos. And for now, I've got to use a theory of more. So thanks for watching.