Speaker 1:          00:00          Ai. I know we just met, but will you marry me? Yes sir. Roger. Hello world. It's Sir Raj and Uber released a tool a few weeks ago called Ludvig calling it a code free deep learning toolbox and that brings up the question, can you really use AI if you don't know how to code, the answer is definitively Bush's is Omar wizzle. I'll explain how lewd vig works as well as give a brief demo of using it to create a chat Bot without coding. Also use this opportunity to recommend some other code free machine learning tools afterwards. So smash that like button and let's get started. The amount of interest in AI technology over the past decade keeps on increasing. Every company is becoming a tech company and Marc Andreessen's famous quote, software is eating. The world has come to fruition no matter what field you work in from agriculture to finance to Penguin Ology, you're going to be dealing with data in some way, shape or form.

Speaker 1:          01:00          If you have any kind of website or APP, you'll be generating data from it and even if you don't, you can still learn from data. Basketball players can use data analytics tools on replay videos to analyze what their ideal position should be or how to improve their form. Teachers in public schools can use their student's submission data to provide a more personalized learning experience for each student. Boosting assessment scores musicians can create sounds more optimized for their audiences. Preferences like auto, auto autotune and people of all professions can use data to optimize how much time they spent on certain tasks like sleeping, eating, running and meditating so that they can improve their health and wellbeing. But reading data directly, row by row, column by column, sorting through PDFs and images and videos and comments. This is cumbersome and slow and as that data grows in size, it's near impossible.

Speaker 1:          01:56          That's where AI comes in. Ai Is a collection of mathematical techniques. Many of them, decades old. In the past you needed a phd to have access to the learning materials necessary to understand AI, but with the internet came an absolute explosion in the number of available courses and tutorials to help explain how this technology works. The four pillars of Ai are education, computation, data and algorithms. You've got access to data sets made publicly available across the web. Access to computing resources on sites like Google, Colab and Kaggle kernels, educational resources like my channel, hit subscribe. By the way, I'm going to continue to create relevant educational videos here every single week. I live to serve my youtube audience and of course the algorithms, many of which have been open sourced as code repositories. There are lots of different AI algorithms and they require knowledge of different mathematical disciplines like linear Algebra, calculus, probability, theory and statistics.

Speaker 1:          02:57          Generally developers use tools like the c plus plus programming language and red bull to write out these mathematical techniques like support vector machines and decision trees so they could apply them to data to retrieve insights. But C plus plus is a nontrivial language to learn and while powerful, it's quite verbose, requiring many lines of code to achieve a certain task. Nowadays, Python has become the most popular tool to use machine learning models because it's readable and has a small learning curve and a python library called care. Os has been the de facto easiest way to use python to build machine learning models in just a few lines of code, but yet this still requires code and not only that, it requires some knowledge of the ideal hyper parameter values to use and what type of model to use in the first place. Can we make AI a tool that doesn't even require programming knowledge to use?

Speaker 1:          03:52          Uber's Ludvig is a step in that direction. Ludvig has been used internally by Uber for two years and they just open sourced it to get more contributions from the data science community. Ludvig is in fact a python library, but their code free claim comes from the fact that you don't actually have to write any code to use it. All you need to do is input some commands into a command line, which I'll show you how to do in your web browser easily using Google's colab environment to create a chat Bot. Lewd Vic has two main functions, training models and using them to make predictions. We can go to colab.research.google.com to boot up an AI training environment in the cloud. Once we select Gpu as our runtime type, we can install Ludvig by copying and pasting the insulation commands directly from the lewd vague get hub repository. Don't hate copy paste.

Speaker 1:          04:43          Once it's done installing, we can find a movie dialogue Dataset as a CSV file and download it. This is a movie dialogue Dataset that contains 220 k conversations between 10 k pairs of movie characters. This data set has two columns which contained conversational elements. The first column is a collection of statements, questions and responses from one person. The second column is a collection of responses to the first columns, texts. We're going to use Ludvig to learn from this data set so that our chat Bot knows how to respond to us. We can upload our CSV file directly to Colab and once it's there we need to do one more thing before training the model and that's defining the model definition file, which will copy and paste from Lewd Vic's example in the user guide. I'll explain this in a second. Now we can train our model using the command Ludvig experiments and two flags, one that asks for the name of the Dataset and the second which asks for the name of the model definition file we just created.

Speaker 1:          05:42          That's it. It's training. We didn't have to code out a model nor set any hyper parameters. It's already training. It automatically performs a random split of the data into different training, validation and testing sets. Preprocessing processes them so they ready for training and build models with preset hyper parameters. It trains the model until the accuracy on devalidation sets stops improving or the maximum training time is reached before you tattoo the Lewd Vig logo to your forearm. Check this out. We can also visualize how the model improves over time by using the visualized command to test the model. We can run the predict function and given some input, a conversational sentence. In our case, it will give us an output using the trained model. It's response. Now we can download and use the train weights file for a mobile APP or web app to offer people a Chat Bot.

Speaker 1:          06:34          That's all it takes to train and test the model. Ludvig has examples in their documentation for many different types of scenarios we'd want to use AI for in areas like sentiment analysis, image classification, time series, forecasting and text classification. Even image captioning, which is non trivial to train. So let's take a step back behind the curtain to see how it does this. Dilute vig python repository contains a series of deep learning models, all sorts of neural networks, convolutional recurrent, et cetera. The way they architect each pipeline for every training process is by using the idea of data type specific incoders and decoders. The idea is that incoders we'll map raw data, whatever we input text videos, images into tensors, which are multidimensional arrays of numbers than decoders. We'll map these 10 servers to outputs, which are the predictions. It also uses the concept of a combiner, which combines the tensors from all the input incoders processes them and returns a tensors to be used for the output decoders.

Speaker 1:          07:36          So each of the different data types we have as features in our Dataset, whether they are numerical or binary has its own encoder. And this is flexible. It can use different models for the encoder and a decoder. The way it knows the characteristics of the data in which encoder to use is by a small input from the data scientist. That input is the model definition file. It specifies the input and output features of the model. It helps Ludovic understand what are we trying to predict and using which features of our data and since Ludvig is a python library, it does have a programmatic API. If you do want to use python, which looks pretty simple, load the Yammel file, train the model and test it. It also allows developers to create their own encoders and decoders to use for further experimentation. More of the focus of a data scientist will be on fine tuning the architecture of the target model rather than repetitive training work.

Speaker 1:          08:30          The Yammel file can be as detailed or as high level as we'd like. We can specify certain hyper parameters or use the default ones. The whole point of this is a drastically shorten the experimentation cycles in deep learning applications. So Luke Vig is one great step in the direction of getting to a point where everyone gets to use AI technology, but as you can see it does still require knowledge of Unix commands and flags. Another great tool is admittedly Microsoft's Azure machine learning studio. It's a browser based visual drag and drop environment where no coding is necessary. The idea is to let anyone go from idea to deployment in a matter of clicks. I actually already have a video on that link will be in the video description. A zero has been around for a few years now. It works well, but it's still not extremely simple to use.

Speaker 1:          09:19          In fact, drag and drop as an interface for machine learning isn't a new idea. In 92 accompany introduced a drag and drop tool for advanced analytics. That's 26 years ago. Why isn't everyone using AI? Then? The answer is that users still need to know what to drag and where to drop it. Some of these tools have hundreds of mathematical operators in the form of blocks to deal with, which requires training to understand and it's still relatively complex for beginners. Experts can easily use these tools, but experts don't want drag and drop. If they understand the math, they just want to code. It's easier to debug. So there is an excellent opportunity here to create a web service that uses a freemium model and allows absolute beginners, meaning people who don't know how to code the ability to train models. All they would need to do is drag and drop their data.

Speaker 1:          10:09          That's it. Automate the process of building complex data, preprocessing pipelines, hyper parameters, model selection, everything. This is all already possible. There are barriers, hyper parameter search strategies like Basie and optimization and grid search that enables this capability and there's even a proprietary solution for enterprises called data robot that does this pretty well. The con is that it's an enterprise price point that check it out though if you've got the budget for it. Another cool startup that has claimed that they are working on this is Loeb. Their demo videos look pretty magical. It's a glimpse into the future of Ai. They were acquired by Microsoft and still haven't released our product to the general public, so we'll have to wait on that. It's a drag and drop interface that seems to marry ease of use and configurability pretty well. Also, shout out to deep cognition.ai. It's both the visual editor and code ide.

Speaker 1:          11:04          You can drag and drop blocks and it creates code alongside it, which is sick. There are three things to remember from this video. Uber's lewd. Vague is a python library that lets anyone use deep learning by issuing a few unix commands, no code necessary. It uses a flexible data types, specific encoder, decoder model that has default settings but can also be fine tuned by the user and other code free options include Microsoft as your data robot. Indeed, cognition. What's your favorite tool to use for data analytics? Let me know in the comments section and please subscribe for more programming videos. For now, I'm going to learn some advanced math, so thanks a lot.