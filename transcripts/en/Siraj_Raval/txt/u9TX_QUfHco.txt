Speaker 1:          00:00          Hello world, it's Saroj and Crypto kitties. Have you played it yet? It's this blockchain based game that's gone viral. It sparked a global craze for collecting cartoon cats. We're going to cover how it works programmatically in this video. There's even a Chinese language mobile app which was just released. Bringing the game to large parts of East Asia. Looks like the great firewall is not so great, Huh? Crypto kitties is built on the ethereum blockchain at one point in accounted for a third of all transactions on the etherium network, which is insane if and when the Chinese market for the game grows. It's not certain that the ethereum network could handle that many users, but both the theory and Crypto Kitty's team are working out issues of scalability. Currently crypto kitties, our collective cats like Pokemon or beanie babies, but unlike those collectibles, these cats breed, they can create offspring with unique DNA preserved in the blockchain.

Speaker 1:          00:59          Over 500 k Kitty's have been sold so far and there are about 250 k players. We transactions are passing $40 million. The rarest crypto Kitty's have sold over north of a hundred k and some are worth over 300 k. The crypto Kitty's code is open source. It's about 2000 lines of code. The smart contract language of ethereum solidity. Remember this is all code that lives on the blockchain, so every node in the theory of network story's a copy of it. It's a lot of code, but we can go over the most important parts to try and understand how it works. So the way the game works is that it's a way for players to buy, sell, and breed digital cats. Every cat has its own unique appearance. It's defined by its DNA. When a player breeds to cats, their genes combined in a unique way, and this produces an offspring which a player can then breed again or sell cleverly.

Speaker 1:          01:54          The code for Crypto kitties is split into several smart contracts, so it's not one giant messy file with all the code in. It will see that there exists a subcontract called inheritance in the main crypto kitty contract with the listing of all the contracts. Kitty Corp is the main contract address that the APP points too and we can see that it inherits all the data and functions from previous contracts. We can walk through each of these contracts to better understand how they work. Let's start at the lowest level. Kitty access control and move our way up. The kitty access control contract manages the various addresses and constraints for operations that can be executed only by specific roles. There are three roles currently. These pertained to the creators of the game. They have special ownership and control over particular functions of the contract. It defines some function modifiers like only CEO, which restricts to a function so that only the CEO can perform it and adds functions to perform actions like pause or release contract funds.

Speaker 1:          02:57          The pause function is interesting. It allows the developers to freeze the contract completely making it so no one can transfer a sell or breed or kitties. It's probably not in their best interest to do that, but it's just something to note. Just because it's built on the blockchain, it doesn't mean control is completely decentralized. It just made completely transparent in this case. When we move on to the Kitty base function, we defined the most fundamental code shared throughout the core functionality, the game where and how is our user data stored? What are the constants and the data types we'll use? What are the internal functions for managing these items? It first it finds a kitty as a struct. It's essentially a bunch of unsigned integers that are its features. The genes represent its DNA. What it ends up looking like, birth time tells us when the cap was born, cooled down and block is the timestamp after which this cat can start breeding again, may train NCI or id or the ideas of the cats.

Speaker 1:          03:56          Parents Syring with ID is the ID of the father and cooled down is how long the cat has to wait before breeding again. Lastly, generation tells us which generation the cat is of. We'll see that there exists an array of these kitties trucks that were just defined. This array will hold the data of every single crypto kitty that exists. It's like a master kitty database. Whenever some new cat is born, it's added to the array and its index in the right acts as its ID genesis, the first crypto kitty as an idea of one for example, the contract also has a mapping from the cats id to the address of its owner that keep track of who a kitty is owned by, so whenever a kitty is given from one player to another, the kitty index you own or mapping gets updated accordingly to reflect its new owner.

Speaker 1:          04:42          When a new kitty has created the ids of the mother and father as well as its genetic code are used. See how a crypto kitty is its own data type. All these cats are stored on the blockchain and who owns which cap is also kept track of, we call them kitty's but they can also be considered tokens. There are several token specs written for Ethereum Erc, 20 being the most popular use for initial coin offerings, but crypto Kitty's conforms to Erc seven 21 this is a non fungible token type that's really useful for tracking ownership of digital collectibles, like where game items per digital pets. Ether is considered a fungible token because any two ether is just as valuable as the other, but with a non fungible token, not all cats are created equal so they're not interchangeable with each other. Since one breed could be much more rare than another.

Speaker 1:          05:33          The kitty ownership contract inherits from Erc seven 21 and all of these tokens follow the same standard. Kitty ownership fills in the implementation of the ERC 21 functions. A player can transfer their tokens to someone else by interacting directly with the crypto Kitty's contract on the ethereum blockchain without having to go through their web interface. Moving up one level to kitty breeding. This is the contract that has the functions necessary to breed cats together like keeping track of breeding offers and notice that there is a separate contract called gene science that is not open source that's used to calculate how new DNA is created. It seems like the reason that kept this part closed source is because if it wasn't anyone could just read helicase DNA was determined and it would be a lot easier to know which cats to breed in order to get a fancy cat.

Speaker 1:          06:26          When two cats are bred together, it looks them up in the master kitty's array, sets the ideas to the mother and father's and executes trigger cool down on both parents so they can't breed again for a certain amount of time. Then the give birth function creates a new cat by determining the child's genes. Then using gene science dot mixed genes and calling create kitty. Now that we know how these cats are created, we can move up to the kitty auctions contract, which tells us how to auction or bid on cats or breeding services. This contract has certain functions like set sail, auction address that can only be called by the CEO. Then in the kitty mentoring contract, it defines the rules for how a generation of cats are created. The number of promote cats, the number of cats in generation zero is hard coded. The Coo can even create Promo kitties and generate new kitties.

Speaker 1:          07:18          This is probably for use with early Beta testers and friends and family. Finally, we can move up to kitty core, the master contract. This is what is compiled and run on the, if they're in blockchain, it inherits from all previous contracts we looked at. It also adds a few more final functions like the get kitty function, which retrieves all of the crypto Kitty's data using its ID. You might be asking, where are all these wonderful cat images stored? I don't see any code for that. Correct. A crypto kitty is essentially just a 256 bit integer that represents his genetic code. The solidity contract code has nothing in it that stores a cat's image or description that happens on the Crypto kitties web server. This architecture choice was likely to avoid blockchain bloat. Storing lots of images on a blockchain is a bad idea. It could quickly add up to too much reminders to store on their local machines and transactions could grind to a halt.

Speaker 1:          08:13          It does introduce a single point of failure, their web server, but a future version could instead use the decentralized file storage network IPFS to store data so that no single entity can store the data. Instead, it's a network of computers, but that's a video for another day. Three things to remember from this video. Crypto kitties is a mostly open source game that runs on the ethereum blockchain allowing players to buy, sell, and breed collectible cats. The code is written in solidity and helps define functions per how cats are created, what their features are, and how a player can interact with them. And because the image data is stored on a web server, it's not completely decentralized. Although IPFS could be a better alternative to that. Please subscribe for more programming videos. And for now, I'm going to trade some cats, so thanks for watching.