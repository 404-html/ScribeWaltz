Speaker 1:          00:07          Okay.

Speaker 2:          00:08          Okay.

Speaker 1:          00:16          Okay.

Speaker 2:          00:19          Oh, we're old. It's Raj.

Speaker 2:          00:23          Hi Guys. How's it going? Good to see you. Hi everybody. Uh Wow. So just start off with the request video requests, stock recommender system. Uh, that's going to happen in the future. I actually have a video on that. Checkout predicting stock prices. Anyway. Uh, I would probably do another one. The future. Hi Guys. Hello world. Oh my God. Everybody is coming in. I'm so happy to see all of you. I'm going to, I'm going to listen names really quick. Uh, George Herrick lists a odd son. Nico. Sanjay, mood it. Luck Ya on John Above. Yeah. Arthur. Hello everybody. Today we are. Thank you. I got it from open Ai. I'm glad you liked my t shirt. I'm so proud to wear the t shirt even though I don't work for them. I love this tee shirt. Okay. So today everybody, uh, we are going to, we are going to build a tic tac toe and we're going to build a neural network that gets better and better at tic TAC toe over time.

Speaker 2:          01:26          Okay. That's what we're going to do. Uh, and, uh, the first thing I want to do before we start building this neural net to defeat tic tac toe is I want to answer a few questions. So we're going to do a five minute Q and a and then we're gonna get right to the code and it's in javascript. I know it's in javascript and that's okay because javascript is my third favorite language. It's like python, go and then javascript and javascript actually pure and it's into your javascript. So we're not using any kind of j query or any of that. Like, you know, libraries. We're using some pure javascript. Okay. So that's what we're gonna do. So let's start with a five minute Q and a and then we are going to, uh, get started. Okay. Ready, set, go. And I'm going to show you guys a demo at the beginning and the end go five minute Q and.

Speaker 2:          02:13          A. Why javascript? Uh, because I want to show this to you in the browser. And I don't know, I'm just, I'm just kind of experimenting with Javascript. You know, like I'm, I'm changing as a, as a, as a programmer, as an artist. I don't want to just like keep doing the same thing and, and you know what it's really about the, the, the greater idea and I think it's going to, it's, you know, however many inputs I can show you like how a neural networks the better. Okay. What do you think about Mark Zuckerberg is AI? I think, you know, I have a lot of respect for Zuckerberg that he did that and he wrote an essay, he wrote something about it. So I could bring as a CEO of a multibillion dollar company, any still programs that is something to admire. A mini Max Algo. Actually, no, it's not going to be using the mini map.

Speaker 2:          02:52          Sal, grow PHP is the shittiest language. You're absolutely right. Can we build a neural net to curb the overwhelming filming, feeling existential trend? Yes. Um, we, uh, a neural net that can read our emotional state that can we, we need some kind of like a brain computer interface, but it could read her emotional state and it could tell us what to do best. So kind of like a personal psychologist. When are you going to do the AI neural network for Daniel shipments? Asteroid Code? Uh, that's going to be either next week or the week after that, but I'm aiming for next week. Do you have a separate bag for your hair when you go to sleep?

Speaker 2:          03:25          No. Uh, so Raj, please do a video on auto encoders for data compression. I do have a video on that. It's called a build an auto encoder in five minutes, but I'll do another one soon. How advanced is this? JS is going to be, don't have much experience in Js, uh, how advances are going to be in terms of javascript, like raw javascript. It's not that advanced in terms of computer science theory. It's a little advanced because we're using something called bitwise operations, which I'll explain in the, in the video. Okay. So which, which one is better SDM or neural network? Uh, it depends on what you're trying to do a, but generally neural nets perform better, uh, across a wide variety of tests, a neural net firm. But if you have a like, just very, very, very little data and you're trying to do something simple like linear regression, probably an SPM, a neural net from scratch and js.

Speaker 2:          04:13          Exactly. What is your New Year's resolution? I once, uh, next year I want to get, let's say probably 500,000 subscribers and I want to create a movie, um, with starring myself and I direct it and I want to, uh, interview Elan and uh, yeah, that's about it. Talk about ambition. Right? So Raj, please do a video on wind load power forecast. Uh, yeah. Okay. I mean something on whether it's something on whether I've actually been planning that. What are you going to make today? I'm going to explain that in a second. Uh, we have two more minutes in this Q and. A. Why is PHP so bad? Because it doesn't have a lot of maintenance. It's a programming language is only as good as the people who maintain the language. Now, many people who are good maintain PSP anymore because all of those resources are moving to python and go and javascript.

Speaker 2:          05:02          Why not make an AI that directs a movie? Someone actually did that. Check out AI and movie script. Google that what to do after Andrew Young's course built, watch my videos. Okay. By the way, I'm trying to interview Andrew on and I tweeted him directly. So guys, check out the Twitter, check out my Twitter and then look at my tweets like tweets and replies and see the one that I asked Andrew on to interview for my channel, like it. Retweet it. Okay. The more people who like and retweet it, the more likely he is to say yes, I want to interview that guy. Okay. What is your secret sauce? My secret sauce is I genuinely truly from the bottom of my heart, I love what I do. I love Ai, I love neural networks. I love being a youtuber and it took me a lot of tries to, to fail, fail to get to where I am. So my secret is that no matter how many times I failed, I, I, I picked myself up, I talked to my friends and I, and I, and I just kept going. Okay. So one more question and then we're going to get going.

Speaker 3:          06:00          Uh,

Speaker 2:          06:03          I want to do a question I've never answered before. Uh,

Speaker 2:          06:08          why Sarah Geology to Siraj Raval great question. I changed the name of my youtube channel and my just hold public persona to my full name because as I grow, I, I'm becoming a public figure and I want to be known as my full name. Saroj rebel. It's not Sarah Geology. The game is over. It Shit's getting real now. Okay. So I am Saroj Ravell okay. So just remember that. Okay. So here we go. That's it for the five minute Q and. A. Let's get started with the code. Okay. So what we're gonna do is we're going to build a neural network, uh, to beat the game of tic TAC toe. I'm going to go ahead and start screen sharing and then we are going to get started. Okay. Uh, all right. So here we go. Let's get started. Screenshare okay, so what I'm going to do is I'm going to demo this for you guys. This actually in the browser, okay. It's actually in the browser.

Speaker 3:          07:01          MMM.

Speaker 2:          07:03          So this is what it looks like. Let me just, let me just move this to the side and let's see what you guys are saying here.

Speaker 2:          07:11          Uh, okay, so this is what it looks like guys. So what did, what it's doing is it is, it is running a genetic algorithm. Okay? And it's going to look like this. These are, these are the four board games. It's got four board games running simultaneously. This is on the web. This is a web demo of the code that I'm going to do. And what it's doing is it's trying out a bunch of, uh, it's for AI simultaneously trying out a bunch of moods and it's recording what's happening in the source code. Okay? It's recording what's happening in the source code. Okay?

Speaker 2:          07:40          And we can take the source code. The source is the weights while, okay, the weights are the connection between the synapses in the neural network. We can take these weights and we can put them in our neural net and it's going to get better over time. Okay, so I'm going to explain this step by step. This is what it's going to look like. Okay? It's going to look like this. It's a game of tic TAC toe. We're going to build tictactoe from scratch and then we're going to build our girl network from scratch. Okay. And there's quite a bit of code here, so I'm just going to get started. Let me x out of this and we're going to get to the text editor. Okay. All right. Uh, okay. So what I'm gonna do is I'm going to put this, uh, on the side so I can see what you guys are saying. Just like that. Palms are sweaty, knees, weak arms are heavy. There's vomit on his sweater already. Moms Spaghetti. Okay. So let me make sure I'm in the screen this time. Okay. I'm in the screen. Okay. So let's get started. Okay, I'm going to go to class filed.

Speaker 2:          08:37          Why do you talk so fast? It makes me nervous. Okay. Rightness. I will. You're right. Okay. Everything's cool. Everything's cool. Okay. So, um, let's get started. The first thing we're going to do if we're going to build our neural network, okay, sorry. We're going to build the game. We're going to build tic TAC toe. Okay? It's going to be t t. Dot. Js. Okay, here we go. Um, so let's get started. The first thing, okay, so what does this, let me, let me, uh, let me explain what we're going to do here. We're going to, step one is we're going to generate um, uh, randomly size. Let me make it bigger size population. Are you guys thinking these comments? Can you build around me? Can you build around it? Oh Man, I love you guys, man. You guys are just the best. Okay. So we're going to generate a randomly size population. It's going to be player versus computer. Okay? Excusing B player versus computer. Okay? So we're going to generate a randomly size population of neural nets of neural nets

Speaker 2:          09:46          or the best one. And then we're going to, uh, and then we're going to, uh, we're going to, the top scoring ones are favored to pay to populate the next generation. Uh, best once get to reproduce. Okay? So that's how, that's the basic logic of this game. Okay. Uh, it's, it's, we're going to use pure javascript. It's going to use web workers. Why workers are, and I haven't actually talked too much about parallelism, uh, but, but web workers are basically a concurrency. Their threads in javascript. We want, we want these things to be happening in parallel. Remember the demo I showed you guys at the beginning? There were four games happening at the same time. Those are web workers. They are happening concurrently. That means at the same time. Okay. Uh, we are using tabs, not spaces. Okay? So let's go ahead and get started. Increase the font size. I can do that. Bump up, up, up. How's that? How about that? How's that? How's that for big as f? Okay, so we're going to, we're going to define our neural net a. And, W it's going to be called Ttt for tic TAC toe. Sorry. We're going to define our game, which is called tic TAC toe or TTT. Okay. We're going to start off with the function and the function,

Speaker 2:          11:02          um, uh, is going to be TPT. All right? So that's the function. And let's get started here and we're going to say, you know, this is going to get a opening and then that, and then, okay, so, all right, let's get started. Bigger than that, my Twitter handle is Saroj. Robble, Sra, j r. A. V. A. L. Let me make that even bigger for you guys. Okay. So this is as big as we are going. Okay? So let's start off by defining, um, are our three states. So, uh, we're going to say bar x are, um, oh, which is the, which is the, sorry, this. And that's the borrow is x's and o's. Okay. And then Bar Thai and the, and we're going to be x and the computer's going to be, oh, okay. And Tie. Okay. So now this is going to take about 45 minutes if I can, if I can. Yeah, that's right. You guys don't need to see the chats. That's true. That's true. All right. I'm just going to, so I'm not, I can't see what you guys are saying right now. I'm just gonna like start coding because that really makes it easier for me. So, um, and but I'll, I'll, I'll pop it up once in a once in a while. Okay. So let me move this [inaudible].

Speaker 2:          12:24          All right, so let me make this a little bigger. Okay, so let's get started. Okay. So the first thing we want to do is think about the squares, the squares, like we're going to iterate through it through them, and it's going to look like this. The iteration is going to look like this. It's going to be like, it's going to be like zero. One, two, three, four, five, six, seven, eight. Okay. There are eight a a game state is, remember I take that toe is 32 vertical lines and then there's a two horizontal lines. Okay? So it's good. It's going to look at this and we'll iterate. Then we're going to iterate at the top left and we're going to move to the bottom right. Okay. Top left to bottom. Right. And it's going to look like that. So I just wanted to show you that for a second.

Speaker 2:          12:58          Okay. So now let's go ahead and initialize our board. So we're going to say function newborn and we're cool. We're going to start off by initializing our helper classes, help or classes. Okay, these are helper classes. That's what we all want to initialize or helper classes. So, um, what is it? What does a new board, well, it's going to get nothing, right? We're just initializing it. So we're going to return zero and new board gets absolutely no value. We're going to, we're going to add value to that newborn. What's another helper function we need? We want to check if the board is empty, right? So let's check. Let's create a function called is empty and is empty checks. Uh, what is the parameter or the board itself, right? What are we checking? We're checking if the board is empty, right? So let's check out the board is empty and we can return is going to be a true or false value. So we'll do a, in javascript, there are three equal signs too, for for this. So we say return board zero. Okay? So if it's zero, then returned to die. He's going to be true or false. It's going to be a boolean value. Okay, so that's, that's that helper function. What else do we need here? Let's say we're going to get the piece. Okay, what is the piece? The piece is what this has to retrieve. Uh, what's, What Square in the Tic Tac toe, right? Which square are we using here? Okay. Um,

Speaker 2:          14:20          I say board, we're going to say square. Okay. Those are our two parameters. We've got the board and the square. Which one? So we want to get the value of that piece. And what are we doing here? Well, guess what guys, we are defining each of these squares in our tic Tac toe, not as integers, but as bits. Okay. And why are we thinking of them as bits? Each of these art two numbers there, there, there, there are bits that are two numbers long, like zero, one zero, two zero, three like that. And why are we doing that? Well, it is faster to perform. Uh, uh, it's, it's just faster if we're, if we're operating at the bit level rather than an abstraction, which are integers. If we're operating at the bit level, all of our operations are faster. Okay. And that's one of the great things about javascript. If we can do that. So we're going to operate at the bit level and what does that mean? That means that we're going to perform what are called bitwise operations. It was operations. So let me, let me, let me write this and then I'll explain what I mean by that. Okay. So board. Okay. Um,

Speaker 2:          15:26          and I'm going to pull up the chat in a second because I want to see if you guys know what I mean when I, when I do this, because this is going to be interesting. So up, up, up, and three. Okay. So what does this mean? What does this mean? This is, this is a bit wise operation. So this essentially like, so what this is saying is, so for this, uh, so for this like whatever's in the parenthesis here for the square, this basically means, uh, take the square and multiply it by two to the one, the first, which is the one died. And that's the value we get for that. That's, that's essentially a bitwise operators. Um, and then what does it mean for the board? Well for the board that, that the whole thing means we want to take the board and we want to divide it by, uh, whatever the value up here is. Okay. Whatever this value is. So it's going to be this.

Speaker 2:          16:22          And then for that put the ant sign. We are going to do a bit whites and multiplies those, uh, those two values, uh, by three B, just because there are three squares, uh, both horizontally and vertically. So what this is going to do is they're going to give us the big value of whatever, of wherever we are in the game that's going to give us that rob bit value and cause that's what this whole game is operating on. Its, it's operating on big values. Okay. Because it's just faster to run our neural net that way. Okay. So that's what that's gonna look like. And I'm going to pull up the chat for a second. I want to see if you guys are, uh, let's see. Hold on, hold on. Let me pull up the chat. Where are you guys? Okay.

Speaker 2:          17:11          All right. Okay. You guys are on point. You know, I'm just going to keep this chat window because I want to see you guys because I, you know, just in case. Okay. All right. Thanks guys. Okay. Yes, we understand this. Okay, cool. Cool, cool, cool. Okay. All right. So, so that's, that's we're getting the piece, uh, it is an open AI tee shirt. Yes. Not that I worked there, but I love the tee shirt. Okay. So, so now we've got the piece and now we're going to perform and move operation. So now we're going to just say move. Um, uh, so for the move operation, what we want to do is, um,

Speaker 2:          17:51          no, actually I'll close out. Okay. So now for the move operation, we're going to say we've got our board, we have our square, and now we have our piece and we want to move that value to another position in the board. Okay. So, uh, what does move look like? Well, we want to say, we're going to, again, we're going to perform a fit wise operation. I'm going to explain how that works. So we're going to say board or, uh, let's see. Peace. Less than, or not, not it wise, less. It's a shift operator. It's not a lesson. It's a shift operation. So square does it. That one. Okay.

Speaker 1:          18:26          Okay.

Speaker 2:          18:26          Just like that. And so we've got one, two, three. Okay. So what does this doing? It's going to take, it's combining those values. So that's what the or operation doing is combining those values. So let me to write a quick example of what I mean by that. If we have zero one zero one, and then we had, um, oh, uh, if we had oh one one, one one combined, what this is doing is it's combining those values to show the move. So this would become one, uh, one, one, one, right? So it's taking, it's that more operation. So, so just like that. Okay. So that's a move value. Okay. So that's what's being for a move now.

Speaker 1:          19:05          MMM.

Speaker 2:          19:08          So those are a helper methods and let go ahead and start writing our game up functionality. So we're going to say game functionality. Uh, and so we have our board, we have the turn, whoever's turn it is, and we have the history of the, of the game state. Okay. And this is stored using, it's a stored locally and we're using JavaScript's local storage, uh, functionality that do this. It's storing it locally in a cache, in a temporary cash. Okay. And that's the history of game states. And it's going to be an end and it's going to be a stack, a stack data structure so we can easily pop the top off and replace it. And we could push something new on it every time. That's why we were using a stack to that. Okay. So let's go ahead and initialize our values here. Uh, this is one of the annoying things about javascript. Uh, we just, we, we wanna, we want to initialize these, uh, these values. Okay? So this dot turn hold on.

Speaker 1:          20:00          Okay.

Speaker 2:          20:00          It's not turn equals turn. And this dot history equals history kind of annoying, but we have to do that and it initializes those values. So now what we're going to do is we're going to define a prototype. So every javascript object has a prototype. A prototype is also an object. And all javascript objects inherit properties, uh, uh, from their PR and the methods from their prototype. Okay? So this is kind of like the, the, the god of the object, the prototype. So we're going to follow the prototype of the game object and we're going to define a bunch of, uh, functions for this. Okay? So the first one we want to do is to find the equals function. Well, what's the equals function? Doing? The equals function says, let's take that, um, gain equals a function that we already have a and we want to see if two places in the dream state or equal to each other. Okay? So we're going to say hold on and make sure that's all on point. Okay. And, okay. So what we're going to do is going to say returned a value of whether or not it's equal. So we're gonna say we're going to check if the board, if the board equals, uh, whatever the other board is and what does the other board, the other board is going to be the next state. Okay. We want to check if they're equal to each other. Okay. Um, and uh, the turn is the same as this

Speaker 2:          21:37          other adopt term. Okay. Um, and this is going to be, that's the equals value. So we're checking if it's equal or not, uh, and want to see where you guys are at. Okay. Um, let's see. Okay, cool. Okay. So, so that's, so that's that you guys are keeping up more or less. And now we are going to define the get peace method for the prototype. A proto-type yet please

Speaker 2:          22:24          and, but get ps method is going to get the value of that piece from our prototype. Right? Uh, and the value is, remember it's a bit wise, it's a, it's, it's a bit. Um, so we, we have, um, a local function for this and we're, it's, we're going to initialize the prototype using that local function. The square is the actual, the game state or, sorry, the board. And we're going to return, we're going to return, uh, the piece which is going to be when we give it two parameters, the board and the square, right? The board into square. Cause we've already defined that. Get these method up there. Remember up here we defined it so we can just return that for the prototype. Okay. Um, let's see. What else do we need? We need to, uh, oh, a move function, right? So prototype, uh, oh, this is going to be fun to explain.

Speaker 2:          23:16          So prototype dot move. Um, and then we're going to say, well, what's the game move? What is the game booth given the square that we are at, given the square that we are at, what does this look like? Okay, here's the fun part. Here's the fun part. So we're going to say, given our history and our local cache, which is s which is a stack, remember I said it's a stack. We're going to push the new value of this, the new state of the board onto our stack. Remember if they stack of, of game states, and then we're going to say, uh, let's get this. Let's take the board that we already have and perform a move because we just moved it, right? Uh, given the board, the square and the turn. Okay. The turn of where we are. Lastly, we want to define the turn and it's going to be this, uh, XR operator. This is going just do a bit wise xor operation and it's going to assign the result to the first operators. Operands so what does that mean? It's going to basically, it's shifting the bit. So it's either you or meet you or meet you or me, right? So that's, it just shifts one at one way or the other. Okay. So who's move? Is it yours or the ais? Okay, so now we're going to,

Speaker 3:          24:38          uh,

Speaker 2:          24:41          uh, we also want an undo function, right? Game Dot prototype. Undo. Okay, so function, game, undo. So what does this mean? So if we want to undo one of our moves, this is what we have to do. We've got to take the board we already had. And this is why it's great to have a stack for this, right? The stack data structure is

Speaker 3:          25:05          mmm,

Speaker 2:          25:07          great for this because we can easily, we can, uh, it's, it's a constant time retrieval of whatever we just pushed, pushed on it. It's a constant time retrieval. Okay. So we're going to say this is not history dot topic. We're going to pop it off the stack. What was that last game? State what we want that game state. And we're going to, we're going to get it and then are going to,

Speaker 3:          25:30          uh,

Speaker 2:          25:31          remember we're going to switch that turned back using that expert operator. It's, it's back to you or it's back to me, whoever. It was the opposite. Okay. And so now we want you to declare our winner. So how do we declare a winner? Well, we're going to do, once again, game dot prototype dot winter equals function. And then we have a function internally for who is the winner of the game given the board, right? Given the board, we can define who the winner is going to be and um, winter is going, it's going to return the, the value of who is going to be given the, the board this thought for. Okay. So now, um, there's one more thing I want to do in this class. There's one more thing I want to do. We're going to, we're going to draw the board. Okay. We're going to draw the board.

Speaker 2:          26:21          And before I draw the board, I'm going to write this out and I'm going to explain what this is. Okay? CTX CTX is our canvas. This is how we're drawing in javascript. Don't be confused that thing and think this is the context itch. It's the, it's the canvas which we can think of as an object that we're passing around and how we draw on the screen. It's a canvas object. Uh, and, uh, we're, we're going to step by step, draw out this board, okay. Uh, and it's going to be a series of values here. So we're going to start off by, we're going to initialize our canvas by saying began path. Okay. And then we're going to say, uh, we want to do a move to function and we're going to actually do this several times. So I'm going to copy and paste this one, two, three. Okay. Just like that. And

Speaker 2:          27:10          let me talk about what I'm doing here, but first, uh, having my move to, and then I have my line to line two. Okay. I am iteratively right here. I am iteratively drawing out this, uh, state. Can anyone, okay. So now I'm going to engage you guys for a second before I draw this. I haven't done this before. So what I'm gonna do is I'm going to engage you guys. Can anyone tell me in their own words, uh, uh, when, when to use a canvas. Once you use a canvas in javascript. Like what, what is an example beside this? Okay.

Speaker 2:          27:51          When, when is a good one? When would we use a canvas? Like besides a game, what's like another application? I just want to make sure I've got you guys, uh, no idea. Okay. So another, so another example would be drawing gys. Exactly. Okay. Any, any kind of Gui, image processing, image processing. Great example. Making animations. Okay, cool. So, so great to draw stuff. Okay. So you guys are maps. All right. A lot of great, great suggestions. Okay, so exactly. So we're going to draw this canvas. So this is the, this is the kind of like a,

Speaker 2:          28:24          this is the kind of a little boring part, but you know, I'm just going to write up these values and I'm gonna explain what I'm doing, which is always the, you know, but that part about games where it's like, you know, you've got to manually, you know, right up to the values for the coordinates and, and um, yes, it's six, six, six. I know. Yes. It's Hilarious, isn't it? Okay. So I moved to your 0.9 5.33 and you'll notice that I'm using similar values here. Moved to, um, so your point 56. Okay, so to, to move and then I want to end up with a stroke and that's going to be okay. Hold on.

Speaker 2:          29:10          So what's happening here? Okay. So I'm drawing out each of those lines. Okay. So I'm moving to a point and then I'm drawing a line and I'm saying, what is it? What is the x, y coordinate that? I want to draw that or have that point. And what is the end point? So basically it's saying, okay, draw one line down vertically, draw the next sign down, vertically, dropped the other two lines horizontally, and then it does all that in one stroke. And it's, it's called by the stroke function. Okay? So that is what I'm going to do for the tic Tac toe code, and now I'm going to get straight the neural network. Okay? So let's go ahead and get started with the neural network. Um, uh, the neural net code is going to use this, this code, um, to, uh, get better over time. So now we're gonna write our neural net. Okay. So I'm going to use on neural network. Okay. Code. I'm just gonna write that down and let me make sure, you know, you guys are, you guys are on point. You guys are all good. Everybody's, everybody's Gucci. Woo. All right. Whew. Okay. Uh, we got people from all over the place and we're going to do a neural network now. Okay.

Speaker 3:          30:16          MMM.

Speaker 2:          30:18          Cool. So let's get started. So first we're going to do fine art neural net. Buriable okay. And how does that work? Well, we were going to use this, let me just, we're going just define on neural net. Okay. Uh, and we're going to write all of our functions inside of this neural net. Um, and Oh, we also want to make sure that we are, I forgot about this. It's one of those javascript things about the browser use strict. So what does strict use strict allows you to place a program or function in a strict operating context? What does that mean? Uh, basically it prevents certain actions from being taken and, and throwing more exceptions. So it's kind of like a safety check. So, you know, when you're in the browser you can have a, certain things happen that you don't want. Like, uh, let's say, I dunno, some, some kind of crash or like a, just an unexpected, uh, operation. Especially since we're using concurrency, there can be problems like deadlocks, there can be problems like, uh, you know, just like, uh, and uh, just a lot of things can go wrong and strict helps prevent that. Okay. So, so, so that's why we're using strict and, uh, let's go ahead and get started here. So we're going to write our, our first function here for neural network, which is the get sizes function. What does this do? So, okay, let me, let me talk about this for a second and I'm going to have the chat open for this white, we'll explain a little bit about this. So,

Speaker 3:          31:48          mmm.

Speaker 2:          31:51          Uh, so, so what we're doing here is we are building the neural net, right? This is a feed forward neural net. This is a feed forward neural net and a feed forward neural net. It's a three layer feed forward neural net with 128 hidden nodes. There are 128 it notes. Okay.

Speaker 3:          32:07          MMM.

Speaker 2:          32:09          And the, and, and why, why are we doing this? Uh, the brain had, oh, let's think about the brain by the way. This is going to be a two minute tangent when I talk about the brain and then I'm gonna get back into the code. Okay? So the brain has like a hundred. It has a hundred billion neurons, which communicate through electral chemicals, signals. And these neurons are connected through junctions, known as synopsis, and each neuron receives thousands and thousands of connections with other neurons, constantly signals to reach the cell body. Okay? And the resulting some of the signal, if the resulting some of the signals surpasses a certain threshold, then our response is sent throughout the Axon. So we have to reach a certain threshold for that doubt, for the value to, um, continue to propagate forward through our, through our neural network. Okay? That's what we want to do.

Speaker 2:          33:02          I'm going to talk about the threshold in a second. Okay. So let's go ahead and start with our good sizes function. So forget sizes. And by the way, guys, check out. Write this down. Okay. Write this down. MCB One 80 X. I'll say it again. MCB One 80 x. It's a free course online by Harvard University, which I took. I absolutely love. It's going to it, it talks about the brain is the introduction to neuroscience and it provides a great gateway into neural networks. You see things like a feed forward recurrent, these terms that we talk about, uh, in, in, in machine learning. They are actually there in the brain. And this is a great course to learn about the brain and kind of get biologically inspired by the beauty of our brain's internal neural networks. Remember MCB one adx great course. Okay. So let's get back to this. So what we're gonna do is we're going to return,

Speaker 4:          33:53          yeah,

Speaker 2:          33:53          a collection of notes. Notes are, uh, we have nodes in each layer of our network, right? A three layer feed forward neural network. Each layer has a, an amount of notes. So we'll, we, what we want to do when this gets sizes function as we want to get the size of each layer and what is the size of each layer, it's going to be the number of nodes or neurons in each layer. So we're going to return nodes dot map funk and return notes up map. And we're going to say, um,

Speaker 4:          34:21          okay.

Speaker 2:          34:22          Uh, for that layer, that's a return, that layers length. All right? So we have the link is going to be a number of nodes in that layer. So that's going to give us the length. This is a helper function. So the next one is, well we, we, we know how to get the sizes, but let's make the actual node or neuron itself. So let's write a function for that. So we'll say make note given to layers index given, uh, the index itself, the sizes and the notes. Okay? Um, but so let's initialize this. Hold on.

Speaker 4:          34:59          Mm. Okay.

Speaker 2:          35:05          Initialize it. So each node, let's, let's start off by initializing our node are note is going to have an input of zero. That's going to be the initial input. They have nothing. Remember, there's nothing in there. Uh, it's going to start off at zero. And now we want to define our threshold fine threshold.

Speaker 2:          35:35          Okay. And I remember I about that threshold, right? The threshold is the, the, the, the top. It is the, the threshold is the limit, right? And if, and if they amount of the sum of all the activation functions on the data from one net to the other, if it reaches that threshold, then it can propagate, but it has to reach that threshold for it to propagate just like in the brain. Okay? So let's define the threshold and we're going to say if layers index, it's less than the length of the sizes, uh, of, of the layers, then we're going to say get the threshold and we want you to initialize it as, um, whatever comes out of this function. Okay? What is the function? We're going to say the type of nodes if it's undefined. So as it, as in there's nothing there or, uh, that value is one. Then, uh,

Speaker 2:          36:36          the nodes, it's a get the layer index and the index. The other index, let me, let me talk about this. What's, what's happening here? Let's see. Nope. Each node is connected to every other node in the next layer. So it's a two d matrix. It's a two d matrix of values. All right? Each node is connected to every other node. Remember this, weights, those connections, those synapses, and it's a two d matrix and we're going to define the threshold just like that. Okay. So now speaking of weights, let's define our notes. Weights. Yeah, we have. So let's define those ways. So there's waste, uh, are part of the node and we're going to say type of, uh, nodes if it's undefined again. So if there's, if there's nothing there or, or if there's, uh, if there's, if there's nothing there or, uh, hold on.

Speaker 4:          37:37          Okay.

Speaker 2:          37:38          You were re sizes one, let me just write this down and then I'm going to define what I'm talking about here. A layer index, and then I'm going to pull up the chat for a second. So let's see where you guys are at. Um, function w and return. Okay. Okay. So let me talk about what's happening here. Okay. So,

Speaker 4:          38:18          oh,

Speaker 2:          38:23          okay. So we have our weights up, our notes and if it is empty or there is, if we, uh, if the notice empty or there's an, there's an array with, with, with some value it, then we want to return the number of weights in that, in that node. And we're going to update though the, the connections in that node. Uh, bio this wait, stop. Map function. Okay. And we're, we're, and we're going to return the value. So let me define the weights. That's what this is doing is defining the weights. Okay. Now let me see if anybody has any questions here. See what do we got here? What have we got here?

Speaker 4:          38:58          MMM.

Speaker 1:          39:04          Okay.

Speaker 2:          39:05          Dah, Dah, Dah, Dah. Nothing in the chat. All right, cool. Cool. Cool. Okay. All right, cool. Cool. Okay, so those are our functions and when we do a, and now we can return that note. Okay. That's the end of that, uh, function. And we can return our node. Okay.

Speaker 4:          39:29          MMM.

Speaker 2:          39:31          Boom. So now let's define, so that's the node. Now it's defined the network itself, the actual network. It's a neural network. Let's define that network. And for the input we should give it, we could either create are, we can either initialize our network, the asides is value or a node value as in, uh, the size of a layer is equal to the number of nodes. So we're just going to say sizes or nodes. Okay. We can initialize it either way.

Speaker 4:          40:00          MMM.

Speaker 2:          40:02          And we'll define, we'll define variables for both of these things. So for the sizes and for the notes. So we want to say if, uh, the array is an array of sizes or nodes that value we had for the perimeter and the array is an array. And if it's, so let me be more specific about what I'm doing here. So, um, sizes or nodes, hold on. And if there's something in there

Speaker 4:          40:38          and,

Speaker 2:          40:40          okay, so first of all, so what is it saying? This is saying it, it, first of all, if they're, if the, if the parameter is not empty, then we want to take those values and we're going to initialize them. I thought that the local variables that we initialize, we're going to use that get sizes function that we defined and we're going to use a sizer nodes, a parameter, and then we're going to initialize our notes. Okay. There are two values that we're thinking about here. Sizes or notes, um, else, uh, sizes equals sizes or notes. Okay. Um, that's our else value. And now we want to define how many nodes we have. Okay. So now we're going to define how many notes we have. So Blah, blah, blah. So how many notes do we have? The map function is going to help us get that, that value. And it's going to be a callback. It's going to be a be a function called back, uh, where we have a size and the, um,

Speaker 1:          41:45          okay.

Speaker 2:          41:46          Iterator as a parameter. Okay. Which is, which we're going to, we're going to use to, to, to iterate through this, uh,

Speaker 4:          41:54          mmm.

Speaker 2:          41:57          Which is we're going to use it to iterate through the array count, that number, values. And then that's going to be, uh, that at the number of nodes that we have. Okay. So we're going to say bar, each layer is going to be an array, a initialized by a size. Okay. And so, and so Blair is initialized as an array of sizes. So let's do our iteration to count the number of notes we're going to have. We're going to count the number of notes. So say bar j zero. And uh, Jay. And remember Jay is just, it's arbitrary. It's less than the size because we're iterating through the size and we're going to say a plus plus J. Okay. So we're going to iterate through peach.

Speaker 2:          42:41          Uh, and so, and then I'm going to pull up the chat and we'll answer a few questions or if any, if there are. And what is that? So what does, what does each layer, uh, we're going to, we're, we're, we're giving those layers values here and we're saying make a node a given the length given where we are given the sizes and given the number of notes. Okay? And that's how we're going to define each of our layers. And when we're done with that, when we've, when we've, uh, initialize you two our layers, we're doing two things here. We're defining our notes and we're initializing our layers at the same time. Okay. That's so, and then we'll return that value when it's done. Okay. And, uh, so there's that. Um, okay, so who got that there? Where do I get the t shirt? Uh, guys, just wait a second. I'm going to, I'm going to launch a, a clothing line soon. Okay. Right. No self promotion guys. Uh, okay. So, so that's that. Um, okay. One more function in this class. One more function in this class. So we want to, uh, we want to set the weight values. Okay. We're going to set the weight values. We're going to say the prototype of our neural network is going to set our weight values.

Speaker 4:          44:08          MMM.

Speaker 2:          44:11          All right. So we could also, if we wanted to, we could write a get punchy so we could get our weights, but we're just going to write a set weights function. Okay. Um,

Speaker 1:          44:20          okay.

Speaker 2:          44:21          Function is going to be the neck thoughts. Set weights. Okay.

Speaker 2:          44:25          Um, given the, so we're going to give it weight as a parameter. What those weights going to be while they're going to be a two d matrix, each layer for each node, each node. So in inside of each layer in our neural network, there are a collection of nodes and each node has a two d matrix of weights that connected to every other node in the next layer. And we want to set the values for those weights. And how are we updating this? Well, it's not through back propagation it through genetic algorithm, right? So instead of just saying we're going to update the weights constantly, um, the backpropagation, uh, uh, and gradient descent, we're going to update the weights by putting them, by, by having several neural nets and just having them play like I showed you in the web app. And then taking those weights, uh, taking the weight of the best ones and, and, and updating the only the best neural nets and then having those and then, and then praying more from those. Okay. So, so, okay, so, so for each

Speaker 4:          45:29          node we're going to

Speaker 2:          45:40          say, well, where are we? Where are we in terms of our layer and where are we in terms of the ways? So there are two indexes here, the index of where we are in the layer, and then the index of where we are in though in the weights or a matrix. Okay. So, um, we're going to take the weights of our note. And by the way, this code is going on. Get hub guys. I'm going to, I'm going to, within an hour of me finishing this, I'm going to put post the code on get hub, the complete code, including the html and the CSS, which is actually quite long. Uh, which I'm not going to do in this. I'm just doing the logic. I'm just doing the hard logic for this, the logic that matters. Okay. So, um, so our weights are going to be, um, we're going to take the index that we were, we were given, and then we're going to take the index, right? Both of those were given. We're going to map it to, um, yeah, this callback function. And then we're going to return the value of w, which is going to be our, uh, wait two d matrix. Okay. Uh, now at the end of this, we're going to say that our neural net equals the neural net that we've just initialize. Okay. And, um,

Speaker 4:          46:58          and then we can return that.

Speaker 2:          47:03          Okay. So now let me see the chat and, okay. Okay. So now, so, so, so let me, let me show you guys the dent. Okay. So that's, Oh, um, so let's, let's go over what I've, what I've done so far. Um, so what I've done is I've and utilize my board. Uh, I've initialize the, I've created a set of helper methods to get the pieces to check if it's empty, uh,

Speaker 1:          47:33          okay.

Speaker 2:          47:33          To move it, to get the pieces. Then I've initialize the game state and I've used the prototype, a function of Javascript of that game. Objects to define a bunch of very important moves, like checking a two pieces are equal to check it. Two squares are equal to get the piece to, to move, um, to see who the winner is. And then to draw the board is in canvas. I've created a neural net function or a neural net class. Uh, that's that initializes unknown. What is a node look like? Well, and node is a, an object that has connections to every other node in every layer of our neural network.

Speaker 4:          48:10          MMM.

Speaker 2:          48:12          There is a library called [inaudible] Vanette js cray by Andre Car Pafi, which I've met. He's a cool guy. Um, but um, yeah, but that's not what we're doing right now. I would thought about doing that. I might die. I, I will do that in a future video. Um, and uh, we've, we've our node, when this slides our network, we set the weight values for each of those. Okay. And so that's how, so that's how, um, that is working and, and I will fully comment the code and post this on get hub. It's not a recurrent net. It is a feed forward neural net. So let me, let me just show you guys this code. Okay. So hold on. We'll just look like

Speaker 4:          48:58          mmm.

Speaker 2:          49:00          So that's what that looks like and

Speaker 5:          49:04          okay.

Speaker 2:          49:05          Getting a call right now. Do not call me while I'm alive, you know what I'm saying? Okay. So, so that's what that, what that has done and what I want to do is I want to show you guys what that looks like.

Speaker 4:          49:19          MMM.

Speaker 2:          49:21          So we're going to go to the, um, that value. I could run this up a local server.

Speaker 4:          49:30          MMM. Um, but

Speaker 2:          49:36          I don't want to do that right now. I want to, uh, hold on. Where was this now? Open up chrome from second. What was it? T was it, what was it? It was something, but essentially, um, that was what it was and um, Oh god, it's shit. All right. Okay. So, um, so that's what that was and go to showing you guys my history here. Okay. So that is our, uh, Mac book is promoting itself, right? Okay. So, so that was the code and,

Speaker 1:          50:43          okay.

Speaker 2:          50:45          Uh, what I want to do is I want to, if I can get the link to this show, you guys, you know what, I'm going to post the link in the description and uh, then I'm going to, the link to the web app is going to be there. But, but what happened was I, I had that, I had the demo, but I just can't find the link to it right now. So what I'm going to do is I'm going to stop the screen share here and

Speaker 2:          51:16          stop screen sharing and I'm going to do me okay. So, uh, an ending five minute Q and a and then we can get started. Okay. I'll say, am I still up there? Yes. Yeah, I'm still there. Okay. So yeah. Okay, cool. So a five minute Q and a, can you make the same tic tac toe with Java? Yeah, absolutely. Uh, I, I, uh, don't have a link to that, but if you just search tic tac toe on get hub and then just Java, I promise you, you will find results. Okay? Yes, there we go. Thank you. Chad Cha. He showed, uh, where it's, where it's at. Where it's at. Exactly. You know what, I'm going to show you guys the demo of this. Okay, let me see. Let me show you guys then what? You guys deserve a demo. So, so, so, so I'm going to screen share. Oh, I'm so excited. I mean, let me start the screen share. Okay guys, check this out. Okay. So what is, what's happening? This is what is going to look like. We take our, we take our weights, we take our weights, okay? So is it's going to learn via genetic programming and then we can, we can, we can test it. So what does that look like? Hold on.

Speaker 2:          52:21          Okay, so we're going to say AI neural net, and we're going to paste those weights in the weights that it learned from genetic pro, uh, from, from, from this genetic environment. And we'll paste those weights in this. Remember these weights are a matrix of values of what it's learned through playing. Okay? And I'll play something. It's going to think, and then it's going to play it. And then I'll play something and it's going to think, and then it's gonna be like, look at the smart thing. It's trying to go in that bottom left corner. I am not going to let you because you are not smart enough to beat a human yet. Okay. So that's what that looks like. Okay. If I'm going to stop screen sharing again and back to my now three minute Q and a, but, uh, whoever sent me the link to that.

Speaker 2:          52:57          Thank you so much. Okay, so three more minutes, Jupiter notebook that I'm going to, you know what, I'm going to start using more Jupiter notebooks, um, for sure, uh, in the future. Great. A great thing. Uh, thanks David for that compliment. Uh, can you do more slow tutorials? Focus more on understanding the theory? Yes, absolutely. Max, I, I'm getting better at this. Where did you go to the schooling? I went to Columbia. I studied myself on the Internet, all this stuff on my, how is this better than simply writing a tic Tac toe game using the Monte Carlo method? Um, so the Monte Carlo tree search is actually quite effective. And, uh, and Alphago, Alphago used Monte Carlo, how is it better if not better? Actually? Um, it's just different. Did you add more Grady or hair spark? Uh, I didn't. It's just, it's just always like that now, but I'm going to regret it in the future. Is Training more with more training, more with more layers, make the AI better.

Speaker 3:          53:59          Uh,

Speaker 2:          54:02          generally the more layers you add, the better your neural network is. Uh, but the trick is to just to just have as many layers as you need because the more layers you add, the more computation there is. Right? So like always, there's that trade off. It's Raj. I would like you, I would like to suggest to you a simple game I made and went to implement a Bot intuit loose Oussama definitely post that in the comments which books are useful. Um, Andrew on has a new book out called machine learning yearning. Uh, Ian Goodfellow, uh, has a book out who's one of the researchers that opening I, uh, called deep learning, which I would definitely read. Uh, read is the gray hair related to machine learning. The gray hair is just my style. You know what I mean? Which laptop are you using? A Mac book pro 2015.

Speaker 2:          54:48          No, we didn't say macro pro 2016 with the force touch. Could you make a simple tutorial about deep learning which learned you from zero to hero in that field? That is coming up next year and by next year, I mean in January it's going to be a from scratch series that I'm going to make. Um, hi Saroj from where can we get the data set for an AI girlfriends? Um, look for tat logs for um, uh, chat, chat room chat logs for like a dating sites. Are you slowly building a cell phoning I AI for Retro Games maybe in the future? Uh, yes. I, I mean I am going to focus more on games in the future. Yes, absolutely. Okay. Do you recommend js or python for AI learning? Python. Python. Uh, but, but, but the con net js library by Andre is actually pretty good. Jake, glad to have you heard my life. Uh, livecast harsh. Thank you. Up a poor, can we make more similar programs? Yes. Do a neuron that for playing tetris. I eventually make a note on that percent personally. Okay. So, um, I, I'm, I'm going to tell a short story and then we're done. Um, and video with the song. That's a great idea. You know what I'm live, so I'm just gonna Freestyle. Okay. So,

Speaker 3:          56:06          uh,

Speaker 2:          56:07          by the way, I had this, uh, my, my mentor at meetup when I worked at meetup as an intern. Yeah. He was like, I remember like being really confused. I was, it was, I was an ios programmer at meetup for the summer and I was like trying to figure out this problem and it, and if any of you guys have used x code before, you know that when something goes wrong and you have a break point, it shows a bunch of assembly, which I've always kind of just like ignored. But he was like, I was like, I had, I was focusing on his problem for like four or five hours and I just couldn't figure it out. And then if he comes in, uh, my mentor Michael Gray, and he's just like, you looked at the assembly and he's just like within 30 seconds, he's like, that's a problem.

Speaker 2:          56:42          Looking at the assembly. How gangster is that? So yeah, a neural network for assembly. Maybe a, but maybe in the future. So I'm going to end this with that freestyle rap. Someone did. And I'll freestyle about machine learning. So someone give me a topic, I'll go, it's going to be a one minute freestyle. I want to say a topic, just someone say a topic. I'll just wait for a topic. Here we go. Whatever is the first topic, uh, assembly as bad. So let's just do assembly. Okay. I love assembly. I'm like, it's like my enemy because it's so hard that I cannot see what is happening. My mind is so free when I look at it, it looks at me and it says, you can't beat me because I'm better than you. Don't. You see? Okay. So that was my short 15 second freestyle. Okay. So anyway, thanks guys for watching. For now. I've got to go focus on this video. I'm making, so thanks for watching. I love you guys. Code is going up very soon. Join the slack channel, by the way. There's a slack channel. Continue the conversation there. It's in the description of every one of my videos now. Wasn't even a minute. I know I, I'm getting better. Okay, so thanks guys. Love you. Okay,

Speaker 2:          58:01          how do I end the session? There we go.