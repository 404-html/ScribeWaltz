Speaker 1:          00:00          Don't have a boss be the boss with a hello world. It's so Raj and I'm going to show you how you can build a profitable business on your own using tensorflow, Google's widely popular machine learning framework. A couple of years ago, deep learning started to outperform all other machine learning models when given massive amounts of data and Google saw that it could use these deep neural networks to improve its services from g-mail, two photos to search. They built a framework called tensorflow out of a need to let researchers and developers work together on AI models, best animate crossover ever and have them scale to billions of people. Originally it was made for internal use only, but they open sourced it so now anyone can use it. We can build a really simple tensorflow model pretty easily. There are lots of examples online for say classification for example. All of it comes out to just under a hundred lines of code.

Speaker 1:          01:03          The pipeline generally follows the pattern of preprocess your dataset. Build the model, then train the model in a training loop to ultimately saving the train of model file to your local disk. As a binary file, but when our model is fully trained, will want to serve it to our users on a server. That way they can access it from the web and that's where the tensorflow serving library comes in. Serving implements a server that runs ml models and provides remote access to them. We can do common tasks like prediction and classification of any provided data. Server bowls are the central abstraction here. They already objects that clients use to perform computation like a lookup or inference. It could be a single shard of a lookup table or one machine learning model or five of them. Let's say we have a model that is trained to detect fraudulent data in a bitcoin transaction dataset.

Speaker 1:          02:00          We call this a source. Later on, as we get more users, we retrain our model on a new version of the data and therefore have a new model with all new weight values. The source will detect a new version of the model weights. It will then create a loader that contains a pointer to the model data on disk loaders, manage the lifecycle of a servable the source. We'll notify the dynamic manager of the new version of the model. This dynamic manager checks with whatever version policy you've chosen and decides to load the new version. The dynamic manager will then tell the loader that, hey, there's enough in memory. It will then instantiate the tensor flow graph with all the new wade following values. A clients can then request a handle to the latest version of the model and the dynamic manager will return a handle to the new version of the servable because tensorflow has been available in c plus and python.

Speaker 1:          03:00          It's been relatively easy to integrate it into web frameworks built in those languages like Django for Python for example. Recently Google released tensorflow dot js which lets javascript developers get in on the game as well. I'm just waiting for Schiffman to go in on this. We can use it to develop client side AI apps where the data remains entirely in the browser building. Draining all of it can be done from the browser, but think about a mobile architecture for AI. If we want to build a mobile app, we can have it use a server client architecture where the APP will just send data to the server, have it perform a prediction there, then retrieved the output and display it in the APP. But what if we'd like to do on device predictions? Well, we can use the tensorflow lite library. It optimizes for low latency and small model sizes.

Speaker 1:          03:54          There's also lets our app work offline so we don't even need Internet access. Once we have a trained tensorflow model, we can convert that model to a tensorflow lite file using the converter. Then we can use that converted file in our mobile APP. This works for both android and Ios devices with the available Java and Swift Api. This one problem with tensorflow though was that it was missing a crucial feature that AI developers wanted imperative programming. What that means is tension flow offers a defined and run framework where you define a computation graph then run it. But newer AI models, especially variance of recurrent networks change in size while training, they aren't static. So a defined and run framework is needed, which is a gap that the popular Pi Torch Library built by Facebook filled, but even then tensorflow recently implemented eager execution that gave it it that capability as well.

Speaker 1:          04:53          In addition to all of these tools, there are helper libraries built on tensorflow for a variety of application specific use cases from genomics to music generation. Okay, so all that is to say that tensorflow offers developers a toolset that gives us an end to end AI pipeline to build an AI as a service business with. But the question is what kind of business should we build AI assisted Brazilian waxing. There are lots of potential industries ripe for disruption. Let's pick two that I'm particularly passionate about. Energy and education. When it comes to energy, climate change is a massive problem. The amount of co two emissions globally is far exceeding what it should. The ice caps are melting, entire ecosystems will suffer and this is bad for all of humanity. How can AI help prevent this problem? If we look at it from a macro scale, it seems almost impossible for a small startup to solve, but if we zone in on one small solution that would help us get started somewhere.

Speaker 1:          05:58          We know that climate change could cause severe weather patterns like hurricanes, higher temperatures, and rising sea levels. What if we could predict where the riskiest and most vulnerable regions we're on earth for these severe weather conditions? We could then help local governments prepare for the impacts. We could also use AI to improve the energy efficiency of machines like thermostats, irrigation systems, trains, roller coasters, anything really that uses energy. Imagine energy like a grid with multiple endpoints. Each end point being a different device, needing energy. We can hard code in certain rules for how and when and how much to power each end point or we can optimize it. We can build an algorithm that powers each end point just as much as necessary and not more so that it functions while using as little energy as possible. I like this use case and it'd be easier to sell to businesses that specialize in this sort of thing.

Speaker 1:          06:59          Then governments, oh, and ideally we don't have to build a hardware solution since softcore alone would be much easier to deploy. So farms use a bunch of systems to maintain their crop harvest. Howdy doody? Yeah, John Smith. Okay. Maybe we could build a system that learns from crop yields, energy amounts and weather data to route data in the most efficient way for farmers who powered their crop maintenance subsystems, which would save them money in a way they couldn't. Otherwise. If we could build a solution for a single farm, we could scale it to more later. We could find a local farm, ask them for their Dataset, and this case it would be their energy bill. The most basic version of this would be to say optimize just one subsystem, the one that waters their crops. If it rains a good amount in the next month, they shouldn't have to power their automatic watering systems as much, which would save them money.

Speaker 1:          07:59          We can train a neural network on a combination of past weather data and energy usage and use it to predict how much power to give the system next month. All right. Let's do one more education or advocacy own in Espanol Si how cultured I am. There is a trend towards democratizing education that's currently happening because more people are getting access to the Internet and startups offering online educational content. How could AI help further this goal of educating humanity? There are a huge number of teachers out there willing to teach, but they don't always have the resources they need to help students learn grading administrative tasks. These are basic things that can be automated. A full stack solution for teachers that lets them do what they do best and have the hard stuff automated by learning algorithms would enable more teachers to teach full curriculums online. What's narrowed down?

Speaker 1:          09:01          Individualized supports can be costly. For example, I get more requests for help. Then I alone as a person can handle. Ideally, we could train an AI on my past data and build a Saroj AI that could just answer support requests just like I would. A support Bot would be a great example of Ai for education, so let's go with that. To find our niche. Let's pick a single subject and focus on that. Say Calculus, we'll find a data set of calculus questions and answers or create one ourselves by pulling from the web via an API. Then we can use tensorflow to find the pattern between q's and A's. Once we do that, we can use tensorflow serving to put our trained chat Bot on a server, then have it update and retrain as it receives new questions so it gets better over time. We can sell our solution to small online schools that need more support for their students, for our initial clients and scale up from there.

Speaker 1:          10:01          Adding new features like automated grading and even full on AI teachers. Are you hyper yet? You should be. There are three things to remember from this video. The open source tensorflow library offers a huge suite of tools that offer developers an end to end pipeline to build profitable AI businesses. To build a profitable business, pick an industry and find where a solution that uses data could solve a problem for ideally other businesses and start small focus on profitability in a very small niche and scale up from there. Please subscribe for more programming videos and per now I've got to grow a business, so thanks for watching.