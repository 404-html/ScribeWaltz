Speaker 1:          00:00          Discrete math will help us build tronc hello world. It's Suraj and if you're interested in coding, not just machine learning but any kind of coding you need to understand discreet mathematics. It's become a really important subject in the past few years because of how useful it is in computer science. In fact, pretty much every single computer science degree program contains at least one course on discrete mathematics. Sometimes too liberal arts majors. It's okay. Breathe. I'm here now in this video I'm going to give you an overview of the foundational topics in discrete math to help you understand how it all works. We'll learn about each of them by necessity since we'll play the role of a cyber security agent working for mic six. Our task is to crack a password protected database of international criminals that stored on a USB drive. Discrete math isn't actually the name of a traditional branch of mathematics like calculus or linear Algebra is.

Speaker 1:          00:57          It's instead a description of a set of branches of math that all have in common. One feature, they're discreet rather than continuous. Discrete stands for individually separate and distinct. While continuous stands for forming an unbroken whole without interruption. Discrete math deals in objects in discrete bundles like one or two Kendrick Lamar album's at least three if you're a real fan, especially down in contrast, continuous math deals with objects that very continuously like 3.4 centimeters from a wall. A good analogy would be digital watches versus analog watches. The ones where the second hand loops around continuously without stopping. Basically discreet data is able to take on only integer values, but continuous data can take on any value. Discrete math was created several decades ago as the mathematical language of computer science colleges learned that traditional math subjects did not cover the type of math needed by computer scientists, so they put a bunch of math topics together and called it discrete math is creep.

Speaker 1:          01:59          Math helps us design high speed networks and message routing paths, perform web searches, analyze algorithms for efficiency and design cryptographic protocols that can do things like automatically block any image of will. Smith has a genie beyond cringy before we can start cracking the password to get the data on the USB drive. We've got to get to the lab and there are a lot of different paths we can take to drive there, but we're on a deadline, so we want to get to the lab as fast as possible. Meaning we want to take the shortest path to compute. This will need to represent the collection of streets and intersections as a graph so that we can design an algorithm that will calculate the fastest way to get there. Since each street is two way. This is an undirected graph, so there's no distinction between the two vertices associated with each edge.

Speaker 1:          02:47          It says graph theory, the study of graphs and an important part of discrete math graphs are mathematical structures used to model relations between objects. In our case intersections in graph theory. The problem with finding a path between two vertices such that the sum of the weights of its constituent edges is minimized, would be ideal. The weights in our case would be the time it takes to drive from one bird techs to the other. Here we can use one of the most famous algorithms in computer science dieters, shortest path Algorithm, which is a five step procedure. Luckily we're not in la. Even Dykstra is no match for its traffic. We start by marking our initial node, which is our current location with the current distance of zero and the rest with infinity. Then we set the non visited node with the smallest current distance as the current node for each neighbor of our current node.

Speaker 1:          03:38          We add the current distance of the current node with the weight of the edge connecting it to the neighbor. If it's smaller than the current distance of n, we set it as a new current distance event. We then mark the current node has visited and if there are any non visited nodes left, we repeat the process starting at the second step until we visited all the notes. Thanks to a little python script. We can easily find the shortest path to the lab saving us a lot of time. Now that we've arrived at the lab, let's plug this USB into the computer to see what we've got here. In order to access the database, we need a password and we have the password here, but it's encrypted. We need to figure out how to decrypt it into the actual password. The only thing we know is that the length of the password is six characters long and it can contain either numbers, alphabetic characters or both.

Speaker 1:          04:27          No emojis. Thankfully. Our first strategy here will be to see if we can write a script that will brute force all possible combinations of every character a through z and one through nine but when we start running the script, it starts taking quite a while. In the meantime, let's try and calculate how many combinations are possible here. Since there are 26 letters in 10 digits, we have a total of 36 characters to choose from for each position. If we started from the left, we can fill in the first position, 36 possible ways for each of the 36 possibilities. For the first character, there are 36 possibilities. For the second character. That means our 36 squared wastes fill in the first two characters for each of the 36 squared ways to fill in the first two characters. There are an additional 36 ways to fill in the third character, so there are 36 cubed ways to fill in the first three characters.

Speaker 1:          05:17          Notice the pattern here and know the number 69 is not involved here. The total number of possible combinations is 36 to the end where n is the length of the character field, which is six in our case, making it over 2 billion possible combinations way too much to brute force, so we can go ahead and pause our script. This is an example of common historics torics. The study of counting both has a means and an end and obtaining results and it's a part of discrete math. We need to think of a smarter way to decode this password. What if each of the characters in the string was equivalent to a number and the actual password was solely numerical? What could the mapping from characters and numbers be here? Maybe if we converted each character too, it's numerical position in the alphabet. It would represent a prime number one that's x counts away from zero, but if we tried that out, it doesn't work.

Speaker 1:          06:10          Never give. Maybe the numerical version of it correlates to some sort of sequence here. Notice how I'm trying to categorize these integers into different number types based on their relationships. The study of relationships between numbers is called number theory, a part of discrete math. There are odd numbers and even numbers, square numbers, Pythagorean triples. The FIBONACCI sequence number theory involves analyzing the mathematical relationships between numbers. Right now I'm trying to figure out the theory behind these numbers in particular. Maybe each letter of this text can actually be replaced by a letter, some fixed number of positions down the alphabet. The question then becomes how many positions? Let's write out a function for this one where we can call the function inside of itself for each character in the string while apply a shift operation and recursively call our function until we're done shifting the entire phrase, recursion a part of discrete math is a way to solve a problem.

Speaker 1:          07:10          Where the solution depends on solutions to smaller instances of the same problem. If we Google searched the word recursion, it recursively asks, did you mean recursion, which is a fun little Easter egg from the programmers at Google. In fact, the Internet is riddled with these uh, popular reddit threads. Top answer for the question, what is recursion is a link to that very same post. An example of recursion, a recursive function is a function that calls itself until some base condition is true and the execution stops. When we write out our recursive function, we can try out different lengths of the possible shifts until we get one that works and it turns out that it's three shifts. That was the passport. We just needed to shift the characters. It turns out that this password was encrypted using what's called the Caesar Cipher. One of the simplest methods of encryption. Each letter of a given text is replaced by a letter, some fixed number of positions down the alphabet. For example, with the shift of one a would be replaced by B, B would become c and so on. It's named after Julius Caesar who apparently use it to communicate with his officials is this ambition.

Speaker 1:          08:20          We now have the database of known criminals. This is a SQL database and we'll want to compile a report for [inaudible]. Now that we've cracked it and that list of top 10 most wealthy criminals by amount of money they donated to underground organizations. In order to do that, we'll write some sequel queries which will select the top 10 highest spenders from a certain section of the database. Relational databases like sequel are based almost entirely upon set theory. A part of discrete math. A set is nothing more than an unordered collection of elements with absolutely no duplicates. Even the most SQL statements are nothing more than operations on sets. A SQL inner join is the intersection of two sets. For example, a Venn diagram is an easy way to explain the concept of sets. Two different sets have distinct values and where they intersect, they have similar values, unions, this junctions, there are all sorts of terminologies related to sets and this is what set theory is all about.

Speaker 1:          09:18          We can write down the top 10 criminals. For our report, but we have one more step here. We need to create a proof for our report to show Msx [inaudible] how we crack the code. The rules of logic, a part of discrete math, specify the meeting of mathematical statements. They help us understand and reason with statements like there exists an integer that is not the sum of two squares. It's the basis of all mathematical reasoning and has practical applications in all of computer science. One of the basic building blocks of logic are propositions. A declarative sentence that is either true or false but not both like DC is the capital of the USA is true. While DC is the capital of Mexico is false negations, truth tables, combinations, conjunctions. We can build off of the basic rules of logic to create all sorts of proofs. So logically speaking we can define the proof of our algorithm with the following equation where the decrypted version of the text is equal to each character shifting end degrees out of 26 possible characters and my six is going to be very pleased with this.

Speaker 1:          10:22          We'll probably get a double o status. Now licensed to code. So those are some of the major concepts in discrete math. I've listed them all in the video description as well as a free open source textbook. I found on the topic of discrete math study it. There are three things to remember from this video. Discrete math, cause they said a branches of math at all have in common. The feature that they are discreet rather than continuous discrete data can only take on integer values. Whereas continuous data can take on any value and discrete math topics like recursion, logic and common. A torics help define the basis of computer science. And what's your favorite topic in map? Let me know in the comment section and please subscribe for more programming videos. For now. I've got to check my logic, so thanks for watching.