Speaker 1:          00:00          Hello world. It's the Raj and I've really been digging smart contracts lately. There are so powerful. We're going to build a smart contract that implements proof of existence. It's an immutable digital notary that proves the ownership and existence of any document without needing to hire a lawyer. The advent of bitcoin proved that we could exchange value over the internet in a way that didn't need to involve a third party, namely a bank. What made this possible was its use of a data structure that distributes trust across many nodes. Instead of a few called the blockchain think I'm ready to jump on the every no downloads a copy of it and stores every single transaction that's occurred in the network. It can't be hacked or tampered with because it's secured by the proof of Work Algorithm only Jeff Dean has that much computing power. Since then, several cryptocurrencies have popped up adding their own features to the bitcoin blockchain to extend its functionality, but the cryptocurrency with the second highest market cap in the world, etherium is by far the most interesting in terms of its potential to power a new wave of applications.

Speaker 1:          01:12          Etherium is a digital currency like bitcoin, but it's also got its own terrain, complete programming language that lets you build what are called smart contracts. Let's rewind a bit. In the bitcoin network, any coins that you buy are sent to a unique address. No coins are actually held at this address. It just acts as a unique identifier like a bank account number that allows the total of the transactions to and from this address to be calculated. We can think of Bitcoin as a ledger that records the deposits and withdrawals from account. When we send a transaction via the bitcoin network, the old balance is reduced by some amount and another accounts balance is increased by this amount, but no physical value is ever moved. Etherium works slightly differently. It stores the number of coins you own at an address called a smart contract. This is a piece of code which is stored on the blockchain network.

Speaker 1:          02:05          It defines the conditions to which all parties using the contract agree upon, so if required conditions are met, certain actions are executed, no need for a judge or AWS or really any third party to enforce the rules. The ability to store info at these addresses is called the etherium state, whereas Bitcoin only stores transactions that have been sent into blockchain, any type of data can be stored in the theory I'm state and thereby the etherium blockchain. The information that is stored could range from the amount of ether you have to the type of life insurance you own, and since computation is scarce, there must be a mechanism to limit the resources used by each contract. Every single operation that is executed inside the EVM is actually simultaneously executed by every node in the network. This is why gas gas is internal. It can't be purchased.

Speaker 1:          03:02          It's used to calculate the price of a transaction and ether and ultimately limit the EVM and etherium transaction. Contract code can trigger data reads and writes do expensive computations like using cryptographic primitives, making calls to other contracts, et cetera. Each of these operations have a cost measured in gas and each gas unit consumed by a transaction must be paid for an ether based on a gas to either price which changes dynamically. This price is deducted from the ethereum accounts sending the transaction. Smart contracts enable etherium to operate as a global server where you pay for each transaction instead of a monthly fee for some central server provider. The gas as well motivates developers to write efficient code so that it would require less gas for the execution. One interesting thing to note is that smart contracts can't execute API call directly. If we wanted to build a weather app and wanted to connect to a weather API to retrieve data and show the info accordingly, that code would need to be executed on each and every node, so that call to the weather Api could happen at different times as a nodes might start executing the code, not at the same time.

Speaker 1:          04:15          In one second we could have rainy weather data returned and in another we could have sunny weather nodes wouldn't be able to reach consensus on the result of this smart contract. In this case, but we need data from the real world. It's super useful. So the solution is to use what's called an oracle. Instead of the smart contract calling an External Api, the API itself pushes the data to the blockchain, so that means that all the nodes now have the same data within the network. So a contract triggers an event on external app can listen to that event, retrieve the data from the API and add a transaction with the result to the contract. We can ensure the integrity of the oracle bi using a smart contract as an insurance policy against a corrupting the integrity of the data. But wait, bitcoin's got smart contract functionality too with bitcoin smart contracts.

Speaker 1:          05:06          It's important to understand that each transaction exists as a data structure composed of inputs and outputs. In order to send Bitcoin, users must provide certain inputs, meeting predetermined requirement's that prove they own and therefore have the authority to send bitcoins. They claim to own. Users can also create contract transactions that require a more complex set of inputs in order to trigger the release of bitcoins. A simple example of more complex inputs is a multisignature transaction, which requires more than one entity that sign off on the release of Bitcoin. Proving useful in escrow situations where two of three parties have to vouch for a transfer. Smart contracts in general are pretty computationally expensive to execute, so not every conditional transaction is appropriate for execution via a, we should only use them for features that demand the distributed and secure nature of a shared ledger. I think about an apartment complex and all the administrative work required to maintain it.

Speaker 1:          06:08          If we use smart contracts where tendency is registered on the blockchain, they can be used to control access to the building. When you pay the rent, each tenant's access to the building is renewed. Owners with registered keys are granted access to all the various types of utilities like mailboxes and washing machines. We can also use biometrics to help authenticate users. No need to maintain a server. It's all completely automated. This can be applied to grant ownership that is publicly verifiable over really anything physical objects as well, making them smart property and you can even incorporate a company on the blockchain and if we're really ambitious, an entire nation could be defined not by geography but by the rules and benefits of citizenship on the blockchain. Let's get to building to start developing etherium apps. We'll need a client to connect to the network. It will act as a window to the distributed network and provide a view of the blockchain where all the EVM states are represented.

Speaker 1:          07:07          There are various compatible clients for the protocol. The most popular being guests a go language implementation. However, it's not the most developer friendly. The best option I found is the test RPC node, which we can install and run. We can run test RPC in a new terminal and leave it running while we develop. Each time we run test RPC, it will generate 10 new addresses with simulated test funds for us to use. This is not real money and we're safe to try anything with no risk of losing funds. The most popular language for writing smart contracts in ethereum is solidity, so we'll be using that. We're also using the truffle development framework, which helps with smart contract creation, compiling, deployment and testing. We should be able to compile the example contracts by running truffle compile. Then to deploy the contracts to the simulated network using the test RPC node we have running, we need to run truffle migrate.

Speaker 1:          08:03          We'll be writing a simple proof of existence. Smart contract. The idea is to create a digital notary that store's Hashes of documents as proof of their existence. We can use truffle create contracts to get started. Then we'll open proof of existence. That's Sol. In a text editor. Contracts have state and functions. It's important to distinguish two kinds of functions that can appear in a contract. The first are read only functions, functions that don't perform any state changes. They only read state perform computations and return values and the other kind are transactional functions. Functions that perform a state change in the contract or move funds. Our code only stores one proof at a time using the data type bytes. 32 which is the size of a Sha two five six hash. The transactional function notarize allows one to store the hash of a document in our smart contracts state variable proof.

Speaker 1:          09:00          The variable is public and is the only way I user of our contract has to verify if a document has been notarized. Let's deploy proof of existence to the network. This time we'll have to edit the migration file to make truffle deploy our new contract. Now that our contract is deployed, we can play with it. As in we can send messages to it. The function calls and read. It's public state using the truffle console. So what have we learned? A smart contract is code that is stored and run on a blockchain making it trustless and immutable. We can use them to verify ownership, automate financial instruments and create more autonomous software and etherium is currently the most developed platform to build smart contracts. This week's coding challenge is to create a smart contract that an AI can interact with. More details are in the read me get hub links. Go in the comments and I'll give the top two entries. A shout out next Friday. Hope you liked the video, please subscribe for more programming videos. And for now I've got to fight the power, so thanks for watching.