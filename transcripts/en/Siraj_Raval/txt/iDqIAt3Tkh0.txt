Speaker 1:          00:00          Hello world, it's a Raj. And today I wanna talk about a platform called trust token. We're going to go over some code, we're going to go over some theory, we're going to go over how it works, what it does, what's the point of it. Um, and in the end I'm going to build a solidity demo just to get you used to the idea of a theory. I'm smart contracts, which is what this is built on. So I want to start off by saying I was paid to make this video, but I only said yes for two reasons. Number one, I personally know the founders and I know they have good intentions. And number two, I actually believe in the products. So the last paid video I made was for Intel because again, I believed in the product, the movidius neural compute stick. Okay. So I just want to make that very clear before we, before we get started with this.

Speaker 1:          00:43          Okay. So this is a cool product, especially as somebody who has become a bit disillusioned with the space because of the amount of scams, because of the scalability issues with some platforms. Because of the lack of regulations, which is, which are leading to a lot of people losing a lot of money. So that's kind of, you know, a few of the reasons I become kind of disillusioned with the space. But I like the idea of trust token. I like where they're going with this. Um, and so that's why I wanted to talk about it today. Okay. So what is the whole point behind this? Well, okay, so what it is is it's a platform to create asset back tokens that you can easily buy and sell around the world. Okay. So basically the idea is that you can tokenize everything. Okay. So real estate, oil, currencies, your dog, your, you know, any kind of physical object in the real world, um, you know, your house, et Cetera.

Speaker 1:          01:38          There's, there's so many things that you could do, you know, your art pieces, your music, et cetera. And so you might be thinking, well, why would I, why would I want to do that? I could just put it on some marketplace and sell it there. Well, it turns out that not everybody has access to investment opportunities. And not everybody has access to the ability to raise capital for this project. And so what the idea of tokenizing everything does is it democratizes access to capital. So anybody can raise capital for their project, right? By, by issuing these tokens, right? So if I have some, you know, house or something, um, I could then tokenize that house and allow anybody to then share in ownership of that house by issuing tokens. Right? And so that's one. So the ability to, uh, raise capital for, you know, whatever it is.

Speaker 1:          02:30          The second great thing about this is the ability to then invest in anything, right? So think about Tesla stock, right? So Tesla stock, only certain people can invest in Tesla, right? First of all, you, ideally you're an American because it's an American company listed on the American Stock Exchange, right? So a lot of people are not included, right? They're not included in the ability to purchase Tesla stock simply because they weren't born in the United States, right? So democratizing access to investment opportunities to everybody. Then the ability to raise capital for everybody is something that blockchain technology and uh, an implementation of it trust token or aiming to do. Okay. So another thing is the idea of an ICO, right? So I see owes, have kind of done that. They've democratized the ability for anybody to raise capital anywhere in the world. But the problem is that there are, there's no, you know, regulatory legal framework around all of this.

Speaker 1:          03:27          And this has resulted in a lot of scams, right? A lot of people losing a lot of money. You don't necessarily have to be an accredited investor to invest in any of these ics, but you do in the case of, uh, trust token, right? So not necessarily an accredited investor meeting of $1 million in, in, in, in capital, but they definitely dotted their i's and t's when it comes to the legal documents, right? So they've listed this, this coin on coin list, right? So if we go to coin list.com we can see a listing of there's trucks trust token right there. There it is, right on the, on the front page of coin list. Right? So the only other coin that I think is really, really cool is file coin of course. Because again, I know Juan, he was my roommate. IPFS is an incredible, incredible protocol.

Speaker 1:          04:20          And file coin is kind of the glue that makes IPFS work, right? So, and, and you know that that's in progress, but the whole idea behind establishing coin list was to allow for there to be a regulatory framework around the ICO phenomenon, right? So the, the saft is a, is a document that was drafted up specifically for regulatory compliance with the security and Exchange Commission, the SEC and other regulatory agencies within the United States. And so if you want to do this, this idea of an ICO the right way, you should do it through coin list. You should do it through the saft. You should really be legal about it. Okay. Because that's the way we're going to move forward. We have to, we can't just, we can't just say, okay, there's a government and there's this, you know, everything is archaic. Let's just trash it all and restart.

Speaker 1:          05:10          Unfortunately, that's not how it's gonna work right now. Right. We have to slowly bridge our way into a world where everything is crypto in digital, but we're not just going to be able to say, oh, VR is of no use anymore. That's not how it works. Okay, so end of that little, you know, little arguments right there. So the idea is that trust Hokkien allows you to tokenize everything, right? So, and it's been listed on a bunch of, you know, reputable exchanges, um, listing the listing of them is right here, uh, and it, you can redeem it one for one for a US dollar. So one true USD token. So trust token is the name of the platform and the cryptocurrency is called true. USD is worth one US dollar. So it's a one to one mapping. What that means is no volatility. Let me say that again.

Speaker 1:          05:58          No volatility. Okay. So the plus side here is that you can now have some cryptocurrency and not worry that that value is going to diminish by 30% in the next hour, right? Because that's the case with a lot of cryptocurrencies. But with this it, because it's pegged to the dollar, you know, you have that stability. The, the con is that we are, hey, you know, like ideologically speaking, morally speaking in the, the spectrum of decentralization and crypto anarchism hey, you are pegging your digital currency to this beyond government backed currency. The whole point is a, it's a not do that eventually, right? But we've got to build a bridge first between the traditional financial world and the crypto financial world. And what trust token aims to do is just that. Okay. So the idea and the, and the number they talk about is $256 trillion worth of real world assets.

Speaker 1:          06:52          A lot of it is in real estate, right? So real estate homes, apartments, land, this is, these are not liquid assets. Meaning no one can invest in them directly in that way. You can't trade a piece of a home, right? Unless you can tokenize it. And that's what this aims to do. So again, the team, I know Rafael, I know Steven. I know Danny, you know, I met them around there. They're bay area people and they're, they're around Stanford, et Cetera. They worked a kernel, which is a brain computer interface startup. When I say platform, I mean there are five parts to the system that they've created, right? So every time you, you say, okay, I want to tokenize this asset, let's say it's my apartment. A smart trust is created. And so that's the first part. A smart trust is a smart contract. This is a solidity smart contract.

Speaker 1:          07:39          This was built on the theory on blockchain. And so what it does is it appoints beneficial asset ownership to the person who then creates that a token, right? So that's what the smart trust does. The second part is trust market. And what that does is it allows clients to higher fiduciary. So these are trusted third parties who interfaced with the legal institutions and are legally bound to manage assets as instructed by the smart contract. The Smart Trust, the trust protocol is the set of rules or the centralized rule set that specifies how those smart contracts can direct fiduciaries. The trust volt is a decentralized storage system for allowing for audit trails. Remember we want to be very legal about this for acid transactions. And then lastly, the trust token was the incentive layer at the very end, which we're going to be able to use. So if we look at the stack and it's quite a big stack, they've, they've, they've really thought this through, right?

Speaker 1:          08:33          So you have your physical asset in the real world, you know, you're, you know, you're a art piece, your phone, whatever you want to tokenize. You have your legal entity on top of that. That is that a smart contract asset management. This is happening in the form of a trusted fiduciary. Your Api on top of that that you can then interact with. And then you have a blockchain layer, regulatory layer, um, and then the staking layer, which we're going to talk about in a second, the staking layer. So the first smart trust was issued in October 17 and has a bank account. This is the first time someone tried to tokenize some product. So if we go to either scan and we type in that smart contract, a dress, there we go. We can see it right there. On the ethereum blockchain, publicly verifiable by anybody.

Speaker 1:          09:22          And so normally you would think, well, you know, there, there's no need for this. You would send money directly to the entity that you want to exchange with and they would then control it. But when there's a trusted third party that's not owned by a human, but it's automated in the form of a smart contract, uh, it just makes the whole transfer, um, less risky, right? Because you're, you're automating trust into this smart contract. And so right now they have a true USD token, but they have plans to have one for euro, the bond assets, et cetera. You know, things like that, different currencies. But right now they have one that's pegged to the USD [inaudible] currency. So, and there's a very, there's very much a need for a stable cryptocurrency. Look at this chart of, of, uh, of Bitcoin's price, uh, over a period of a year or two.

Speaker 1:          10:11          This is way too volatile for anything useful as a currency, right? Or A, as a store of value. So, uh, a store of, of, of stable value that is, okay. So, and, and look, uh, trust token is not the only token out there that's trying to have a one to one mapping with the u s dollar tether is currently the largest [inaudible] collateralized cryptocurrency. But there they have no legal guarantees that those tether coins can be redeemed for traditional currency, right? So the whole point of this is to allow both the investor and the PR and the entity that they are investing in to breathe a sigh of relief and know that they can trust the idea of tokenizing their assets, that they're not going to lose their money. That's the whole point of regulation, right? We are rebuilding regulation in a way around this, this, this whole crypto space. Uh, so, so, so they, they, you know, the drafted up the saft, they, um, they're listed on coin list. You go through a form and you have to list out some information about your investor status to be able to invest. So they've really gone through the steps necessary to make sure that the sec is happy with them. And I think this is an example that the rest of the space should be following.

Speaker 1:          11:27          Okay. So what are the use cases of this? So we know that one use case is to tokenize your assets, right? Another use case is to have a stable cryptocurrency for buying and selling goods, right? You know, it's great to be able to use bitcoin, but you don't know how much that bitcoin is going to be, that you can use this to buy things where digital currencies are accepted. And because it's built on top of the ethereum blockchain using the Erc 20 framework, you know the, and I have a great video on that. It's called initial point offering Saroj search out on Youtube of how Erc 20 works, but because it's an Erc 20 token, his backwards compatible with all services that accept etherium, right? So there's that and you could store it in your etherium wallet because you know, all Erc 20 tokens are backwards compatible with each other.

Speaker 1:          12:14          So let's get to the fun part, right? The architecture, which there's not a lot of information on it, but that's why I'm here for you. Okay. So, so the idea is this, they're there. It's two procedures here. There's a by procedure and there's a cell procedure. Let's go over the by procedure. Okay? So how do we do this? Right? So if we want, if we have a hundred US dollars and we wanted to exchange that for a hundred true USD tokens, here's how it works. The first step is for us to be able to complete KYC and AML compliance. What that means is know your customer and um, what does AML stand for? Anti money laundering, right? So these are standard forms that the sec needs to make sure that uh, no one's getting screwed over, okay? That, that's essentially what it is. And so what once you complete those, um, trust tokens team is going to manually review that, make sure that it works, then you will submit that Info, uh, in the form of you, you're going to have your ethereum address.

Speaker 1:          13:11          You're going to take that a theory I'm address, and you're going to provide it to the trust token team. Then you're going to wire funds to a trusted third party. And this is an escrow. It's called Prime Trust. It's a Nevada based company. Once you wire those funds directly to them, uh, both them as an escrow and a group of what are called stakers are going to verify the validity of your transaction and then a smart contract is going to be activated. The will then immediately receive some true USD tokens. Okay, so there are two checks here, right? Checks and balances. The first is the fact that they have this third party escrow called Prime Trust, which is a company, a trust based company as whole job is to validate transactions. So that's one. The second is a group of stakers. So, and right now, um, they have a few stakers and what the stakers are is every time you make a transaction in this networked, 10% of that transaction is given to the stakers.

Speaker 1:          14:03          And the stakers job is to verify the validity of transactions, right? So when it comes to, and I have this, I had this proof of stake, a infographic here where you have a group of people who are verifying transactions and the network based on how much stake they have. And so what this is, is it, it's an additional consensus algorithm on top of the theorems already existing proof of work and then they will transition to proof of stake. But this is just as a way of further validating that transaction, which is good for both, both the person who is trying to get those tokens. It's good for all parties involved because it adds a layer of trust to everything. Okay, so, so that's the first part of, so stakers and the escrow. And we're going to go into this code in second. Okay. So that's the buy part.

Speaker 1:          14:49          The cell part looks like this, right? So if you want to use the trust token platform, you'll create this smart trust contract. You issue the title of the asset to the trust, and then you'll lock up that trust and then you can distribute your asset tokens to anybody who wants to then buy your asset. Okay? So that was for how to buy. Let's talk about how to sell, right? So when you want to sell your true USD tokens, the first step is to burn them, okay? So what do I mean by burn? So the idea of burning coins, what that really means, and this is an example right here, is that you're sending them to an address that nobody has. The private key to those coins don't just magically disappear. What happens is they go to a locked account that nobody has the private keys of.

Speaker 1:          15:32          And once the smart contract has verified that the funds have been transferred to that public key, then the service is notified that hey, these coins have been burned, a boolean value. And so once you burned your tokens, the stakers, we'll verify that transaction and then you will receive Fiat's from this trusted third party and you will receive fee out from a prime trust and then you will receive your true USC Tokens. Okay, so, so that's the basic idea of how that works. You a user submits a wire to the company with the crypto wallet information. They'll send the signal to Tura, USDS, smart contract and verifying you purchase it. And then automatically, you know, just the whole idea of a smart contract is that it's automatic. They get the signal and they'll send out this funds. Okay. And so what it looks like when you actually buy that, once you add, verify your identity, you're a theory and address or email, you can then deposit USC and withdraw Usd using this very nice graphical user interface.

Speaker 1:          16:25          Okay, so let's get into the code here for a second. Okay. So first of all, I want to talk about how easy it is to build smart contracts. Okay? It's, it's very easy to build smart contracts and not a lot of people appreciate that fact. Okay? So what we're gonna be using right now is the theory, some remix a ID. This is in the browser. Anybody can compile, run tests there, solidity, smart contracts. So I want to build a very simple one here called a creator balance checker. And this is just a smart contract that's, that's able to record the address and the amount that, that the person who created the contract has in their account, right? So I'm going to create a contract and that contract, we'll be able to tell anybody who then calls it, how much, um, crypto I have and the address of the person who created it. Okay? So, and they use something like this whenever you're trying to buy a coin. And we'll get into that. But I want to start off with a very simple example here. Okay. So we're gonna start off with a contract called Creator Balance Checker Creator Balance Checker. This is a solidity smart contract. Okay? And so what it's gonna do is going to record two parameters. The address of me, the person created the contract and the amount that I have that's called my creator balance.

Speaker 1:          17:49          By the way, you int is an alias for you into two 56. It's a 256 bit integer. Okay? So there's that and now I'm going to create that balance checker function, right? So creator balance, checker functioning, it's a public function. Anybody can access it. Um, and so what it says is, okay, who is the creator and what is their balance? And so this is basically the constructor function. That's a signs, these values, whenever the creator creates it, right? So that's it. That's all it is. And so once we have that, now we can get to the fun stuff. Now we can say, let's get that contract address. So, uh, whoever, then Kohl's, this smart contract is going to be able to, is going to be able to then return to receive what that contract addresses. Now we can do the same thing for get the Creator's balance.

Speaker 1:          18:50          And again, we're making this very simple function to do this. We also want to make sure that this is going to return a you ENT. And speaking of what we want to return, we want to make sure this returns the address, okay? And now we simply just returned that this isn't just a simple get method, right? It's a simple get a in the if we went and go back to https, a rest idea. Okay. And so now, well, there's also one more thing I want to do here. So we're not just getting the Creator's balance. We want to get the creators two types of balance. So we want to get the Creator's current balance and we want to get the creator's balance at the time that they created this, this smart contract. Okay? So this is going to return, is going to return, it's going to return.

Speaker 1:          19:39          And this is going to be a you int return creator adopt balance. Okay. And so, so this first one is going to return it at the time of creation. And this is going to return the current balance, which is very cool. So it can actually return both across time. And I want to have one more a function here. So let's just say we want to recover funds, right? So as long as I'm the creator, I can recover my funds by doing this for the smart contract, I can create a kill function that will say, hey, if the person who calls this function, if the messages, if the message is sender is the creator of this smart contract, then go ahead and kill the contract and send the remaining funds to the creator. So I'll say called suicide creator. Okay. Um, there's that the de, and now I can close this smart contract.

Speaker 1:          20:32          And so now I can start to compile. I want to see what errors I have here. Created a balance. Great. Start to compile. Okay. It looks good. It looks good. And now inside of my javascript Vn, I will now deploy this. And now I have deployed this smart contract to this test and test net and now I can check it out. And so now what this does, this guy here is it kind of, it simulates, you can do this from console as well, but we're doing it via this graphical user interface where I am now calling the smart contract, get the contract address. So that's the address of the Creator who created it. And that's me calling that that function. Let me do the same for the balance, okay? That's how much money the creator has. And you can see that's exactly the amount I have in my account here.

Speaker 1:          21:19          And now lastly, I'll do the same thing for the balance now, which is going to be a little less right. And now the last function I'm going to call his kill. And that kills that smart contract. Now what? Now that I killed it, if I go back, of course everything's going to fail because that's smart contract doesn't exist. Okay? So I just wanted to give you a simple smart contract example that can compile and run for you to see how easy it is to create these things. So now let's look at their smart contracts. So they've got this, uh, get hub repository with a bunch of different smart contracts. Um, and so what I've done is I've kind of like dawn through them and tried to, uh, decipher what, what the smart contracts do, what part does what, um, and so basically we can say that, uh, for when it comes to buying a token, you have your compliant token dot Sol fall and your time log dot Sol file.

Speaker 1:          22:11          Okay, so here, are there a smart contracts? Okay, so there's a lot. So if we go to the highest level, if we go to the highest level here, and so they're using open Zeplin great architectural choice to use open Zeppelin for, uh, templates to easily create these smart Erc 20 smart contracts. Great idea. So true. USC is the highest level smart contract they have and it inherits from their other smart contracts. Modular PauseAble token, no honer burnable token. It's a compliant token. It's a token with fees. It's, it's a withdrawal token. It's a standard delegates, it can delegate. So all of these features, you know, you can withdraw, it has fees, it's compliant or inherited. And to go to this master class master contract, true USD. And so in the constructor it is in the constructor, it is talking about how many tokens or are in total, how many are being burned, et cetera.

Speaker 1:          23:07          And then you're going to change the token name, you know, different things like that. And you've got a bunch of a helper methods here, but it's actually a very small contract for, for what it does because everything is really inherited from other classes. So KYC and AML compliance. So what is happening here is it's a manual review by the trust token team. And this is a string that holds that boolean value has a passed or not. They can, they can then modify that. So then once this boolean value is set to true that you've passed, you know, the next step in the process is activated automatically, right? So the compliant token is all about storing that value in particular. And so this is all about buying. Okay? So the second really important part is time locked controller. So think about the possibilities here. You can miss the network, can mint a token, the network can burn some tokens, the network can request for some tokens to be transferred.

Speaker 1:          24:06          And all of this depends on a Timelock, right? So has the person sent this money? Okay, go ahead and do this. Has a person burned this Hogan, okay, go ahead and do this and that, that code is in this Timelock controller. You can even see that staking fees can be changed. You can change the person who is able to stake, uh, you can switch roles. So certain people can, you know, have certain permissions to do certain things. So there's a lot of permissions here, but they, all, all of it is, is inherited true USD, inheritance, all of it. Um, that's when it comes to buying a token. When it comes to selling a token, you've got this burnable token dot Sol. And what this does is it simply burns a token, right? So that, that, that's all it does, right? When you, when you say, okay, you know what, I want to trade my true USD token for some us dollar, you are then using this, uh, uh, solidity file to send that token to nowhere that no one has access to.

Speaker 1:          25:02          And then once, uh, the network realizes that, hey, this person has burned this token, then we're going to, um, delegate access to real, you know, USD Fiat currency and that transaction will be completed. Okay. So that's how that works. This is a cool, very cool project. I think we can learn a lot from this project by looking at the way that they did things in illegal a way, which is a good thing. Uh, and also just the fact that they seem to have very clean code. This is a good contract design pattern to have a high level contract and then other features that are inherited into that high level contract. Okay. So I hope you found this video useful. Please subscribe for more programming videos and for now I've got to tokenize, so thanks for watching.