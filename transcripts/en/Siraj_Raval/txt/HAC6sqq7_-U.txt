Speaker 1:          00:00          Hello world. It's the Raj and do you own your data? No. I'm going to demo an open source project that aims to bring power back to the people called open mind. It's a community focused on building technology for decentralized ownership of data and AI. The original dream for the web was for everyone to be able to participate equally for the betterment of humanity. The webs first pioneers had the ethos that data should be freely available for all that wanted. At its start, the web was just a series of nodes joined by links with no central node. Everyone hosted their own data on their own server, but this altruism begin to fade during the first.com bubble. Entrepreneurs realize that an easy way to provide value on top of this neutral playing field was to build centralized services that collected data and monetized it. You freely exchanged your data to access a free service, but what's happened now is that these services now own the majority of the world's data.

Speaker 1:          01:11          The web has become centralized. Let's say we want to start an AI startup, meaning we want to use AI to solve some problem. The current business model for this is to first acquire data about people somehow. The next step is to train a model on that data so that it does something useful and the last step is to sell the use of that model in the form of a usable APP. The problem with this business model is that people lose control of their data and aren't compensated for it. Open mind is a peer to peer network that lets anyone train their AI models on user data that normally only big companies had access to while letting users maintain ownership and get compensated for their data and achieves this by sprinkling for newer technologies on itself. Deep learning, federated learning, homomorphic encryption and blockchain smart contracts.

Speaker 1:          02:09          Let's go over each at a high level. First, deep learning. This is a way to convert one dataset into another dataset so we can go from a partially labeled Dataset of Mri Scans to a fully labeled Dataset of Mri Scans. The next technology is federated learning. Normally you'd collect some data set from users and store it all on one server. You then train your model on that server. So the data and the model are in the same place. Federated Learning flips the script. Instead of bringing all the data to the models location, we bring the model to each individual data source. Lastly, the model is then updated in the cloud using all the gradients it receives. The third technology is called homomorphic encryption. This is a scheme that lets you perform computation on values that you don't know the actual value of just the cipher text. So if you have a number like five you can homomorphic Lee encrypted into a cipher text than perform operations on that cipher using known values and get results all without ever knowing the real value of the cipher.

Speaker 1:          03:24          The last one is called blockchain smart contract technology. A blockchain is a decentralized database. It's immutable so no one can delete an old entry and no one can fake a new entry. A copy of it is stored on every node that makes up its network. A smart contract is some data that's stored on the blockchain. This data usually includes an event, some state and some code. It's like a regular app but de centralized. So what is open minds workflow look like? Assuming we only use deep learning and federated learning together, we as a startup can say, let's train our model using three different people's data. So we first train it on user A's data, the model updates, Aka gradients are sent back to us. Then we do the same for the other users at first. This seems good enough since everyone got to maintain control of their data and our startup didn't have to see any of the user's data to train our models on that data.

Speaker 1:          04:29          The problem though is that any of these users could just steal the model when they receive a copy of it and sell it themselves. Also, the gradients give hints about the type of data a user has and lastly, no one got paid for their data. What if we sprinkle some home morphic encryption on this? Meaning we encrypt our model before we send it out to users for training. Well, user a would increase the intelligence of the model by training it on their own data and can't see what the model's values are. Same for the other two users so they couldn't steal the model, but our startup could still reverse engineer user's data and users still aren't being paid for their data. Enter blockchain smart contracts are startup consent as model specification to a smart contract. That means the type of model we want to use and some money in the form of a bounty that we want to pay for the model.

Speaker 1:          05:29          The smart contract initializes the model itself because the weights are randomly initialized by the smart contract and all the information used to initialize the weights is public. There are no hidden secrets inside the homomorphic encryption that our startup could embed to make it so that the model secretly memorizes user data when user a request the model specs from the smart contracts, they can agree, let the model Spec train on their data and send it back the gradients. The smart contract evaluates the validity of those gradients, then sends them to some bounty in the form of cryptocurrency. Now we can't steal their data and they can't steal our model. Plus it creates a marketplace so users get paid for their data. The only remaining problem now is that whoever holds the public private keys for the homomorphic encryption can decrypt any part of the system at any time.

Speaker 1:          06:32          The solution is to use an oracle, so the difference would be that the smart contract sends the model Spec to the Oracle. It generates a public private key pair and crips. The model then sends it back to the smart contract, so the Oracle holds the key pairs after training on all the user data. The model is sent back to the Oracle. It's decrypted encrypted with the oracles keys then sent back. Since the oracle acts as a trusted third party, no one can decrypt the model or gradients. A second smart contract can act as an insurance policy against the oracle sharing its secret keys. If we look at the open mind, get hub account will notice quite a lot of moving parts. This is a big project with many contributors and growing daily. There are four main components though. The first is sonar, which is the federated learning server.

Speaker 1:          07:29          It's a smart contract running on the Theorem blockchain that handles all activity. This contract holds bounties and pointers to AI models in the form of Ip fs addresses. That's where the models are stored. Sonar has an interface to it as well that we interact with to train our models. It communicates with capsule, which is a third party Django web app used to generate PGP public and private keys for encrypting models that anyone can host as an oracle users store their data in a mine. This is a node dot. JS client that acts as a safe warehouse for data and communicates with sonar constantly checking for new models to contribute relevant data to users can pull their data from existing centralized services via custom adapters. The idea is that you can download your Facebook or Google data directly into your mind. Then sell it for models to train on.

Speaker 1:          08:29          The last component is sift, which is a neural network library that can be trained in a homomorphic Lee encrypted state. Let's say we're trying to predict whether or not someone has diabetes or not. A data scientist will first create a request to sonar in order to begin a training campaign. They define a set of basic parameters like the amount of money they're willing to spend in order to train their model. A description of the data being requested from the minds like certain images, a description of the desired output like image labels, the starting accuracy and the desired accuracy. A model is generated from this campaign and place on the sonar blockchain sonar communicates with capsule which generates a public private key. A public key is sent back to sonar and stored with the model. The private key is kept secret in the capsule minds can pull the model and train it.

Speaker 1:          09:30          After training. The gradients are uploaded back to the sonar blockchain and the change in accuracy is calculated when training is complete. The encrypted model has sent to the capsule to be decrypted using the private key then delivered to the data scientist. Three things to remember here. The web has become way too centralized of a few people are profiting off the data of many. A great potential solution is open mind. A project that aims to create a marketplace to let data scientists trained models and pay users for their data directly and open mind uses four key technologies, deep learning, federated learning, homomorphic encryption, and blockchain smart contracts. This week's coding challenge is to make a contribution to open minds. They've got lots of issues on their get hubs, so just pick one and make a pull request with your contribution. The more valuable, the better posts your get hub link in the comment section, and I'll announce the winners next week. Hey, I hope you liked this video and if you did, please hit that subscribe button for now. I've got to go own my data, so thanks for watching.