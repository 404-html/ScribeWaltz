Speaker 1:          00:00          Hello world. It's Siraj and welcome to the learn python for data science series. In this video we're going to set up our python environment and write a 10 line script that can classify anyone as male or female given just their body measurements. Data Science is the study of data and a data scientist is someone who solves problems by studying data. It's a pretty much all science is data science. We observe, we make predictions, we test and we update our ideas, so if we weren't given a data set of media right landings over the past 10 years, we could come up with questions that we think that data might help us solve. Like what area is most likely to get hit or how does atmospheric pressure affect me? You're right trajectory. Then we could write a little code that trains a machine learning model on that data and predicts the answer. We can use an existing model and there are a lot of them or build our own.

Speaker 1:          00:50          Traditionally you needed a phd for this stuff, but with the world's data doubling every two years and machine learning algorithms getting more powerful, anyone can become a data scientist. You just need time and motivation. If you have those two things, you'll be able to complete a bunch of data science projects and upload them to your get hub. Get hub is the new resume. It's not about how many degrees you have. It's about what you can do. Machine learning democratizes scientific discovery. Okay, I'm talking to you. Yes, you sitting right there. You can be a data scientist. Anyone can, and the tool we're gonna use to help us learn from our data is the python programming language. I'm going to teach you python, but not just by talking about syntax. You'll learn by doing. In each episode we're going to focus on a different data science project. I'll give you a coding challenge at the end that extends that project and you'll learn python along the way. I'm picking python for two reasons. It's designed for readability and its general purpose. Check out this speech recognition APP. It uses a library called Sphinx to read an audio file converted to text and print it out. That's just five lines of code and we can still read what it's doing since every word is descriptive and compact. Now let's look at a similar APP and c plus plus. That's about a hundred lines.

Speaker 2:          02:01          Hello, so

Speaker 1:          02:04          beautiful. To build our gender classification APP, there are four steps. We'll install python, set up our environment and star dependencies and write the python script. Let's start by installing python. If you're on a Mac or Linux machine, python comes pre installed. If you're on windows, it doesn't yo what the, regardless, you'll want to download the latest version of python 3.5 0.2 as of today on Mac, you can download the installer package and go through the necessary steps to install it. Then you'll be able to compile your scripts from terminal using the python keyword like so on Lennox. You can download the source than in terminal. Type in three commands to install it. You'll then be able to run python scripts using the python keyword on windows. You can go download the installer. Make sure add python dot exe to path is set to be installed on your local hard drive and once it's finished, you can run python right from command line.

Speaker 1:          02:52          Now that we have python installed, let's set up our environment. The text editor we'll be using for this course is sublime text since it's super simple to use, but what about emacs? No. Both Mac and windows have an installer that you can use to install it for Linux. You can install it via the APP to get package manager. With these three commands, once we have it installed, we can type our python code in there and compile it with terminal by pointing our python interpreter to our script. That's it. We only need terminal and our text editor to run our scripts, so we've got our environment set up. Let's move on to installing our dependencies. Dependencies are packages that are code depends on, we call them at the top of each script we write with the import statement. Any programmer can write a package to say, figure out who shot her Rhombi and a thousand lines of code, upload it to the Python package server.

Speaker 1:          03:37          Then we could download it and call it with a single line of code. All Code is part of a greater whole. It's all linked together in a grand chain of dependencies. It's like building a house in order for you to be able to build the roof of a house. It'd be nice if you already had the dependencies. The Python package manager pip helps us install dependencies and we'll use it right from command line. You can install pip for python three using these commands for whichever operating system you're using. The only dependency we'll be using in this video to build our gender classifier is psychic. Learn a machine learning package with a bunch of prebuilt models for us to use dope. We have our dependencies installed and now we're ready to write our script. We'll start by importing it first as we should for all dependencies are going to use a specific sub module of psychic learn called tree that will let us build a machine learning model called a decision tree.

Speaker 1:          04:22          A decision tree is like a flow chart that stores data. It asks each labeled data point, it receives a yes or no question it does it contain x or not? If the answer is yes, the data moves one direction. If the answer is no, it moves in the other. It'll build every node in the tree, the more data points it receives. Then when we have a new unlabeled data point, we can feed it to the tree. It will ask you a series of questions until it labels it. That label is our classification. The more data we train it on, the more accurate the classification. Let's start by creating our Dataset programmatically. All right. Our first variable x as a list of lists, a variable is a value that can change and will soar or list of lists in it. Oh, this is a data type in python that can store a sequence of values.

Speaker 1:          05:01          Here. Each value is a list itself that contains three numbers that represent the length, width and shoe size of a person will write 11 of these, so our data set size is only 11 people who write one more variable called why to store a list of labels. Each label is a gender and is associated with a list of body metrics in the previous list. Well, write them as strings, which is a data type used to represent texts instead of numbers. Now that we have our dataset but want to define a variable to store our decision tree model, let's call it CLF short for classifier and it'll store our decision tree classifier. We can reference our tree dependency directly by calling it here and initialize the decision tree by calling the decision tree method on the tree object. Now that we have our tree variable, we can train it on our dataset.

Speaker 1:          05:40          We'll call the fit method on the classifier variable, which takes two arguments. We'll store our x and y variables as the arguments and the result will be stored in the updated CLF variable. The fit method trains the decision tree on our dataset. Let's test it by classifying the gender of someone, giving a new list of body metrics. We'll create a variable called prediction to store the result and call the predict method of our decision tree to predict the gender. Given these three values in a list, then we can print it out, determine all via the print command. We can run this script in terminal by saving it as demo.py and running it via the python demo.py command. So to break it down, data scientists solve problems using data and because easy to use machine learning libraries and abundant data are now available everywhere you can become one.

Speaker 1:          06:21          Python is a programming language for both beginners and experts and emphasize readability. And a decision tree is a model that classifies data by creating branches for every possible outcome. The challenge for this video is to use any three different classifiers from the psychic learn package on this same dataset. Compare their results, then print the name of the best one. Sometimes you have to try a few models to see what gives you the most accurate predictions. Poster, get hub link in the comments. I'll pick a winner within one week and mentioned them in the next video. Please share this video if you liked it and subscribe for more programming videos. For now, I've got to drink some soylent, so thanks for watching.