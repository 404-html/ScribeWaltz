Speaker 1:          00:10          Okay.

Speaker 2:          00:29          Hello? We are here. We are here. Let me mute myself. All right. All right guys. Hello world. Hello World Saroj is back in business and ready to go. Hi Guys. All right. Hey everybody. Uh, hello. Hello. Lori is John Francois Spencer. Sunny Jason, I know Bob, don't go lock shower.

Speaker 2:          01:02          The band was everybody. Okay, so today we aren't going to play with computer vision. I love computer vision. Computer vision is one of my great joys in life, especially in college. I used to just like use open CV all the time for side projects and we're going to use it today. We're going to use open CV to take an image. It's going to be a 10 by 10 square I took, it's going to be a grid, it's going to have obstacles in it. And what we're going to do is we're going to look, we're going to iterate through all of these squares and see which ones are obstacles and we're going to print those obstacles out by reading in the image with computer vision and, and we're going to find the shortest path from the starting image to the image that is matching it. Okay? And I'm going to show you guys a, an image before we start a little demos a after the Q and a. Uh, and that's gonna be awesome. But first I'm going to do a five minute Q and a, like always a and then we are going to get started with the code. All right, so five minute Q and a. Here we go.

Speaker 2:          02:06          And by the way, thanks guys for showing up during finals week. I know it's a, I know it's a busy time. I'm just here to augment your learning experience or right. Daniel's challenge. Yes. Daniel Shiffman and I have been collect, I have talked about collaborating. I'm going to make a game bod for one of the games that he makes and it's going to be awesome. Will you do videos on Watson services? I actually do have a video. Um, it's called, uh, it's called, uh, what's it called? Build an AI.

Speaker 2:          02:34          Uh, no, it's called tone analysis and I use Watson Idi. What's your target audience? I'm looking to target developers who are between, you know, 18 to, you know, 60 plus whatever. Ideally I want to get kids involved as well. That would be awesome. That makes me really happy when I have like 12, 13 year olds watching. So I want to, so I want to expand to kids, but right now it's kind of like college age kids and, and higher in high school. Uh, any experience in first robotics? Yeah, I did. I helped out. I volunteered with a first robotics competition in New York when I went to school at Columbia. Was awesome. Uh, how did you learn all this AI? I studied, uh, sub reddit, the machine learning separated Twitter feeds, uh, articles and just the Internet, the Internet, and then just a collection of sources over time you get better and better at it.

Speaker 2:          03:23          Hey Surag where you cover transfer learning later? That's a great question to kill. I absolutely will. And I think the future of machine learning is in transfer learning. We can't just create a Bot that just has to learn everything from scratch every time. And with open Ai's universe, uh, that's gonna be, that's gonna that's gonna happen faster. We're learning ml with are in university. What do you think about that? I think you guys should switch to python because our is not as compatible with a bunch of other non machine learning libraries that you might want to integrate into. The apps that you're writing, uh, where you posted that you are doing live broadcast. I'm trying to find a spot where I can post that. Um, I haven't really found one, so it's just Wednesdays at 10:00 AM I have, I've kind of not like wanting to like officially say that because I don't want to commit to doing live every week.

Speaker 2:          04:08          But you know what, I just keep doing it and I love you guys and I'll do it for you. So just I'm committing right now every Wednesday at 10:00 AM is a live session. Uh, I might not be on for like New Year's or Christmas or whatever. Um, not that I celebrate that, you know, I do celebrate new years. This is my favorite holiday of the year because this is a celebration of the future. Uh, but yeah, Wednesdays at 10:00 AM or my life sessions. Hey Raj, which laptop config for deep learning is Gtx 10 70. Good enough. Uh, yeah, any of the GTX series by Nvidia is a good, it's a good bet. Would Python and Java be the future of PR programming? Python is definitely a growing very fast and in popularity. A Java kind of had its heyday and I feel like it's getting less cool over time.

Speaker 2:          04:50          Uh, and I, I also think go is, is a language that is up and coming. What are your new Europe's plans? I am willing to throw the sickest New Year's Eve party at my place. I've invited some youtube celebs, uh, that I met in la. I invited some, oh my God. It's going to be awesome. I love New Year's. It is a celebration of the future. Future of Python, uh, future of python as a language. I mean I think, I think we're going to have, um, more and more abstraction so things will be easier to do in the future. Hasty. Raj, do you eat the wait, but why blog? Yes, I love that guy. He is a great writer. As someone who writes an essay, basically from my videos, my scripts every week, that guy is a great writer. How do you use PNP in Python? In machine learning? Watch my videos. Not Php though. Python is not really a programming language. It's a scripting language. Guys, don't confuse semantics. Okay. Okay, so I'm going to answer two more questions and then we're going to get right into the code. All right. Which book do you recommend for machine learning? So machine learning, a probabilistic approach, um, is, is a great one. Which uni did you go to? Columbia University. Saroj please. Hi Car tick. There you go.

Speaker 2:          06:01          Okay. All right. One more. How to build an AI girlfriend. Okay. So, oh my God. Okay. I've thought about this quite a bit actually. Uh, so, uh, so, so that would be a generative model, right? That would be a generative model, which a lot of a lot of work is going into generative models right now. And um, it's one of those new exciting fields in machine learning. I'd like not having to discriminate between two classes, but to generate something from scratch after having been trained on some data. So a building, an AI girlfriend would be a generative model and you want to train it on a corpus of texts that are real girlfriend would say. Uh, and then it would be a chat bot. A girlfriend like chatbox. Okay. Do I work for Google of, no, I don't work for Google. I'm meeting them like I think next week or the week after that we're going to see what we can do, but I'm not going to just straight up.

Speaker 2:          06:52          Okay. I'm not committing to anything, but I'm keeping the door open right now. I don't work for anybody. My goal, oh, is this guy. My goal is to continue this channel. Make it awesome for you guys. Okay. That's the goal. Okay, so that's it for questions. What are your thoughts? Okay, one more. What are your thoughts on Vr and ar? Vr, I, the daydream is awesome. I just got the daydream. I got the new Google Pixel phone and it is awesome. The daydream is Vr is the future. I can't wait and also Ar. I'm going to make a movie sometime in the future, like an action movie starring myself, so it's like, sorry to Raj. I'm going to have like Ar. It's going to be awesome. Oh my God. Anyway. Okay, so, okay, here we go. We're going to get started. What I'm going to do is screen share and then we're going to get started. All right, let's get started. Screen sharing time. Boom. Okay. So I'm going to, um,

Speaker 2:          07:56          I'm going to demo what we're going to do first this time. All right, so I'm going to demo what we're going to do first. The first thing I'm going to do is say, this is what it's gonna look like. Okay? It's been better than explaining. It's better to just demo what's happening here. So I'm going to say, run this, run the code of what it's going to do. So take a look at this. Do you see the image? It is. We are, this is the image we have. It is a, it is a great of squares. And what it is doing, it is, it is iterating through every square in that grid. And once it's iterated through every square in that grid, it's going to print out the coordinates of where the ops, the obstacles are. Okay? That's what it's gonna do a, and it's going to pan out and it's going to look like this right here.

Speaker 2:          08:38          Okay? It's going to print the occupied grids and then the planned path and the plan path is going to be from this initial image, uh, this blue square. And it's going to find the closest image in similarity, okay. Uh, and which is going to be like this square right here. And then it points to show the path between both of them. Okay. In terms of, uh, x and y coordinates. So that's what we're going to do. Okay. And we're going to use computer vision to do that. All right? So here we go. Um, by the way, it's a tutorial is on Openai universe. I'm going to talk with them about creating a video series, so we'll see how that works. Okay. And by the way, guys, I want to, I totally want to interview Ilan, so like, keep that on the DL, but like, that's the goal for that interview series. Like, I'm gonna work my way up to Ilan, so, uh, we'll, we'll get there. Okay. So I'm gonna make this bigger so we can all read it. Okay? So here we go. Here we go.

Speaker 2:          09:31          Okay. So we're gonna, we're gonna build this. All right? And it's going to use computer vision to read this, this grid of squares, and it's going to be awesome. Okay? So here we go. Uh, you can't see my cursor, but that's fine. So the first thing we're going to do is we're going to import open TV. Open CV is the library. Yes. Elan Musk. Open CV is the library for, um, uh, computer vision. Okay. Image segmentation, uh, finding, uh, objects in images. It is the Goto library for computer vision. Okay. The only problem with open CV is that it is hard as app to install. Okay. I would recommend using Anaconda to install CV. So it'd be like Conda install CV. Okay. That's how I do it. Uh, but yeah, open CV is the computer vision library. Okay. So that's what we're going to use to read our images.

Speaker 2:          10:20          The next thing we're going to import his num Pi, um, come high is our scientific computing library. Okay. And we're going to use it to perform some, some matrix math. Okay. Because images are just matrices, right? There are a collection of one can zeros, an image can be broken down to two bites. Right. Fits. Okay. So the next one is important is important time, which is going to make, it's going to help us measure, uh, how uh, how long we are going to run this, this program for. Okay. So the next import, we're going to inform the next library. We're going to import this called psychic image. Okay. And let me explain why we are importing this. So I'm going to import a specific sub module from psychic image. Okay. It is called s. S I am now what is SSI him in essence I am is the mean structural similarity index.

Speaker 2:          11:12          Okay. Between two images. So if we have two images, we need a way of measuring how similar they are. Okay. And this meet the meet, the structural similarity index is a way of measuring how similar to images are. So we take two images and we break them down into matrices. We can then see how similar they are by counting the ones and Zeros and the positions of each of them. And then having some kind of rough score of how similar these two matrices are. But we're okay. So, so that's what we're going to do with that. Um, the next thing we're going to import is a, is a helper class called AA starts search. Now

Speaker 2:          11:48          a star and search is probably the most popular pathfinding out rhythm out. Okay. A star search is a heuristic. It is, it is an algorithm that works to find the shortest path between two possible points. That's what a star search does. Okay. It's used in games like world of Warcraft three to find the shortest possible path. So what we do is we search them on all the possible paths to a solutions. Okay. And then we look for the one that encouraged the smallest cost that is the least distance travel the shortest time. And among these paths, it first considers the ones that appeared to lead the most quickly to the solution. So it's a heuristic. It kind of tries to, it tries to have an educated guess on of all the possible paths, which is the one that is most likely to read to the exact solution.

Speaker 2:          12:38          Uh, vein. Hah bind happened is exactly right. It's Dykstra as what they direction. That's, that is a great description. If you know about Dykstra is algorithm. It's like dinosaurs but with direction. Okay? So that's what a star is. I'm going to explain more about star later on when we implement it, but let's get to our next and last import, which is a helper class called traversal and that's just like a five line of code help. Reclass it's going to help us reverse the image from left to right for image processing. Okay. Those are our helper libraries. Now we can get started and start writing our code. I'm going to get started by writing out the main code. Okay, and if we could take one creditor, what does that perimeter going to be? Well, it could be. It could be the image. Now let me show you guys the image.

Speaker 2:          13:19          Okay, let me show you guys the image. Um, I'm going to go into test images and I'm going to open one of those tests. Images. All right? So we already have an image. We're not going to construct this image from scratch. What our program is going to do is it's going to read this image using computer vision. It's going to read that image and it's going to detect where those obstacles are. It's going through fines. Uh, it's going to find the shortest path between two of those objects. And it's going to list what all of those grids, what it, all, all the squares that have objects in them. Okay. So that's what that looks like. Okay. So, so, um, so anyway, okay, so the next thing we want to do is start writing our code. So to start writing our code, we're going to start off by creating two arrays to arrays. The first array is going to be the occupy, the occupied the grids. So we want to create an array so we can store which grids are being occupied in memory. Um,

Speaker 2:          14:24          all right. And I'm going to share the image and I'm going to share that code at the end of this video. Okay. So, so the plant path is going to be, and the occupied grids occupied grid's not grinds, grids. Language is important guys. Okay. All right. So, um, so those are our two, uh, raise and we're going to store data in them later. The next step is to low the image. Okay. Now we're going to load the image. So we're going to say image equals and we're going to use, now we're going to use open CV and what open CV is going to do. Is this going to read an image? What's the, what's the image? While we just pass it in as a parameter, it's that file name. Okay. Well, so, and in terms of machine learning, is this using machine learning? Uh, the answer is yes.

Speaker 2:          15:08          Technically we are not ourselves implementing a learning algorithm, but open CV has used machine learning to train, uh, the, the classes that it's had. So it's indirectly using machine learning from a more abstract layer. Okay. So, and I think it's important to do that sometimes. Okay. So, um, so we've loaded our image into memory. Now we've taken that image that I just showed you guys and we've loaded it into memory. It is in Ram. It is in memory. Okay. It is just sitting there temporarily. And now we're going to modify it. Okay? So we've loaded our image and we, oh, we also want to define what the size of that image is going to be. Okay? It's going to be 60 by 60 pixels. That's the size of each of those squares. All right? Um, now we want to create an array of obstacles. So we're going to list those obstacles. Um, and we weren't starting point, okay? So the starting point is going to be we index, which is one by one. That's, that's, that's where our first, that's where our first, we're going to hard code that. And that is where our first, uh, object is going to be. It's going to be at the one one position. And by the way, x, y coordinates or how we're going to view this entire grade and, okay. So yeah.

Speaker 2:          16:24          All right. So, so there's that. Um, so now we're going to create a blank image. We're going to create a blank image and it's only can be initialized as a matrix of, of Zeros. Okay? So we're gonna say blank image, uh, is going to get, and we're going to use it now, we're going to give num Pi, it's going to create a matrix of zero. Got his length of 60 by 60. Okay. Uh, and it's going to be, the other type is going to be a, I'm going to jerk. Okay? So we have, we hit the default. I find that, uh, and let's see, I need one more, uh, thingy here. There we go. Boom. So that's that blank image. And we're going to, uh, now we're going to, uh, we've got a blank image and now we want to create an array. We're going to create an array of, uh,

Speaker 1:          17:13          okay,

Speaker 2:          17:14          cool. We're going to create an array of a hundred blank images. Okay? Why? Because we have a 10 by 10 square and we want to initialize blank images that we can then fill in, right? So it'd be, this is, this is going to serve as a starting point for us. Okay? So we're going to say list images, which is going to be an array. Uh, and we're going to say blank image, uh, for I in x range 10. Uh, so, so what are we doing here? What we're doing here is, let me frame this in a second. What we're doing here is we are,

Speaker 2:          17:50          uh, a list of images, okay? We're putting a list of colleges and it's an, it's a, it's a, it's a list of blank images, okay? And so now we want, we want an array to, uh, represent, um, range. Uh, let's see. Okay, so in range 10, so now we're going to create a maze, the maze itself. Okay? So, so, uh, now we were going to, um, or I mean x range. Okay? So now we have our main, so the maze is, it's an empty matrix to represent, uh, the grids of individually cropped images. Okay? So, um, we have that now we're going to be there, traversal, traversal time, traversal time. Okay. So let's go back. Okay, let's go down here. So now we're going to, now we're going to actually start to traverse through our interviews. Okay. So for, uh, for every, so for each coordinate, the x, y coordinate inside of the window, um,

Speaker 2:          19:00          for I n right. Thank you for that. Um, for x, y window in the reversal. Okay, that's sliding window. And let me, let me explain this after I type in this is this, this line is going to be a little long. So we're going to say image step size is going to be 60, and then the window size is going to be window size is going to be the width and the height, the width and the height. And we've defined that. And then they're not going to be a bat, it's going to be not curly bracket, it's going to be parentheses, of course it's going to be parentheses. We love our parentheses. Um, okay, so what is this doing here? So what we're doing is we are traversing through each square and we are using our traversal helper class to the sliding window is the one method that it has that it just literally, it's slight, it's, it starts from the, the left and it slide through a single grid and it reads it.

Speaker 2:          19:58          Okay. And it reads it and it, it, it takes that data and it, and it puts it into memory. Okay. So what we do, what we need though is what we're trying to do is we're trying to first, this is what we're trying to do. We're trying to detect the squares that are uh, uh, that are, uh, that have something in them that have a detect non empty squares because we're going to print those in a second. That's what we're doing right now. So, but so we need to start off by saying, wait a second. If the window doesn't meet our desired window size, then ignore it. Ignore it. Because we are looking for a specific type of image. Okay. So we're going to say if window dot shake, uh, me, when doe size or windowed shape,

Speaker 1:          20:50          yeah.

Speaker 2:          20:51          Oh, sorry. Is not equal to windows height or window dot shade is not equal to the windows with then we're going to continue. But that means we're not going to run this code window, that Shit. So that means it's not the size that we're looking for. So that's just a check. Okay. That's just a check. We're just making sure like, okay, this is the size we're looking for. But if we have that, oh, let me, Oh, right. So we need to whine too. We got to [inaudible] everybody. This is python and no joke. Ain't no joke. Okay. So now we're going to print the index images are iterator and uh, okay, so now we're going to say, take that image and copy it. What does that mean? So now, so we've, we performed our check, we performed our check and we're going to say, uh, that

Speaker 2:          21:44          we perform a check and we're going to say, okay, if we, we've got a square and it's not, it's, it's, it's, it's, it's, it's an actual image with a, with something in it. So we want to, we want to create a clone of it. And so that's where the copy function comes in. The copy function. We'll take that image, it's going to put it into this variable called clone. And so now we can format the square or open CV. So now that we have that image, we want to format it properly. So open CV can read it. Okay. So we're going to say we're going to, we're going to use a rectangle functions. Could you find an open CV rectangle? And what is it? Square. It is a, it is a type of rectangle. Okay. So line 24, someone said that there is something happening here. Uh, they said that, um, boom, I think that's what it was and then I remove that and right. Okay, cool. Okay, so, so, uh,

Speaker 2:          22:38          so now, uh, we have our CB rectangle and we're going to take that clone image that we just created. We're using the copy function and we're going to say for x, y values. Um, and uh, so, so, so we're going to, we've created our rectangle and we want it to be as Max. It's going to be whatever the length is of the window. Uh, and then we're going to say why plugs windows height. And then lastly, we want to get fined, beaten, tired sizes. This like two 50, five zero. Uh, and then, uh, okay, so now we've got a rectangle. And so now we can, we can crop that image, crop, that image, and we can say, well, we, in order to prop that image, and this is, this is kind of where like a little bit, I'm hoping to be magic comes into play. We want to say, okay, so for that windows with, and for that height, we want to, we want to create a crop. So it's just, uh, um, so it's just a, let me see. So someone said to change the last x range on line 24 to from square brackets, two parentheses, the last x range, uh, in the Oh, Gotcha, Gotcha. Gotcha. Gotcha. Yes. Good call. Thank you. Good call. Boom. There we go. So, uh, where was I? So cropping images, right? That's so very important stuff. Cropping images. So now we want to say, um, that's when high, so the crop is not

Speaker 2:          24:15          right. So, uh, I'm going to define how we're going to, I'm going to talk about how we're going to, you know, get that name. So once we cropped it, uh, uh, we, we, we now want to add it to the array of images. Okay. So, because this is an image that has something in it, that's all we're trying to, that's all we're trying to do is we're trying to, uh, create an image that has something in it. Okay. So, um, we're saying the index of one. Uh, so we're going to, so the list of images that would, so it's an array and we've, we've created that and we want to, what do we want to get it? We want to give it the crop image that we just created and how do we give it back using a open TV's copy function. Okay. So we've added to that list of images and now we want to print the occupied grades so we can print the occupied grids now. Okay. So how do we do that? Um, should there be a common between text? Why? Yes. Good call. Thank you, nick. It should be a comma there. Okay. So now we're going to print the occupied grids. So in order to do that, we want to get the average color. So we need to,

Speaker 2:          25:26          we need to, um, get that average color. So the color is something we're going to use. We're going to create using open CV. So we're going to say the color per row, that's how we're going to start off. We want the average color per row. How do we get that? Well, num Pi has a great function call average. Okay. And how do we get the average or the average is basically taking that image, our crop image that we just, we just got and uh, belong to zero access to get that, get that average color. Okay. Uh, and so that's the average dollar per row. Now I want to get the average color for art specific square. Okay. Um, so NP dot average. So we're going to take the average dollar per ro and from that row, from that row, we, we, we just want to be average of what we've already taken, which is going to give us the average color of the square. We gone. Okay. Um, and so once we have that, finally we want to, we're going to convert that to an integer, integer value. We were, why are we doing that? Because we need to format it properly for, for, for hoping TV to read it. And the best way to do that is to have it be, um,

Speaker 2:          26:38          if you mic, I think some, I think it was make who said that or somebody? No. Geo. Geo. Thank you. Um, so now we are going to convert it to an int uh, you eight and then, uh, and we average color. Okay. So we have our average color of whatever square we're on right now. Um, and so now what we can do is we can, what's the next step? What is the next step? Our next step is to iterate through the color matrix. Okay. We're going to iterate through the color matrix so we have so or iterate through the color, makes it iterate through the color matrix. Um, and

Speaker 2:          27:24          so what we're gonna do is we're going to hit or anything in color matrix so that we can, uh, we can, we can add it to our, to our, to our array. Okay. Um, and P. Dot. Average. So someone said something about, uh, right. So that is actually a parentheses. Thank you. Okay. So if any, uh, so okay. So what are we doing here? We are going to say so if any. So if the color is less than 244 hi. So let me explain why I'm using two 40 as an index year. In average, average color. Uh, uh, uh, well what we're saying here is a check if it's not majority whites, if it's not majority whites, then we want to add it to our Ho. Hey, something is here, uh, array. Okay. So that's, that's, so to answer somebody's question from up there, how do we know like images or like all different types of shapes and colors and sizes? How do we know like which, what type, what types of use? Well, this is how we just say is the image majority white or not in two 40? Kind of defines that threshold. Okay. Hazy uppercase first, later 38. Uh, thank you. Okay. Okay. So that's our, how are we going to do that? And so we're gonna say, okay, so, so Mays,

Speaker 2:          28:49          this is not the bond for the Ashford game that is coming up soon. Uh, right now this is, uh, to use computer vision to detect images. Uh, yeah. Hold on. So what we're going to do here is when I say for a maze index one, uh, one minus one, uh, and then index zero minus one. Okay? Uh, so I don't need that equals one. And so if it's not, if not majority white. Okay. So if it's not majority white, we're going to, we're going to add it to our maze and then

Speaker 2:          29:32          we're going to say let's, um, added four occupied Brinton array. So mark reads on a pen, the pen function, we'll add it to our, uh, we're doing, uh, that is true. Jordan occupied grades. Dot append. And so well, how are we going to add it? What we're going to have, it has a two pole. What does it, pupil pupil is a, it's a, it's not a double at the pupil has as, as three values in it. Okay. It's like a triplet and music. Wow. I just related music, the programming. That's awesome. Okay. So to build an index, so these are the perimeter occupied, um, or iterating through the color matrix. Okay. So now we want it. So now we've added, uh, uh, the, the objects. Okay. It's like the blue squares and the red triangles and whatever. Now we want to add the, uh, let me show the image one more time. Let me show the image. Okay, so we've added all of these. We've added all of these. We'll see that we've added all of those that are not black and they're not white. They're just like red and blue and green. That's what we've added to our rate. But now what we want to add are the images that are all black, okay? And so in that image, it doesn't show it, but there are images that are black and we want to add those to our,

Speaker 2:          30:45          uh, we're going to add those to our, uh, array. So, but basically we're going to do the same thing. And this time the threshold is going to be 20, because that defines black, okay? Uh, in, in hexadecimal and text codes for colors, okay? So we're going gonna take our obstacles array and we're going to, uh, we're going to append the tuple index, okay? Boom, boom, boom, boom. And

Speaker 2:          31:17          so we've done that. And so now what do we want to do? Now what we want to do is say, uh, a gunner we've upended that have. So the next step is to what is the next step here? It's like, so we've added that. We want to make sure that our image is a two bowl. Uh, we've added that today. A list. Now what, what, what can we do? Okay, I've got it. Okay, now we can actually show this iteration. We can actually print it. We've, we've, we've done what we needed to do. And in order to do that, uh, we're going to say image show and the window, right? So then, so this is open TV, his way of showing whenever we have in our window, it just, but guess what? It's not a continuous thing. It's not a continuous thing. It's just like, if we just did this, if we didn't do anything else, it would just pop the image up for a second. But guess what? We need to just sequentially show what is happening and how do we line 48 needs a parenthesis at the end. Uh, let's see. Line 48 needs a parenthesis at the end. Blah, blah, blah, blah, blah. Yes. Good call. Uh, and then, and there and there and there and there and there. And then this doesn't need it. Great. Okay. Okay. So that's what we're gonna do. We're going to show the image and we're going to say what else we're going to do. We're gonna wait to a little. MMM.

Speaker 2:          32:43          I S S I will marry you for a split second. Boom, we're married. Okay. Divorce. Okay. There you go. With dreams come true. Okay. So wait, key is one. And now, okay, so what are we doing? So now we're going to use that time function that we, that we called and why are we using that time function? Uh, uh, we're gives you that time function to show that, hey, we want to keep continuously showing this image and we are waiting a little bit. We're going to sleep and then we're going to keep showing you. Okay?

Speaker 2:          33:18          Uh, so, so that's what you, the time function for. So now, okay, so that, that's what, so what that's going to do is it's going to do this if going to, let me, let me show what that's that all that Cota, I just do. It's going to print out the occupied bridge right up here. We haven't done the planned path yet. We've just print out the occupied grades and it's going to print it out as a, as a, an array of a tuple values. Okay. X, y coordinates. Okay. Um, so that's what it is. Youtube chat is indeed a good debugger. It's not the best debugger, but it is up there for sure. The best bugger is probably like goes debugger, go the go programming language man. That awesome. Okay. [inaudible] is right. I need to slow down and fix some stuff. Okay. So that's what that's going to do. Let me see what these people went. Everyone, everyone's saying here. So have you the (484) 023-0760 nine six it's definitely not line 69 cause I'm not there. Um, but let's see, 37 42 47. So what's happening on 47? So in online 47, uh, let's see. Um, I in average color. Exactly. Okay. Okay. So I need to keep going now. Make the variables lowercase first. Letter line 38. Um, right, right.

Speaker 2:          34:48          47 high average color for I in average color. Okay, cool. Okay, so, so now, now it's time to, uh, perform the shortest path to search. Okay? So, okay, so we did half of it. Now we're going to be other half line 51, four. I'm an average color. Any, okay,

Speaker 2:          35:22          so we've done that. So Nick, he'll ask, why don't we add all the grids that are not white to the array? That's, that's exactly what we did. Uh, right here, this line line 49. Okay, so now it's sounding, perform shortest path. Okay? So let's perform shortest paths. So the first thing we want to do is want to get the list of objects that, okay, so now we have, we just created, we're going to get the list of objects. Why? Because we're going to find the shortest path between one of them and then the one that is closest matching to it. We want to find the shortest path. We're going say list of colored grids. Now this is not that great that are black. They said these are the grades that are objects. Okay? Um, right. Thank you. Um, to you deal and multi shift. Uh, okay. So, okay, so now we want to say four and forehand in occupied grids, uh, if and not in obstacles. Okay? So now we're going to, so if they're not obstacles, so that means we just want to get the, uh, uh, objects. Okay? So we've got the objects and now it's time to, uh,

Speaker 2:          36:34          now it's time to actually do our algorithm. Okay? So for that starting, so,

Speaker 2:          36:43          so now it's time. Okay. So, so for that starting image, so that, so what is our sarcomere? Art Starting English is going to be this one right up here. You see, hold on. This is our, hold on. This is our starting image. See this blue one right here? That is our starting image. And what it's gonna do is we're going to find the closest image to that which is going to, because it's going to iterate from left to right. It's going to do that for every row. And so if it's doing that from left to right, what's going to be the close, what's going to be the matching image? It's going to be this, uh, other blue square CV dot him show. Correct. Okay, so for start image, uh, in the list of colored grids,

Speaker 2:          37:23          color grids, uh, so okay. So we're going to go through that and we're going to say, well, we want to, we want to define our, uh, certain image and we're going to create a temporary array to show that. Okay? Starting image start. Now we're going to say, okay, um, we'll create another copy of it because we're about to perform. We're going to compare that image to the next image. Image one is going to be the one that changes. Okay? That's going to be the one bat that changes risks, colored grids to live, right? So list, um, images and to start image zero minus one and then start image one one. Why we're using two copies. It's a great question. We are using two copies because we are going to uh, one of those copies is going to change, right? Because we're going to be iterating through the grid and we're going to change the value of that copy every time so that we can compute these uh, this, this, the similarity between the two images and we're going to perform a star search once we found the human that is most similar. Okay. Okay. So now, so now, now our actual uh,

Speaker 2:          38:40          uh, so now it's time to, uh, hold on. I want to answer a single question because I think it's a really important question. Is it realistic to believe that a new startup can contribute more influential research than deep mind or just work at a top company like Google? Yes, absolutely. Why? Because the tools to make machine learning like breakthroughs are the barrier to entry is rubbing reduced both in terms of processing power to make valuable contributions. Open Ai's universe is going to make it much easier for the amateur research community to make valuable contributions. And it's really not as hard as you think. Like it's really not as hard as you think. And I would definitely not be discouraged from working on your own to make valuable contributions. Okay, so, so, so I just want to enter that. So now, so now we're going to do the actual iteration for the grid in a pen, a forehand, enlist colored grids. If Anne has not equal cue to start damage. So if it's not people to this stark image, then it's a different image. Can we're going to say get that next image, get that next image. I'm just going to be image and we're going to take that list of images that we already had and

Speaker 2:          39:56          it's one, uh, and then the grid.

Speaker 1:          40:01          Hold on, hold on. Red.

Speaker 2:          40:04          Sure. One Grid, one minus one. Okay. And definitely going to be something. Make sure I have all of this here. Okay. So now we'll be, so here's the fun part. Here's the fun part. Okay, now we're going to convert. So now we have two images, right? We have our original image and we had the image that we are now iterating through. And guess what we want to convert that emit to gray scale. Why do we want to do that? Let me talk about why we want to convert both of those images to gray scale. Okay? So let me first, let me first first actually convert them to gray scale using the CVT color function. So we're going to take that image and we're going to convert it Egr to Greg Heller, Bgr to gray. Now we're going to take a second image and we're going to converse. Got To gray scale,

Speaker 1:          40:57          okay. And

Speaker 2:          41:01          uh, right, so most of our images we're going to convert to grayscale. Why do we want to do that? Let me finish typing itself.

Speaker 1:          41:11          Okay. So

Speaker 2:          41:18          we have done that. Make sure that there's no lag. All right, great.

Speaker 1:          41:22          MMM.

Speaker 2:          41:25          So now we have, so why are we converting it to gray scale? Well, because a grayscale is, is uh, how, um, all right, double underscore Rachel is it? So when we, when we were doing computer vision, uh, we, we first have to convert those images to gray scale because it lowers the dimensionality of what we are trying to compare. And why is that important? Because, uh, colors are just colors make an image a more complex come. They make images more complex than necessary when we convert it and Mitch to gray scale and we compare them by some, by computing some index function, uh, it just makes it, it makes it faster. It's both, it's both computationally more efficient to compare them because it's not about the color, it's about, uh, the, the, the difference in the, the positions of the pixels, uh, in the matrix. Okay? Because that's the similarity. We're not really Kim. We're not comparing similarity of color or comparing similarity of shape until we convert to grayscale. It makes it faster to compare it. Okay? So that's what we're converting to gray scale. Okay? So now we're going to actually compute that similarity and how do we do that? Compare structural similarity? Well, guess what, we imported that function. The SSL, I am function but queen both of those gray scale images. Okay.

Speaker 2:          42:47          And once we have that, so if they aren't similar, so now we've now that we've compared them and so guess what gifts they are similar, then we're going to perform a [inaudible] search. If they are similar we'll search, we'll perform a star. Okay. And guys, if anybody has any questions, definitely like answered like help me out an answer to them in the comments. Uh, okay, so, so how do we say, what's the threshold here? Well, we're going to define 90% 90% similarity and we're going to define 90% as 0.9. Okay. Um, I guess what bad does not have parentheses. Okay, now perform a star. I guess what we imported that a starts search up there. And if we have time at the end, I'm going to go into this code and we're going to talk about like the details of the implementation and I'm going to explain it as well right now. Okay. So how are we, what are we performing? A star on the maze. All right, thank you. On the maze. Okay. That we had there starting image starting at the zero. And what does that, that next image that we have to start image, uh,

Speaker 2:          44:03          uh, starting out, one minus one, this is lowercase. And then lastly we want to, uh, say what are we completing this on while we're competing on the grid that we created? Minus one because we, uh, and so it's going to take four frame and I'm going to explain this in a second. Um,

Speaker 2:          44:28          minus one. Okay, what's happening here? We're performing a start search. What does a star search? Well, a star search is basically us looking at all the possible paths. Okay. And then so we're, so we are, we aren't searching through all possible paths, but we are using a heuristic that says what is the one that is most likely to reach, uh, the end goal in the shortest possible time? So what is it, what is likely to be the shortest possible path? And this is the heuristic we use at every step as we traverse through what we, essentially, it's a graph, it is a graph problem. There's not a graph there, but it is a graph problem. And Grid is misspelled. Thank you. Okay. Uh, so now we've done that. We want to print the results. So we're going to say we're going to print the result.

Speaker 2:          45:18          Um, a start equals dice for us. What's your instincts exactly? Hey, start is diatrust with puristic. So now we can print the results and we're going to print it as a list because they list, please do a video on hey star search and hold. Someone explained to your 65 medicare is six. I think that's a great idea. And I will do that in the future. Yes. Okay. Um, but now we want to print our results because we performed a star and guess what? We're performing a star, you know, Luke, right? It's not just so we're performing it for every object. It's not just one object. We're performing it for every object that we see. So, and we're going to print the result and if it's going to come out in the results, right? So it's, so we're going to say, what does the result look like? Well, it's a collection of, uh, x y coordinates. All right. There we're going to get from uh, that first, um, first. Oh, okay. So now we're going to upend the list and we're going to add that to pull that we just, that we just defined to the list.

Speaker 2:          46:27          Uh, and so now the result becomes the list. Let's to, uh, one influence. Okay. So that's what we have there. All right. Um, cool. So now what we can do is we can define the, we went to, okay. I think, oh, so there's one more thing we had to do and then we're done. But one more little loop we're going to say we went to, if no match object is down, then we want to return no match. Okay? So it's going to show no match. So in the list of colored grids and the list of colored grids, we want to say in the planned path, in the plant path, there is,

Speaker 1:          47:17          hmm.

Speaker 2:          47:18          Uh, if it has the key of the object that we created before,

Speaker 1:          47:24          mmm. MMM.

Speaker 2:          47:28          A planned path.

Speaker 1:          47:31          Object list, no mash. Okay. That means that there was nothing there, there was never anything there in the first place. [inaudible] search was unsuccessful. And we want to print for that. Okay. So that's good.

Speaker 2:          47:46          Okay. Um, we'll go boom. It's time for our main method. My Dad is calling. He's probably like, Huh? You're doing good. How are you? I love you. I love my dad. He's a great guy. Um, well I think in retrospect he's a bright guy. You know, just like it's hard to be a parent. Okay. So we've gone, we got our code. We can now print this out. Um, they're our main method. Okay. If name is Maine, uh, what is our image file name while we're going to just sign it right here. Image file name. Um,

Speaker 1:          48:29          okay.

Speaker 2:          48:31          Uh,

Speaker 1:          48:35          yeah.

Speaker 2:          48:36          Image file name is going to be in that test. Images folder. Image one. Alright. Dot. Jpeg. So now we feed that imaging into it. Um, right. This is double equals. Yes, exactly. And now, ah, we run our main function on that. That's it. That's good. And now we can run this thing. Okay. Boom. Made image. Okay.

Speaker 1:          49:07          Yeah.

Speaker 2:          49:07          Line 90, use double. Yep. Did that. All right. Okay. So what do we do? What did we just do? We created two arrays. We iterated through this two d grid. Okay. We said, we said show, show us the occupied grids, print them all out as a list of two poles and then use a star search to find the shortest path between this initial blue. And then this one right here. Okay. Dude, I almost feel like there's, there's too many lines here. Oh, and it's 48. 17 is a lot. Okay, so let's print this. Let's, let's, let's uh, hold on.

Speaker 1:          49:49          Yeah,

Speaker 2:          49:51          hold on. So I need to delete this. This, no, no, hold on. Let me force quit that and try again. You can see the animation, right? It's interesting through every one of those it's using open CV. It's copying each image into memory. It's comparing them by a structural similarity index and it's going to print out the list and the list is going to look like this, the plan path, uh, and the occupied grids. Okay, great. Cool. All right. I am going to post this code to get hub and, okay. Stop screen sharing.

Speaker 2:          50:36          Okay, so I'm going to post this call to get help. I'm going to explain it in the read me and I'm going to make a video on heuristics and a star searches, uh, in the future and uh, it's going to be awesome and I'm going to end this with another five minute Q and a and then we are, we are done. Okay. Why not draw the path, uh, says pro survivor that could have been a great idea and that is definitely something that can be added as a functionality to this code as well. Um, actually I'm going to answer four questions. Okay. So any undergraduate project ideas using machine learning, preferably sentiment analysis based. Yes. Okay. Here's what you do. Use a Twitter API to find some tough, first of all, think of a topic that you really want to perform sentiment analysis on. So you want to see what people are thinking about a specific topic. Okay. And then use a Twitter API to retrieve a list of tweets about that topic and then perform sentiment analysis using, uh, to start off, try psych it, learn. Okay. Um, uh, try side Kit, learn. Uh, and then I actually have a video on this. Look at my video called Twitter sentiment analysis and then do that, that whole idea, but apply it to your own topic. Okay. That would be a great, uh, undergraduate research project. Can I ask a question? One of four. We have three more. Are those Bose headphones? Yes. QC 35. Have you written any cool Mlai things to help you in your day to day life? Um,

Speaker 2:          52:07          in my day to day life, no. Actually I would love to do that. Um, no I haven't. Okay. And the last one is, do you have any keyword about 3d path planning? Uh, he worried about 3d path planning.

Speaker 2:          52:31          I don't know what you mean by that. A keyword. Will you volunteer to be one of the first people to go to Mars when you interview Elon Musk? I'm definitely going more as guys. I'm definitely going to Mars. It's, it's inevitable. It's something that I, it's in my 10 year plan. I want to start a new nation on Mars someday. Uh, but that's in the future anyway. Do you believe? Oh No. Here's a good one. Do you believe an AMD will be a big player? Like nvidia in ml, they just showed some benchmarks yesterday. You know, Andy is late to the game and video has made so much progress and it's already not just progress, not just in terms of, uh, it's, it's computing project progress, uh, in the chip technology, but also in its partnerships, right. With Google. Right. Um, so I don't think AMD is going to be able to catch up to the, uh, momentum that Nvidia has built and individually is just a great brand as well. Okay. Uh, so anyway, that's it for this livestream. Thanks guys so much for showing up. Uh, I love you. Um, for now I've got to go focus on this video and I've got to interview this, uh, open AI researcher for my next interview on Friday. So thanks for watching. Bye guys.