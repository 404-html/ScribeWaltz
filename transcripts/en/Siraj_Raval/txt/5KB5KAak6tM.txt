Speaker 1:          00:00          Hello world, it's to Raj and today I'm going to show you the five steps to succeed in any programming interview. I've gone through the interview process dozens of times for a bunch of different tech companies and I've definitely gotten my fair share of rejections and offers. These are the key lessons I've learned from the gate. Interviewing takes work. Don't let anyone tell you it's easy. It's not. No one talks about the rejections, only their offers. It's essentially a full time job, but if you follow these steps, I promise you you will succeed. So let's start with step one. Study before you even think about applying anywhere you need to get your technical skills on point. The process of getting a job as a software engineer is the same at almost every big tech company. You do an initial phone screen with the recruiter where they gauge your interest in the company and if you pass that, you're asked a series of technical questions that you write answers to on a whiteboard.

Speaker 1:          00:55          If you can show the interviewer that you can think through a problem and come up with a solid solution, you'll get an offer. But the only way to do that is to practice. All my friends who ended up working for Austin companies practice a lot. They start to a consistent study schedule. It's not about having some divine intellect, it's about how much time and effort you put into studying. So the question is what do you need to practice if they're not testing you on syntax, you could learn basic ruby syntax overnight if you want it to, but what can't be taught overnight or computer science fundamentals and that's what companies test you on. Namely data structures and algorithms. There is no getting around this. Just ask the guy who invented homebrew, he was rejected by Google because he didn't know how to invert a binary tree.

Speaker 1:          01:38          Even though tons of engineers at Google use his tool daily start off by taking two courses. I recommend a free intro to data structures course by my code school and the intro to algorithms course by Mit. Open courseware. Both are available on Youtube and we'll give you broad knowledge about these topics. Then you can practice what you've learned on hacker rank and hacker earth, both our online platforms that let you earn points for solving problems. It's a lot of fun actually. Once you've solved dozens of problems on both sides, read programming, interviews, exposed. Then in cracking the coding interview, both are great books that will help you practice specific problems that tend to show up a lot during interviews from system designed to questions about time complexity and when you're done, start conducting some mock interviews with the friend, have them pick questions and code your answer on a whiteboard explaining your thought process to them.

Speaker 1:          02:27          You can do all this in about two months, two, three months of studying a couple hours every day. Step two is to find the companies that you like. When you start the job hunt, you have a limited amount of time you can dedicate to each company so you don't want to waste it. Interviewing for companies that aren't exciting, keeping track of the interview process across multiple companies can be really stressful unless you stay organized. Use an excel spreadsheet to map out the companies on your radar and where you are in the interview process with each of them. You can find these companies on angel list, which is my favorite resource. Also, hacker news has a monthly who's hiring, which is great. This is a somewhat spiritual process. You'll probably go through some existential thoughts and that's okay. Ultimately, it's about deciding how you can best use your skills to make a positive impact in an area you care about and then finding companies that align with those values.

Speaker 1:          03:17          Once you've got a list of companies, it's time to build your portfolio. Recruiters that popular companies get hundreds of resumes every day so they don't have time to sift through irrelevant stuff. Make sure every single word on your resume count and it all fits on one page. Make it dense in descriptive. Remember, the less work they have to do, the more likely they'll be to help you out. Make it easy for them and highlight the most important work you've done. You don't have to fit every single cs related thing you've done on it. Whatever you put down, you should be able to speak intelligently about because all of it is fair game. During the interview, have between two to five versions of your resume each tailored to what a certain category of companies from your list. Once personal projects, hackathon projects, contributions to open source libraries.

Speaker 1:          04:00          Get hub is where you can put your code, where your mouth is. It's the new resume in many respects. Have a personal website and give your best project a web presence. It's professional and visualizations always impress. Step four is to get the interview. The easiest way to do this is to just apply to a company directly through their website, but big companies get so many interviewees that it's really easy to get lost in the pile. You want to find the gatekeeper, that technical recruiter, you can use a little bit of keyword magic and Google just like this and it'll give you a list of recruiters and people in positions you're interested in at any company. Send them an email and make sure your email is short and to the point that means they quick intro, introducing who you are. I'll link to and easily shareable and relevant project and an expression of interest to learn more, which brings us to step five.

Speaker 1:          04:44          Pass the interview. You want to exude confidence and if you've studied well and your portfolio is on point, you will sometimes the interviewer will be more nervous than you are and that's okay. Smile, shake hands, let them know that you're another human and you're here to work through a problem together. They'll ask you to code a problem on a whiteboard and you want to be able to communicate your thought process well. It's not about the answer as much as it is about the way that you think. That's what they're judging you on. Once you've coated your first solution, pretty much every time they'll ask if there's a more efficient solution or usually is, and this is where your computer science fundamentals will come in handy and don't forget to ask questions. They're there to help you. It's a collaborative approach. They're judging your technical skills, but they're also judging if they could see themselves working with you and if you've come prepared, you'll do just fine. There are tons of resources on the web to help you practice your technical skills. And I've linked to everything I've talked about here in the description. The interview game takes a lot of effort. The key is to not let your rejections ever, ever, ever, ever get you down. Because with the enough practice, you can succeed at any technical interview, believe in yourself, stay motivated, and you're going to make it. For now, I've got to interview someone for the channel, so thanks for watching.