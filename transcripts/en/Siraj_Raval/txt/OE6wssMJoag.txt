Speaker 1:          00:00          Hello world, it's Saroj and I'm going to show you how to build an AI startup in Pi torch. Specifically. I'm going to show you how to build an AI therapist, and that's the APP that you're seeing behind me. It's called mind relax her. It's an APP that I built and let me show you a quick demo of how this works. This is an AI therapist, so I'll type in my email, I'll type in my password, and then I'll log in. Now I'm a new user, so I'm going to have to pay. This is a paid service, so I'm going to use paypal. I've integrated paypal into this APP. I've already typed in my card information. This is a fake card and I'll pay, it's 35 USD a month to use this automated service, which is much, much cheaper than a human therapist. So let me charge it.

Speaker 1:          00:46          It's processing. And now I have paid, I've logged in, I've authenticated the database is connected to me, and now I'm going to talk to my therapist and I'll say, how are you as Saroj? And hopefully my therapist will reply, my AI therapist. Great, wonderful. Thanks for asking and we can continue the conversations. This is an automated assistant. I'm going to show you how to build this with the popular deep learning library, Pi Torch. But it's not just pie torch by torch is just one part of the pipeline, right? There's so many tutorials out there that show you how to train a model in Pi torch, how to put, uh, put some model on a server with tensorflow serving, how to build an android APP, how to use all these other tools. But it's very rare to see, it's a tutorial that combines all of these components to show you how to build a profitable business using this technology.

Speaker 1:          01:38          And that's what I'm here to do and I'm going to continue to do that. And if you want to be one of the first to get notified when I released these, very valuable to [inaudible] hit the red subscribe button. All right, so let me show you how I'm going to do this. The, the stack that I'm going to use to build this app called mind relax her that I've built with android studio, which I'll show you how is I use Pi torch to train a sentiment analyzer. I used Onyx, which is a library to convert Pi torch models into other types of models. In fact, you can use onyx to convert any type of popular deep learning framework model into another popular deep learning framework model. I'll show you what I mean by that in a second. I'll use tensor flow. I'll use android, I use dialogue flow, I'll use Firebase, I'll use paypal, all of these together to build this simple android APP.

Speaker 1:          02:25          Okay, so let's get started. We have a lot to cover in this video. So let's start off with the first essential question here. And the essential question here is how do I make money with Pi Torch? So in this example we have built a chat Bot and a chat Bot can apply to so many industries. Think about anytime you need advice, whether it's legal advice, whether it's a news advice, trading advice, right? Investment Advice, marketing advice, whether you need support for sales, whatever you need, advice for people, train their brains on this data, and then we ask these people and we have to charge a premium for that. But if we take the data, we can automate that knowledge, we can automate those responses to our questions, right? Pattern recognition. We can do this with neural networks and other machine learning technologies. And let me show you how to do that.

Speaker 1:          03:19          So this is just an example of all the different use cases we can use chatbots for. Of course, there are a lot more. This is just one example. In fact, there are seven major ways to make money with machine learning and I'm not going to repeat all of those that I listed in this video by the way, the notebook that I have behind me is in the video description. So if you click on it, it'll go to get hub. You'll type, you'll click on the dot Ip Nyb the python notebook. It's gonna open up, right on get hub. You don't have to install or download anything. So you can see all the links. To my videos that I'm going to list right here. Very valuable stuff. So there are seven ways to make money with machine learning. Watch my video on that. One of them is to start a startup.

Speaker 1:          04:01          I just made a video on this watch that I made two. In fact, the second way is to write a book and I have a video on how to do technical writing. I'm really good at this. This is what I do. I write scripts, technical scripts about technology to explain complex AI concepts to people. I know how to do this and I made a video showing you how to do that as well. So whether it's youtube, a blog, a podcast, a newsletter, you can also make money teaching people how to use this stuff, right? Ad Revenue, sponsorships. There's a lot of different avenues for you to do here. The fourth is to join a company and I've got some great programming interview tutorials for you as well on how to build your resume, how to answer questions properly, how to get an internship. The fifth way is contract work.

Speaker 1:          04:46          Whether that's freelance work, whether that's you know, a longer term contract. I've got videos for that. The sixth way is a programming competition like Kaggle of which I've done several videos on. You can see one right here for this hundred thousand dollar Kaggle challenge and the seventh way is to create an automated trading bot that can trade stocks or assets. What have you, and I have several videos on that as well. Now to the question, what is the use case of Pi Torch? What makes Pi Torch special? So Pi Torch for those who don't know is a deep learning framework. We use this library to build neural networks, a type of machine learning model. And the reason that Pie torch is getting more and more popular are in fact three reasons, not one reason, but three reasons. So let me list them. The first is that Pie torch allows for python native debugging.

Speaker 1:          05:39          What do I mean with tensorflow? The other popular deep learning framework, there is a built in tensorflow debugger that works just with tensorflow. But if we use a python native debugger, we can, it's more modular. So let's say we have some library that's not related to our machine learning model. Say a drawing library. Well, we can combine those components with the components of our deep learning framework and we can debug it very fine grained control as to where variable data is passing, what the threads are, where, what, what is concurrent, what isn't. We can debug all of that with the native Python debugger, which is called key db right here. As you can see here, python native debugging right there, PDB dot set trace. So this is just an example of how to do that, but that is not all. There's actually much more than Pi Torch does for us.

Speaker 1:          06:29          It also follows what's called an imperative programming paradigm. What do I mean by that? Well, let's talk about the difference between imperative and declarative. Imperative specifies how to achieve our goal, whereas declarative specifies what we want to achieve. Another way of saying this is that imperative programming. Here's an example of imperative programming. What's happening here is it is defining the computations that need to happen and these computations are happening as we type them out line by line. So NP. Dot One's 10 will compute the matrix that needs to be computed right then and there on that line. Whereas in a different programming paradigm, whether that's declarative or symbolic, we have to first define all of our variables and then in one single line, in this case compile, we're going to compute all of those operations and imperative is closer to the python, python, Anik style of programming.

Speaker 1:          07:27          So it's more closely related to what python was meant for. And a piece of that is the actual third component of Pi Torch dynamic computation graphs, which is a type of imperative programming. The idea is that Pie torch is a defined by run framework, whereas tensorflow is a defined and run frameworks. So the idea is that a lot of the newer neural architectures are dynamic. They will change over time, sometimes wild training. They'll add new layers to themselves, they'll create new connections, they'll add skip connections, you know, things like that. And the problem is that with tensorflow used to define all of that at the start and then run it. Whereas some of the newer models, they're not static. They're dynamic, they're going to change during training and so Pi Torch is really good for this. It was build for this, right? Every line you type out when you're running it, it's going to compute as that line is processed.

Speaker 1:          08:21          So in terms of pros and cons, that default defined by run mode is perfect for python, which allows for more information, parallelism and easier debugging. The con and the major con here is that Pie torch doesn't really have a good production framework. Of course you can take a pie torch model and convert it to what's called cafe to a different library, but the tools there are just not good. What you should do, and this is me being objective about something, having an opinion, because this is what I would do is you have to build a model with Pi Torch and once you have that model, that fully trained model file, you convert it to tensorflow and then you use what's called tensorflow serving the production grade model, serving architecture that Google themselves use for Google search and g mail and all of their AI products. That's what you want to use to serve your users.

Speaker 1:          09:14          Why? Because that thing can scale to millions and millions of people. It's battle tested and if Google can use it for production, we can use it for production and tensorflow serving. Really, it's still the best library for production grade serving of machine learning models. And no, they're not paying me to say this. I genuinely believe this. So let's continue going here. Right. So there was a survey that was taken up, tensorflow and Pi Torch users and tensorflow is still the most used machine learning library. However, there are a lot of areas that Pi Torch is improving in primarily in terms of prototyping. You can prototype much faster, you can try out different models faster. The experimentation cycle for Pi Torch is generally just better in every way. So the idea is to build with Pi towards prototype experiment and when you're ready, use tensorflow to serve that model. All right, so I've got several free pie torch learning resources for you, including good hub, the tutorials, you, Udacity course in x course.

Speaker 1:          10:16          I mean, look at this, the incredible Pi Torch. Look at all of these amazing tutorials from boys to medical recurrent networks. This, this is a lot. This is a lot. Let's just click on a random one. V Gans a Vegan. Look at that. Look at this beautiful code, right? Your Skeleton Code. You can easily get up and running in a second. That's what I like to see. So definitely check out these resources. All right, let's get right into building this now. So what we're going to do is we're going to build a sentiment analyzer in Pi Torch in the cloud. And what we're going to train this sentiment analyzer on our movie reviews. And the reason we want to train it on movie reviews is because what we want is for our sentiment analyzer to live in our android APP. And every time we say something to our AI therapist, allow what you've just seen here.

Speaker 1:          11:07          It's going to analyze the sentiment of what we, we said is it positive or is it negative? And once it knows whether it's positive or negative, then it's going to perform whatever action we need. So this is a local machine learning model happening on the client. That means on the android APP, and we're going to train it in the cloud using Google colab. Alright, by the way, let me just say this, and this was with my tweet from earlier today, it's getting a lot of likes and re shares because it's true. Now is the time to build an AI startup. Everything that you need is freely accessible. Whether that's data, whether that's algorithms, whether that's education, whether that's computing power, Colab, right, everything is available. You have no excuses. It's time to start building enough with a theory. I mean we need theory, but enough with the theory mostly let's get to the implementation.

Speaker 1:          11:57          There are real problems to solve on this planet and we need teams of smart, motivated people from all over the world. This is not just one country or two countries. This is everywhere on the planet. We need people building this technology to solve real problems and create wealth for themselves, for their community, for their family, for everybody. And that's what I'm here to do is to help you out with this. So let's get right on into this. So when it comes to sentiment analysis, so let's take a look at this notebook. What we're going to do is we're going to build a recurrent neural network, specifically a long short term memory, recurrent network. I know that's a mouthful, but guess what? I've got perfect videos for you to learn what I'm talking about here. I've got an LSTM network video. Watch it. I've got a word to that video watch.

Speaker 1:          12:46          It explains how to take word a textual data strings, right words and convert them into what are called vectors. And vectors are groups of numbers that we feed it to our machine learning model. You can't just feed a string into a neural network. You've got to take the string, convert it to a group of numbers, and then give it to your neural network. And word two VEC is the way to do that. Watch that video. And lastly, learn how we optimize. The way to optimize a network is to use gradient descent. I've got a great video on that, so once you watch all three of these videos, I promise you, you will be able to learn a lot faster and you'll get what I'm saying in this video. By the way, watch these videos at two x or three x speed. I'm going to pack so much value into this video.

Speaker 1:          13:29          Watch me. I watch my videos at three x speed. I know a lot of you don't believe that that's possible, but I literally learned for a living. I learned for a living. And the way to take all of this information and to process it as fast as I have to inward to educate you is to watch this content at two x or three x speed. And it's like, it's like working out, right? So at first when you're working out, it's going to be hard to lift weights, but over time your muscle will adapt and you'll get better and better at working out. The same thing applies to listening to data at faster speeds. You've got to start off at 1.25 and incrementally every week increased that amount. And I promise you this is my work. I promise you eventually you will be able to listen to stuff at three x speed and you will be able to retain it as well.

Speaker 1:          14:17          Which is what I do. The only data, the only videos, I don't watch it. Three x speed or audio books. Um, usually music, I mean just music, right? Everything else, pretty much. I listened to at three x speed, sometimes two x, like if I'm eating lunch and watching, if I really want to chill, I'll put it on two X. I pretty much never watched things at one x speed by the way. So uh, be like me and do this and you will learn faster back to this. So LSTM networks, the idea after you've watched that video is we take some inputs sentence best movie ever. That's going to be one column, right? One a phrase, best movie ever. And then we have the label and the label is going to be either positive or negative one or zero. And the idea is to learn the mapping.

Speaker 1:          14:59          I said this a lot, learned the mapping and LSTM networks will help us do this. And the idea is that with recurrent networks, we're taking the hidden state from the last time step and we're inputting it into the neural net in the next time step. So at each time step, not just the input data or next word, we're also inputting the hidden state from the last time step. Both of those go in. And that's the difference between a recurrent network and a feed forward network. So the data flow is going to look like this. We're going to collect the text data, movie reviews, we're going to take it and we're going to encode it into vectors using word two VEC. We'll take those vectors and we'll apply it to our LSTM network for sequence learning text are sequences of words. We'll take the outputs of that LSTM network, apply it to a sigmoid function, and the reason we'll do that, so we get a binary classification, yes or no positive or negative, and then will compute a loss by comparing it to the actual label using gradient descent. We'll optimize it just like in this video. So let's get through this. By the way, you can literally run this code in your browser. All of it works. Okay, I'm getting better about making sure all of my code works for you guys. So let me just do it right here. The first step for us is to import torch, which is our Pi Torch Library. And then we're going to check if Kuda is available. These are just, you know, environment variables.

Speaker 2:          16:18          Okay.

Speaker 1:          16:18          And then we're going to download our data and now it's downloading that, those movie reviews. And now that we have those movie reviews, we can type in the code which will read the data from the text file. So read data. Now I'm going to start typing out some code. So I'll open up the first movie review, which is going to be placed in the data file, the data's directory as reviews dot txt. And I'll recursively searched through all of that. And at when I'm inside of the file, I'm going to store everything that I read from that file using the redx function. Now I'm going to do the same for not just the reviews, but also the label. So both the reviews and the labels are in their own respective directories and I could just do the same thing, right? So it's coordinates, these files are coordinated. So every line and one co is sinked with online in the other text file, right? Every, every input has its own label. So I'll just read both. Hopefully this works great. And once I've got those, let me just test it out. Let me print out review number, I dunno, 2000 and I'll also print out as an empty line and then I'll print out the labels for say, I dunno, 20 [inaudible]

Speaker 1:          17:33          probably. And let's see if that works.

Speaker 1:          17:42          There we go. So there's our review. This is a cartoon comedy. It's pub by and has an unnatural feeling. Dadda Dadda. Dadda, right? It's either positive or negative. It's taking all of these words. It's going to take all of these words, convert them to vectors, numbers, feed them to a model and classify positive or negative, and you see it there. Now our next step is to perform some data preprocessing. We've got a preprocessed that data. Get rid of the punctuation marks. As you see here, we've got to get rid of the new lines. You've got to get rid of the spaces. We've got to tokenize our words. So they're all individual tokens like this, their own strings. And once we do that, then we can encode those words using word two vec. Okay. Once those words are encoded, let's print out how many unique words there are.

Speaker 1:          18:26          74,000 unique words. That's a lot of unique words. Once we have those, we can check if our labels are either positive or negative. We also need to make sure to remove out all the outliers, right? All the reviews that are too big or too small. So we want to see how many reviews are way too big and how many are too small. One and two. Five, one, four. Let's remove those. So we're only, because the reason we're doing this is because we want a fixed length. All of our reviews have to be a fixed length for our model to be able to process them. And some of them aren't going to be a fixed length. So what we do is we pad them with Zeros on either edge like this, right? So this, this is an original example. This is a padded example and we do that right there.

Speaker 1:          19:09          And once we do that, we can test our implementation, see if we padded it properly. We did. Now it's time to split our data into training and testing data. Great. Check. Our work is create a data loader to then turn that data into a bunch of tensors slash. Vectors. Make sure we done that properly. We did. And now we can build our sentiment network and embedding layer, an LSTM layer and a fully connected layer. Now let's see if we're training on the GPU. Good. We're trading on the GPU. Here's our network right here. Our sentiment recurrent network. It's got an embedding layer, LSTM layer, dropout layer forward propagation, right? All of this code is going to be in the video description. We'll instantiate the network now that I've created it, printed out perfect. And time for the training loop. Here's our last couple of hyper parameters and start training.

Speaker 1:          20:00          So this is actually going to take maybe five to 10 minutes for you to train, which is perfect. Um, we don't have time for this. We've got a lot to do right now, but it's training. But let's just go down here and see what happened when I trained the model a, and you can do this in, in your browser. So you'll give it a test review, right? So, and you'll say this movie is the best, you know, good words, positive words, and then you can run predict on it. It will predict it. 98% positive. Now you do the same for a negative. It's going to do the same for negative, right? So let's go back up here to see if it's training. See there's training, but it's going to take like 10 minutes. So we're gonna stop it cause we don't want to wait. All right, so once we do that too, once we've created our train model, then what we want to do is we want to take that model and we want to convert it to a tensorflow file.

Speaker 1:          20:49          And I'll just, I'll let me explain to you why we do that. But before I explain to you why we do that, let me show you what onyx is. So onyx is a framework that was created in a partnership between AWS, Microsoft, and Facebook. It stands for open neural network exchange format. The idea is we create an ecosystem of interchangeable AI models so we can use them between frameworks. And so onyx is that intermediary layer. As you can see in this example right here, it is that intermediary layer. We take whatever model we have converted to Onyx and then from onyx we will create a tensorflow or you know, whatever version we want, Amex net, really whatever care us. So, uh, that's what we want to do and because we don't want to use, because like I said, Pie torch isn't good for production. Tensorflow is, so that's why we're converting it.

Speaker 1:          21:38          So we'll do that right here. Right? So the idea is that, you know, we are Pi Torch, we convert to onyx and then we convert to tensorflow, right? So here's the code for that. So Pi Torch has onyx built in as a module, right? Torch Dot onyx. We'll load the trained model we have and it was, it was saved right here as sentiment, that PTH. Then we export it to onyx. Let's a dot onyx file. Once we have the dot onyx file, we can say onyx, TF. Dot. Back end prepare. We'll load the onyx model, then we'll prepare the model, and then we'll export it as a p B file. That is a pro buff file. It is how models are saved in the tensorflow framework. And once we have that, we will download it to our machine and we'll use it in our android APP. That's what, how that works.

Speaker 1:          22:27          Now I'll get to tensorflow in a second. You know, tensorflow lite, tensorflow serving, et cetera. So, but first let's talk about android. So I haven't really talked much about android and if you'd like me to talk more about android, definitely comment in this video. I think I haven't talked about android because I thought it was too easy. Like that's not my place. Like there are plenty of people talking about android programming. Let me talk about the hardest stuff, which I consider to be AI, which is also the funniest stuff. But let's talk about android for a second. So android is actually a version of Linux. It is a Linux distro like Ubuntu or red hat. It's Google's version and they use it. It is hardware agnostic. That means it can run on many, many different types of hardware. And so at the kernel level there are a bunch of bindings that we don't have to worry about.

Speaker 1:          23:15          In fact, we don't really have to worry about any of these levels including the android runtime. What we care about is the API level, right? This green area right here, these are all of those modules that we're going to pull from the Internet. Whether that's Firebase for authentication, whether that's paypal for payments, whether that's you know, pie torch, whether that's tensorflow that's in the green level. And once we put all those together, we create our applications. And so the way android programming works is it follows what's called model view controller. That is a, that is a programming paradigm and in which that, I mean it's been around for over a decade now I think. But the basic idea is that you have a controller and the controller is, is exactly what it's called. It is controlling the lifecycle of the APP. It is in control, is watching over the creation of models.

Speaker 1:          24:07          And how the model life cycle moves. So you have a controller that's watching over everything and then you have models and you can think of models as templates from models come views. So for example, let's say for a chat app we would have a controller that would look at different models and direct how data passes between these models. Okay. And what I'm talking about model here, I'm not talking about machine learning model, I'm talking about a model for say a chat window. And that chat window could actually be different depending on which user is using it. Some user could create a blue chat window, they could customize it for themselves, whereas another user would want a black chat window, whatever you want. And so the idea is that we have this general model of a chat window and then views are created from it specific to a user.

Speaker 1:          24:53          So views are instances of a model and models are controlled by controllers, model view controller. And in the context of Android, the models are entities or classes. These are Java entities or classes views our XML. We can code, you know, drag and drop buttons. We can code Xml, what are the views look like? And the controllers are the activities and that's where most of the logic that we're going to write is going to go in. Okay. So there are four different types of APP components when it comes to android development. We have the activity, the intent receiver, the service, and the content provider. And in our case, what we're really worried about are the activities in 10 receivers have to do with notifications. And those are all [inaudible] far before features, right? Right now we want a very simple model user logs in, pays and can talk to our agent.

Speaker 1:          25:46          None of that custom stuff, no extra features. We're trying to get down to business here and we can build off of that later. Right? Fastest method to prototype. That is our mentality now to android applications, right? So an activity is the entry point for a user services, broadcast receivers and content providers. There's a lot. But the best way to teach you about this is said just start building. So what is the first application that we wanted to, um, what is the first integration that we want to create for our android APP? Let's think about that. Well, if we go to, our dependencies will say, well Pi Torch Onyx, which is the easiest, I mean, which is the one that it would be the easiest to build off of if it already existed. That's, that's the question. And the answer is dialogue flow. The idea behind dialogue flow is that this is Google's cloud service that uses a lot of natural language processing models to create a chat Bot for us in the cloud.

Speaker 1:          26:45          And there's a whole paradigm around how to do this. I've signed up for dialogue flow, it's free to try, which is great. And so I've got this dialogue flow console here that allows me to create an agent in the cloud and then I use an API to talk to that agent. So you'll notice that I've trained a model right locally, but I'm also using dialogue flow. And so the reason I'm doing this is because it's a good example to see how you can use, you can train machine learning yourself and you can do it client side, but you can also use a cloud service, right? You can also wrap an existing cloud service and you can create a paid service out of somebody else's cloud service. This is also a possibility, right? So I wanted to show you both ways. The reason you do this yourself is because you want more fine grained control.

Speaker 1:          27:32          You want more detail over what the model learns, what the data set looks like, and what type of architecture to use. However, it's good to prototype using APIs like dialogue flow. And so when it comes to dialogue flow, before I start building the android app, I want to just briefly explain how dialogue flow works. The idea is that whenever a user has a query, we're going to turn that query into an intent. So for example, if the query is something like, you know, is it going to rain today? Where's the nearest uh, umbrella store, whatever the intent of both of those is, whether discussion, whether weather, right? So that's the intent. So it's the abstract concept that the user is talking about and natural language processing allows us to find what that a concept or a vector to be technical is. And that's the great thing about dialogue flow is that it lets you define these intense, right?

Speaker 1:          28:27          So tell me a chord, show me a chord, how to play another court. All of these phrases relate to a single intent. And that intent is show me a chord chord suggestions, right? And then we have entities which are used to answer requests from the user and then fulfillment requests, et cetera. There's a lot there and I'm going to show you how that works when I build it. But let's start out by building our android APP. Now I'm using android studio to build this, which you can download right from the website. It's pretty easy to do if you haven't done it. I'd highly recommend downloading android studio. It's a great development framework, easily one click download, right? So let's get into android studio. In a s right? So here is my android APP, but how did I build this? Rather than, um, building dialog flows, integration myself. What I did was I found an existing dialogue flow chat bot using good hub right here and I built off of that. So what this guy did was he took an android app, bare bones and he integrated dialogue flow into it. So what we can do is we can see what he did and we can build off of that. So I will find it right here, dow to great. And I'll go into android studio, I'll minimize my existing one. I'll open a new one

Speaker 1:          29:51          in a new window. And here we are, right? So let's see what this looks like in Rez. Boom. Okay. So there it is, it works. And I'll say hello has fish and there's not going to be a response because I just downloaded it. I need to put my specific dialogue flow API key into this app for it to work. So it works just downloading it and directly running. It worked. So we're going to build off of this, right? So dialogue flow is already integrated. If we go to main activity, let's see what we got here. It's got to chat view inside of the chat view. It's got, it's got a bunch of code that will draw the chat view. It's got to use your class. So this is a model user model has got this activity, which is the controller. So it's already got dialogue flow integrated in there. So we just need to replace the dialog flow settings with our own settings. And now that we have this basic version of the APP running, it's got dialogue flow integrated. I'm going to search for, here's the access token right here. So I need to replace this access token with my own access tokens. We'll go into dialogue flow.

Speaker 1:          31:39          There it is, there's my access token right there, developer access token, and I'll paste it in right there. And now it's connected to my agent. So let's try it out. Ha, there we go. Awesome. So now it's connected to my dialogue flow agent, which I'll build in the cloud. So there's the basic functionality. Now we want to add some functionality to this. What do we need to add? We need to add user authentication and we need to add what else we need to add. We need to add our model to it. User authentication and we need to add what else? Let me go back up here. We've got dialogue, flow, user Auth, paypal, tensorflow lite, and Pi Torch, right? So that's what we need to do.

Speaker 1:          32:24          But before we do any of that, let's let's, let's look at dialog flow. What we want to do is we want to automate cognitive behavioral therapy. This is something people go in and train for, but what we can do is we can create rules in dialogue flow that will allow a chat bots to respond to a person in the way that a human would, right? So we can detect these ideas as intense. So negative thinking is one intent, negative thinking patterns, all or nothing is one in 10 focusing on the negatives, negative self labeling is one in 10 I'm a failure. See, this is all training data that we can use for our dialogue flow bought six more negative thinking patterns causes, right? We can go to our dialogue flow bought and let me just show you how to do this and we'll create a new intent.

Speaker 1:          33:09          And so what I've done is I started off by looking at a prebuilt agent and that is the small talk agent right here. You can import that. When you click import, it's going to import an existing array of prebuilt in intense. And we'll add our own intent. Let's just say happy is our intent. There already is one for small talk, but let's add another one. I'm very happy, like I'm super, super excited. So I'll create an intent for that. Now I'll say, what are the trainings, phrases, what are the training phrases for this? I'm super, super happy. You know what else? I'm very, I'm very happy. You know, life is good, life is good, life is good. And um, here's my response. Well the response could be something like, great, continue with that, continue with your life, whatever. Like I'm not a CBT and I'm not like actually looking at it, but you get the picture here.

Speaker 1:          34:04          I'm showing you the technical details of how you would do this. Just put more time and energy into this, right? So continue with your life. You have others, you could have other responses. You're doing great. And then you can say save, right? So any kind of intent where it detects a happiness, it will then create those responses for that. Whether it doesn't have to be the exact question or the exact statement, it will relate to relate what you've typed to that via semantic similarity. Remember it's vectorizing words and when words are vectors, once vert words are vectors, we can then find how close they are to each other, right? Man, woman, King, child. Why we can say that a man is different from a woman or you know, whatever we want to say. A queen is the type of woman, et Cetera. We can relate words mathematically and that's what it does in the cloud.

Speaker 1:          34:53          Now what models is dialogue flow using? Nobody knows it is proprietary, but it's very likely that it is using some kind of transformer network, which is a newer type of sequence learning model because it's in their best interest to do so. If they don't do it another service. Well and they want to provide the best service. So that's dialogue flow. Let's continue with this. What else do we want to add to our APP? What we want to add a authentication. And the way to do that is to set it up with Firebase. So Firebase is pretty amazing. Firebase is a great all in one tool and what it allows you to do is fire based, lets you build off cloud functions, uh, Crashlytics analytics, predictions, messaging, it does so much and it was bought by Google. Um, but what we want to use it for is we want to use it to store our users and to authenticate them. That's it. And one service, Firebase will sync across all of our apps and we can do that pretty easily. We just have to go to fire base, sign up, go to the console. And once we're there we're going to say, okay, we've got a new project and will, I've already actually got a project right here, which I created. But you just easily create a new project and we have to say, okay, we want to create off, um, set up a sign in method email, password, enable it, save

Speaker 1:          36:15          just like that. And database. Shay, create a database for our users. Start in test mode. Enable.

Speaker 2:          36:31          Okay.

Speaker 1:          36:32          Okay, there is our link. We can make rest. We can make API requests for you that if we want to, we can do anything. We'll get Jason back hosting authentication. We've got it all here. And then we're going to type in the name of our android APP. So the name of our android APP is calm.fly Fisher for now. Dot. Dialogue Flow Chat Bot exam dialogue flow chat Bot example, register. Here's our, we add this config file to our APP just like that. And then we add the STK by adding this dependency to our class file. And then that's it. So how do, so how do we add that? Well, what I've got here is I want to show you what I've done. So under our Java

Speaker 1:          37:34          I've added an activity. So to add an activity, you just go to new and then you can click on activity. And then basic activity just like that. And once you create an activity, it's going to be empty. But under under layouts, Rez layout, you'll see the XML file associated with each activity. And what you can do with each of these activities is you can create the XML file. So either via XML or design, we can add in components, you know, just drag and drop like as you're seeing right here, you know, add an image view. There it is. Or I want to remove the image of view whatever you want. And I've added two text views, a button to log in. And then a logo that I designed using brand mark.io, which I talked about in previous video. Mine for lack cert and the domain is free as well.

Speaker 1:          38:20          So that's why I also picked it. So in the log in activity, um, what I did was I said in on create. So by the way, there's so much here, there's so much to fit into a single video. I really just want to give you the important bits as I see them. I could sit here and explain the entire activity lifecycle when on create fires, when on delete when you know all these, like all these event listeners fire, but I'm not going to, I'm going to tell you is that we, once we created both of those XML text inputs and then the button, we can call those inside of the activity, right? So get em email, get you dot text, right? There's an email, there's the password. Okay. And then we send those to fire based. It's going to send us back that authentication Jason File.

Speaker 1:          39:09          And if that, if the returns success, then we take the user to the next view. Right? So that's the idea. We send it to Firebase, we've integrated the SDK. If it was successful, then we log the user in, right? So that's for Firebase. What else do we have here? Once we've added Firebase, then we add our pretrained model, which you can see there it is frozen in France. Graft up PD. Okay. That's the model. So the idea here is that once I type in something, it's going to detect if what I typed in was positive or negative and once out of every 10 times, if what I said was negative, then what it's gonna do is it's going to ping the reddit API are slash memes, pull back the funniest meme or the top rated meme and show that to me as an automated assistant would.

Speaker 1:          39:55          But the rest of the time it's going to use dialogue flow to interpret what I've said. So this is an example of AI happening client's side, but it's also happening in the cloud but it doesn't have to be both. You can choose one or the other or do both. But this is just to show you how you would do both. And so right here you see my, my inference graph, right train and Pi Torch converted to annex, converted to tensorflow, downloaded and here it is on the client. Tensorflow lite is allowing me to do this, which is TensorFlow's android version or mobile version. So, um, once I've logged in and I've created the log in activity, then I want the payment activity. So I've created another activity called payments. And the idea behind payments is look at this right here. Begin payment. It will say, what's your client id? Now this comes from paypal, right? So from paypal I use paypal because paypal was the easiest to integrate with android compared to stripe and compare it to a few other ones, although my friend did create a brain tree. Shout out to Brian, but I'm sorry Brian, but that's okay. So um, client ID is right there

Speaker 1:          40:59          and uh, we can go to the paypal developer documentation to see how to set up our developer environment for android. It's got some great documentation here. And the great thing about Android, what I really like about the newest versions of Android is the fact that you can easily install so many different libraries by going to your build dot grateful. And you can just type it in there.

Speaker 1:          41:28          There it is, right? So what I did here was I said, look at this here, this file. I said compile paypal, compile a tensorflow for Android, I, all I do is I put those compile lines inside of the bill dock rail. When I build the project, it's going to download and install those dependencies for me and I can use them in my app. It's going to link everything. So many different class files are going to be linked in any activity that I create, which is awesome. So those are the vials right there. I've got this payments class right here. I've got the payments button right here. So I just created a button for payments. It's an image button and I just found a paypal button off the web. And then I linked it to this function here in payments called begin payment. I set the price here, I said USD, it's gonna be 35 bucks.

Speaker 1:          42:20          And the great thing about paypal is it's kind of like stripe, whereas all of that payment functionality and logic is happening server side. So we don't have to worry about that. And then when it's done, it's just going to return a success token. And if we get that success token similar to user off, we then move the user to the next activity, right? So it's just like that. And so that's for paypal. And the last bit is we've, we've authenticated the user, we've made them pay. We have put the model locally on our android device. We've integrated dialogue flow and the last step for us is to talk about tensorflow lite. So it tends to flow light is pretty epic because what it does is it lets you take a train tensorflow model and convert it into a file that can be read on android devices.

Speaker 1:          43:06          So you will just put it in your android device and it's going to run on your android device locally. Now most of these files are image files, but um, you know, there's a lot of NLP files and I hope to see more of those because we want to get to a world where we are modularly using these AI components, these pretrained models together. That's what we need. We need to be able to import a pretrained model from NLP, from computer vision, from, you know, data analysis from data science. And just use them as components, as pieces of the puzzle, and then let end users and developers be able to build off of those and we're just, we're just not there yet, but we will be in terms of the ecosystem, in terms of what we can build in, what kind of impact we can have.

Speaker 1:          43:49          Of course, we can all have an impact, but the actual modularity of these components definitely has room for improvement and remember, the more complex something is to do, the fewer people will do it, which gives you this person with a lot of motivation. Who's watching my videos, who I love very deeply for making it to this point? It gives you an opportunity, okay, this is your time to shine. This is your time to shine. Ai is your medium to shine. I'm talking to you like forget all about, forget about this for a second. Ai is your time to shine. This is your way to make money. This is your way to have an impact on the world. If you've ever wondered what your places on this planet, why you're here, I'm telling you that this is it. This is why we all have humanity, has been building up to this point where we can build these AI system, these artificially intelligent systems that will increase our productivity, our happiness, our meaningfulness in life. It will increase the quality of our intelligence. It's going to do so much for us, but we need people to start building these applications like you. And in fact, well, I'll talk about this last point at the end of the video. So let's keep going here. By the way, there's a bunch of pretrained models that you can find on get hub right here. I've got a link to it for you, which are very easy to implement. So let's get back to this code and I want to show you something.

Speaker 1:          45:07          So, uh, in the main activity, um, so once I have found a message, so here's the code that I was talking about. So what this does is it says, instantiate a new request to read it.

Speaker 2:          45:29          Okay?

Speaker 1:          45:29          So it's memes dot Jason. It will pull those memes. If the user's intent is, you know, this is the means. Dot. Jason. This shows all the data from orange slash means as a Jason file. Really easy to pull via a simple rest and http request. And then we'll just going to show it to the end user, Huh? Jordan Peele and I commented this code out for now. Now let me uncommon tit. There we go. So it's reading whatever the user typed in, it's then once we have that, here is the code for doing inference with tensorflow right here. So what's happening here is here is the file are frozen graph. It's going to retrieve that. It's going to feed whatever the user typed in and then it's going to run inference, right? And so once we had the inference, we can do whatever we want, right?

Speaker 1:          46:17          So that's an example of that. So it's an example of mixing dialogue, flow and inference happening locally. Now what I want to do is I want to run this one more time for you so we could see this one more time. The fully finished version. Yes, access my contacts. All right, so I'll type in my email, my password, sign in to mind relaxed her a pay with paypal. I remember the payment activity. Remember the XML file, remember the paypal integration, right? We just add that into the bill dot Gredo file to integrate and then we call it a, whenever one of the activities is finished, whenever I hit the sign in button and Firebase returns and authenticated Id, yes, no, and then we show this paypal charge card. This is going to send a request to paypal. It's going to return an ID did pay or did not pay or it's a binary value.

Speaker 1:          47:10          Once we got that, we go to the next phase and then we type in something. This is our therapist Siraj therapist's greetings and it's going to ask you things. Now, obviously you can improve this therapist. You can give this therapist's more capabilities. It's using better CBT techniques. It gets better over time. You do market validation, you a team, et Cetera, but hopefully this gave you some inspiration and education on how you can build an AI startup with Pi torch and a bunch of other tools. Now one more thing before you go. I'm creating a challenge for you. I want to help gamify this. Why? I Dunno it, it's just fun. So it's called AI startup challenge. It's a three step process. Create an APP. It could be android, Ios, web, anything that uses AI in some way anyway to solve a problem. If you can get three paying customers for your app, that means money in your pocket.

Speaker 1:          48:03          Then if you submit your entry, you will get a video shout out from me as well as a private hangout section where we'll just, if you, if you want to chat, we'll just, we'll, we'll chat you and I will chat about whatever. Okay. For, for an hour. And the way to do this is to submit a form. I'll have a form in the video description if you want to submit your challenge to uh, your, your startup too. And the due date for this is May 15th, right? So you have some time to build this. Uh, it's, it's going to be fun. The first three people or teams to create an APP that gets at least three paying customers, gets a video shout out and I'll do a private hangout with them. If you can't find anybody to check out our slack channel, asked for teammates in the comment section of this video, and I hope you found this video useful. Hey, if you liked this video, do me a favor. It's national like button and please subscribe for more technology videos for now. I've got a code in Ios, so thanks for watching.