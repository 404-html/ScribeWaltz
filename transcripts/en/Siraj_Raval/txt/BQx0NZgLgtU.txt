Speaker 1:          00:00          Oh world, it's a Raj. And today we're going to talk about a product called data wallet, which is a decentralized data exchange. This is really important because this is our a way for us to get to a future where users can own and profit from their data, right? With the old delete Facebook campaign, et Cetera, et cetera. Um, and we're going to, we're going to at the end build a solidity contract. So what you're seeing here is a tic Tac toe game built in solidity. So it's running on the ethereum blockchain. So if I hit start game, I have to make sure that the players addresses are different. I'll hit start game in a loaded, load them up, I'll play a move, okay. And then the other player will make a move and each of these moves is on the blockchain. So you can find a link to this demo in the video description.

Speaker 1:          00:45          What I wanted to do was just show you something really cool that you can build into liberty really quickly, uh, and then get back to this demo because at the very end we're going to build an exchange contract. And solidity. That's not this, it's something different. But I just wanted to, you know, get you, you know, whet your appetite a little bit about this stuff because it's really cool. So what is data wallet? So if we look at this data wallet, it's an Ios APP. They've got an android APP. But what it is is it's a blockchain based data exchange that I found that I think is really cool. So you know, open mind, there are several other data exchange platforms out there. And I really like this one. Okay. So the idea is that you can sign up for this, and this is kind of like the, the flow of the APP that you can see right here.

Speaker 1:          01:23          But the idea is that you sign up for this APP, okay? And then you can pull, so look at this image right here. You can pull your data from Facebook, from Twitter, from Airbnb, from Amazon, all of these different centralize he word services. You can pull them into this APP, right? So it's storing all of that data in some, in, in, in one source. Right? And then once you have this source, you can get paid for this data to advertisers, you know, data and analysts, companies, all sorts of people who want your data, they pay you directly. There is no third party, you know, Facebook, uh, shout out to Facebook, go down Facebook. But yeah, none of that. It's just they're paying you directly. So what this means is that users can generate a passive income from their data. This is very exciting and it's one of the first steps towards getting towards web 3.0 so, so data wallet, it gives users complete ownership of their data and what they get is the data exchange token DXT so they have an internal token that act as both an asset, as both a currency and a as a security.

Speaker 1:          02:29          So it appreciates in value over time as more people join the network. So you can either spend your DXC, you can convert it into Fiat or you can just hold Hoddle onto and just wait as the network grows and then that that's going to appreciate over time. And then you can sell it later on for much more does. That's the idea behind, you know, that's the token model, right? So it also provides a data API for that enables developers to use this data to build apps. And we'll, we'll talk about that later. But it's, it's kind of like an all in one solution. So why is this useful? If you don't know in the past years hone it, two years, 90% of all data that exists has been created. That's insane. Okay. That's insane. Two years, the majority of the world's data was created. That's a lot of data.

Speaker 1:          03:12          So we need new business models to help us interact with this data and profit from it. Crucial. So the data you generate currently through your use of social media is, well, you take a picture or you take a video, et cetera. I'll make a youtube video. It's monetized and controlled by these companies that you're uploading to. What data while it does is that let's you share data as you wish and earn money from it. Okay. So a data wall, that profile gives you data mobility. It allows you to easily plug into any AI powered APP and get personalized services. I'll talk about that in a second. What I mean by that, but you can trade your anonymized data for two businesses or developers to less contract offers. So it doesn't even have to be linked to your identity, to your name. It could be your heartbeat, your blood pressure, your, you know, where you live.

Speaker 1:          03:59          But it doesn't necessarily have to be linked to your identity. Like this is Saroj is no, this is just an identity of a person and here's everything else about them. So you can stay anonymous and profit from your data. Best of both worlds. So what it's doing is it's using smart contracts to do this, and I'll talk about that in a second as well. But contract specify the type of data it will collect and the benefit offered, namely their data exchange. So the problem right now is that data brokers, people who want to make models based on your data, they have, they have to employ these probabilistic models to approximate the likelihood of certain data points belonging to certain users. So they'll help, they'll employ model those that'll say, well, it's 70% likely that this person likes, you know, sports drinks because they're part of this group.

Speaker 1:          04:46          It has to be probabilistic because the data is so fragmented across different platforms. But if all that data was in one platform and the user controlled it, there's no you, no room for any kind of corruption. That would be ideal because then you could sell it for all of that for much more than even Facebook could write because you now have your Facebook, Twitter, everything data right in one place. So it's much more valuable to you and therefore it's much more valuable to date of brokers. So there are a lot of applications for this, right? This here's a classification of all these different types of data out there, but market research, right? So right now it's not automated, this data capture, but this would allow for entirely automated data capture of every single bit of your data if you so choose and you can profit from it.

Speaker 1:          05:29          So it also allows for deterministic advertising, like we talked about before, instead of having to employ probabilistic models. Uh, advertisers can now deploy deterministic models. It allows for personalized car insurance, right? So instead of saying, well, I guess based on this person's Facebook data there, you know, likely to not crash, you can say, you know, a car insurer can say, well, based on this person's entire history, I can give them the right type of insurance loan, underwriting, psychographic hiring. You know, anytime that a company or a person is trying to assess you for whatever reason, whether you're willing to, you're able to properly pay a loan back or pay the rent on time or do a job instead of just taking these fragmented data pieces like a resume for example, it's just one data point, they can get all of that and you can give them the permission to do that and you can get crucially paid for it, right?

Speaker 1:          06:19          So that's, that's the key here. So let's look at the tech stack that they are employing right here. So what you're seeing here is a model for how this works, right? So on the far left, you see all of your, you know, different data points. It goes into your data wallet profile as you know, you opt into it, that data is processed and then you can exchange that. And this is where the smart contracts come in for um, for money. Right. And for, for, for actual value and give it to these customized products and enterprise customers.

Speaker 1:          06:49          Right. So what, what the what the tech stack a data exchange uses? It's using posts gray. So that's, that's a database. Um, it's, it's using, its front end is via javascript very, you know that standard. It's the backend is using node python and Golang shout out to Golang Bray choice of language. The front end is using cloudfront. S three. Okay. Hold on a second. We'll talk about this back end is using ECC to monitorings using cloudwatch deployment, terraform and of course blockchain. Is it theory up? You might be asking, wait a second. All the data's stored in a single server. It can be so that the user is provided with two options. Option one is they can store that data locally. So you could store it on your own computer and then allow access to it. Or You can store it on their server, but it's encrypted client side. So they, they are not able to see what that data is. You can encrypt it on your local machine, then send it up and only you have that private key. So a lot of services already do this, but it's like, you know, like a private version of Dropbox for example. But basically you encrypt that data locally, then you send it to the server.

Speaker 1:          07:53          So you can consider Dana, Dana Wallet adapt, you know, mostly it's mostly decentralized service that is production ready. Right. And of course they could use, they could have used IPFS for this, but you know, there's still steps to go and maybe in the future they'll, they'll use that. Okay. So, uh, what I want to do now is I want to build an example of an exchange contract and I don't, I'll tell you what I mean by that, to give you an idea of, of how they're doing this and what an exchange looks like on the blockchain, right? So there's a reason they're using the ethereum blockchain for this, right? Because if they didn't use the ethereum blockchain, if that exchange code was all on a central server, if it was closed source, then no one could see what they're really doing with your data rights. Are they really giving it to that party that you authorize?

Speaker 1:          08:37          Are they selling it to other third parties? You don't know. But if that code is open source and runs on a blockchain, it is publicly verifiable. You know exactly where your data is going, right? And yes, it's stored on a central server, but it's encrypted client's side. So you're secure in that way. So what I want to do is write a very simple exchange contract in solidity to show you exactly what I mean when I say that. You know, solidity is a great language for, for doing these kinds of things, okay? So I'm going to write this code in the online solidity browser called remix. It's, it runs on the test, ethereum blockchain. So what this contract is going to do is it's going to allow to people to exchange goods over the internet in a trustless way, okay? So if you think about it, how do I ensure without a third party that if I sell you a good, how do I ensure that you will pay me for it, right?

Speaker 1:          09:28          Instead of just receiving it and keeping the money for yourself, while there has to be a way to do this. Now I'm going to explain to you before I called this out, right? So two people per person, a and person, B buyer and a seller, okay? So what happens is the seller and the buyer will both deposit two x the amount, okay? Into an escrow. So two x, the amount of the, of the item that they want to, you know, sell, right? They both deposit it into escrow. The seller will then send the item to the buyer. The buyer then receives the item. Okay. The only way that the, that the buyer can then retrieve their own funds is if they, if they unlock their funds and the second day and lock their funds, automatically the seller's funds are back, are unlocked again. You see what I'm saying?

Speaker 1:          10:11          So there's no way to cheat the system. If I send you a good, before I sent it to you, you have to deposit two x, that amount, I have to deposit to x, that amount you receive it. And the only way to get back that amount, that two x, that there's a reason it's two x. So you can game the system by selling that item later because you've already deposited two x that is by unlocking your amount and then it automatically unlocks my amount. You see what I'm saying? And it's, there's two x for the, for the seller, because then they get both the amount that the item was worth and their original deposit back. So what we're gonna do is we're going to programmatically code this APP, right? So we always have to define the version of solidity first. So that's what I'm going to first do here though.

Speaker 1:          10:49          It's going to be 0.042021. Okay. And so this is going to be a purchase contract, right? I sold find that class as a purchase class. Now the first thing we want to do in these contracts is write out those values that we're going to repeatedly use throughout the code. The first is the value itself, right? So the value of the item, we're going to have an address for both the buyer and the seller. So these are going to be public addresses that I can tie pal right here. And then lastly, we're going to have some states' rights and we have to tell you know whether, uh, this contract has been created, whether it's been locked, whether it's been inactive, and this is going to represent that. And lastly, we're going to have that state, um, variable as well. So now let's write out our most crucial function first, which is the purchase function. Okay? It's a public function. It is payable of course, because we want these buyers and sellers to be able to send that function some money, right? In this case it's going to say, well who is the seller? Well it's going to be the sender and is the value? Well the value's going to be that amount

Speaker 1:          11:57          divided by two that the seller is going to send and it's going to require two times, like I said before, two times that value to get the message value.

Speaker 2:          12:08          Okay?

Speaker 1:          12:09          And that's it for that. So this ensures that the message on values and even number, that's why I did the divide by two. The division's going to truncate it. So even if it is an odd number and that's going to check the multiplication if it wasn't an hod number. So that's the purchased function. Okay, now we can move on to the d a condition function. It actually, there's, there's actually several of these um, modifiers. I'm just going to paste right here. So the, what the modifiers are responsible we're responsible for is just checking for conditions. Is it only the, is it the buyer who's sending this? Is it the seller? Is it, is this the correct state? So this is just verifying where we are in the APP.

Speaker 1:          12:50          And once we do that, then we can add in more functions. Okay. So one, uh, one event that could occur is that this whole exchange is a boarded, so we'll have that on. Another event that occur is that the purchase has been confirmed. Another event that could occur is it the item was indeed received, right? So different events can occur at different times. So now what I'm going to do is I'm going to write out or just pasting the rest of this so we can see what it looks like. But okay. So the abort function is very crucial here. What it does is it imports a purchase and you can reclaim the ether and it can only be called by the seller before the contract is a lot. So this is before the contract is locked. So what that means is no one has deposited anything.

Speaker 1:          13:33          Okay? Then let the seller go ahead and abort this. Right? But once you deposit something, you cannot aboard it, right? That's the whole point of an escrow. You cannot aboard that escrow. Now the confirm purchase is also very crucial because what it does is it confirms the purchase as the buyer. The transaction has to include two x, the value in ether and the ether will be locked until confirm received his call, which we'll look at in a second. So it says, okay, what's the state, what's the condition and is this payable? Then emit the purchase confirmed, set the buyer and set the state to locked. Now confirm received. We'll tell this the contract that the buyer has indeed received the item. That's that's that crucial points, right? Did the buyer received it? And the buyer is the one who unlocks this by sending ether rights.

Speaker 1:          14:19          They say, okay, well I received the item, let's, let's confirm that I've received it. So if you have some kind of user interface, you can easily switch that up and you can just have it be a button for that user so they don't have to worry about anything else. But we're just riding up to, you know, strict code here. There's also e. Dot. JS that allows you to make a web app. Beautiful Web App, like I showed you for Tic Tac toe as a beautiful interface. But this is just, you know, happening on the blockchain. So once the item has been received, we have to change the state to inactive. The buyer then transfers that value and the seller transfers that, that value as well. So they both received their funds, the funds that they deposited. Okay. Okay. So that's it for this example. I hope you found it useful and yeah, please subscribe for more programming videos. And for now, I've got to own my data. Dope. Thanks for watching.