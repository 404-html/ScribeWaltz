1
00:00:00,120 --> 00:00:04,140
Hello world, it's Saroj and Crypto
kitties. Have you played it yet?

2
00:00:04,470 --> 00:00:07,530
It's this blockchain based
game that's gone viral.

3
00:00:07,770 --> 00:00:10,860
It sparked a global craze
for collecting cartoon cats.

4
00:00:11,070 --> 00:00:14,400
We're going to cover how it works
programmatically in this video.

5
00:00:14,790 --> 00:00:18,900
There's even a Chinese language
mobile app which was just released.

6
00:00:19,080 --> 00:00:21,810
Bringing the game to
large parts of East Asia.

7
00:00:22,090 --> 00:00:24,210
Looks like the great firewall
is not so great, Huh?

8
00:00:27,870 --> 00:00:32,280
Crypto kitties is built on the ethereum
blockchain at one point in accounted for

9
00:00:32,281 --> 00:00:35,220
a third of all transactions
on the etherium network,

10
00:00:35,221 --> 00:00:38,610
which is insane if and when the
Chinese market for the game grows.

11
00:00:38,700 --> 00:00:42,870
It's not certain that the ethereum
network could handle that many users,

12
00:00:43,020 --> 00:00:47,310
but both the theory and Crypto
Kitty's team are working out issues of

13
00:00:47,311 --> 00:00:49,710
scalability.
Currently crypto kitties,

14
00:00:49,711 --> 00:00:54,150
our collective cats like Pokemon or beanie
babies, but unlike those collectibles,

15
00:00:54,270 --> 00:00:55,420
these cats breed,

16
00:00:55,710 --> 00:00:59,610
they can create offspring with unique
DNA preserved in the blockchain.

17
00:00:59,850 --> 00:01:04,850
Over 500 k Kitty's have been sold so
far and there are about 250 k players.

18
00:01:05,190 --> 00:01:07,980
We transactions are passing $40 million.

19
00:01:08,280 --> 00:01:12,630
The rarest crypto Kitty's have sold over
north of a hundred k and some are worth

20
00:01:12,631 --> 00:01:17,580
over 300 k. The crypto Kitty's
code is open source. It's
about 2000 lines of code.

21
00:01:17,850 --> 00:01:20,340
The smart contract language
of ethereum solidity.

22
00:01:20,670 --> 00:01:24,260
Remember this is all code
that lives on the blockchain,

23
00:01:24,270 --> 00:01:29,220
so every node in the theory of network
story's a copy of it. It's a lot of code,

24
00:01:29,221 --> 00:01:33,600
but we can go over the most important
parts to try and understand how it works.

25
00:01:33,870 --> 00:01:38,760
So the way the game works is that
it's a way for players to buy, sell,

26
00:01:38,761 --> 00:01:42,840
and breed digital cats.
Every cat has its own unique appearance.

27
00:01:43,000 --> 00:01:46,470
It's defined by its DNA.
When a player breeds to cats,

28
00:01:46,590 --> 00:01:49,050
their genes combined in a unique way,

29
00:01:49,290 --> 00:01:53,160
and this produces an offspring which
a player can then breed again or sell

30
00:01:53,580 --> 00:01:57,900
cleverly. The code for Crypto kitties
is split into several smart contracts,

31
00:01:57,901 --> 00:02:01,230
so it's not one giant messy
file with all the code in.

32
00:02:01,231 --> 00:02:05,700
It will see that there exists a
subcontract called inheritance in the main

33
00:02:05,701 --> 00:02:09,150
crypto kitty contract with the
listing of all the contracts.

34
00:02:09,450 --> 00:02:13,680
Kitty Corp is the main contract address
that the APP points too and we can see

35
00:02:13,681 --> 00:02:17,880
that it inherits all the data and
functions from previous contracts.

36
00:02:18,180 --> 00:02:22,260
We can walk through each of
these contracts to better
understand how they work.

37
00:02:22,680 --> 00:02:26,160
Let's start at the lowest level.
Kitty access control and move our way up.

38
00:02:26,310 --> 00:02:31,290
The kitty access control contract manages
the various addresses and constraints

39
00:02:31,380 --> 00:02:35,040
for operations that can be
executed only by specific roles.

40
00:02:35,310 --> 00:02:39,780
There are three roles currently. These
pertained to the creators of the game.

41
00:02:40,050 --> 00:02:44,400
They have special ownership and control
over particular functions of the

42
00:02:44,401 --> 00:02:48,840
contract. It defines some
function modifiers like only CEO,

43
00:02:48,841 --> 00:02:53,370
which restricts to a function so that
only the CEO can perform it and adds

44
00:02:53,371 --> 00:02:57,180
functions to perform actions like
pause or release contract funds.

45
00:02:57,450 --> 00:02:59,010
The pause function is interesting.

46
00:02:59,020 --> 00:03:03,970
It allows the developers to freeze the
contract completely making it so no one

47
00:03:03,971 --> 00:03:06,460
can transfer a sell or breed or kitties.

48
00:03:06,820 --> 00:03:09,490
It's probably not in their
best interest to do that,

49
00:03:09,491 --> 00:03:13,570
but it's just something to note.
Just because it's built on the blockchain,

50
00:03:13,810 --> 00:03:16,720
it doesn't mean control is
completely decentralized.

51
00:03:16,960 --> 00:03:19,840
It just made completely
transparent in this case.

52
00:03:20,110 --> 00:03:22,000
When we move on to the
Kitty base function,

53
00:03:22,180 --> 00:03:26,210
we defined the most fundamental code
shared throughout the core functionality,

54
00:03:26,270 --> 00:03:29,440
the game where and how
is our user data stored?

55
00:03:29,650 --> 00:03:31,990
What are the constants and
the data types we'll use?

56
00:03:32,200 --> 00:03:35,470
What are the internal functions
for managing these items?

57
00:03:35,770 --> 00:03:37,840
It first it finds a kitty as a struct.

58
00:03:37,900 --> 00:03:41,560
It's essentially a bunch of unsigned
integers that are its features.

59
00:03:41,680 --> 00:03:45,070
The genes represent its DNA.
What it ends up looking like,

60
00:03:45,100 --> 00:03:47,770
birth time tells us when the cap was born,

61
00:03:48,100 --> 00:03:52,390
cooled down and block is the timestamp
after which this cat can start breeding

62
00:03:52,391 --> 00:03:56,020
again, may train NCI or id
or the ideas of the cats.

63
00:03:56,020 --> 00:04:01,020
Parents Syring with ID is the ID of the
father and cooled down is how long the

64
00:04:01,091 --> 00:04:04,090
cat has to wait before breeding again.
Lastly,

65
00:04:04,091 --> 00:04:06,910
generation tells us which
generation the cat is of.

66
00:04:06,940 --> 00:04:10,450
We'll see that there exists an array
of these kitties trucks that were just

67
00:04:10,451 --> 00:04:15,010
defined. This array will hold the data
of every single crypto kitty that exists.

68
00:04:15,310 --> 00:04:18,850
It's like a master kitty database.
Whenever some new cat is born,

69
00:04:18,880 --> 00:04:23,830
it's added to the array and its index
in the right acts as its ID genesis,

70
00:04:23,831 --> 00:04:26,260
the first crypto kitty as
an idea of one for example,

71
00:04:26,710 --> 00:04:31,030
the contract also has a mapping from
the cats id to the address of its owner

72
00:04:31,130 --> 00:04:33,340
that keep track of who
a kitty is owned by,

73
00:04:33,580 --> 00:04:36,370
so whenever a kitty is given
from one player to another,

74
00:04:36,580 --> 00:04:41,230
the kitty index you own or mapping gets
updated accordingly to reflect its new

75
00:04:41,231 --> 00:04:42,064
owner.

76
00:04:42,070 --> 00:04:46,660
When a new kitty has created the ids
of the mother and father as well as its

77
00:04:46,661 --> 00:04:50,590
genetic code are used. See how a
crypto kitty is its own data type.

78
00:04:50,830 --> 00:04:55,600
All these cats are stored
on the blockchain and who
owns which cap is also kept

79
00:04:55,601 --> 00:04:59,350
track of, we call them kitty's but
they can also be considered tokens.

80
00:04:59,440 --> 00:05:02,920
There are several token specs
written for Ethereum Erc,

81
00:05:02,921 --> 00:05:06,280
20 being the most popular use
for initial coin offerings,

82
00:05:06,580 --> 00:05:11,580
but crypto Kitty's conforms to Erc seven
21 this is a non fungible token type

83
00:05:12,250 --> 00:05:15,730
that's really useful for tracking
ownership of digital collectibles,

84
00:05:15,731 --> 00:05:18,070
like where game items per digital pets.

85
00:05:18,430 --> 00:05:22,870
Ether is considered a fungible token
because any two ether is just as valuable

86
00:05:22,871 --> 00:05:25,450
as the other,
but with a non fungible token,

87
00:05:25,690 --> 00:05:29,560
not all cats are created equal so they're
not interchangeable with each other.

88
00:05:29,710 --> 00:05:32,710
Since one breed could be
much more rare than another.

89
00:05:33,130 --> 00:05:38,130
The kitty ownership contract inherits
from Erc seven 21 and all of these tokens

90
00:05:38,141 --> 00:05:39,370
follow the same standard.

91
00:05:39,670 --> 00:05:43,810
Kitty ownership fills in the
implementation of the ERC 21 functions.

92
00:05:44,110 --> 00:05:48,460
A player can transfer their tokens to
someone else by interacting directly with

93
00:05:48,461 --> 00:05:52,840
the crypto Kitty's contract on the
ethereum blockchain without having to go

94
00:05:52,841 --> 00:05:56,680
through their web interface.
Moving up one level to kitty breeding.

95
00:05:56,890 --> 00:06:01,790
This is the contract that has the
functions necessary to breed cats together

96
00:06:01,970 --> 00:06:05,990
like keeping track of breeding offers
and notice that there is a separate

97
00:06:05,991 --> 00:06:10,991
contract called gene science that is
not open source that's used to calculate

98
00:06:11,091 --> 00:06:12,890
how new DNA is created.

99
00:06:13,190 --> 00:06:17,150
It seems like the reason that kept this
part closed source is because if it

100
00:06:17,151 --> 00:06:22,151
wasn't anyone could just read helicase
DNA was determined and it would be a lot

101
00:06:22,220 --> 00:06:25,850
easier to know which cats to
breed in order to get a fancy cat.

102
00:06:26,270 --> 00:06:30,440
When two cats are bred together, it looks
them up in the master kitty's array,

103
00:06:30,620 --> 00:06:35,270
sets the ideas to the mother and father's
and executes trigger cool down on both

104
00:06:35,271 --> 00:06:39,140
parents so they can't breed again
for a certain amount of time.

105
00:06:39,650 --> 00:06:44,650
Then the give birth function creates a
new cat by determining the child's genes.

106
00:06:45,020 --> 00:06:48,740
Then using gene science dot mixed
genes and calling create kitty.

107
00:06:49,460 --> 00:06:51,500
Now that we know how
these cats are created,

108
00:06:51,620 --> 00:06:53,750
we can move up to the
kitty auctions contract,

109
00:06:53,930 --> 00:06:57,500
which tells us how to auction or
bid on cats or breeding services.

110
00:06:57,770 --> 00:07:00,260
This contract has certain
functions like set sail,

111
00:07:00,261 --> 00:07:03,200
auction address that can
only be called by the CEO.

112
00:07:03,530 --> 00:07:05,420
Then in the kitty mentoring contract,

113
00:07:05,540 --> 00:07:09,020
it defines the rules for how a
generation of cats are created.

114
00:07:09,350 --> 00:07:14,000
The number of promote cats, the number
of cats in generation zero is hard coded.

115
00:07:14,360 --> 00:07:17,960
The Coo can even create Promo
kitties and generate new kitties.

116
00:07:18,200 --> 00:07:22,670
This is probably for use with early Beta
testers and friends and family. Finally,

117
00:07:22,671 --> 00:07:25,490
we can move up to kitty core,
the master contract.

118
00:07:25,790 --> 00:07:28,880
This is what is compiled and run on the,
if they're in blockchain,

119
00:07:29,120 --> 00:07:32,120
it inherits from all previous
contracts we looked at.

120
00:07:32,450 --> 00:07:36,110
It also adds a few more final
functions like the get kitty function,

121
00:07:36,230 --> 00:07:40,490
which retrieves all of the crypto Kitty's
data using its ID. You might be asking,

122
00:07:40,610 --> 00:07:45,020
where are all these wonderful cat images
stored? I don't see any code for that.

123
00:07:45,380 --> 00:07:46,213
Correct.

124
00:07:46,340 --> 00:07:51,340
A crypto kitty is essentially just a 256
bit integer that represents his genetic

125
00:07:51,501 --> 00:07:55,670
code. The solidity contract code has
nothing in it that stores a cat's image or

126
00:07:55,671 --> 00:07:58,760
description that happens on
the Crypto kitties web server.

127
00:07:59,090 --> 00:08:02,780
This architecture choice was
likely to avoid blockchain bloat.

128
00:08:03,140 --> 00:08:06,290
Storing lots of images on
a blockchain is a bad idea.

129
00:08:06,500 --> 00:08:10,490
It could quickly add up to too much
reminders to store on their local machines

130
00:08:10,730 --> 00:08:12,950
and transactions could grind to a halt.

131
00:08:13,400 --> 00:08:16,370
It does introduce a single point
of failure, their web server,

132
00:08:16,371 --> 00:08:20,690
but a future version could instead use
the decentralized file storage network

133
00:08:20,720 --> 00:08:25,250
IPFS to store data so that no
single entity can store the data.

134
00:08:25,370 --> 00:08:28,850
Instead, it's a network of computers,
but that's a video for another day.

135
00:08:29,270 --> 00:08:31,130
Three things to remember from this video.

136
00:08:31,460 --> 00:08:36,020
Crypto kitties is a mostly open source
game that runs on the ethereum blockchain

137
00:08:36,200 --> 00:08:39,740
allowing players to buy, sell,
and breed collectible cats.

138
00:08:40,070 --> 00:08:44,060
The code is written in solidity and
helps define functions per how cats are

139
00:08:44,061 --> 00:08:48,320
created, what their features are, and
how a player can interact with them.

140
00:08:48,620 --> 00:08:51,260
And because the image data
is stored on a web server,

141
00:08:51,500 --> 00:08:53,630
it's not completely decentralized.

142
00:08:53,810 --> 00:08:56,420
Although IPFS could be a
better alternative to that.

143
00:08:56,810 --> 00:08:59,450
Please subscribe for more
programming videos. And for now,

144
00:08:59,540 --> 00:09:02,210
I'm going to trade some cats,
so thanks for watching.

