1
00:00:10,840 --> 00:00:11,673
Okay.

2
00:00:29,920 --> 00:00:34,780
Hello? We are here. We are
here. Let me mute myself.

3
00:00:36,270 --> 00:00:41,040
All right. All right guys. Hello world.

4
00:00:42,270 --> 00:00:46,650
Hello World Saroj is back
in business and ready to go.

5
00:00:48,690 --> 00:00:52,120
Hi Guys. All right. Hey everybody. Uh,

6
00:00:53,670 --> 00:00:58,470
hello. Hello. Lori is John
Francois Spencer. Sunny Jason,

7
00:00:58,480 --> 00:01:00,750
I know Bob,
don't go lock shower.

8
00:01:02,820 --> 00:01:04,890
The band was everybody.
Okay,

9
00:01:05,010 --> 00:01:10,010
so today we aren't going to
play with computer vision.

10
00:01:10,650 --> 00:01:15,600
I love computer vision. Computer
vision is one of my great joys in life,

11
00:01:15,630 --> 00:01:16,530
especially in college.

12
00:01:16,531 --> 00:01:20,790
I used to just like use open CV all the
time for side projects and we're going

13
00:01:20,791 --> 00:01:24,360
to use it today. We're going to
use open CV to take an image.

14
00:01:24,530 --> 00:01:27,840
It's going to be a 10 by 10 square I took,
it's going to be a grid,

15
00:01:28,020 --> 00:01:29,280
it's going to have obstacles in it.

16
00:01:29,460 --> 00:01:31,050
And what we're going to
do is we're going to look,

17
00:01:31,080 --> 00:01:35,160
we're going to iterate through all of
these squares and see which ones are

18
00:01:35,161 --> 00:01:38,820
obstacles and we're going to print those
obstacles out by reading in the image

19
00:01:38,821 --> 00:01:40,770
with computer vision and,

20
00:01:41,160 --> 00:01:45,870
and we're going to find the shortest
path from the starting image to the image

21
00:01:45,871 --> 00:01:48,920
that is matching it. Okay? And
I'm going to show you guys a,

22
00:01:49,050 --> 00:01:53,360
an image before we start a little
demos a after the Q and a. Uh,

23
00:01:53,430 --> 00:01:57,720
and that's gonna be awesome. But first
I'm going to do a five minute Q and a,

24
00:01:57,721 --> 00:02:02,520
like always a and then we are going to
get started with the code. All right,

25
00:02:02,580 --> 00:02:07,530
so five minute Q and a.
Here we go. And by the way,

26
00:02:07,531 --> 00:02:09,740
thanks guys for showing up during
finals week. I know it's a,

27
00:02:09,810 --> 00:02:10,860
I know it's a busy time.

28
00:02:10,861 --> 00:02:14,370
I'm just here to augment your learning
experience or right. Daniel's challenge.

29
00:02:14,371 --> 00:02:18,420
Yes. Daniel Shiffman and I
have been collect, I have
talked about collaborating.

30
00:02:18,630 --> 00:02:21,630
I'm going to make a game bod for one of
the games that he makes and it's going

31
00:02:21,631 --> 00:02:26,070
to be awesome. Will you do
videos on Watson services?
I actually do have a video.

32
00:02:26,071 --> 00:02:30,930
Um, it's called, uh, it's
called, uh, what's it called?

33
00:02:30,990 --> 00:02:35,610
Build an AI. Uh, no,

34
00:02:35,611 --> 00:02:39,060
it's called tone analysis and I use
Watson Idi. What's your target audience?

35
00:02:39,180 --> 00:02:43,860
I'm looking to target developers
who are between, you know,

36
00:02:43,890 --> 00:02:47,160
18 to, you know, 60 plus whatever.

37
00:02:47,790 --> 00:02:50,850
Ideally I want to get kids involved
as well. That would be awesome.

38
00:02:50,851 --> 00:02:53,430
That makes me really happy when I
have like 12, 13 year olds watching.

39
00:02:53,431 --> 00:02:56,300
So I want to,
so I want to expand to kids,

40
00:02:56,310 --> 00:02:59,830
but right now it's kind of like college
age kids and, and higher in high school.

41
00:03:00,310 --> 00:03:04,540
Uh, any experience in first
robotics? Yeah, I did. I helped out.

42
00:03:04,580 --> 00:03:06,970
I volunteered with a first robotics
competition in New York when I went to

43
00:03:06,971 --> 00:03:11,800
school at Columbia. Was awesome. Uh, how
did you learn all this AI? I studied,

44
00:03:12,490 --> 00:03:16,240
uh, sub reddit, the machine learning
separated Twitter feeds, uh,

45
00:03:16,241 --> 00:03:18,700
articles and just the Internet,
the Internet,

46
00:03:18,730 --> 00:03:22,870
and then just a collection of sources
over time you get better and better at it.

47
00:03:23,110 --> 00:03:25,090
Hey Surag where you cover
transfer learning later?

48
00:03:25,390 --> 00:03:27,580
That's a great question to kill.
I absolutely will.

49
00:03:27,581 --> 00:03:30,340
And I think the future of machine
learning is in transfer learning.

50
00:03:30,341 --> 00:03:34,330
We can't just create a Bot that just has
to learn everything from scratch every

51
00:03:34,331 --> 00:03:38,020
time. And with open Ai's
universe, uh, that's gonna be,

52
00:03:38,110 --> 00:03:39,610
that's gonna that's gonna happen faster.

53
00:03:41,020 --> 00:03:44,260
We're learning ml with are in university.
What do you think about that?

54
00:03:44,261 --> 00:03:48,490
I think you guys should switch to python
because our is not as compatible with a

55
00:03:48,491 --> 00:03:51,640
bunch of other non machine learning
libraries that you might want to integrate

56
00:03:51,641 --> 00:03:53,750
into. The apps that you're writing, uh,

57
00:03:53,950 --> 00:03:55,990
where you posted that you
are doing live broadcast.

58
00:03:56,020 --> 00:03:59,560
I'm trying to find a spot where I can
post that. Um, I haven't really found one,

59
00:03:59,561 --> 00:04:01,990
so it's just Wednesdays
at 10:00 AM I have,

60
00:04:02,080 --> 00:04:05,020
I've kind of not like wanting to like
officially say that because I don't want

61
00:04:05,021 --> 00:04:08,800
to commit to doing live every week.
But you know what,

62
00:04:08,801 --> 00:04:11,080
I just keep doing it and I love
you guys and I'll do it for you.

63
00:04:11,081 --> 00:04:15,580
So just I'm committing right now every
Wednesday at 10:00 AM is a live session.

64
00:04:15,870 --> 00:04:20,110
Uh, I might not be on for like New
Year's or Christmas or whatever. Um,

65
00:04:20,320 --> 00:04:22,600
not that I celebrate that, you
know, I do celebrate new years.

66
00:04:22,601 --> 00:04:24,820
This is my favorite holiday of the year
because this is a celebration of the

67
00:04:24,821 --> 00:04:28,420
future. Uh, but yeah, Wednesdays
at 10:00 AM or my life sessions.

68
00:04:29,530 --> 00:04:33,700
Hey Raj, which laptop config for deep
learning is Gtx 10 70. Good enough.

69
00:04:34,240 --> 00:04:37,930
Uh, yeah, any of the GTX series by
Nvidia is a good, it's a good bet.

70
00:04:38,590 --> 00:04:40,990
Would Python and Java be the
future of PR programming?

71
00:04:41,380 --> 00:04:45,250
Python is definitely a growing
very fast and in popularity.

72
00:04:45,550 --> 00:04:50,080
A Java kind of had its heyday and I feel
like it's getting less cool over time.

73
00:04:50,380 --> 00:04:53,740
Uh, and I, I also think go is, is
a language that is up and coming.

74
00:04:54,280 --> 00:04:55,930
What are your new Europe's plans?

75
00:04:55,931 --> 00:04:59,260
I am willing to throw the sickest
New Year's Eve party at my place.

76
00:04:59,470 --> 00:05:03,520
I've invited some youtube celebs,
uh, that I met in la. I invited some,

77
00:05:03,910 --> 00:05:06,640
oh my God. It's going to be
awesome. I love New Year's.

78
00:05:06,670 --> 00:05:10,690
It is a celebration of the
future. Future of Python, uh,

79
00:05:11,040 --> 00:05:15,530
future of python as a language. I mean I
think, I think we're going to have, um,

80
00:05:15,730 --> 00:05:19,060
more and more abstraction so things will
be easier to do in the future. Hasty.

81
00:05:19,070 --> 00:05:22,690
Raj, do you eat the wait, but
why blog? Yes, I love that
guy. He is a great writer.

82
00:05:22,691 --> 00:05:26,290
As someone who writes an essay, basically
from my videos, my scripts every week,

83
00:05:26,980 --> 00:05:31,060
that guy is a great writer. How do you
use PNP in Python? In machine learning?

84
00:05:32,320 --> 00:05:35,630
Watch my videos. Not Php though. Python
is not really a programming language.

85
00:05:35,631 --> 00:05:40,360
It's a scripting language. Guys,
don't confuse semantics. Okay.

86
00:05:40,420 --> 00:05:40,691
Okay,

87
00:05:40,691 --> 00:05:43,750
so I'm going to answer two more questions
and then we're going to get right into

88
00:05:43,751 --> 00:05:47,080
the code. All right. Which book do
you recommend for machine learning?

89
00:05:47,081 --> 00:05:51,520
So machine learning, a
probabilistic approach, um, is,

90
00:05:51,570 --> 00:05:54,970
is a great one. Which uni did
you go to? Columbia University.

91
00:05:56,350 --> 00:05:58,930
Saroj please. Hi Car tick. There you go.

92
00:06:01,030 --> 00:06:05,890
Okay. All right. One more.
How to build an AI girlfriend.

93
00:06:05,920 --> 00:06:10,720
Okay. So, oh my God. Okay. I've thought
about this quite a bit actually.

94
00:06:11,140 --> 00:06:14,950
Uh, so, uh, so,

95
00:06:15,440 --> 00:06:18,820
so that would be a generative model,
right? That would be a generative model,

96
00:06:19,390 --> 00:06:23,950
which a lot of a lot of work is going
into generative models right now. And um,

97
00:06:24,940 --> 00:06:27,400
it's one of those new exciting
fields in machine learning.

98
00:06:27,401 --> 00:06:30,040
I'd like not having to
discriminate between two classes,

99
00:06:30,041 --> 00:06:33,220
but to generate something from scratch
after having been trained on some data.

100
00:06:33,430 --> 00:06:33,881
So a building,

101
00:06:33,881 --> 00:06:36,760
an AI girlfriend would be a generative
model and you want to train it on a

102
00:06:36,761 --> 00:06:40,180
corpus of texts that are real
girlfriend would say. Uh,

103
00:06:40,181 --> 00:06:44,020
and then it would be a chat bot.
A girlfriend like chatbox. Okay.

104
00:06:44,570 --> 00:06:46,640
Do I work for Google of,
no, I don't work for Google.

105
00:06:46,910 --> 00:06:49,550
I'm meeting them like I think next week
or the week after that we're going to

106
00:06:49,551 --> 00:06:52,790
see what we can do, but I'm not
going to just straight up. Okay.

107
00:06:53,090 --> 00:06:55,910
I'm not committing to anything,
but I'm keeping the door open right now.

108
00:06:55,911 --> 00:06:58,970
I don't work for anybody.
My goal, oh, is this guy.

109
00:06:58,980 --> 00:07:01,740
My goal is to continue this channel.
Make it awesome for you guys. Okay.

110
00:07:01,741 --> 00:07:06,450
That's the goal. Okay, so
that's it for questions.

111
00:07:07,470 --> 00:07:10,320
What are your thoughts?
Okay, one more. What are your
thoughts on Vr and ar? Vr, I,

112
00:07:10,321 --> 00:07:12,750
the daydream is awesome.
I just got the daydream.

113
00:07:12,870 --> 00:07:15,990
I got the new Google Pixel
phone and it is awesome.

114
00:07:15,991 --> 00:07:19,740
The daydream is Vr is the future.
I can't wait and also Ar.

115
00:07:19,890 --> 00:07:22,110
I'm going to make a movie
sometime in the future,

116
00:07:22,111 --> 00:07:25,080
like an action movie starring
myself, so it's like, sorry to Raj.

117
00:07:25,290 --> 00:07:29,970
I'm going to have like Ar. It's going
to be awesome. Oh my God. Anyway. Okay,

118
00:07:30,000 --> 00:07:32,040
so, okay, here we go.
We're going to get started.

119
00:07:32,430 --> 00:07:36,870
What I'm going to do is screen share
and then we're going to get started.

120
00:07:36,871 --> 00:07:40,020
All right, let's get
started. Screen sharing time.

121
00:07:43,910 --> 00:07:44,743
Boom.

122
00:07:52,030 --> 00:07:54,460
Okay. So I'm going to, um,

123
00:07:56,360 --> 00:07:59,300
I'm going to demo what we're going
to do first this time. All right,

124
00:07:59,360 --> 00:08:01,130
so I'm going to demo what
we're going to do first.

125
00:08:01,460 --> 00:08:05,180
The first thing I'm going to do is say,
this is what it's gonna look like. Okay?

126
00:08:05,270 --> 00:08:08,690
It's been better than explaining. It's
better to just demo what's happening here.

127
00:08:08,720 --> 00:08:12,140
So I'm going to say, run this, run
the code of what it's going to do.

128
00:08:12,410 --> 00:08:14,990
So take a look at this. Do you
see the image? It is. We are,

129
00:08:15,380 --> 00:08:19,190
this is the image we have. It is a, it is
a great of squares. And what it is doing,

130
00:08:19,191 --> 00:08:22,670
it is, it is iterating through
every square in that grid.

131
00:08:23,060 --> 00:08:25,430
And once it's iterated through
every square in that grid,

132
00:08:25,550 --> 00:08:30,550
it's going to print out the
coordinates of where the ops,

133
00:08:31,460 --> 00:08:35,310
the obstacles are. Okay?
That's what it's gonna do a,

134
00:08:35,360 --> 00:08:38,600
and it's going to pan out and it's going
to look like this right here. Okay?

135
00:08:38,750 --> 00:08:42,470
It's going to print the occupied grids
and then the planned path and the plan

136
00:08:42,471 --> 00:08:45,620
path is going to be from
this initial image, uh,

137
00:08:45,650 --> 00:08:47,870
this blue square.

138
00:08:48,080 --> 00:08:52,310
And it's going to find the closest
image in similarity, okay. Uh,

139
00:08:52,420 --> 00:08:54,920
and which is going to be
like this square right here.

140
00:08:55,200 --> 00:08:59,400
And then it points to show the path
between both of them. Okay. In terms of,

141
00:08:59,820 --> 00:09:03,120
uh, x and y coordinates. So that's
what we're going to do. Okay.

142
00:09:03,360 --> 00:09:07,530
And we're going to use computer vision
to do that. All right? So here we go. Um,

143
00:09:08,580 --> 00:09:10,530
by the way,
it's a tutorial is on Openai universe.

144
00:09:10,560 --> 00:09:12,660
I'm going to talk with them
about creating a video series,

145
00:09:12,661 --> 00:09:16,920
so we'll see how that works. Okay.
And by the way, guys, I want to,

146
00:09:16,921 --> 00:09:20,670
I totally want to interview Ilan, so
like, keep that on the DL, but like,

147
00:09:20,940 --> 00:09:24,060
that's the goal for that interview series.
Like, I'm gonna work my way up to Ilan,

148
00:09:24,061 --> 00:09:25,800
so, uh, we'll, we'll get there. Okay.

149
00:09:25,801 --> 00:09:29,100
So I'm gonna make this bigger so we
can all read it. Okay? So here we go.

150
00:09:29,730 --> 00:09:34,620
Here we go. Okay. So we're gonna,
we're gonna build this. All right?

151
00:09:34,770 --> 00:09:37,410
And it's going to use computer vision
to read this, this grid of squares,

152
00:09:37,411 --> 00:09:41,370
and it's going to be awesome. Okay? So
here we go. Uh, you can't see my cursor,

153
00:09:41,371 --> 00:09:42,120
but that's fine.

154
00:09:42,120 --> 00:09:44,880
So the first thing we're going to
do is we're going to import open TV.

155
00:09:45,210 --> 00:09:48,420
Open CV is the library. Yes. Elan Musk.

156
00:09:48,690 --> 00:09:52,290
Open CV is the library for,
um,

157
00:09:53,670 --> 00:09:57,990
uh, computer vision. Okay. Image
segmentation, uh, finding, uh,

158
00:09:57,991 --> 00:10:02,670
objects in images. It is the Goto
library for computer vision. Okay.

159
00:10:02,671 --> 00:10:07,671
The only problem with open CV is
that it is hard as app to install.

160
00:10:08,070 --> 00:10:11,430
Okay. I would recommend
using Anaconda to install CV.

161
00:10:11,610 --> 00:10:15,600
So it'd be like Conda install CV.
Okay. That's how I do it. Uh, but yeah,

162
00:10:15,630 --> 00:10:18,600
open CV is the computer vision library.
Okay.

163
00:10:18,601 --> 00:10:20,430
So that's what we're going
to use to read our images.

164
00:10:20,670 --> 00:10:24,350
The next thing we're going
to import his num Pi, um,

165
00:10:25,280 --> 00:10:28,020
come high is our scientific
computing library. Okay.

166
00:10:28,021 --> 00:10:30,720
And we're going to use it to perform
some, some matrix math. Okay.

167
00:10:30,721 --> 00:10:35,040
Because images are just matrices, right?
There are a collection of one can zeros,

168
00:10:35,220 --> 00:10:38,760
an image can be broken down to
two bites. Right. Fits. Okay.

169
00:10:38,761 --> 00:10:41,410
So the next one is important is
important time, which is going to make,

170
00:10:41,670 --> 00:10:45,240
it's going to help us measure, uh, how uh,

171
00:10:45,720 --> 00:10:50,670
how long we are going to run this, this
program for. Okay. So the next import,

172
00:10:50,671 --> 00:10:52,260
we're going to inform the next library.

173
00:10:52,261 --> 00:10:54,420
We're going to import this
called psychic image. Okay.

174
00:10:54,421 --> 00:10:57,260
And let me explain why
we are importing this.

175
00:10:57,690 --> 00:11:02,460
So I'm going to import a specific
sub module from psychic image.

176
00:11:02,970 --> 00:11:04,810
Okay.
It is called s.

177
00:11:04,820 --> 00:11:09,820
S I am now what is SSI him in essence
I am is the mean structural similarity

178
00:11:12,000 --> 00:11:15,390
index. Okay. Between two images.
So if we have two images,

179
00:11:15,600 --> 00:11:20,220
we need a way of measuring how similar
they are. Okay. And this meet the meet,

180
00:11:20,221 --> 00:11:24,360
the structural similarity index is a way
of measuring how similar to images are.

181
00:11:24,600 --> 00:11:27,360
So we take two images and we
break them down into matrices.

182
00:11:27,660 --> 00:11:31,290
We can then see how similar they are
by counting the ones and Zeros and the

183
00:11:31,291 --> 00:11:32,400
positions of each of them.

184
00:11:32,610 --> 00:11:37,530
And then having some kind of rough score
of how similar these two matrices are.

185
00:11:37,860 --> 00:11:41,010
But we're okay. So, so that's what
we're going to do with that. Um,

186
00:11:41,580 --> 00:11:43,120
the next thing we're going to import is a,

187
00:11:43,121 --> 00:11:46,470
is a helper class called AA starts search.
Now

188
00:11:48,140 --> 00:11:53,120
a star and search is probably the most
popular pathfinding out rhythm out.

189
00:11:53,380 --> 00:11:56,200
Okay. A star search is a heuristic. It is,

190
00:11:56,530 --> 00:12:00,970
it is an algorithm that works to find
the shortest path between two possible

191
00:12:00,971 --> 00:12:03,460
points. That's what a
star search does. Okay.

192
00:12:03,550 --> 00:12:08,550
It's used in games like world of Warcraft
three to find the shortest possible

193
00:12:08,891 --> 00:12:09,670
path.

194
00:12:09,670 --> 00:12:14,670
So what we do is we search them on
all the possible paths to a solutions.

195
00:12:15,010 --> 00:12:15,610
Okay.

196
00:12:15,610 --> 00:12:19,210
And then we look for the one
that encouraged the smallest
cost that is the least

197
00:12:19,211 --> 00:12:22,240
distance travel the shortest time.
And among these paths,

198
00:12:22,270 --> 00:12:25,990
it first considers the ones that
appeared to lead the most quickly to the

199
00:12:25,991 --> 00:12:28,720
solution. So it's a heuristic.
It kind of tries to,

200
00:12:29,350 --> 00:12:33,130
it tries to have an educated guess
on of all the possible paths,

201
00:12:33,310 --> 00:12:37,720
which is the one that is most likely
to read to the exact solution.

202
00:12:38,120 --> 00:12:43,000
Uh, vein. Hah bind happened
is exactly right. It's Dykstra
as what they direction.

203
00:12:43,310 --> 00:12:47,050
That's, that is a great description.
If you know about Dykstra is algorithm.

204
00:12:47,210 --> 00:12:51,400
It's like dinosaurs but with direction.
Okay? So that's what a star is.

205
00:12:51,430 --> 00:12:53,980
I'm going to explain more about
star later on when we implement it,

206
00:12:54,160 --> 00:12:56,290
but let's get to our next and last import,

207
00:12:56,410 --> 00:12:59,680
which is a helper class called traversal
and that's just like a five line of

208
00:12:59,681 --> 00:13:00,371
code help.

209
00:13:00,371 --> 00:13:03,640
Reclass it's going to help us reverse
the image from left to right for image

210
00:13:03,641 --> 00:13:06,680
processing. Okay. Those
are our helper libraries.

211
00:13:06,730 --> 00:13:09,680
Now we can get started and
start writing our code.

212
00:13:10,060 --> 00:13:12,670
I'm going to get started by
writing out the main code. Okay,

213
00:13:13,120 --> 00:13:16,570
and if we could take one creditor, what
does that perimeter going to be? Well,

214
00:13:16,590 --> 00:13:20,140
it could be. It could be the image. Now
let me show you guys the image. Okay,

215
00:13:20,380 --> 00:13:22,200
let me show you guys the image.
Um,

216
00:13:23,200 --> 00:13:28,200
I'm going to go into test images and
I'm going to open one of those tests.

217
00:13:29,351 --> 00:13:32,590
Images. All right? So we
already have an image.

218
00:13:32,591 --> 00:13:34,450
We're not going to construct
this image from scratch.

219
00:13:34,720 --> 00:13:38,710
What our program is going to do is it's
going to read this image using computer

220
00:13:38,711 --> 00:13:39,520
vision.

221
00:13:39,520 --> 00:13:44,380
It's going to read that image and it's
going to detect where those obstacles are.

222
00:13:44,620 --> 00:13:46,570
It's going through fines.
Uh,

223
00:13:47,050 --> 00:13:50,230
it's going to find the shortest
path between two of those objects.

224
00:13:50,500 --> 00:13:54,090
And it's going to list what all
of those grids, what it, all,

225
00:13:54,220 --> 00:13:58,480
all the squares that have objects in them.
Okay. So that's what that looks like.

226
00:13:59,110 --> 00:14:03,510
Okay. So, so, um, so anyway, okay,

227
00:14:03,511 --> 00:14:07,350
so the next thing we want to
do is start writing our code.

228
00:14:07,500 --> 00:14:08,640
So to start writing our code,

229
00:14:08,641 --> 00:14:12,160
we're going to start off by
creating two arrays to arrays.

230
00:14:12,480 --> 00:14:16,170
The first array is going to be the occupy,
the occupied the grids.

231
00:14:16,350 --> 00:14:20,760
So we want to create an array so we can
store which grids are being occupied in

232
00:14:20,761 --> 00:14:25,030
memory. Um, all right.

233
00:14:25,031 --> 00:14:27,520
And I'm going to share the image and I'm
going to share that code at the end of

234
00:14:27,521 --> 00:14:32,260
this video. Okay. So, so the
plant path is going to be,

235
00:14:32,470 --> 00:14:36,430
and the occupied grids occupied
grid's not grinds, grids.

236
00:14:37,120 --> 00:14:41,110
Language is important guys.
Okay. All right. So, um,

237
00:14:41,290 --> 00:14:45,100
so those are our two, uh, raise and
we're going to store data in them later.

238
00:14:45,310 --> 00:14:49,210
The next step is to low the image.
Okay. Now we're going to load the image.

239
00:14:49,510 --> 00:14:51,410
So we're going to say image
equals and we're going to use,

240
00:14:51,411 --> 00:14:54,350
now we're going to use open CV
and what open CV is going to do.

241
00:14:54,351 --> 00:14:57,200
Is this going to read an image?
What's the, what's the image?

242
00:14:57,470 --> 00:15:01,460
While we just pass it in as a
parameter, it's that file name. Okay.

243
00:15:02,420 --> 00:15:07,010
Well, so, and in terms of
machine learning, is this
using machine learning? Uh,

244
00:15:07,100 --> 00:15:08,330
the answer is yes.

245
00:15:08,330 --> 00:15:11,810
Technically we are not ourselves
implementing a learning algorithm,

246
00:15:12,140 --> 00:15:16,550
but open CV has used machine
learning to train, uh, the,

247
00:15:17,300 --> 00:15:18,440
the classes that it's had.

248
00:15:18,560 --> 00:15:23,420
So it's indirectly using machine learning
from a more abstract layer. Okay. So,

249
00:15:23,480 --> 00:15:27,620
and I think it's important to
do that sometimes. Okay. So, um,

250
00:15:27,920 --> 00:15:29,630
so we've loaded our image into memory.

251
00:15:29,631 --> 00:15:33,140
Now we've taken that image that I just
showed you guys and we've loaded it into

252
00:15:33,141 --> 00:15:37,280
memory. It is in Ram. It is
in memory. Okay. It is just
sitting there temporarily.

253
00:15:37,460 --> 00:15:39,080
And now we're going to modify it.
Okay?

254
00:15:39,320 --> 00:15:43,160
So we've loaded our image and we,
oh,

255
00:15:43,161 --> 00:15:48,161
we also want to define what the
size of that image is going to be.

256
00:15:49,130 --> 00:15:53,900
Okay? It's going to be 60 by 60 pixels.
That's the size of each of those squares.

257
00:15:54,390 --> 00:15:56,030
All right?
Um,

258
00:15:57,050 --> 00:15:59,690
now we want to create
an array of obstacles.

259
00:15:59,691 --> 00:16:04,160
So we're going to list those obstacles.
Um, and we weren't starting point,

260
00:16:04,610 --> 00:16:09,000
okay? So the starting point is going to
be we index, which is one by one. That's,

261
00:16:09,001 --> 00:16:11,300
that's, that's where our
first, that's where our first,

262
00:16:11,420 --> 00:16:14,040
we're going to hard code that.
And that is where our first, uh,

263
00:16:14,310 --> 00:16:18,170
object is going to be. It's going to be at
the one one position. And by the way, x,

264
00:16:18,171 --> 00:16:21,980
y coordinates or how we're going to view
this entire grade and, okay. So yeah.

265
00:16:24,490 --> 00:16:28,500
All right. So, so there's that. Um, so
now we're going to create a blank image.

266
00:16:28,740 --> 00:16:33,570
We're going to create a blank image and
it's only can be initialized as a matrix

267
00:16:33,980 --> 00:16:37,850
of, of Zeros. Okay? So
we're gonna say blank image,

268
00:16:38,390 --> 00:16:42,110
uh, is going to get, and we're going to
use it now, we're going to give num Pi,

269
00:16:42,140 --> 00:16:46,970
it's going to create a matrix of zero.
Got his length of 60 by 60. Okay.

270
00:16:47,140 --> 00:16:52,070
Uh, and it's going to be, the other type
is going to be a, I'm going to jerk. Okay?

271
00:16:52,071 --> 00:16:56,350
So we have, we hit the default.
I find that, uh, and let's see,

272
00:16:56,351 --> 00:17:00,490
I need one more, uh, thingy
here. There we go. Boom.

273
00:17:00,760 --> 00:17:04,990
So that's that blank image. And we're
going to, uh, now we're going to,

274
00:17:05,910 --> 00:17:08,890
uh, we've got a blank image and
now we want to create an array.

275
00:17:09,010 --> 00:17:12,280
We're going to create an array of,
uh,

276
00:17:13,710 --> 00:17:14,510
okay,

277
00:17:14,510 --> 00:17:18,590
cool. We're going to create an array
of a hundred blank images. Okay? Why?

278
00:17:18,591 --> 00:17:22,580
Because we have a 10 by 10 square and we
want to initialize blank images that we

279
00:17:22,581 --> 00:17:24,860
can then fill in, right?
So it'd be, this is,

280
00:17:24,890 --> 00:17:27,170
this is going to serve as a
starting point for us. Okay?

281
00:17:27,171 --> 00:17:29,990
So we're going to say list images,
which is going to be an array. Uh,

282
00:17:30,080 --> 00:17:34,460
and we're going to say blank image,
uh,

283
00:17:34,480 --> 00:17:38,780
for I in x range 10. Uh, so,

284
00:17:39,020 --> 00:17:41,320
so what are we doing here?
What we're doing here is,

285
00:17:41,330 --> 00:17:42,500
let me frame this in a second.

286
00:17:44,210 --> 00:17:46,730
What we're doing here is we are,

287
00:17:50,880 --> 00:17:55,610
uh, a list of images, okay? We're
putting a list of colleges and it's an,

288
00:17:55,930 --> 00:18:00,050
it's a, it's a, it's a list of blank
images, okay? And so now we want,

289
00:18:00,230 --> 00:18:03,780
we want an array to, uh, represent,

290
00:18:04,940 --> 00:18:09,440
um, range. Uh,

291
00:18:09,590 --> 00:18:14,450
let's see. Okay, so in range 10, so
now we're going to create a maze,

292
00:18:14,480 --> 00:18:18,080
the maze itself. Okay? So, so, uh,

293
00:18:18,290 --> 00:18:20,870
now we were going to,
um,

294
00:18:21,420 --> 00:18:26,270
or I mean x range.
Okay?

295
00:18:26,420 --> 00:18:31,410
So now we have our main, so the maze is,
it's an empty matrix to represent, uh,

296
00:18:31,520 --> 00:18:36,300
the grids of individually
cropped images. Okay? So, um,

297
00:18:38,640 --> 00:18:41,430
we have that now we're going to be
there, traversal, traversal time,

298
00:18:41,590 --> 00:18:44,820
traversal time. Okay. So let's go
back. Okay, let's go down here.

299
00:18:44,970 --> 00:18:45,803
So now we're going to,

300
00:18:45,840 --> 00:18:48,570
now we're going to actually start to
traverse through our interviews. Okay.

301
00:18:48,780 --> 00:18:53,490
So for, uh, for every,
so for each coordinate,

302
00:18:53,491 --> 00:18:56,550
the x, y coordinate
inside of the window, um,

303
00:19:00,280 --> 00:19:04,840
for I n right. Thank you for that. Um,

304
00:19:06,000 --> 00:19:10,660
for x, y window in the reversal.
Okay, that's sliding window.

305
00:19:10,960 --> 00:19:13,690
And let me, let me explain this
after I type in this is this,

306
00:19:13,710 --> 00:19:14,890
this line is going to be a little long.

307
00:19:15,100 --> 00:19:18,640
So we're going to say image
step size is going to be 60,

308
00:19:18,910 --> 00:19:23,910
and then the window size is going to be
window size is going to be the width and

309
00:19:25,751 --> 00:19:30,240
the height, the width and the
height. And we've defined that.

310
00:19:30,241 --> 00:19:34,000
And then they're not going to be a bat,

311
00:19:34,120 --> 00:19:37,090
it's going to be not curly bracket,
it's going to be parentheses,

312
00:19:37,091 --> 00:19:41,300
of course it's going to be parentheses.
We love our parentheses. Um,

313
00:19:42,190 --> 00:19:43,540
okay,
so what is this doing here?

314
00:19:43,630 --> 00:19:46,570
So what we're doing is we are traversing
through each square and we are using

315
00:19:46,571 --> 00:19:51,571
our traversal helper class to the sliding
window is the one method that it has

316
00:19:51,820 --> 00:19:54,960
that it just literally, it's
slight, it's, it starts from the,

317
00:19:55,150 --> 00:19:58,900
the left and it slide through a
single grid and it reads it. Okay.

318
00:19:59,080 --> 00:20:02,860
And it reads it and it, it, it takes that
data and it, and it puts it into memory.

319
00:20:03,100 --> 00:20:05,830
Okay.
So what we do,

320
00:20:05,860 --> 00:20:09,070
what we need though is what we're
trying to do is we're trying to first,

321
00:20:09,340 --> 00:20:13,880
this is what we're trying to do. We're
trying to detect the squares that are uh,

322
00:20:14,480 --> 00:20:16,430
uh, that are, uh,

323
00:20:16,810 --> 00:20:21,810
that have something in them that have a
detect non empty squares because we're

324
00:20:22,511 --> 00:20:25,300
going to print those in a second.
That's what we're doing right now. So,

325
00:20:25,360 --> 00:20:28,780
but so we need to start off by saying,
wait a second. If the window doesn't

326
00:20:30,850 --> 00:20:35,010
meet our desired window size,
then ignore it. Ignore it.

327
00:20:35,080 --> 00:20:38,410
Because we are looking for a
specific type of image. Okay.

328
00:20:38,530 --> 00:20:41,590
So we're going to say if window dot shake,

329
00:20:43,510 --> 00:20:44,790
uh,
me,

330
00:20:44,830 --> 00:20:48,830
when doe size or windowed shape,

331
00:20:50,540 --> 00:20:51,100
yeah.

332
00:20:51,100 --> 00:20:51,910
Oh,
sorry.

333
00:20:51,910 --> 00:20:56,910
Is not equal to windows height or window
dot shade is not equal to the windows

334
00:20:58,001 --> 00:21:01,150
with then we're going to continue.

335
00:21:02,210 --> 00:21:04,750
But that means we're not going to
run this code window, that Shit.

336
00:21:04,860 --> 00:21:07,570
So that means it's not the size that
we're looking for. So that's just a check.

337
00:21:07,780 --> 00:21:10,450
Okay. That's just a check. We're
just making sure like, okay,

338
00:21:10,451 --> 00:21:14,320
this is the size we're looking for. But
if we have that, oh, let me, Oh, right.

339
00:21:14,321 --> 00:21:18,910
So we need to whine too.
We got to [inaudible] everybody.

340
00:21:18,911 --> 00:21:22,330
This is python and no
joke. Ain't no joke. Okay.

341
00:21:22,331 --> 00:21:27,331
So now we're going to print the
index images are iterator and uh,

342
00:21:28,780 --> 00:21:32,770
okay, so now we're going to say, take that
image and copy it. What does that mean?

343
00:21:33,070 --> 00:21:36,040
So now, so we've, we performed our check,

344
00:21:38,350 --> 00:21:43,130
we performed our check and
we're going to say, uh, that

345
00:21:44,910 --> 00:21:47,410
we perform a check and we're
going to say, okay, if we,

346
00:21:47,411 --> 00:21:50,120
we've got a square and it's not,
it's, it's, it's, it's, it's,

347
00:21:50,400 --> 00:21:53,520
it's an actual image with a, with
something in it. So we want to,

348
00:21:53,700 --> 00:21:56,760
we want to create a clone of it. And so
that's where the copy function comes in.

349
00:21:57,000 --> 00:21:58,530
The copy function.
We'll take that image,

350
00:21:58,680 --> 00:22:00,510
it's going to put it into
this variable called clone.

351
00:22:00,900 --> 00:22:04,950
And so now we can format
the square or open CV.

352
00:22:04,951 --> 00:22:07,590
So now that we have that image,
we want to format it properly.

353
00:22:07,620 --> 00:22:11,010
So open CV can read it. Okay. So
we're going to say we're going to,

354
00:22:11,130 --> 00:22:14,670
we're going to use a rectangle functions.
Could you find an open CV rectangle?

355
00:22:14,880 --> 00:22:19,380
And what is it? Square. It is a, it is
a type of rectangle. Okay. So line 24,

356
00:22:19,650 --> 00:22:24,060
someone said that there is something
happening here. Uh, they said that,

357
00:22:24,990 --> 00:22:26,990
um,
boom,

358
00:22:27,090 --> 00:22:31,740
I think that's what it was and
then I remove that and right.

359
00:22:31,770 --> 00:22:34,880
Okay, cool. Okay, so, so, uh,

360
00:22:38,070 --> 00:22:38,760
so now,
uh,

361
00:22:38,760 --> 00:22:41,250
we have our CB rectangle and we're going
to take that clone image that we just

362
00:22:41,251 --> 00:22:45,810
created. We're using the copy
function and we're going to say for x,

363
00:22:45,811 --> 00:22:50,400
y values. Um, and uh, so, so,

364
00:22:50,401 --> 00:22:54,570
so we're going to, we've created our
rectangle and we want it to be as Max.

365
00:22:54,571 --> 00:22:57,810
It's going to be whatever the
length is of the window. Uh,

366
00:22:59,370 --> 00:23:03,330
and then we're going to say
why plugs windows height.

367
00:23:03,840 --> 00:23:08,730
And then lastly, we want to get fined,
beaten, tired sizes. This like two 50,

368
00:23:08,731 --> 00:23:13,110
five zero. Uh, and then, uh, okay,

369
00:23:13,260 --> 00:23:17,510
so now we've got a rectangle. And so
now we can, we can crop that image,

370
00:23:18,810 --> 00:23:22,470
crop, that image, and we can
say, well, we, in order to
prop that image, and this is,

371
00:23:22,471 --> 00:23:25,140
this is kind of where like a little bit,
I'm hoping to be magic comes into play.

372
00:23:25,440 --> 00:23:29,910
We want to say, okay, so for that
windows with, and for that height,

373
00:23:30,270 --> 00:23:34,830
we want to,
we want to create a crop.

374
00:23:34,831 --> 00:23:39,640
So it's just, uh, um,

375
00:23:39,670 --> 00:23:42,130
so it's just a,

376
00:23:45,100 --> 00:23:45,651
let me see.

377
00:23:45,651 --> 00:23:49,700
So someone said to change the last x
range on line 24 to from square brackets,

378
00:23:49,880 --> 00:23:54,620
two parentheses, the last x
range, uh, in the Oh, Gotcha,

379
00:23:54,621 --> 00:23:59,300
Gotcha. Gotcha. Gotcha. Yes. Good
call. Thank you. Good call. Boom.

380
00:23:59,870 --> 00:24:03,230
There we go. So, uh, where was
I? So cropping images, right?

381
00:24:03,231 --> 00:24:07,780
That's so very important stuff. Cropping
images. So now we want to say, um,

382
00:24:10,370 --> 00:24:12,410
that's when high,
so the crop is not

383
00:24:15,930 --> 00:24:18,090
right. So, uh, I'm going to
define how we're going to,

384
00:24:18,240 --> 00:24:20,360
I'm going to talk about how we're
going to, you know, get that name.

385
00:24:20,430 --> 00:24:23,420
So once we cropped it, uh, uh, we, we,

386
00:24:23,450 --> 00:24:25,920
we now want to add it to the
array of images. Okay. So,

387
00:24:25,921 --> 00:24:29,070
because this is an image
that has something in it,
that's all we're trying to,

388
00:24:29,190 --> 00:24:31,500
that's all we're trying to
do is we're trying to, uh,

389
00:24:31,890 --> 00:24:35,970
create an image that has
something in it. Okay. So, um,

390
00:24:37,680 --> 00:24:41,490
we're saying the index of one.
Uh,

391
00:24:42,510 --> 00:24:47,340
so we're going to, so the list of images
that would, so it's an array and we've,

392
00:24:47,820 --> 00:24:50,280
we've created that and we want to,
what do we want to get it?

393
00:24:50,310 --> 00:24:53,100
We want to give it the crop image that
we just created and how do we give it

394
00:24:53,101 --> 00:24:57,360
back using a open TV's copy function.
Okay.

395
00:24:57,690 --> 00:25:01,890
So we've added to that list of images
and now we want to print the occupied

396
00:25:01,891 --> 00:25:06,850
grades so we can print the occupied grids
now. Okay. So how do we do that? Um,

397
00:25:10,710 --> 00:25:15,600
should there be a common between text?
Why? Yes. Good call. Thank you, nick.

398
00:25:17,100 --> 00:25:19,650
It should be a comma there. Okay. So now
we're going to print the occupied grids.

399
00:25:19,920 --> 00:25:23,880
So in order to do that, we want to
get the average color. So we need to,

400
00:25:26,760 --> 00:25:30,150
we need to, um, get that average color.

401
00:25:30,210 --> 00:25:32,430
So the color is something
we're going to use.

402
00:25:32,540 --> 00:25:36,930
We're going to create using open CV.
So we're going to say the color per row,

403
00:25:36,931 --> 00:25:39,390
that's how we're going to start off.
We want the average color per row.

404
00:25:39,600 --> 00:25:43,740
How do we get that? Well, num Pi has
a great function call average. Okay.

405
00:25:43,741 --> 00:25:47,430
And how do we get the average or the
average is basically taking that image,

406
00:25:47,460 --> 00:25:50,910
our crop image that we just,
we just got and uh,

407
00:25:52,500 --> 00:25:56,920
belong to zero access to get that,
get that average color. Okay. Uh,

408
00:25:57,030 --> 00:25:59,520
and so that's the average dollar per row.

409
00:25:59,610 --> 00:26:04,020
Now I want to get the average color
for art specific square. Okay. Um,

410
00:26:05,790 --> 00:26:06,990
so NP dot average.

411
00:26:07,540 --> 00:26:10,830
So we're going to take the average
dollar per ro and from that row,

412
00:26:10,831 --> 00:26:12,450
from that row, we, we,

413
00:26:12,540 --> 00:26:15,840
we just want to be average
of what we've already taken,

414
00:26:15,841 --> 00:26:19,890
which is going to give us the average
color of the square. We gone. Okay. Um,

415
00:26:20,010 --> 00:26:23,100
and so once we have that,
finally we want to,

416
00:26:24,200 --> 00:26:28,810
we're going to convert that to an
integer, integer value. We were,

417
00:26:28,920 --> 00:26:31,870
why are we doing that? Because we
need to format it properly for, for,

418
00:26:31,900 --> 00:26:35,760
for hoping TV to read it. And the best
way to do that is to have it be, um,

419
00:26:38,310 --> 00:26:42,270
if you mic, I think some, I think it was
make who said that or somebody? No. Geo.

420
00:26:42,271 --> 00:26:43,750
Geo. Thank you. Um,

421
00:26:44,820 --> 00:26:49,800
so now we are going to convert it
to an int uh, you eight and then,

422
00:26:50,130 --> 00:26:51,870
uh, and we average color. Okay.

423
00:26:51,871 --> 00:26:55,500
So we have our average color of
whatever square we're on right now. Um,

424
00:26:56,190 --> 00:27:00,870
and so now what we can do is we can,

425
00:27:00,871 --> 00:27:04,230
what's the next step? What is the
next step? Our next step is to

426
00:27:06,720 --> 00:27:09,780
iterate through the color matrix.
Okay.

427
00:27:10,680 --> 00:27:13,590
We're going to iterate through
the color matrix so we have so

428
00:27:15,580 --> 00:27:20,470
or iterate through the color,
makes it iterate through the color matrix.

429
00:27:21,030 --> 00:27:22,210
Um,
and

430
00:27:24,770 --> 00:27:27,510
so what we're gonna do is we're going to
hit or anything in color matrix so that

431
00:27:27,511 --> 00:27:31,890
we can, uh, we can, we
can add it to our, to our,

432
00:27:32,160 --> 00:27:36,660
to our array. Okay. Um,
and P. Dot. Average.

433
00:27:37,510 --> 00:27:42,100
So someone said something
about, uh, right.

434
00:27:42,150 --> 00:27:45,540
So that is actually a
parentheses. Thank you. Okay.

435
00:27:45,541 --> 00:27:49,680
So if any, uh, so okay.

436
00:27:51,040 --> 00:27:51,940
So what are we doing here?

437
00:27:55,030 --> 00:27:57,370
We are going to say so if any.

438
00:27:59,610 --> 00:28:02,920
So if the color is less than 244 hi.

439
00:28:03,070 --> 00:28:07,240
So let me explain why I'm using two
40 as an index year. In average,

440
00:28:08,320 --> 00:28:11,190
average color. Uh, uh, uh,

441
00:28:12,920 --> 00:28:16,510
well what we're saying here is a
check if it's not majority whites,

442
00:28:16,720 --> 00:28:20,980
if it's not majority whites, then
we want to add it to our Ho. Hey,

443
00:28:21,100 --> 00:28:24,670
something is here, uh, array.
Okay. So that's, that's,

444
00:28:24,790 --> 00:28:26,560
so to answer somebody's
question from up there,

445
00:28:26,650 --> 00:28:29,800
how do we know like images or like all
different types of shapes and colors and

446
00:28:29,801 --> 00:28:33,220
sizes? How do we know like which,
what type, what types of use? Well,

447
00:28:33,221 --> 00:28:36,970
this is how we just say is the image
majority white or not in two 40?

448
00:28:36,971 --> 00:28:41,820
Kind of defines that threshold.
Okay. Hazy uppercase first,

449
00:28:41,821 --> 00:28:46,630
later 38. Uh, thank you. Okay. Okay. So
that's our, how are we going to do that?

450
00:28:46,631 --> 00:28:48,190
And so we're gonna say, okay, so, so Mays,

451
00:28:49,790 --> 00:28:52,550
this is not the bond for the Ashford
game that is coming up soon. Uh,

452
00:28:53,030 --> 00:28:57,790
right now this is, uh, to use
computer vision to detect images. Uh,

453
00:28:58,910 --> 00:28:59,870
yeah.
Hold on.

454
00:29:00,230 --> 00:29:05,230
So what we're going to do here is
when I say for a maze index one,

455
00:29:06,140 --> 00:29:10,460
uh,
one minus one,

456
00:29:11,180 --> 00:29:11,990
uh,

457
00:29:11,990 --> 00:29:16,430
and then index zero minus one.

458
00:29:17,090 --> 00:29:21,890
Okay? Uh, so I don't need that equals one.

459
00:29:22,090 --> 00:29:26,690
And so if it's not, if not majority white.
Okay. So if it's not majority white,

460
00:29:26,691 --> 00:29:30,440
we're going to,
we're going to add it to our maze and then

461
00:29:32,070 --> 00:29:35,280
we're going to say let's,
um,

462
00:29:35,340 --> 00:29:40,140
added four occupied Brinton array. So
mark reads on a pen, the pen function,

463
00:29:40,141 --> 00:29:44,410
we'll add it to our, uh, we're doing, uh,

464
00:29:44,440 --> 00:29:49,160
that is true. Jordan occupied
grades. Dot append. And so well,

465
00:29:49,330 --> 00:29:51,510
how are we going to add it? What we're
going to have, it has a two pole.

466
00:29:51,700 --> 00:29:56,410
What does it, pupil pupil is a, it's a,
it's not a double at the pupil has as,

467
00:29:56,411 --> 00:30:01,060
as three values in it. Okay. It's
like a triplet and music. Wow.

468
00:30:01,061 --> 00:30:04,690
I just related music, the
programming. That's awesome.
Okay. So to build an index,

469
00:30:04,960 --> 00:30:07,610
so these are the perimeter occupied,
um,

470
00:30:08,850 --> 00:30:12,970
or iterating through the
color matrix. Okay. So now we
want it. So now we've added,

471
00:30:13,030 --> 00:30:17,410
uh, uh, the, the objects. Okay.

472
00:30:17,411 --> 00:30:20,110
It's like the blue squares and
the red triangles and whatever.

473
00:30:20,260 --> 00:30:23,410
Now we want to add the, uh, let
me show the image one more time.

474
00:30:23,800 --> 00:30:27,100
Let me show the image. Okay,
so we've added all of these.
We've added all of these.

475
00:30:27,110 --> 00:30:30,370
We'll see that we've added all of those
that are not black and they're not white.

476
00:30:30,550 --> 00:30:33,130
They're just like red and blue and green.
That's what we've added to our rate.

477
00:30:33,430 --> 00:30:37,180
But now what we want to add are the
images that are all black, okay?

478
00:30:37,181 --> 00:30:38,650
And so in that image,
it doesn't show it,

479
00:30:38,651 --> 00:30:43,651
but there are images that are black
and we want to add those to our,

480
00:30:45,570 --> 00:30:49,230
uh, we're going to add
those to our, uh, array. So,

481
00:30:49,231 --> 00:30:50,560
but basically we're going
to do the same thing.

482
00:30:50,680 --> 00:30:55,180
And this time the threshold is going to
be 20, because that defines black, okay?

483
00:30:55,300 --> 00:30:59,500
Uh, in, in hexadecimal and
text codes for colors, okay?

484
00:30:59,860 --> 00:31:00,693
So

485
00:31:01,980 --> 00:31:06,640
we're going gonna take our obstacles
array and we're going to, uh,

486
00:31:08,430 --> 00:31:12,670
we're going to append the tuple index,

487
00:31:13,270 --> 00:31:15,730
okay? Boom, boom, boom, boom. And

488
00:31:17,960 --> 00:31:22,220
so we've done that.
And so now what do we want to do?

489
00:31:22,490 --> 00:31:26,040
Now what we want to do is say,
uh,

490
00:31:26,660 --> 00:31:29,600
a gunner we've upended that have.

491
00:31:29,601 --> 00:31:34,370
So the next step is to what is
the next step here? It's like,

492
00:31:34,400 --> 00:31:35,780
so we've added that.

493
00:31:35,840 --> 00:31:40,780
We want to make sure that
our image is a two bowl. Uh,

494
00:31:40,810 --> 00:31:45,440
we've added that today. A list. Now what,
what, what can we do? Okay, I've got it.

495
00:31:45,470 --> 00:31:49,820
Okay, now we can actually
show this iteration. We can
actually print it. We've,

496
00:31:49,821 --> 00:31:52,930
we've, we've done what we needed
to do. And in order to do that, uh,

497
00:31:53,150 --> 00:31:56,900
we're going to say image show
and the window, right? So then,

498
00:31:57,090 --> 00:32:01,090
so this is open TV, his way of showing
whenever we have in our window, it just,

499
00:32:01,130 --> 00:32:04,460
but guess what? It's not a continuous
thing. It's not a continuous thing.

500
00:32:04,490 --> 00:32:07,370
It's just like, if we just did
this, if we didn't do anything else,

501
00:32:07,490 --> 00:32:09,860
it would just pop the image up
for a second. But guess what?

502
00:32:09,861 --> 00:32:14,861
We need to just sequentially show what
is happening and how do we line 48 needs

503
00:32:15,080 --> 00:32:18,620
a parenthesis at the end. Uh, let's see.

504
00:32:18,621 --> 00:32:22,700
Line 48 needs a parenthesis
at the end. Blah, blah, blah,
blah, blah. Yes. Good call.

505
00:32:22,790 --> 00:32:23,623
Uh,
and then,

506
00:32:25,540 --> 00:32:30,110
and there and there and there and there
and there. And then this doesn't need it.

507
00:32:30,230 --> 00:32:33,650
Great. Okay. Okay. So
that's what we're gonna do.

508
00:32:33,651 --> 00:32:37,610
We're going to show the image and we're
going to say what else we're going to do.

509
00:32:37,611 --> 00:32:39,580
We're gonna wait to a little.
MMM.

510
00:32:43,560 --> 00:32:48,360
I S S I will marry you for a split second.
Boom,

511
00:32:48,380 --> 00:32:52,860
we're married. Okay. Divorce.
Okay. There you go. With dreams
come true. Okay. So wait,

512
00:32:52,861 --> 00:32:57,750
key is one. And now, okay,

513
00:32:57,751 --> 00:33:00,570
so what are we doing? So now we're
going to use that time function that we,

514
00:33:00,571 --> 00:33:04,450
that we called and why are we
using that time function? Uh,

515
00:33:05,870 --> 00:33:10,170
uh, we're gives you that time
function to show that, hey,

516
00:33:10,650 --> 00:33:13,740
we want to keep continuously showing this
image and we are waiting a little bit.

517
00:33:13,920 --> 00:33:16,560
We're going to sleep and then we're
going to keep showing you. Okay?

518
00:33:18,640 --> 00:33:23,450
Uh, so, so that's what you, the time
function for. So now, okay, so that,

519
00:33:23,480 --> 00:33:27,520
that's what, so what that's going to do
is it's going to do this if going to,

520
00:33:27,820 --> 00:33:30,310
let me, let me show what that's
that all that Cota, I just do.

521
00:33:30,490 --> 00:33:33,100
It's going to print out the
occupied bridge right up here.

522
00:33:33,300 --> 00:33:34,780
We haven't done the planned path yet.

523
00:33:34,810 --> 00:33:38,020
We've just print out the occupied grades
and it's going to print it out as a,

524
00:33:38,410 --> 00:33:43,030
as a, an array of a tuple
values. Okay. X, y coordinates.

525
00:33:43,360 --> 00:33:46,900
Okay. Um, so that's what it is.

526
00:33:46,901 --> 00:33:49,960
Youtube chat is indeed a good debugger.
It's not the best debugger,

527
00:33:49,961 --> 00:33:54,610
but it is up there for sure. The best
bugger is probably like goes debugger,

528
00:33:54,640 --> 00:33:58,600
go the go programming language
man. That awesome. Okay.

529
00:33:59,770 --> 00:34:03,310
[inaudible] is right. I need to
slow down and fix some stuff. Okay.

530
00:34:03,311 --> 00:34:06,520
So that's what that's going to do. Let
me see what these people went. Everyone,

531
00:34:06,530 --> 00:34:07,540
everyone's saying here.

532
00:34:07,690 --> 00:34:12,520
So have you the (484) 023-0760 nine six
it's definitely not line 69 cause I'm

533
00:34:12,521 --> 00:34:16,790
not there. Um, but let's see, 37 42

534
00:34:21,980 --> 00:34:25,940
47. So what's happening
on 47? So in online 47,

535
00:34:26,300 --> 00:34:29,840
uh, let's see. Um,

536
00:34:31,010 --> 00:34:35,240
I in average color. Exactly. Okay. Okay.

537
00:34:35,241 --> 00:34:40,070
So I need to keep going now.
Make the variables lowercase first.

538
00:34:40,071 --> 00:34:43,670
Letter line 38. Um, right,

539
00:34:46,250 --> 00:34:47,083
right.

540
00:34:48,830 --> 00:34:53,560
47 high average color for
I in average color. Okay,

541
00:34:53,561 --> 00:34:58,510
cool. Okay, so, so now, now it's time to,

542
00:34:58,750 --> 00:35:01,180
uh,
perform the

543
00:35:02,800 --> 00:35:06,910
shortest path to search. Okay? So,

544
00:35:07,960 --> 00:35:11,340
okay,
so we did half of it.

545
00:35:11,341 --> 00:35:15,300
Now we're going to be other half line 51,
four.

546
00:35:15,301 --> 00:35:20,190
I'm an average color. Any, okay,

547
00:35:22,660 --> 00:35:24,130
so we've done that. So Nick, he'll ask,

548
00:35:24,131 --> 00:35:26,710
why don't we add all the grids that
are not white to the array? That's,

549
00:35:26,711 --> 00:35:31,330
that's exactly what we did. Uh,
right here, this line line 49.

550
00:35:31,360 --> 00:35:34,420
Okay, so now it's sounding,
perform shortest path. Okay?

551
00:35:34,421 --> 00:35:35,530
So let's perform shortest paths.

552
00:35:35,531 --> 00:35:38,820
So the first thing we want to do is want
to get the list of objects that, okay,

553
00:35:38,821 --> 00:35:43,710
so now we have, we just created, we're
going to get the list of objects. Why?

554
00:35:43,711 --> 00:35:46,590
Because we're going to find the shortest
path between one of them and then the

555
00:35:46,650 --> 00:35:49,350
one that is closest matching to it.
We want to find the shortest path.

556
00:35:49,680 --> 00:35:53,190
We're going say list of colored grids.
Now this is not that great that are black.

557
00:35:53,460 --> 00:35:56,260
They said these are the grades
that are objects. Okay? Um,

558
00:36:01,090 --> 00:36:06,080
right. Thank you. Um, to you
deal and multi shift. Uh,

559
00:36:06,081 --> 00:36:07,280
okay. So, okay,

560
00:36:07,400 --> 00:36:12,400
so now we want to say four and
forehand in occupied grids,

561
00:36:13,490 --> 00:36:18,200
uh,
if and not in obstacles.

562
00:36:20,750 --> 00:36:23,750
Okay? So now we're going to,
so if they're not obstacles,

563
00:36:23,780 --> 00:36:28,700
so that means we just want to
get the, uh, uh, objects. Okay?

564
00:36:28,701 --> 00:36:32,240
So we've got the objects
and now it's time to, uh,

565
00:36:34,470 --> 00:36:38,640
now it's time to actually
do our algorithm. Okay?

566
00:36:38,730 --> 00:36:40,920
So for that starting,
so,

567
00:36:43,370 --> 00:36:46,530
so now it's time. Okay. So, so
for that starting image, so that,

568
00:36:46,531 --> 00:36:47,550
so what is our sarcomere?

569
00:36:47,670 --> 00:36:50,600
Art Starting English is going to be this
one right up here. You see, hold on.

570
00:36:50,970 --> 00:36:55,280
This is our, hold on. This is our starting
image. See this blue one right here?

571
00:36:55,310 --> 00:36:56,600
That is our starting image.

572
00:36:56,601 --> 00:36:59,960
And what it's gonna do is we're going to
find the closest image to that which is

573
00:36:59,961 --> 00:37:02,570
going to, because it's going
to iterate from left to right.

574
00:37:03,020 --> 00:37:04,100
It's going to do that for every row.

575
00:37:04,220 --> 00:37:06,620
And so if it's doing that from left to
right, what's going to be the close,

576
00:37:07,120 --> 00:37:10,360
what's going to be the matching
image? It's going to be this, uh,

577
00:37:12,120 --> 00:37:14,730
other blue square CV dot him show.
Correct.

578
00:37:17,260 --> 00:37:20,950
Okay, so for start image, uh,
in the list of colored grids,

579
00:37:23,730 --> 00:37:27,780
color grids, uh, so okay. So we're going
to go through that and we're going to say,

580
00:37:27,900 --> 00:37:30,170
well, we want to, we
want to define our, uh,

581
00:37:30,250 --> 00:37:33,090
certain image and we're going to create
a temporary array to show that. Okay?

582
00:37:33,330 --> 00:37:38,070
Starting image start. Now
we're going to say, okay,

583
00:37:38,430 --> 00:37:42,510
um, we'll create another copy of
it because we're about to perform.

584
00:37:43,250 --> 00:37:45,300
We're going to compare that
image to the next image.

585
00:37:45,780 --> 00:37:48,270
Image one is going to be
the one that changes. Okay?

586
00:37:48,390 --> 00:37:53,220
That's going to be the one bat that
changes risks, colored grids to live,

587
00:37:53,370 --> 00:37:58,110
right? So list, um,
images and to start image

588
00:37:59,910 --> 00:38:04,910
zero minus one and then start image one

589
00:38:07,580 --> 00:38:10,680
one. Why we're using two
copies. It's a great question.

590
00:38:10,681 --> 00:38:13,360
We are using two copies
because we are going to uh,

591
00:38:13,710 --> 00:38:15,660
one of those copies is going to change,
right?

592
00:38:15,661 --> 00:38:18,390
Because we're going to be iterating
through the grid and we're going to change

593
00:38:18,391 --> 00:38:22,400
the value of that copy every time so
that we can compute these uh, this, this,

594
00:38:22,880 --> 00:38:27,880
the similarity between the two images
and we're going to perform a star search

595
00:38:28,350 --> 00:38:32,910
once we found the human that
is most similar. Okay. Okay.

596
00:38:33,150 --> 00:38:37,010
So now, so now, now our actual uh,

597
00:38:40,990 --> 00:38:45,090
uh, so now it's time to, uh, hold on.

598
00:38:45,091 --> 00:38:47,460
I want to answer a single question
because I think it's a really important

599
00:38:47,461 --> 00:38:48,060
question.

600
00:38:48,060 --> 00:38:51,810
Is it realistic to believe that a new
startup can contribute more influential

601
00:38:51,811 --> 00:38:56,640
research than deep mind or just work
at a top company like Google? Yes,

602
00:38:56,790 --> 00:38:58,230
absolutely.
Why?

603
00:38:58,320 --> 00:39:02,430
Because the tools to make machine learning
like breakthroughs are the barrier to

604
00:39:02,431 --> 00:39:06,780
entry is rubbing reduced both in terms
of processing power to make valuable

605
00:39:06,781 --> 00:39:07,614
contributions.

606
00:39:07,740 --> 00:39:11,550
Open Ai's universe is going to make it
much easier for the amateur research

607
00:39:11,850 --> 00:39:14,160
community to make valuable contributions.

608
00:39:14,430 --> 00:39:16,620
And it's really not as hard as you think.

609
00:39:16,860 --> 00:39:18,330
Like it's really not as hard as you think.

610
00:39:18,331 --> 00:39:23,331
And I would definitely not be discouraged
from working on your own to make

611
00:39:23,551 --> 00:39:27,430
valuable contributions. Okay, so, so,
so I just want to enter that. So now,

612
00:39:28,980 --> 00:39:32,790
so now we're going to do the actual
iteration for the grid in a pen,

613
00:39:33,340 --> 00:39:36,150
a forehand,
enlist colored grids.

614
00:39:37,680 --> 00:39:39,910
If Anne has not equal cue to start damage.

615
00:39:41,780 --> 00:39:44,730
So if it's not people to this stark image,
then it's a different image.

616
00:39:44,770 --> 00:39:48,690
Can we're going to say get that
next image, get that next image.

617
00:39:49,330 --> 00:39:52,800
I'm just going to be image and we're
going to take that list of images that we

618
00:39:52,801 --> 00:39:57,730
already had and
it's one,

619
00:39:58,390 --> 00:40:00,070
uh,
and then the grid.

620
00:40:01,060 --> 00:40:03,310
Hold on, hold on. Red.

621
00:40:04,200 --> 00:40:09,120
Sure. One Grid, one minus one. Okay.

622
00:40:09,240 --> 00:40:14,190
And definitely going to be something.
Make sure I have all of this here.

623
00:40:14,310 --> 00:40:17,580
Okay. So now we'll be, so here's the
fun part. Here's the fun part. Okay,

624
00:40:17,581 --> 00:40:19,920
now we're going to convert. So
now we have two images, right?

625
00:40:19,950 --> 00:40:22,770
We have our original image and we had
the image that we are now iterating

626
00:40:22,771 --> 00:40:25,710
through. And guess what we want to
convert that emit to gray scale.

627
00:40:26,220 --> 00:40:27,150
Why do we want to do that?

628
00:40:27,151 --> 00:40:30,720
Let me talk about why we want to convert
both of those images to gray scale.

629
00:40:31,020 --> 00:40:32,910
Okay?
So let me first,

630
00:40:33,030 --> 00:40:37,590
let me first first actually convert
them to gray scale using the CVT color

631
00:40:37,591 --> 00:40:39,360
function.
So we're going to take that image

632
00:40:41,760 --> 00:40:43,710
and we're going to convert it

633
00:40:47,480 --> 00:40:52,430
Egr to Greg Heller,
Bgr to gray.

634
00:40:52,820 --> 00:40:54,910
Now we're going to take a second
image and we're going to converse.

635
00:40:54,920 --> 00:40:55,880
Got To gray scale,

636
00:40:57,660 --> 00:41:00,360
okay.
And

637
00:41:01,430 --> 00:41:04,310
uh, right, so most of our images
we're going to convert to grayscale.

638
00:41:04,680 --> 00:41:08,190
Why do we want to do that?
Let me finish typing itself.

639
00:41:11,590 --> 00:41:15,310
Okay.
So

640
00:41:18,220 --> 00:41:21,610
we have done that. Make sure that
there's no lag. All right, great.

641
00:41:22,710 --> 00:41:23,543
MMM.

642
00:41:25,020 --> 00:41:28,530
So now we have, so why are we
converting it to gray scale? Well,

643
00:41:28,531 --> 00:41:32,970
because a grayscale is,
is uh,

644
00:41:33,050 --> 00:41:37,730
how, um, all right, double
underscore Rachel is it?

645
00:41:37,731 --> 00:41:40,220
So when we, when we were
doing computer vision, uh, we,

646
00:41:40,300 --> 00:41:44,510
we first have to convert those images
to gray scale because it lowers the

647
00:41:44,511 --> 00:41:49,040
dimensionality of what we are trying
to compare. And why is that important?

648
00:41:49,220 --> 00:41:50,620
Because,
uh,

649
00:41:50,690 --> 00:41:55,690
colors are just colors make
an image a more complex come.

650
00:41:56,930 --> 00:42:00,850
They make images more complex than
necessary when we convert it and Mitch to

651
00:42:00,860 --> 00:42:05,120
gray scale and we compare them by some,
by computing some index function,

652
00:42:06,220 --> 00:42:08,810
uh, it just makes it, it
makes it faster. It's both,

653
00:42:08,870 --> 00:42:11,960
it's both computationally more efficient
to compare them because it's not about

654
00:42:11,961 --> 00:42:16,550
the color, it's about, uh, the,
the, the difference in the,

655
00:42:16,810 --> 00:42:21,290
the positions of the pixels,
uh, in the matrix. Okay?

656
00:42:21,291 --> 00:42:23,300
Because that's the similarity.
We're not really Kim.

657
00:42:23,420 --> 00:42:28,170
We're not comparing similarity of color
or comparing similarity of shape until

658
00:42:28,190 --> 00:42:31,220
we convert to grayscale. It makes
it faster to compare it. Okay?

659
00:42:31,310 --> 00:42:34,160
So that's what we're
converting to gray scale. Okay?

660
00:42:34,220 --> 00:42:36,800
So now we're going to actually compute
that similarity and how do we do that?

661
00:42:36,950 --> 00:42:41,270
Compare structural similarity? Well, guess
what, we imported that function. The SSL,

662
00:42:41,390 --> 00:42:44,930
I am function but queen both of
those gray scale images. Okay.

663
00:42:47,920 --> 00:42:50,020
And once we have that,
so if they aren't similar,

664
00:42:50,200 --> 00:42:53,560
so now we've now that we've compared
them and so guess what gifts they are

665
00:42:53,561 --> 00:42:58,240
similar, then we're going to
perform a [inaudible] search.

666
00:42:58,300 --> 00:43:00,940
If they are similar we'll search,

667
00:43:02,250 --> 00:43:05,620
we'll perform a star.
Okay.

668
00:43:07,210 --> 00:43:10,240
And guys,
if anybody has any questions,

669
00:43:10,241 --> 00:43:13,860
definitely like answered like help me out
an answer to them in the comments. Uh,

670
00:43:14,230 --> 00:43:17,620
okay, so, so how do we say,
what's the threshold here? Well,

671
00:43:17,621 --> 00:43:22,621
we're going to define 90% 90% similarity
and we're going to define 90% as 0.9.

672
00:43:23,080 --> 00:43:27,610
Okay. Um, I guess what bad
does not have parentheses.

673
00:43:28,210 --> 00:43:32,200
Okay,
now perform a star.

674
00:43:32,500 --> 00:43:35,290
I guess what we imported that
a starts search up there.

675
00:43:35,500 --> 00:43:36,940
And if we have time at the end,

676
00:43:36,941 --> 00:43:41,200
I'm going to go into this code and we're
going to talk about like the details of

677
00:43:41,201 --> 00:43:44,740
the implementation and I'm going to
explain it as well right now. Okay.

678
00:43:44,830 --> 00:43:48,580
So how are we, what are we performing? A
star on the maze. All right, thank you.

679
00:43:49,060 --> 00:43:52,180
On the maze. Okay. That we
had there starting image

680
00:43:54,010 --> 00:43:56,470
starting at the zero.
And what does that,

681
00:43:56,471 --> 00:44:01,110
that next image that we
have to start image, uh,

682
00:44:03,120 --> 00:44:07,260
uh, starting out, one minus one,

683
00:44:07,320 --> 00:44:11,930
this is lowercase. And
then lastly we want to, uh,

684
00:44:12,370 --> 00:44:13,203
say

685
00:44:14,650 --> 00:44:18,600
what are we completing this on while we're
competing on the grid that we created?

686
00:44:18,840 --> 00:44:20,670
Minus one because we,
uh,

687
00:44:21,840 --> 00:44:24,660
and so it's going to take four frame and
I'm going to explain this in a second.

688
00:44:25,290 --> 00:44:29,600
Um,
minus one.

689
00:44:30,750 --> 00:44:34,290
Okay, what's happening here?
We're performing a start search.

690
00:44:34,440 --> 00:44:35,790
What does a star search?
Well,

691
00:44:35,791 --> 00:44:40,560
a star search is basically us
looking at all the possible paths.

692
00:44:40,590 --> 00:44:44,910
Okay. And then so we're, so
we are, we aren't searching
through all possible paths,

693
00:44:45,120 --> 00:44:49,590
but we are using a heuristic that says
what is the one that is most likely to

694
00:44:49,591 --> 00:44:54,420
reach, uh, the end goal in
the shortest possible time?

695
00:44:54,660 --> 00:44:57,120
So what is it, what is likely to
be the shortest possible path?

696
00:44:57,360 --> 00:45:01,620
And this is the heuristic we use at every
step as we traverse through what we,

697
00:45:01,860 --> 00:45:05,370
essentially, it's a graph, it is a graph
problem. There's not a graph there,

698
00:45:05,430 --> 00:45:09,270
but it is a graph problem. And
Grid is misspelled. Thank you.

699
00:45:10,170 --> 00:45:14,970
Okay. Uh, so now we've done that.
We want to print the results.

700
00:45:15,240 --> 00:45:18,710
So we're going to say we're
going to print the result. Um,

701
00:45:19,050 --> 00:45:21,960
a start equals dice for us. What's
your instincts exactly? Hey,

702
00:45:21,961 --> 00:45:23,310
start is diatrust with puristic.

703
00:45:23,340 --> 00:45:27,300
So now we can print the results and
we're going to print it as a list because

704
00:45:27,301 --> 00:45:30,810
they list, please do a video
on hey star search and hold.

705
00:45:30,811 --> 00:45:33,900
Someone explained to your 65 medicare
is six. I think that's a great idea.

706
00:45:33,901 --> 00:45:37,200
And I will do that in the
future. Yes. Okay. Um,

707
00:45:39,120 --> 00:45:41,790
but now we want to print our
results because we performed
a star and guess what?

708
00:45:41,791 --> 00:45:44,490
We're performing a star,
you know, Luke, right?

709
00:45:44,520 --> 00:45:48,950
It's not just so we're performing it for
every object. It's not just one object.

710
00:45:48,951 --> 00:45:51,960
We're performing it for
every object that we see. So,

711
00:45:52,020 --> 00:45:55,620
and we're going to print the result and
if it's going to come out in the results,

712
00:45:55,860 --> 00:45:58,560
right? So it's, so we're going to say,
what does the result look like? Well,

713
00:45:58,561 --> 00:46:02,250
it's a collection of, uh,
x y coordinates. All right.

714
00:46:02,251 --> 00:46:06,600
There we're going to get
from uh, that first, um,

715
00:46:08,590 --> 00:46:12,630
first. Oh, okay.

716
00:46:12,631 --> 00:46:17,010
So now we're going to upend the list and
we're going to add that to pull that we

717
00:46:17,011 --> 00:46:21,780
just, that we just defined to the list.

718
00:46:27,660 --> 00:46:32,160
Uh, and so now the result
becomes the list. Let's to, uh,

719
00:46:32,550 --> 00:46:35,230
one influence.
Okay.

720
00:46:36,580 --> 00:46:40,660
So that's what we have there.
All right.

721
00:46:41,360 --> 00:46:45,520
Um,
cool.

722
00:46:46,060 --> 00:46:51,010
So now what we can do is we
can define the, we went to,

723
00:46:51,040 --> 00:46:55,030
okay. I think, oh, so there's one more
thing we had to do and then we're done.

724
00:46:55,260 --> 00:46:57,340
But one more little loop
we're going to say we went to,

725
00:46:57,370 --> 00:47:01,420
if no match object is down, then
we want to return no match. Okay?

726
00:47:01,480 --> 00:47:05,200
So it's going to show no match.
So in the list of colored grids

727
00:47:08,150 --> 00:47:09,540
and the list of colored grids,

728
00:47:11,070 --> 00:47:15,000
we want to say in the planned path,
in the plant path,

729
00:47:15,420 --> 00:47:16,253
there is,

730
00:47:17,010 --> 00:47:17,843
hmm.

731
00:47:18,770 --> 00:47:23,240
Uh, if it has the key of the
object that we created before,

732
00:47:24,550 --> 00:47:28,130
mmm.
MMM.

733
00:47:28,960 --> 00:47:30,040
A planned path.

734
00:47:31,270 --> 00:47:36,100
Object list,
no mash.

735
00:47:36,370 --> 00:47:38,200
Okay.
That means that there was nothing there,

736
00:47:38,201 --> 00:47:40,210
there was never anything
there in the first place.

737
00:47:40,320 --> 00:47:43,600
[inaudible] search was unsuccessful.
And we want to print for that. Okay.

738
00:47:43,720 --> 00:47:44,553
So that's good.

739
00:47:46,790 --> 00:47:51,710
Okay. Um, we'll go boom. It's
time for our main method.

740
00:47:52,400 --> 00:47:56,840
My Dad is calling. He's probably like,
Huh? You're doing good. How are you?

741
00:47:56,841 --> 00:48:00,270
I love you. I love my
dad. He's a great guy. Um,

742
00:48:04,500 --> 00:48:06,250
well I think in retrospect
he's a bright guy. You know,

743
00:48:06,460 --> 00:48:10,810
just like it's hard to be a
parent. Okay. So we've gone,

744
00:48:10,811 --> 00:48:13,660
we got our code. We can
now print this out. Um,

745
00:48:14,920 --> 00:48:19,300
they're our main method.
Okay. If name is Maine, uh,

746
00:48:20,200 --> 00:48:22,660
what is our image file name while
we're going to just sign it right here.

747
00:48:23,020 --> 00:48:26,550
Image file name.
Um,

748
00:48:29,610 --> 00:48:30,443
okay.

749
00:48:31,100 --> 00:48:31,933
Uh,

750
00:48:35,370 --> 00:48:36,203
yeah.

751
00:48:36,440 --> 00:48:39,080
Image file name is going to be
in that test. Images folder.

752
00:48:41,330 --> 00:48:45,090
Image one. Alright. Dot. Jpeg.

753
00:48:45,091 --> 00:48:47,990
So now we feed that imaging into it.
Um,

754
00:48:50,780 --> 00:48:54,890
right. This is double equals.
Yes, exactly. And now, ah,

755
00:48:54,950 --> 00:48:57,790
we run our main function on
that. That's it. That's good.

756
00:48:57,850 --> 00:49:02,540
And now we can run this
thing. Okay. Boom. Made image.

757
00:49:05,300 --> 00:49:06,140
Okay.

758
00:49:07,350 --> 00:49:07,890
Yeah.

759
00:49:07,890 --> 00:49:10,830
Line 90, use double. Yep.
Did that. All right. Okay.

760
00:49:11,220 --> 00:49:15,780
So what do we do? What did we
just do? We created two arrays.

761
00:49:15,781 --> 00:49:20,010
We iterated through this
two d grid. Okay. We said,

762
00:49:20,070 --> 00:49:24,390
we said show,
show us the occupied grids,

763
00:49:24,510 --> 00:49:28,140
print them all out as a list of two poles
and then use a star search to find the

764
00:49:28,141 --> 00:49:32,550
shortest path between this initial blue.
And then this one right here. Okay.

765
00:49:34,780 --> 00:49:39,740
Dude, I almost feel like there's, there's
too many lines here. Oh, and it's 48.

766
00:49:39,741 --> 00:49:43,550
17 is a lot. Okay, so let's print
this. Let's, let's, let's uh,

767
00:49:44,570 --> 00:49:45,403
hold on.

768
00:49:49,740 --> 00:49:50,573
Yeah,

769
00:49:51,710 --> 00:49:55,880
hold on. So I need to delete
this. This, no, no, hold on.

770
00:49:55,970 --> 00:49:57,890
Let me force quit that and try again.

771
00:50:00,470 --> 00:50:01,580
You can see the animation,
right?

772
00:50:03,050 --> 00:50:05,570
It's interesting through every
one of those it's using open CV.

773
00:50:05,571 --> 00:50:06,950
It's copying each image into memory.

774
00:50:06,951 --> 00:50:11,150
It's comparing them by a
structural similarity index
and it's going to print out

775
00:50:11,390 --> 00:50:12,223
the

776
00:50:15,650 --> 00:50:20,310
list and the list is going to
look like this, the plan path, uh,

777
00:50:20,450 --> 00:50:23,570
and the occupied grids.
Okay,

778
00:50:26,390 --> 00:50:28,430
great. Cool. All right.

779
00:50:28,850 --> 00:50:32,250
I am going to post this
code to get hub and,

780
00:50:33,650 --> 00:50:37,290
okay. Stop screen sharing. Okay,

781
00:50:37,291 --> 00:50:38,790
so I'm going to post
this call to get help.

782
00:50:39,000 --> 00:50:42,570
I'm going to explain it in the read
me and I'm going to make a video on

783
00:50:42,571 --> 00:50:44,970
heuristics and a star searches,
uh,

784
00:50:45,600 --> 00:50:48,570
in the future and uh,

785
00:50:48,630 --> 00:50:51,960
it's going to be awesome and I'm going
to end this with another five minute Q

786
00:50:51,961 --> 00:50:54,780
and a and then we are, we are done. Okay.

787
00:50:56,310 --> 00:50:58,030
Why not draw the path,
uh,

788
00:50:58,110 --> 00:51:01,650
says pro survivor that could have been
a great idea and that is definitely

789
00:51:01,651 --> 00:51:06,210
something that can be added as a
functionality to this code as well. Um,

790
00:51:06,780 --> 00:51:09,090
actually I'm going to
answer four questions. Okay.

791
00:51:09,330 --> 00:51:13,080
So any undergraduate project
ideas using machine learning,

792
00:51:13,081 --> 00:51:17,910
preferably sentiment
analysis based. Yes. Okay.

793
00:51:17,970 --> 00:51:22,560
Here's what you do. Use a Twitter
API to find some tough, first of all,

794
00:51:22,561 --> 00:51:25,080
think of a topic that you really want
to perform sentiment analysis on.

795
00:51:25,260 --> 00:51:27,930
So you want to see what people are
thinking about a specific topic. Okay.

796
00:51:28,170 --> 00:51:31,830
And then use a Twitter API to retrieve
a list of tweets about that topic and

797
00:51:31,831 --> 00:51:35,040
then perform sentiment analysis using,
uh,

798
00:51:37,670 --> 00:51:42,350
to start off, try psych it, learn.
Okay. Um, uh, try side Kit, learn. Uh,

799
00:51:42,351 --> 00:51:44,330
and then I actually have a video on this.

800
00:51:44,450 --> 00:51:49,450
Look at my video called Twitter
sentiment analysis and then do that,

801
00:51:49,491 --> 00:51:53,020
that whole idea, but apply it to your own
topic. Okay. That would be a great, uh,

802
00:51:53,180 --> 00:51:55,580
undergraduate research project.
Can I ask a question? One of four.

803
00:51:55,581 --> 00:51:59,240
We have three more. Are those
Bose headphones? Yes. QC 35.

804
00:51:59,720 --> 00:52:03,500
Have you written any cool Mlai things
to help you in your day to day life?

805
00:52:04,550 --> 00:52:08,600
Um,
in my day to day life,

806
00:52:10,500 --> 00:52:13,730
no. Actually I would love to do that. Um,

807
00:52:14,460 --> 00:52:18,270
no I haven't. Okay. And the last one is,

808
00:52:21,830 --> 00:52:26,390
do you have any keyword
about 3d path planning? Uh,

809
00:52:27,500 --> 00:52:32,260
he worried about 3d path planning.
I don't know what you mean by that.

810
00:52:32,540 --> 00:52:33,160
A keyword.

811
00:52:33,160 --> 00:52:35,770
Will you volunteer to be one of the
first people to go to Mars when you

812
00:52:35,771 --> 00:52:39,280
interview Elon Musk?
I'm definitely going more as guys.

813
00:52:39,370 --> 00:52:42,010
I'm definitely going to Mars. It's,
it's inevitable. It's something that I,

814
00:52:42,011 --> 00:52:45,970
it's in my 10 year plan. I want to
start a new nation on Mars someday.

815
00:52:46,590 --> 00:52:51,550
Uh, but that's in the future anyway. Do
you believe? Oh No. Here's a good one.

816
00:52:51,610 --> 00:52:54,790
Do you believe an AMD will be a
big player? Like nvidia in ml,

817
00:52:54,940 --> 00:52:57,250
they just showed some
benchmarks yesterday. You know,

818
00:52:57,340 --> 00:53:00,970
Andy is late to the game and video has
made so much progress and it's already

819
00:53:01,090 --> 00:53:05,620
not just progress, not just in terms of,
uh, it's, it's computing project progress,

820
00:53:05,890 --> 00:53:09,970
uh, in the chip technology,
but also in its partnerships,
right. With Google. Right.

821
00:53:10,240 --> 00:53:14,260
Um, so I don't think AMD is going
to be able to catch up to the, uh,

822
00:53:14,350 --> 00:53:18,490
momentum that Nvidia has
built and individually is
just a great brand as well.

823
00:53:18,880 --> 00:53:22,360
Okay. Uh, so anyway, that's
it for this livestream.

824
00:53:22,390 --> 00:53:26,280
Thanks guys so much for
showing up. Uh, I love you. Um,

825
00:53:26,430 --> 00:53:31,340
for now I've got to go focus on this
video and I've got to interview this, uh,

826
00:53:31,380 --> 00:53:36,090
open AI researcher for my next interview
on Friday. So thanks for watching.

827
00:53:36,660 --> 00:53:37,410
Bye guys.

