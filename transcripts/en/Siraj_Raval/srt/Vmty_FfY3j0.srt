1
00:00:00,120 --> 00:00:01,430
Hello world it Saroj.

2
00:00:01,500 --> 00:00:05,640
And today we're going to talk about a
cryptocurrency called car Dano. Well,

3
00:00:05,641 --> 00:00:10,170
the coin itself is called Adda by the
blockchain that it's a ports is called

4
00:00:10,210 --> 00:00:13,770
Cardinal. And it was created
by the co founders of etherium.

5
00:00:13,950 --> 00:00:15,870
You've got Charles Hoskinson,
which is,

6
00:00:16,110 --> 00:00:19,830
he's basically like the Steve Jobs of
Crypto and you've got Jeremy would.

7
00:00:19,920 --> 00:00:23,790
So both of these guys have been in the
space for five plus years and they've

8
00:00:23,791 --> 00:00:27,630
seen a lot of the problems that happen
with cryptocurrencies and they took all

9
00:00:27,631 --> 00:00:31,150
of those problems and they decided to
make one single solution called court car

10
00:00:31,151 --> 00:00:34,920
Dano, which I've been researching a lot
lately. And I think the platform is very,

11
00:00:34,921 --> 00:00:38,310
very cool. So in this video I'm
going to talk about its architecture,

12
00:00:38,400 --> 00:00:42,090
how it works, how it's delegated,
proof of stake algorithm works,

13
00:00:42,210 --> 00:00:44,670
and how it's different
from bitcoin and ethereum.

14
00:00:45,030 --> 00:00:48,050
So let's start off with bitcoin.
You always got to start off with Bitcoin,

15
00:00:48,060 --> 00:00:49,830
right when it comes to cryptocurrencies.

16
00:00:50,070 --> 00:00:54,630
So there've been three generations of
distributed ledger technology so far.

17
00:00:54,990 --> 00:00:57,460
The first generation was
obviously Bitcoin, right?

18
00:00:57,461 --> 00:01:00,360
And You got light coin and
all the initial, all coins.

19
00:01:00,480 --> 00:01:04,080
But the idea was always the same.
Can we create decentralized money?

20
00:01:04,140 --> 00:01:05,760
And the answer was yes.
Right?

21
00:01:05,761 --> 00:01:09,180
So money that doesn't require
a trusted third party. No,

22
00:01:09,181 --> 00:01:12,450
I'm not going to explain how bitcoin
works. I've done that in previous videos,

23
00:01:12,690 --> 00:01:17,340
but I will say that bitcoin allows Alice
to send money to Bob without needing a

24
00:01:17,341 --> 00:01:18,780
trusted third party,
right?

25
00:01:18,900 --> 00:01:22,620
We had the traditional way to do this
and involved a bank, a clearinghouse,

26
00:01:22,710 --> 00:01:27,510
the ACH network, all of these different
networks that were pre-internet, right?

27
00:01:27,630 --> 00:01:29,590
And so it took,
it takes some time for Alison,

28
00:01:29,591 --> 00:01:33,540
send money to Bob if he's in a different
country because it's requiring all

29
00:01:33,541 --> 00:01:36,480
these different old,
old world protocols.

30
00:01:37,050 --> 00:01:39,330
But there's one thing
that bitcoin cannot do.

31
00:01:39,540 --> 00:01:44,220
What if Alice wants to send money to
Bob? Only if Bob Mo's her lawn, right?

32
00:01:44,221 --> 00:01:47,820
So you've got to have a network that's
able to communicate with the real world,

33
00:01:48,030 --> 00:01:52,170
some kind of lawn mowed API or something
like that where the transaction can

34
00:01:52,171 --> 00:01:56,760
tell if a Bob mode Ellis his lawn and,
and if,

35
00:01:56,761 --> 00:01:57,990
and only if that happened,

36
00:01:58,170 --> 00:02:02,130
it will release the funds and send
them to [inaudible] from Alice.

37
00:02:02,310 --> 00:02:04,950
But bitcoin does not allow for this.
However,

38
00:02:04,951 --> 00:02:09,390
a lot of people don't realize that bitcoin
does have its own scripting language,

39
00:02:09,570 --> 00:02:13,020
right? So Toshi implemented a
scripting language in Bitcoin, however,

40
00:02:13,021 --> 00:02:17,310
it's very limited. And that's for
security reasons. Mostly. Uh, for example,

41
00:02:17,430 --> 00:02:21,140
the Bitcoin scripting language does
not allow for looping at all. Uh,

42
00:02:21,210 --> 00:02:24,840
so this is an example of a bitcoin script.
It's a very trivial example.

43
00:02:25,080 --> 00:02:28,770
You just have three variables here. I add
them together and then I returned them.

44
00:02:28,950 --> 00:02:33,180
So that's an example of bitcoin script.
It's useful for things like escrows,

45
00:02:33,270 --> 00:02:36,450
but not very detailed. Escrows are
anything more than just, you know,

46
00:02:36,480 --> 00:02:40,140
multiday multisignature transactions.
So enter etherium.

47
00:02:40,141 --> 00:02:45,141
So a theory on came from a problem
with bitcoin has in can we decentralize

48
00:02:45,930 --> 00:02:49,410
everything else in the way that we can
decentralize transactions without the

49
00:02:49,411 --> 00:02:53,370
need for a third party? Can we also
decentralized computation? Right?

50
00:02:53,400 --> 00:02:57,180
Can we decentralize the, the way of
building an application in general.

51
00:02:57,300 --> 00:02:59,670
So I like to quote metallic,
the founder of Etherium,

52
00:02:59,680 --> 00:03:04,510
when I say comparing bitcoin to ethereum
is kind of like comparing an apple to a

53
00:03:04,511 --> 00:03:07,990
phone. They're just completely
different technologies. So if you're in,

54
00:03:07,991 --> 00:03:11,560
for example, is if you're IOM
is a programmable blockchain,

55
00:03:11,640 --> 00:03:14,470
that's the way you can think of it.
It's a programmable blockchain.

56
00:03:14,471 --> 00:03:18,430
And you might be saying, wait a second.
Bitcoin has its own scripting language.

57
00:03:18,460 --> 00:03:22,620
It's programmable. It's, it is, but
it's very, very limited. If barium is a,

58
00:03:22,650 --> 00:03:26,140
has a Turing complete programming
language called solidity,

59
00:03:26,470 --> 00:03:30,220
Turing complete means it's able to do
everything. Loops is one trivial example.

60
00:03:30,340 --> 00:03:34,030
Recursion is another one. But anything
that any programming language can do,

61
00:03:34,130 --> 00:03:36,280
if they're eoms solidity can do.

62
00:03:36,520 --> 00:03:39,370
It's Kinda like when javascript
came to the browser, for example,

63
00:03:39,460 --> 00:03:44,140
before Javascript, all web pages were
static, right? You had html, you had CSS.

64
00:03:44,290 --> 00:03:46,360
But once javascript entered the browser,

65
00:03:46,390 --> 00:03:50,080
we were able to do dynamic
things and had much, much,

66
00:03:50,140 --> 00:03:52,390
many more features than we could before,
right?

67
00:03:52,391 --> 00:03:55,390
So it allows for
customizable transactions.

68
00:03:55,391 --> 00:04:00,220
And what I mean by that is code on the
blockchain. So Heroku is a great example.

69
00:04:00,380 --> 00:04:05,020
[inaudible] you've got Hiroku, you code
some script, you upload it to Heroku.

70
00:04:05,170 --> 00:04:09,520
Heroku is that centralized source
for that code. It runs a computation.

71
00:04:09,790 --> 00:04:13,030
And then all nodes that are connecting
to your web app with your Heroku backend

72
00:04:13,210 --> 00:04:16,300
have to connect to this central
source. However, with etherium,

73
00:04:16,330 --> 00:04:18,700
you don't push that coat to Hiroku.
You Post,

74
00:04:18,730 --> 00:04:23,350
you push it to all the
nodes in the network via a
transaction. That's your push,

75
00:04:23,560 --> 00:04:24,970
your push is a transaction.

76
00:04:25,390 --> 00:04:28,680
And then all the nodes that are
running a full etherium, um,

77
00:04:28,720 --> 00:04:32,470
client have to process that
computation, um, block.

78
00:04:32,710 --> 00:04:34,420
And so then once that code is run,

79
00:04:34,510 --> 00:04:37,630
all the nodes in the network
have to compute that code, right?

80
00:04:37,840 --> 00:04:39,670
So it's decentralized computation.

81
00:04:40,690 --> 00:04:43,180
And this allows for
unstoppable applications,

82
00:04:43,420 --> 00:04:45,550
applications that no one can shut down.

83
00:04:45,580 --> 00:04:49,810
This has a range of use cases from
financial transactions to health care,

84
00:04:49,811 --> 00:04:52,540
all sorts of things. Um, but
I won't go into that either.

85
00:04:52,600 --> 00:04:55,240
Here's an example of a theory.
I'm script right here. Solidity.

86
00:04:55,420 --> 00:04:57,880
It's much more readable.
It looks kind of like python,

87
00:04:58,060 --> 00:05:00,730
but this is a proof of
existence script in etherium.

88
00:05:00,910 --> 00:05:03,820
You've got one function that's
returning, uh, another function.

89
00:05:04,060 --> 00:05:08,560
So that's an example of solidity.
But etherium as awesome as it is,

90
00:05:08,590 --> 00:05:12,400
has its own problems, right? So
etherium has governance problems,

91
00:05:12,550 --> 00:05:17,430
Aka the hard fork or in the soft fork,
it's got security problems, Aka six.

92
00:05:17,431 --> 00:05:22,060
Scalability, how do we solve
these problems, right? How
do we solve scalability?

93
00:05:22,150 --> 00:05:26,050
How do we solve interoperability
and how do we solve sustainability?

94
00:05:26,051 --> 00:05:28,300
I'm going to go into each of
these three points in a second.

95
00:05:28,660 --> 00:05:30,310
But if we look at the blockchain history,

96
00:05:30,700 --> 00:05:34,030
Bitcoin allow for a distributed ledger
and it allowed for the advent of

97
00:05:34,031 --> 00:05:38,620
cryptocurrency. Ethereum allowed for
the same two things. In addition,

98
00:05:38,920 --> 00:05:41,770
it allowed for smart contracts.
Now,

99
00:05:41,800 --> 00:05:45,700
the third generation of blockchain has
to do more than both of them combined.

100
00:05:46,000 --> 00:05:47,620
What can it do?
Well,

101
00:05:48,040 --> 00:05:52,930
we know that any kind of programmable
blockchain is touring complete.

102
00:05:53,140 --> 00:05:56,800
It allows for building all sorts of
decentralized applications. However,

103
00:05:56,801 --> 00:06:00,140
the is not the number of
features that the problem is.

104
00:06:00,550 --> 00:06:04,640
It's infrastructure. How do we
improve that infrastructure? Right?

105
00:06:05,630 --> 00:06:09,620
So one huge problem when it comes
to blockchain's a scalability.

106
00:06:09,860 --> 00:06:13,160
And these are the three points
that cardinal aims to solve.

107
00:06:13,340 --> 00:06:16,160
I'm going to go into how it aims
to solve all three of them, right?

108
00:06:16,161 --> 00:06:17,150
So for scalability,

109
00:06:18,020 --> 00:06:22,550
there are different proposals for
solving Bitcoin scalability, right?

110
00:06:22,730 --> 00:06:27,110
What if we shift the burden onto the
users via trusted intermediaries for

111
00:06:27,111 --> 00:06:30,350
etherium, what if we tweak the
tuning parameters, limited head room,

112
00:06:30,490 --> 00:06:34,970
or do security margins? And then
there's entirely different, um, uh,

113
00:06:34,971 --> 00:06:38,630
solutions like semi-closed groups
like the ripple protocol or stellar,

114
00:06:38,840 --> 00:06:42,020
you lose your openness,
but you have public transparency benefits.

115
00:06:42,290 --> 00:06:46,310
And then the hardest solution is to
rethink your architecture entirely.

116
00:06:46,311 --> 00:06:49,400
And that's where third
generation cryptocurrencies
are coming into play right?

117
00:06:49,401 --> 00:06:52,010
Now, I talked a bit about
Ibotta, right? So I,

118
00:06:52,011 --> 00:06:57,011
Yoda just discards the idea
of a blockchain entirely
and moves to a directed

119
00:06:57,050 --> 00:07:01,100
[inaudible] graph, right? So it's, it's,
it's instead of a linear data structure,

120
00:07:01,220 --> 00:07:04,070
it's a dag data structure,
but that's just one way to solve it.

121
00:07:04,190 --> 00:07:07,670
It's not that the idea of a
blockchain is inherently bad,

122
00:07:08,000 --> 00:07:11,930
it's just that the infrastructure around
it can cause these problems, right?

123
00:07:12,230 --> 00:07:15,410
Having a blockchain that uses
the proof of work, for example,

124
00:07:15,590 --> 00:07:19,250
requires huge amounts of computation,
way too much, a lot of electricity,

125
00:07:19,430 --> 00:07:20,900
a lot of scalability problems,

126
00:07:21,050 --> 00:07:25,520
having all the nodes have to download a
full copy of every transaction in and of

127
00:07:25,521 --> 00:07:30,170
itself is just not able to
scale, right? What if we have,

128
00:07:30,410 --> 00:07:34,790
you know what, if in five years we have
billions and trillions of transactions,

129
00:07:35,090 --> 00:07:36,650
you're telling me if I want to be a minor,

130
00:07:36,710 --> 00:07:39,800
I had to download all of those
transactions to my laptop.

131
00:07:40,000 --> 00:07:43,340
That's a lot of transactions. Hence
the problem with scalability, right?

132
00:07:44,540 --> 00:07:46,430
And so that brought the
blockchain protocol.

133
00:07:46,460 --> 00:07:50,870
The bitcoin protocol specifically relies
upon many nodes pro possessing a full

134
00:07:50,871 --> 00:07:52,340
copy of the blockchain data,

135
00:07:52,670 --> 00:07:56,150
and so this restriction
prevents cryptocurrencies
from scaling to compete with

136
00:07:56,160 --> 00:07:59,090
legacy financial systems
like visa for example. Right?

137
00:07:59,540 --> 00:08:02,180
The bitcoin network allows for
seven transactions per second.

138
00:08:02,390 --> 00:08:04,190
Visa is something on the,
you know,

139
00:08:04,191 --> 00:08:08,480
just orders of magnitude more like
10,000 plus transactions per second.

140
00:08:08,720 --> 00:08:13,720
So what cardinal offers as a solution
to this is it's own proof of stake

141
00:08:14,091 --> 00:08:14,901
protocol.
It's,

142
00:08:14,901 --> 00:08:19,430
it's actually a delegated proof of stake
protocol and they call it aura boreaus,

143
00:08:19,460 --> 00:08:21,110
which I'm going to go into
at the end of the video.

144
00:08:21,500 --> 00:08:23,180
There's another problem with scalability.

145
00:08:23,181 --> 00:08:25,880
It's not just about the number
of transactions per second,

146
00:08:26,210 --> 00:08:29,840
it's also about bandwidth.
So when it comes to bandwidth,

147
00:08:30,590 --> 00:08:33,800
how much data can we pipe through
these networks all at once.

148
00:08:33,950 --> 00:08:37,760
And so their solution for this is using
a network architecture called Rena,

149
00:08:37,761 --> 00:08:40,850
which is short for recursive
Internet work architecture,

150
00:08:40,880 --> 00:08:42,770
which I'll go into a
bit as well at the end.

151
00:08:44,090 --> 00:08:47,930
And the last problem when it comes to
scalability is data scale rights. How,

152
00:08:47,970 --> 00:08:51,320
how do we scale the amount of data
that it's, that is in the network,

153
00:08:51,470 --> 00:08:55,100
how do we structure that data?
So everything is as fast as possible.

154
00:08:55,320 --> 00:08:58,530
And there are several solutions for this.
There's pruning, there's compression,

155
00:08:58,650 --> 00:08:59,700
there's partitioning.

156
00:08:59,820 --> 00:09:02,100
So there's a lot of problems when it
comes to this and there's a lot of

157
00:09:02,101 --> 00:09:06,120
proposals on how to fix this.
So interoperability, right?

158
00:09:06,121 --> 00:09:10,140
So this is the second major problem
we've got scalability, interoperability,

159
00:09:10,710 --> 00:09:15,150
and the last one, which is sustainability.
So when it comes to interoperability,

160
00:09:15,450 --> 00:09:19,320
whenever we want to send
cross border payments using
the legacy financial system,

161
00:09:19,800 --> 00:09:22,110
one bank will send money to another bank,
right?

162
00:09:22,110 --> 00:09:23,970
And if they have this partnership,
right?

163
00:09:23,971 --> 00:09:27,360
They have these protocols to send
money between different banks.

164
00:09:27,361 --> 00:09:29,550
They have partnerships, and
they have all these, you know,

165
00:09:29,551 --> 00:09:32,490
Kyc and all these different
compliance protocols.

166
00:09:32,640 --> 00:09:34,110
So they'd been around for a while.

167
00:09:34,290 --> 00:09:37,480
And so it's very difficult for Bitcoin
to communicate with the theory.

168
00:09:37,481 --> 00:09:40,080
[inaudible] for example, and
other old coins. However,

169
00:09:40,081 --> 00:09:44,370
for banks it's easy because they built
these protocols over many, many decades.

170
00:09:44,640 --> 00:09:46,980
Um,
and so in the traditional financial world,

171
00:09:47,070 --> 00:09:50,440
how is a bank supposed to talk to Bitcoin?
Forget about Bitcoin,

172
00:09:50,460 --> 00:09:53,010
talking to about talking
to other altcoins.

173
00:09:53,250 --> 00:09:57,450
How do you get a bank like ing to talk
to the bitcoin network, for example?

174
00:09:57,840 --> 00:10:02,760
This is very hard, right? Banks need
these compliance regulations. Kyc,

175
00:10:02,910 --> 00:10:03,091
you know,

176
00:10:03,091 --> 00:10:06,210
there's all these different compliance
regulations at other banks are really

177
00:10:06,211 --> 00:10:09,180
good at complying with that.
Cryptocurrencies are not,

178
00:10:09,330 --> 00:10:12,510
they're just these networks run by
developers and they're not as mature.

179
00:10:13,500 --> 00:10:18,000
So we would need these
compliance protocols built
into these cryptocurrencies

180
00:10:18,150 --> 00:10:21,690
for the traditional financial world to
be able to talk to the new financial

181
00:10:21,691 --> 00:10:25,950
world. And we need cross
chain transactions without
the need for a third party,

182
00:10:25,951 --> 00:10:30,510
right? So right now the way that bitcoin
can talk to theory them is by using a

183
00:10:30,511 --> 00:10:34,410
centralized party like
Coinbase for example,

184
00:10:34,411 --> 00:10:36,840
or crack in or any of these exchanges.

185
00:10:36,990 --> 00:10:41,460
So these are kind of temporary solutions
to transfer of value between different

186
00:10:41,461 --> 00:10:45,300
currencies, but they're centralized
solution in and of themselves, right?

187
00:10:45,301 --> 00:10:50,301
So we need a way to allow for value
transfer between cryptocurrencies without

188
00:10:51,211 --> 00:10:52,380
the need for a third party.

189
00:10:52,770 --> 00:10:56,340
And we also need three other
kind of smaller details.

190
00:10:56,520 --> 00:10:57,810
We need metadata.

191
00:10:57,930 --> 00:11:02,520
That is who we sending the transaction
and have that be opt in or opt out based

192
00:11:02,521 --> 00:11:04,080
on whether or not you want to be visible.

193
00:11:04,290 --> 00:11:08,340
We need attribution who sent what
rights and we need compliance.

194
00:11:08,341 --> 00:11:11,850
Like I talked about before,
a Kyc. And so for Bitcoin,

195
00:11:11,851 --> 00:11:15,640
there's this idea of the side chain
proposal where you peg an alt coin to

196
00:11:15,660 --> 00:11:19,670
bitcoin and this would require a change
inside of the bitcoin network that did

197
00:11:19,920 --> 00:11:21,390
the developers have to accept.

198
00:11:21,890 --> 00:11:25,900
And there's this whole theory behind
how side chains can work, et cetera. Uh,

199
00:11:26,010 --> 00:11:29,040
but it's in the works.
Now lastly,

200
00:11:29,041 --> 00:11:32,970
there's one more problem when it comes
to cryptocurrencies in general and that's

201
00:11:32,971 --> 00:11:34,410
sustainability.
Okay?

202
00:11:34,411 --> 00:11:38,370
So how do we sustain a network
over a period of years,

203
00:11:38,400 --> 00:11:43,050
if not decades? So one way to do this
is by using the ICO model, right?

204
00:11:43,051 --> 00:11:45,180
So the initial coin offering model,

205
00:11:45,360 --> 00:11:48,630
this is a way for the network to
gain a huge sum of money all at once.

206
00:11:48,870 --> 00:11:52,710
But the problem is that this is a
huge sum of money all at once, right?

207
00:11:52,740 --> 00:11:56,440
This can walk up, no matter how big it
is, eventually it's going to run out.

208
00:11:56,740 --> 00:11:59,500
So it's not a very sustainable
model for fundraising,

209
00:11:59,501 --> 00:12:03,100
for the developer to the network and
for the users and the contributors.

210
00:12:03,130 --> 00:12:04,180
It's just not sustainable.

211
00:12:04,540 --> 00:12:09,540
So a better way of sustainably funding
a network is to the idea of of a

212
00:12:10,331 --> 00:12:12,880
treasury, right? A treasury system.

213
00:12:12,970 --> 00:12:16,930
So one cryptocurrency that did this
very well is the dash protocol.

214
00:12:17,110 --> 00:12:21,490
So with the Dash Protocol did is it has
this treasury that is this kind of volt

215
00:12:21,670 --> 00:12:24,520
of savings that the network holds.

216
00:12:24,700 --> 00:12:29,700
And so the users can vote on how that and
how the money in the Treasury is spent

217
00:12:30,010 --> 00:12:31,270
through voting,
right?

218
00:12:31,271 --> 00:12:35,560
So you have all these different proposals
for things that would grow the dash

219
00:12:35,561 --> 00:12:40,060
network like launching dash in Zimbabwe
promoting dash to 200,000 people,

220
00:12:40,300 --> 00:12:43,990
let millions of Chinese investors
on who'll be invest in Dash,

221
00:12:44,200 --> 00:12:45,011
all these different things,

222
00:12:45,011 --> 00:12:49,830
right dash documentary and users can
vote on how much cryptocurrency they want

223
00:12:50,140 --> 00:12:53,500
have to be allocated
towards these proposals.

224
00:12:55,510 --> 00:12:57,760
So that's just a more
sustainable way of doing things.

225
00:12:57,761 --> 00:13:02,500
And cardinal has adapted this
model of using a treasury, right?

226
00:13:02,501 --> 00:13:05,230
So you know,
how should we go about something,

227
00:13:05,231 --> 00:13:08,140
how do we solve the problem of governance?
And this is a,

228
00:13:08,170 --> 00:13:10,720
this is a very hard problem,
right? With, even with etherium,

229
00:13:10,820 --> 00:13:13,390
there has been this idea of the
hard fork and the soft fork.

230
00:13:13,630 --> 00:13:15,790
To explain a little bit about
the difference between the two.

231
00:13:15,970 --> 00:13:18,400
Hard forking is not backwards compatible.

232
00:13:18,401 --> 00:13:22,470
So it's a completely different type of
network. Soft forking is right. So it's a,

233
00:13:22,471 --> 00:13:22,751
it's,

234
00:13:22,751 --> 00:13:27,310
it's a change to the network that the
old nodes would have to upgrade too or

235
00:13:27,311 --> 00:13:29,380
else they're not a part of
the network ever anymore.

236
00:13:31,000 --> 00:13:34,270
So let's talk a bit about cardinal and
now that we've talked about the problems

237
00:13:34,271 --> 00:13:35,620
with blockchains so far.

238
00:13:35,890 --> 00:13:39,190
So the team so far consists of
Charles Hoskinson and Jeremy would,

239
00:13:39,370 --> 00:13:41,410
both of these are cofounders of Atherium.

240
00:13:41,620 --> 00:13:43,450
These guys have been around for a while.
So they've,

241
00:13:43,470 --> 00:13:48,460
they've seen the problems that come from
both Turing complete and non complete

242
00:13:48,540 --> 00:13:49,373
blockchains.

243
00:13:49,540 --> 00:13:52,810
And so they claim that it's the first
blockchain platform to evolve out of a

244
00:13:52,811 --> 00:13:57,310
scientific philosophy, philosophy and a
research first driven approach. I mean,

245
00:13:57,311 --> 00:14:00,730
if you look at their team, they've
got a bunch of PHD's. Um, it's a,

246
00:14:00,731 --> 00:14:02,950
it's a very solid team,
which is, which is cool.

247
00:14:03,100 --> 00:14:06,640
And it's backed by three independent
entities. The car, Donald Foundation,

248
00:14:06,641 --> 00:14:10,660
which is a nonprofit, um, the Io aged k,

249
00:14:10,661 --> 00:14:14,260
which is a crypto studio,
started by both of these two and Emergo,

250
00:14:14,261 --> 00:14:16,780
which is a cardinal
specific blockchain studio.

251
00:14:17,110 --> 00:14:20,020
So it's got a lot of money that's
been funded into a lot of resources,

252
00:14:20,021 --> 00:14:23,620
development and, and funds. So when
it comes to it to architecture,

253
00:14:23,621 --> 00:14:27,940
one thing that I think is very
interesting is the fact that it uses,

254
00:14:27,941 --> 00:14:29,710
Haskell has a programming language.

255
00:14:29,710 --> 00:14:33,880
It's the first blockchain to be coated
in Haskell and in Haskell. If you're,

256
00:14:33,970 --> 00:14:38,150
if you love math, Haskell is a
language for you. But basically, uh,

257
00:14:38,170 --> 00:14:42,250
Haskell is a language that
allows for a prototyping.

258
00:14:42,280 --> 00:14:44,710
Very complicated math
equation is very fast.

259
00:14:45,430 --> 00:14:49,180
And I've got a little example for you
here that I just pulled from their

260
00:14:49,270 --> 00:14:50,920
repository to see.

261
00:14:50,930 --> 00:14:54,530
Just so you can see what Haskell looks
like in the context of a blockchain.

262
00:14:54,890 --> 00:14:57,530
So it's the first cryptocurrency
to be written in Haskell.

263
00:14:58,010 --> 00:15:01,160
It also has to scripting languages.
One of them is solidity.

264
00:15:01,220 --> 00:15:04,460
So this is another example of solidity.
Very readable language.

265
00:15:04,461 --> 00:15:08,350
Looks a lot like python. And if
you're familiar with python, you'll,

266
00:15:08,351 --> 00:15:11,600
you'll catch up with solidity very fast.
Also,

267
00:15:11,601 --> 00:15:14,240
it's composed of two
independent blockchain layers.

268
00:15:14,390 --> 00:15:17,120
You've got the settlement layer,
and then you've got the control layer,

269
00:15:17,150 --> 00:15:18,830
and I'll talk about the
difference between the two.

270
00:15:19,520 --> 00:15:23,240
Cardinal separates the accounting from
the story behind it by creating two

271
00:15:23,241 --> 00:15:25,850
protocol layers.
The settlement and the control layer.

272
00:15:26,030 --> 00:15:27,320
That settlement layer will have.

273
00:15:27,321 --> 00:15:31,730
The unit will have a unit of account
or value while the control layer runs

274
00:15:31,731 --> 00:15:34,040
computations in the
form of smart contracts.

275
00:15:34,220 --> 00:15:36,440
So right now we can look
at the settlement layer.

276
00:15:36,650 --> 00:15:39,980
The computation layer is still in
the works. It's still to be built.

277
00:15:40,280 --> 00:15:41,840
So let's take a look at
the settlement layer,

278
00:15:41,841 --> 00:15:43,670
which we can look at on get hub right now,

279
00:15:43,880 --> 00:15:47,060
but it's a standalone blockchain
powered by the actual Ada token,

280
00:15:47,061 --> 00:15:50,690
which you can buy right
now and or boreaus there.

281
00:15:50,720 --> 00:15:54,650
A proof of stake algorithm allows for
features such as delegation and side

282
00:15:54,651 --> 00:15:57,020
chains,
which allows for interoperability.

283
00:15:57,320 --> 00:16:01,640
So if we look at this a get hub
repository right now, we can see the wood,

284
00:16:01,641 --> 00:16:05,170
the settlement layer looks like the
whole thing is coated in Haskell. Uh,

285
00:16:05,280 --> 00:16:09,440
it doesn't have that much internal talky
documentation on the get hub website.

286
00:16:09,590 --> 00:16:11,120
But if you want to see documentation,

287
00:16:11,240 --> 00:16:14,690
they've got the separate website called
Card Donald Docs, which we can look at.

288
00:16:14,840 --> 00:16:17,840
A lot of it is just reasons why
you'd want to use card Donno,

289
00:16:18,020 --> 00:16:21,800
but it's also got installation
instructions as well for
supporting platforms.

290
00:16:22,100 --> 00:16:26,520
You can install their, uh, their
wallet on windows and Mac Os. Uh,

291
00:16:26,720 --> 00:16:31,520
and it's got a bunch of
descriptions of how APIs work,

292
00:16:31,521 --> 00:16:35,810
how the, how the transactions work, how
the steak is distributed. It's got a lot.

293
00:16:35,811 --> 00:16:38,900
So it's got a lot of documentation,
which is a good thing. Uh,

294
00:16:38,960 --> 00:16:42,440
and I can make another video on that to
go really into those technical details,

295
00:16:42,441 --> 00:16:46,280
but check out the get hub repository and
check out that technical documentation.

296
00:16:46,640 --> 00:16:49,100
Now the computation layer
is what they want to build.

297
00:16:49,101 --> 00:16:50,480
So this is kind of a future thing,

298
00:16:50,660 --> 00:16:54,320
but it's where information contained in
this settlement layer is processed or

299
00:16:54,321 --> 00:16:58,130
computed in particular transactions.
So it's this smart contract layer.

300
00:16:58,430 --> 00:17:00,530
Tbd is just,
I mean Tldr,

301
00:17:00,740 --> 00:17:04,820
it's a smart contract layer and so it
never touches or wait for the CSL layer

302
00:17:04,821 --> 00:17:09,350
except for when a reference point is
necessary and runs an implementation of

303
00:17:09,351 --> 00:17:12,830
their proof of stake algorithm just like
the settlement layer. So they both do.

304
00:17:14,600 --> 00:17:18,710
So let me talk a bit about Ora Boris.
Now they're their consensus algorithm.

305
00:17:18,890 --> 00:17:20,510
So when it comes to proof of work,

306
00:17:20,720 --> 00:17:24,830
the way proof of work works is you
have the probability of mining a block

307
00:17:24,831 --> 00:17:28,370
depending on how much
computational work a minor does.

308
00:17:28,670 --> 00:17:32,450
And so payout becomes smaller and smaller
for bitcoin miners and there's less

309
00:17:32,451 --> 00:17:35,690
incentive to avoid a 51% attack.
And they,

310
00:17:35,750 --> 00:17:40,490
these POW systems become these powerful
mining communities that tend to become

311
00:17:40,491 --> 00:17:41,324
centralized.

312
00:17:41,510 --> 00:17:45,980
So the way proof of stake works is
instead of saying it's all about computing

313
00:17:45,981 --> 00:17:48,980
power, it's about how much
money you have in the network,

314
00:17:49,110 --> 00:17:52,680
how much stake you have in the network.
So a person can mind,

315
00:17:52,740 --> 00:17:55,050
depending on how many coins they ho hold.

316
00:17:55,230 --> 00:17:57,480
So depending on how much stake
they have in the network,

317
00:17:57,840 --> 00:18:02,840
and the POS system makes any
51% attack more expensive.

318
00:18:03,840 --> 00:18:06,510
And so pos systems are more decentralized,

319
00:18:06,720 --> 00:18:09,900
but must work hard to build
communities around their coins, right?

320
00:18:10,110 --> 00:18:13,440
You don't want centralization in terms
of only these people have, you know,

321
00:18:13,470 --> 00:18:17,190
this much steak. So when it comes
to delegated proof of stake,

322
00:18:17,280 --> 00:18:19,620
and this is what Ora boreaus implements,

323
00:18:20,160 --> 00:18:23,010
voting power is determined
by how much stake you have.

324
00:18:23,040 --> 00:18:26,730
It's not just about how much mining
power, it's about voting power, right?

325
00:18:26,731 --> 00:18:31,731
So a whale that owns 100,000 tokens has
much more voting power than a minnow

326
00:18:32,460 --> 00:18:34,650
that only owns a hundred tokens.
Right?

327
00:18:34,920 --> 00:18:39,240
And so based on how many tokens do you
have, your voting power increases, right?

328
00:18:39,241 --> 00:18:43,740
So it's, it's kind of, it's, it's, it
facilitates the decentralized elections,

329
00:18:43,840 --> 00:18:48,450
have a quorum of consensus notes.
So it's not completely decentralized.

330
00:18:48,540 --> 00:18:51,840
It's not totally centralized.
It's a mix between the two.

331
00:18:52,050 --> 00:18:54,990
It's kind of like liquid democracy,
if you've heard that term before,

332
00:18:55,170 --> 00:18:56,730
but it's delegated proof of stake.

333
00:18:56,760 --> 00:18:59,730
You've got some delegates ride that
people vote for in the network,

334
00:18:59,920 --> 00:19:03,720
and if the delegate is corrupt,
everything is transparent,

335
00:19:03,760 --> 00:19:07,920
then you just fire the delegate and
find a new delegate, right? So that,

336
00:19:07,921 --> 00:19:08,820
that's kind of what they do.

337
00:19:08,910 --> 00:19:13,140
Bad actors are fired and it removes the
requirements for widespread storage of

338
00:19:13,141 --> 00:19:14,160
the entire chain.

339
00:19:14,340 --> 00:19:17,490
So not every node has to download
a full copy of the blockchain,

340
00:19:17,700 --> 00:19:22,200
which speeds up speeds up transactions,
right? It solves that scalability issue.

341
00:19:22,590 --> 00:19:26,490
And so these consensus Dodes can run
more traditional protocols developed over

342
00:19:26,491 --> 00:19:30,390
the last 20 years to accommodate the
needs of large infrastructure providers

343
00:19:30,540 --> 00:19:34,200
like Google and Facebook that are more
centralized because these notes have been

344
00:19:34,201 --> 00:19:36,330
elected democratically by the network

345
00:19:37,860 --> 00:19:40,730
and it reduces resource requirements,
which makes it easier to,

346
00:19:40,800 --> 00:19:43,890
for multiple quorums concurrently
to partition transactions.

347
00:19:44,010 --> 00:19:46,770
Two different forums. So, uh, the,

348
00:19:46,771 --> 00:19:49,800
the other part is the recursive
internet work architecture.

349
00:19:49,801 --> 00:19:54,360
And this solves the problem of bandwidth.
So Rina is actually pretty complex.

350
00:19:54,600 --> 00:19:55,740
There's a lot of,
there's,

351
00:19:55,800 --> 00:19:58,890
there's a lot of theory behind it and
they're actually still developing it,

352
00:19:59,100 --> 00:20:00,960
but it's been around for 10 years.

353
00:20:01,140 --> 00:20:05,490
But essentially it's an alternative
to TCP IP that is more suited for

354
00:20:05,491 --> 00:20:08,370
decentralized applications.
So it's,

355
00:20:08,371 --> 00:20:13,371
it's better suited in TCP IP is four
nodes that are completely decentralized,

356
00:20:14,160 --> 00:20:18,300
right? So in the end of this video, I
want to go into how you can buy car Dano.

357
00:20:18,420 --> 00:20:23,100
So there's this great link here called
get crypto.info/car Dano and they've got

358
00:20:23,101 --> 00:20:26,760
the step by step tutorial on how
to buy car Donno. But the first,

359
00:20:26,820 --> 00:20:31,050
the first step is you want to download
their wallet, which is data list.

360
00:20:31,051 --> 00:20:33,040
I hope I said that right data list.
Uh,

361
00:20:33,180 --> 00:20:35,640
but you've the first seconds for you
to download their wallet. Don't worry,

362
00:20:35,641 --> 00:20:37,560
they have it for windows,
they have it for Mac.

363
00:20:37,710 --> 00:20:39,240
So go ahead and download their wallet.

364
00:20:39,570 --> 00:20:42,630
You can run the program and once
you've synced with the blockchain,

365
00:20:42,631 --> 00:20:47,530
you've created your personal wallet,
you created your pass phrase,

366
00:20:47,920 --> 00:20:51,880
then you can go, you can pick any theory.
I'm exchange to buy some material.

367
00:20:52,060 --> 00:20:55,740
Or You could buy some bitcoin and then
exchange it from their Coinbase is

368
00:20:55,750 --> 00:21:00,490
another example. But this is a great link
for that. Get the wallet download it.

369
00:21:00,640 --> 00:21:01,630
I think this is,

370
00:21:01,631 --> 00:21:05,230
this cryptocurrency has a lot of promise
and I hope you found this video useful.

371
00:21:05,260 --> 00:21:07,120
Please subscribe for
more programming videos,

372
00:21:07,121 --> 00:21:11,200
and for now I'm going to study
some networking protocols,
so thanks for watching.

