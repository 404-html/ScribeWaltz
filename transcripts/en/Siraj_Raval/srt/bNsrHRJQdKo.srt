1
00:00:00,100 --> 00:00:04,180
Oh, well it's Saroj and I've got sand
between my cheeks. Feels really weird.

2
00:00:04,430 --> 00:00:06,190
Check out this pine cone
that I found on the way.

3
00:00:06,191 --> 00:00:08,380
Here are eight sets of clockwise spirals.

4
00:00:08,381 --> 00:00:12,450
While there are 13 sets of
counterclockwise spirals,
when we divide 13 bikey,

5
00:00:12,590 --> 00:00:15,460
the answer is 1.6 better
known as the golden ratio.

6
00:00:15,550 --> 00:00:19,480
The golden ratio is all around us.
It's in the curvature of the ocean waves,

7
00:00:19,510 --> 00:00:21,190
it's in seashells,

8
00:00:21,220 --> 00:00:25,660
it's in the spiral that makes up our milky
way galaxy from a simple set of rules

9
00:00:25,661 --> 00:00:29,110
and were just enormous complexity
and the universe works this way.

10
00:00:29,410 --> 00:00:30,640
Our brains must as well.

11
00:00:30,670 --> 00:00:34,060
We're going to create our own universe
simulation in 60 lines of python

12
00:00:39,130 --> 00:00:43,510
in 1970 and article was
published in scientific
American about a game created by

13
00:00:43,511 --> 00:00:46,660
a mathematician named John
Conway called the game of life.

14
00:00:46,900 --> 00:00:50,200
Conway was interested in a problem
presented by the computer scientist,

15
00:00:50,350 --> 00:00:51,160
von Neumann,

16
00:00:51,160 --> 00:00:54,970
von Neumann theorize of a type of machine
that could build copies of itself.

17
00:00:55,180 --> 00:00:57,100
He called the universal constructor.

18
00:00:57,220 --> 00:01:00,220
This machine would be useful
for colonizing other planets.

19
00:01:00,280 --> 00:01:04,870
We could theoretically send this machine
to Mars before humans and it could mine

20
00:01:04,871 --> 00:01:08,800
and smelt iron in order to make more
copies of itself and soon an army of these

21
00:01:08,801 --> 00:01:12,970
could help develop an atmosphere before
humans arrived or it's like independence.

22
00:01:12,971 --> 00:01:16,060
Then only Wellsmith could save us.
Welcome to Mars.

23
00:01:16,150 --> 00:01:20,140
He based it off a concept he
called cellular automaton or ca.

24
00:01:20,290 --> 00:01:24,010
The idea behind [inaudible] is that the
behavior of a group can be described by

25
00:01:24,011 --> 00:01:28,570
the interactions between a simple machine
or automaton and you're by identical

26
00:01:28,571 --> 00:01:32,440
automaton that interact with it. In the
game of life, the universe is infinite.

27
00:01:32,441 --> 00:01:36,190
Two dimensional grid of squares cells.
Each cell can be one of two states,

28
00:01:36,280 --> 00:01:40,080
either alive or dead and every cell
interacts with its eight neighbor sells

29
00:01:40,150 --> 00:01:41,890
their just for rules to the game.

30
00:01:41,980 --> 00:01:45,840
Any lifestyle with less than two live
neighbors dies up loneliness and you live

31
00:01:45,841 --> 00:01:49,390
cell with two or three live neighbors
lives on to the next generation or

32
00:01:49,391 --> 00:01:52,570
survives any lives saw with more
than three live neighbors dies of

33
00:01:52,571 --> 00:01:54,310
overpopulation and lively.

34
00:01:54,311 --> 00:01:57,580
Any dead cell with exactly three live
neighbors becomes a lifestyle as if by

35
00:01:57,581 --> 00:01:58,414
reproduction.

36
00:01:58,450 --> 00:02:01,780
Once you say your initial configuration
of cells on the grid and start the game,

37
00:02:01,900 --> 00:02:04,360
complex patterns will start to emerge.
We just,

38
00:02:04,361 --> 00:02:09,040
those four rules like the eater which
eats all sorts of organisms or a breeder

39
00:02:09,041 --> 00:02:13,930
which grows its number of
life cells faster and faster
or gliders and spaceships

40
00:02:13,990 --> 00:02:18,100
and really crazy gigantic ecosystems
that become more complex with time.

41
00:02:18,280 --> 00:02:22,630
Yo. Okay, let's build our own command line
version of the game of life. In Python.

42
00:02:22,990 --> 00:02:26,590
We just have to libraries to import both
CIS and terminal well that it's input

43
00:02:26,591 --> 00:02:29,650
data and read it from terminal.
Let's get right into the main method,

44
00:02:29,670 --> 00:02:31,660
but we will implement
our high level code well.

45
00:02:31,661 --> 00:02:33,580
First one I defined our grit universe.

46
00:02:33,760 --> 00:02:37,150
Get term side is a function that returns
the host terminals within height.

47
00:02:37,390 --> 00:02:38,710
Once we have those two values,

48
00:02:38,830 --> 00:02:41,110
we can format her grid so that
it fits into our terminal.

49
00:02:41,140 --> 00:02:44,080
The grid will be a two dimensional array.
Now that we have our grid defined,

50
00:02:44,110 --> 00:02:46,990
we can try it on the screen
with the update screen function,

51
00:02:47,200 --> 00:02:50,590
which will update the terminal to display
it with a set of ones and Zeros for

52
00:02:50,591 --> 00:02:51,400
each cell.

53
00:02:51,400 --> 00:02:54,700
That cells will be white zeros in
living cells will be read once the Greg,

54
00:02:54,701 --> 00:02:56,080
we'll start off with all dead cells,

55
00:02:56,081 --> 00:02:58,960
so we'll want to set our initial
living cells. Once we set these,

56
00:02:59,020 --> 00:03:02,860
they will evolve within the simulation
while abiding by the four simple rules we

57
00:03:02,861 --> 00:03:05,560
talked about earlier,
the read initial configuration function.

58
00:03:05,620 --> 00:03:09,040
It takes the grid as a perimeter and we'll
ask the user to input the coordinates

59
00:03:09,130 --> 00:03:10,930
of their living cells to start the game.

60
00:03:11,020 --> 00:03:12,910
Once we have our initial
configuration set,

61
00:03:13,000 --> 00:03:15,250
we'll need to know how many
iterations to play the game,

62
00:03:15,370 --> 00:03:17,110
so we'll ask a user for that number.

63
00:03:17,170 --> 00:03:20,620
We'll set an iteration step variable to
keep track of which iteration we're on.

64
00:03:20,800 --> 00:03:22,960
Then update the screen
to show our user input.

65
00:03:22,961 --> 00:03:26,200
It's structures will then create a while
loop that will run for the length of

66
00:03:26,201 --> 00:03:29,710
the game. Inside of our while loop,
we'll create a variable called play,

67
00:03:29,770 --> 00:03:31,360
which will represent the user input.

68
00:03:31,540 --> 00:03:33,880
Either the number of steps
remaining or the quit input,

69
00:03:34,000 --> 00:03:37,990
but don't quit because we're,
if the user types in quit,

70
00:03:38,020 --> 00:03:39,670
we'll break the loop and the game is over.

71
00:03:39,700 --> 00:03:43,720
We will code a try except block to
convert the string input to an integer for

72
00:03:43,721 --> 00:03:46,690
the number of steps and set them to one.
If there is an exception,

73
00:03:47,020 --> 00:03:49,660
then we'll start our for loop for
each step defined by the user.

74
00:03:49,870 --> 00:03:53,110
That means that each time step we're
going to apply the four rules to what's on

75
00:03:53,111 --> 00:03:55,930
the screen until the total
number of iterations is over.

76
00:03:56,200 --> 00:03:58,870
We'll create a new grid that will
store the original grades. Next step.

77
00:03:59,230 --> 00:04:01,150
The next step function
will help us do this.

78
00:04:01,330 --> 00:04:03,130
Let's take a look at that
function in more detail.

79
00:04:03,250 --> 00:04:06,370
It's got a nested for loop in it. This is
where we're going to take our old grid,

80
00:04:06,580 --> 00:04:09,820
apply our four rules to it and store
the result and the updated grill.

81
00:04:10,000 --> 00:04:11,050
It's a nested for loops.

82
00:04:11,051 --> 00:04:14,800
Since we're going to go through every
single cell and the grid matrix to apply

83
00:04:14,801 --> 00:04:17,890
our four rules to each of them at each
of these cells will need to count the

84
00:04:17,891 --> 00:04:19,600
number of live cells around it,

85
00:04:19,750 --> 00:04:23,470
which is what the healthy
neighbors function looks
for. It takes our grid and x,

86
00:04:23,471 --> 00:04:25,120
y coordinates as its parameters.

87
00:04:25,330 --> 00:04:28,120
The live neighbors variables
stores are number of live cells.

88
00:04:28,150 --> 00:04:29,140
Once we have that number,

89
00:04:29,141 --> 00:04:33,010
we can apply our four rules in the
case that our current cell is alive,

90
00:04:33,220 --> 00:04:36,880
any lifestyle with fewer than two live
neighbors dyes as it caused by under

91
00:04:36,881 --> 00:04:40,750
population and any lifestyle with more
than three live neighbors dies as if I

92
00:04:40,751 --> 00:04:44,320
overpopulation. The end result for
both of these cases is a dead cell,

93
00:04:44,380 --> 00:04:46,480
so we can set our current
self to zero or dead.

94
00:04:46,570 --> 00:04:50,620
If either of these is the case else,
it lives since that is our third rule.

95
00:04:50,650 --> 00:04:53,920
Any live cell with exactly two or three
live neighbors lives on to the next

96
00:04:53,921 --> 00:04:56,980
generation. That leads our last
rule, which is four dead cells.

97
00:04:57,220 --> 00:05:00,360
Any dead cell with exactly three
live neighbors, he comes alive.

98
00:05:00,361 --> 00:05:03,340
Sal as if by reproduction, uh, sex.

99
00:05:03,370 --> 00:05:06,610
So we'll send it to alive so that we'll
place our new cell states in the new

100
00:05:06,611 --> 00:05:08,220
grid.
Once we have this new grid,

101
00:05:08,240 --> 00:05:10,900
we'll set it to the original grid and
the new grade where we said to the

102
00:05:10,901 --> 00:05:12,700
original grid,
they switched values.

103
00:05:12,880 --> 00:05:15,730
We can then update the screen to
show the state of our updated grid.

104
00:05:15,970 --> 00:05:17,170
When our loop finishes,

105
00:05:17,200 --> 00:05:20,290
we'll update our iteration step
variable to include the number of steps,

106
00:05:20,291 --> 00:05:21,160
the user input,

107
00:05:21,340 --> 00:05:24,940
and that'll be the end of our wild loop
will run on a script by typing in python

108
00:05:24,970 --> 00:05:28,210
life.py. We'll be able to see
our initial Greg with no values.

109
00:05:28,360 --> 00:05:31,840
I'm going to create two
small glider organisms that
will move through the space.

110
00:05:31,990 --> 00:05:34,420
I'll type in this set of coordinates
for each of them for each.

111
00:05:34,630 --> 00:05:38,800
Then when I'm ready, I'll
say, let's run this thing for
1000 iterations. Yeah, yeah,

112
00:05:38,801 --> 00:05:39,790
yeah, yeah, yeah.

113
00:05:39,820 --> 00:05:42,280
I've got links for you in the
description and definitely subscribe.

114
00:05:42,281 --> 00:05:45,400
If you want to see more programming
videos, I've got to go create a universe,

115
00:05:45,430 --> 00:05:46,690
so thanks for watching.

