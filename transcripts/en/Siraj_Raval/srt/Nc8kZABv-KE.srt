1
00:00:00,210 --> 00:00:03,360
Make javascript great again.
Hello world,

2
00:00:03,361 --> 00:00:08,361
it's to Raj and Google recently
announced the much anticipated javascript

3
00:00:09,120 --> 00:00:13,290
version of its popular machine
learning framework, tensorflow,

4
00:00:13,620 --> 00:00:18,120
dubbing it tensorflow dot j s.
In this video,

5
00:00:18,121 --> 00:00:23,121
we'll use it to build a very simple web
app that can detect any object you show

6
00:00:23,820 --> 00:00:26,100
your Webcam.
Last year,

7
00:00:26,130 --> 00:00:31,130
the Google brain team developed a
library called deep learn dot js.

8
00:00:31,710 --> 00:00:34,710
That was an impressive
contribution to the field,

9
00:00:34,980 --> 00:00:39,980
allowing developers to build
machine learning models in
the browser and it had a

10
00:00:40,321 --> 00:00:43,350
few impressive demos associated with it,

11
00:00:43,530 --> 00:00:48,530
like one that let any user train a model
in real time for image classification.

12
00:00:49,560 --> 00:00:54,450
But a lot of the code was deprecated
and Buggy, so an upgrade was in order.

13
00:00:54,660 --> 00:00:56,010
They made it faster,

14
00:00:56,070 --> 00:01:01,070
made the syntax more readable and added
lots of new low level functions to it

15
00:01:02,340 --> 00:01:06,570
that let developers build very
detailed models in the browser,

16
00:01:06,870 --> 00:01:10,170
eventually renaming the
project to tensorflow. Dot.

17
00:01:10,171 --> 00:01:14,520
JS If we build an AI app
using tensorflow dot js,

18
00:01:14,790 --> 00:01:19,200
it makes predictions and trains
itself entirely client's side.

19
00:01:19,560 --> 00:01:24,560
That means it can use the GPU of whatever
user accesses the APP and it doesn't

20
00:01:25,591 --> 00:01:29,700
have to be an Nvidia
Gpu, Jensen, you bad ass.

21
00:01:29,940 --> 00:01:34,230
It can be any kind of GPU from a Mac book,
Gpu to an android phone,

22
00:01:34,231 --> 00:01:39,231
Gpu usually to consume ml models whether
as a developer or as an end user we'd

23
00:01:41,251 --> 00:01:46,251
have to install a few packages or deal
with some sort of technical issue,

24
00:01:46,770 --> 00:01:50,850
but because tensorflow dot
js works in the browser,

25
00:01:51,240 --> 00:01:53,640
we don't have to install any dependencies.

26
00:01:54,000 --> 00:01:57,600
The library is split up
into two different packages.

27
00:01:57,900 --> 00:02:01,890
The first is core,
which is a flexible low level API.

28
00:02:02,010 --> 00:02:06,300
It's syntactically pretty similar
to the tensorflow python library.

29
00:02:06,690 --> 00:02:08,520
Then there's the layers API,

30
00:02:08,580 --> 00:02:13,080
which is similar to care os it's higher
level and makes it easier to build

31
00:02:13,081 --> 00:02:17,340
models at the expense of fine
grain control over the details.

32
00:02:17,640 --> 00:02:22,640
There's a lot of potential for using
client side data to help train models.

33
00:02:23,040 --> 00:02:26,400
It really opens up a whole
new world of machine learning.

34
00:02:26,640 --> 00:02:31,640
One where we can start thinking more about
how server sent events can be used to

35
00:02:32,161 --> 00:02:37,161
feed rich data into these models in real
time while operating in the browser.

36
00:02:38,580 --> 00:02:43,580
We can create apps that continuously
learn and even if users have only a small

37
00:02:44,011 --> 00:02:45,270
amount of data to give,

38
00:02:45,540 --> 00:02:50,540
we can use the library's ability to
perform transfer learning to augment an

39
00:02:50,641 --> 00:02:53,610
existing models capability with new data.

40
00:02:54,000 --> 00:02:57,150
We can even load model
files trained in tensorflow,

41
00:02:57,151 --> 00:03:00,790
python or c plus plus
directly to the browser,

42
00:03:01,060 --> 00:03:05,500
and because the data never leaves
the client, it's privacy friendly.

43
00:03:05,560 --> 00:03:10,560
We can train our models on data clients
side without ever seeing the actual data

44
00:03:11,410 --> 00:03:12,243
itself.

45
00:03:12,400 --> 00:03:17,230
There's a lot of potential
to use tensorflow dot js
to create web apps that can

46
00:03:17,231 --> 00:03:18,670
learn from their users.

47
00:03:19,120 --> 00:03:24,120
You can crowdsource the training of a
music generating AI by having the users

48
00:03:24,490 --> 00:03:26,980
make their own songs in the browser,

49
00:03:27,340 --> 00:03:32,340
have users submit articles and create an
AI that learns to write in the same way

50
00:03:33,400 --> 00:03:38,400
they do or even learn from users browsing
habits to present them with content

51
00:03:40,030 --> 00:03:41,860
that's most suitable for them.

52
00:03:42,790 --> 00:03:45,640
When it comes to installing
tensorflow dot js,

53
00:03:45,820 --> 00:03:47,890
we don't even have to do anything.

54
00:03:48,100 --> 00:03:50,860
If we create a simple html file,

55
00:03:51,070 --> 00:03:56,070
we can access it by simply adding a
script tag to our code that points to the

56
00:03:56,381 --> 00:03:57,490
library online.

57
00:03:57,910 --> 00:04:01,690
Then we can use the library
right under that as a test,

58
00:04:01,780 --> 00:04:06,730
we can write a basic html file that
simply prints out a tenser and in our

59
00:04:06,731 --> 00:04:11,590
javascript console in the browser, we
can see that it works. No dependencies,

60
00:04:11,800 --> 00:04:14,470
no other scripts to run too legit to quit.

61
00:04:15,010 --> 00:04:17,770
Let's look at some of the core
components of the library.

62
00:04:18,220 --> 00:04:20,380
The reason it's called tensorflow.
Dot.

63
00:04:20,381 --> 00:04:25,381
JS is because deep learning models are
essentially a graph of computations.

64
00:04:26,290 --> 00:04:31,120
That is, we have some input data. This
could be an image or a piece of text.

65
00:04:31,510 --> 00:04:34,900
All of this could be represented
by a series of numbers.

66
00:04:35,200 --> 00:04:40,030
We feed that input data into a
computing graph. At each step,

67
00:04:40,150 --> 00:04:45,150
we perform a series of mathematical
operations on that input data,

68
00:04:45,640 --> 00:04:50,640
slowly transforming it and we call
the data that flows through the graph

69
00:04:51,160 --> 00:04:51,993
tensors.

70
00:04:52,180 --> 00:04:56,410
Since a tensor is a group
of numbers in n dimensions,

71
00:04:56,590 --> 00:04:59,230
that can be one dimension
or a hundred dimensions.

72
00:04:59,650 --> 00:05:02,620
The tensors flow through the graph,

73
00:05:02,770 --> 00:05:05,650
eventually producing an output tensor,

74
00:05:05,800 --> 00:05:10,030
which is the prediction that
it makes in tensorflow dot. Js.

75
00:05:10,330 --> 00:05:13,510
The primary unit of data
is called the tensor,

76
00:05:13,511 --> 00:05:15,970
which we can access very easily.

77
00:05:16,000 --> 00:05:21,000
It's a self named a tensor instance has
a shape attribute that defines the array

78
00:05:21,970 --> 00:05:24,910
shape. It's found in the
TF dot tents or function.

79
00:05:25,270 --> 00:05:27,190
We can create tensors of any size.

80
00:05:27,191 --> 00:05:32,191
We just have to define how many dimensions
we'd like as well as the values that

81
00:05:32,621 --> 00:05:33,850
make up the tensor.

82
00:05:34,210 --> 00:05:38,440
If we want to get more specific
and make the code more readable,

83
00:05:38,680 --> 00:05:43,680
we can use other functions like TF dot
tents or Wendy or TF dot tents or Tootie

84
00:05:44,500 --> 00:05:46,660
that specify that the tents are in.

85
00:05:46,661 --> 00:05:50,440
Question is have one or two
dimensions respectively.

86
00:05:50,920 --> 00:05:54,220
Tensors are also immutable,
meaning once they're created,

87
00:05:54,370 --> 00:05:56,470
we cannot change their value.

88
00:05:56,780 --> 00:06:01,760
Instead we can perform operations
on them generating new tensors,

89
00:06:02,090 --> 00:06:07,090
but there should be some mutability when
building a machine learning model right

90
00:06:08,150 --> 00:06:12,440
after all the model must
update itself as it learns.

91
00:06:12,710 --> 00:06:15,050
That's where variables come into play.

92
00:06:15,500 --> 00:06:19,280
Variables are initialized
with a tensor of values,

93
00:06:19,640 --> 00:06:22,730
but unlike tensors,
their values are mutable.

94
00:06:22,970 --> 00:06:27,440
We can assign a new tense
or to an existing variable
using the assigned method.

95
00:06:27,860 --> 00:06:32,450
They're used to store and update
values during model training.

96
00:06:32,810 --> 00:06:37,430
But remember that tensors are
only half of the equation here.

97
00:06:37,790 --> 00:06:42,790
We need to perform operations on them
for this to be machine learning slash for

98
00:06:42,891 --> 00:06:43,850
us to be cool.

99
00:06:44,270 --> 00:06:49,100
Operations or ops for short allow
us to manipulate the tensors.

100
00:06:49,490 --> 00:06:54,490
The library offers a huge range of ops
that allow us to perform fast matrix math

101
00:06:55,490 --> 00:07:00,490
on tensors easily performing calculations
on groups of numbers in parallel.

102
00:07:00,860 --> 00:07:03,200
And because it's a changeable API,

103
00:07:03,590 --> 00:07:08,590
we can call ops on the result of ops on
the result of ops on the result of you

104
00:07:09,621 --> 00:07:14,090
get the point. So what does
building a model actually look like?

105
00:07:14,120 --> 00:07:17,720
In tensorflow dot js,
we've got two options.

106
00:07:17,810 --> 00:07:22,610
The first is to use ops directly to
represent the work the model does.

107
00:07:22,950 --> 00:07:25,130
This is the low level part of the API.

108
00:07:25,131 --> 00:07:29,990
We can define in detail every
ad multiplication, subtraction,

109
00:07:30,020 --> 00:07:34,850
operation that's applied to our tensors
in what order, how often, et cetera.

110
00:07:35,330 --> 00:07:36,320
Alternatively,

111
00:07:36,350 --> 00:07:40,910
if we want to quickly prototype and
model and don't care too much about the

112
00:07:40,911 --> 00:07:41,744
details,

113
00:07:41,930 --> 00:07:46,930
we can use the high level API using TF
dot model to construct a model out of

114
00:07:47,151 --> 00:07:47,984
layers.

115
00:07:48,050 --> 00:07:52,730
These are a popular abstraction in deep
learning adapted from the [inaudible]

116
00:07:52,790 --> 00:07:57,790
library in that a neural network consists
of layers of operations and while

117
00:07:59,151 --> 00:08:03,440
sometimes a layer needs to be written
out as multiple lines of code,

118
00:08:03,770 --> 00:08:08,770
a high level version of this allows the
developer to define a layer as a single

119
00:08:09,470 --> 00:08:13,400
line of code specifying the
necessary parameters right there.

120
00:08:14,300 --> 00:08:15,500
All right? All right. All right.

121
00:08:15,530 --> 00:08:20,530
Let's get to our demo of having an AI
predict what type of object is on our

122
00:08:21,280 --> 00:08:22,110
Webcam.

123
00:08:22,110 --> 00:08:27,110
We'll use a popular machine learning
model called Yolo or you only look once.

124
00:08:28,280 --> 00:08:33,260
The way it works is that it first divides
a given image up into a grid of 13 by

125
00:08:33,261 --> 00:08:34,340
13 cells.

126
00:08:34,580 --> 00:08:38,810
Each of these cells is responsible
for predicting five bounding boxes.

127
00:08:39,140 --> 00:08:43,640
A bounding box describes the
rectangle that encloses the object.

128
00:08:44,000 --> 00:08:48,680
The model will output a confidence
score that tells us how certain that the

129
00:08:48,681 --> 00:08:53,000
predicted bounding box
actually encloses some object.

130
00:08:54,050 --> 00:08:59,010
Once it does that, it'll look something
like this for each downing box.

131
00:08:59,100 --> 00:09:04,100
The cell also predicts a class as
in what it thinks that object is.

132
00:09:04,590 --> 00:09:08,670
It gives a probability distribution
over all the possible classes,

133
00:09:08,940 --> 00:09:13,940
and it does this after having been trained
on a Dataset that contains a set of

134
00:09:14,191 --> 00:09:15,990
labeled image classes.

135
00:09:16,470 --> 00:09:21,470
The confidence score for the bounding
box and the class prediction are combined

136
00:09:22,050 --> 00:09:23,730
into one final score.

137
00:09:24,000 --> 00:09:29,000
That tells us the probability that this
bounding box contains a specific type of

138
00:09:29,371 --> 00:09:33,960
object. Since most of the boxes will
have very low confidence scores,

139
00:09:34,200 --> 00:09:39,180
we only keep the boxes whose
final score is 30% or more,

140
00:09:39,450 --> 00:09:41,940
which leaves us with a final prediction.

141
00:09:42,300 --> 00:09:45,120
The architecture of Yolo is pretty simple.

142
00:09:45,150 --> 00:09:48,060
It's just a convolutional neural network.

143
00:09:48,540 --> 00:09:52,830
I have an incredibly detailed
video on comp nets on my channel.

144
00:09:52,890 --> 00:09:56,490
See the link in the video
description for more, but it's got,

145
00:09:56,520 --> 00:10:01,350
it's got just a couple of these layers
repeated over and over and over again.

146
00:10:01,740 --> 00:10:06,740
We give the network an input image and
in a single pass it will output a tensor

147
00:10:06,900 --> 00:10:10,380
that describes the bounding
boxes for the grid cells.

148
00:10:10,740 --> 00:10:15,740
Then all we'll need to do is compute the
final scores for the bounding boxes and

149
00:10:15,960 --> 00:10:19,260
throw away the ones that
aren't above our threshold,

150
00:10:19,590 --> 00:10:23,490
but since we don't know how
fast a user's GPU will be,

151
00:10:23,790 --> 00:10:27,600
we'll use a tiny version of
this model called tiny Yolo,

152
00:10:27,840 --> 00:10:32,370
which uses fewer layers and is faster,
but also a bit less accurate.

153
00:10:32,760 --> 00:10:36,510
We can import this model into
tensorflow dot js easily.

154
00:10:36,870 --> 00:10:41,700
Then access our Webcam programmatically
to retrieve the image frame.

155
00:10:42,030 --> 00:10:47,030
We can apply each image to our Yolo model
in real time and have the bounding box

156
00:10:47,940 --> 00:10:50,820
layered on top of the image for us to see.

157
00:10:51,180 --> 00:10:54,990
Since the model is already trained,
we don't need to train it.

158
00:10:55,200 --> 00:10:58,380
We're just repurposing it
for use in the browser.

159
00:10:58,830 --> 00:11:03,060
So now it'll tell me whatever it is
that I'm putting in front of the Webcam.

160
00:11:03,180 --> 00:11:07,050
T three things to keep in mind
from this video. Tensorflow. Dot.

161
00:11:07,051 --> 00:11:11,460
Js is the javascript version of Google's
popular at machine learning library,

162
00:11:11,790 --> 00:11:16,790
consisting of both a low level core
API and a high level layers API from

163
00:11:17,371 --> 00:11:18,960
building and training models.

164
00:11:19,410 --> 00:11:24,410
It uses the user's Gpu no matter what
kind for both training and inference,

165
00:11:25,830 --> 00:11:28,770
which opens up a whole
new world of possibility,

166
00:11:29,010 --> 00:11:31,230
including training on real time data.

167
00:11:31,680 --> 00:11:36,680
And we can port existing ml models to
the js framework and repurpose them for

168
00:11:37,411 --> 00:11:41,760
browser use pretty easily. If you want
to learn more, hit the subscribe button.

169
00:11:41,790 --> 00:11:46,170
And for now I've got to use tensorflow
dot. Js so thanks for watching.

