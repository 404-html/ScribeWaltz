1
00:00:00,090 --> 00:00:00,811
Hello world.

2
00:00:00,811 --> 00:00:05,250
It's Saroj and it seems like these
days everybody is creating some kind of

3
00:00:05,251 --> 00:00:09,810
cryptocurrency token for their business
or research or even just for fun.

4
00:00:10,080 --> 00:00:14,500
Pot coined sponsored a celebrity's
trip to North Korea. What the fuck?

5
00:00:14,970 --> 00:00:15,840
In this video,

6
00:00:15,870 --> 00:00:19,560
I'll show you how you can make your
own token using the etherium platform.

7
00:00:19,890 --> 00:00:24,000
When bitcoin launched in 2009 as
the world's first cryptocurrency,

8
00:00:24,240 --> 00:00:28,170
it had the single goal of allowing for
value transfer without the need for a

9
00:00:28,171 --> 00:00:29,004
middleman.

10
00:00:29,160 --> 00:00:34,140
Bitcoin's blockchain data structure is
essentially a worldwide excel spreadsheet

11
00:00:34,320 --> 00:00:37,710
that is formed by lots of
computers talking to each other.

12
00:00:38,040 --> 00:00:42,420
This blockchain is a digital ledger
continuously recording and verifying

13
00:00:42,510 --> 00:00:46,560
records. It's used to track and
verify bitcoin transactions.

14
00:00:46,800 --> 00:00:50,970
Etherium is also a public blockchain
network and its appeal is that it has its

15
00:00:51,000 --> 00:00:55,200
own Turing complete scripting language
that lets developers build what are

16
00:00:55,201 --> 00:00:56,730
called smart contracts.

17
00:00:57,060 --> 00:01:02,060
Smart contracts are strings of computer
code capable of automatically executing

18
00:01:02,430 --> 00:01:04,980
when certain predetermined
conditions are met.

19
00:01:05,130 --> 00:01:09,330
Instead of requiring a single
central authority to say Yay or Nay,

20
00:01:09,540 --> 00:01:13,860
these contracts are self operated. For
example, a smart contract could say,

21
00:01:13,861 --> 00:01:18,861
pay Joe $10 every time he watches Oprah
speech and cries and it would pay Joe

22
00:01:19,381 --> 00:01:23,910
once those conditions are met
because all the nodes run this code,

23
00:01:24,150 --> 00:01:29,150
etherium can be considered a worldwide
computer that no one can turn off and

24
00:01:30,000 --> 00:01:33,150
that no one can tamper with.
It runs exactly as programmed.

25
00:01:33,151 --> 00:01:38,040
It's like using a service like Amazon
or digital ocean to upload programs and

26
00:01:38,041 --> 00:01:42,390
run them, except there isn't a single
party behind it. Sorry, not sorry,

27
00:01:42,391 --> 00:01:43,320
Mr Bayzos.

28
00:01:43,860 --> 00:01:48,360
Ether is the cryptocurrency that powers
this network by allowing users to pay

29
00:01:48,361 --> 00:01:50,370
for smart contract transaction fees.

30
00:01:50,940 --> 00:01:55,600
So one type of smart contract
that's gotten really popular
recently is the token

31
00:01:55,601 --> 00:02:00,601
smart contract tokens or digital assets
that can represent anything from loyalty

32
00:02:00,691 --> 00:02:02,880
points to vouchers to IOUs,

33
00:02:03,030 --> 00:02:06,900
to securities to actual
physical objects like vibrators.

34
00:02:07,230 --> 00:02:10,920
A token is nothing more than a smart
contract running on top of the etherium

35
00:02:11,070 --> 00:02:14,970
blockchain. It's a set of functions
with an associated database.

36
00:02:15,270 --> 00:02:20,040
The code describes the behavior of the
token and the database is just a table of

37
00:02:20,041 --> 00:02:23,820
rows and columns tracking
who owns how many tokens.

38
00:02:24,150 --> 00:02:29,150
If a user or another smart contract in
etherium sends a message to that tokens

39
00:02:29,251 --> 00:02:34,050
contract in the form of the transaction,
the code updates it's database,

40
00:02:34,440 --> 00:02:39,300
so let's say a wallet APP sends a message
to a tokens contract to transfer funds

41
00:02:39,301 --> 00:02:42,060
from Joe to Jack the tokens contract.

42
00:02:42,061 --> 00:02:46,380
We'll first check that the message was
signed by Joe and that he has sufficient

43
00:02:46,381 --> 00:02:47,760
funds to cover the payment.

44
00:02:48,060 --> 00:02:52,680
Then it moves the funds from Joe's
account to Jack's account in the database.

45
00:02:53,010 --> 00:02:55,860
It will then send a response
letting the wallet, no,

46
00:02:55,861 --> 00:03:00,610
that transaction was a success in order
to create a user friendly and broadly

47
00:03:00,611 --> 00:03:03,160
accessible system per token creation.

48
00:03:03,520 --> 00:03:08,290
A set of standards called Erc 20 was
created by the etherium developers.

49
00:03:08,650 --> 00:03:13,420
Erc 20 defines a set of six functions
that other smart contracts within the

50
00:03:13,421 --> 00:03:16,780
etherium ecosystem will
understand and recognize.

51
00:03:17,350 --> 00:03:18,970
These include for instance,

52
00:03:19,030 --> 00:03:24,030
how to transfer a token by the owner or
on behalf of the owner and how to access

53
00:03:24,251 --> 00:03:28,180
data like name, symbol, supply
and balance about the token.

54
00:03:28,210 --> 00:03:32,260
Together these functions and events make
etherium tokens work the same almost

55
00:03:32,261 --> 00:03:34,900
everywhere within the etherium ecosystem.

56
00:03:34,960 --> 00:03:39,100
This interoperability is important
to spur an ecosystem. As a result,

57
00:03:39,250 --> 00:03:44,250
nearly all wallets that support ether
now also support Erc 20 compliant tokens,

58
00:03:44,500 --> 00:03:47,200
so let's create a standard Erc 20 token.

59
00:03:47,290 --> 00:03:51,010
A set amount will be created and we
won't have any fancy rules like finance

60
00:03:51,011 --> 00:03:52,630
skynet to with all the profits.

61
00:03:53,110 --> 00:03:57,400
The first step is to decide what we want
our token to be. We'll decide a name,

62
00:03:57,401 --> 00:04:01,000
symbol, number of decimal places, and
the number of tokens in circulation.

63
00:04:01,360 --> 00:04:04,660
Most tokens have 18 decimal places.
Let's keep it simple.

64
00:04:04,690 --> 00:04:08,350
We want people to either have a
token or not, nothing in between,

65
00:04:08,500 --> 00:04:12,730
so we'll choose zero. Our next step is
to actually code this token contract.

66
00:04:13,030 --> 00:04:13,811
Luckily for us,

67
00:04:13,811 --> 00:04:18,730
we can just copy and paste a standard
Erc 20 token template contract written in

68
00:04:18,731 --> 00:04:20,890
solidity etherium scripting language.

69
00:04:21,220 --> 00:04:25,390
It's a token contract with functions
that defined the total amount of tokens

70
00:04:25,600 --> 00:04:26,320
balance.

71
00:04:26,320 --> 00:04:31,320
The act of transferring funds
and approving transactions
will inherit from the

72
00:04:31,511 --> 00:04:36,250
initial token class. To add the details
of how our specific token will work.

73
00:04:36,370 --> 00:04:37,690
Using custom variables,

74
00:04:38,020 --> 00:04:42,190
we can replace the filler words with the
values we find to be best in our text

75
00:04:42,191 --> 00:04:43,000
editor.

76
00:04:43,000 --> 00:04:47,050
The supply we set for our
token is correlated to the
amount of decimal places we

77
00:04:47,051 --> 00:04:51,640
set. So if we had a token with zero
decimal places and a hundred tokens,

78
00:04:51,820 --> 00:04:56,140
then the supply would be a hundred but
if we had 18 decimal places and a hundred

79
00:04:56,141 --> 00:04:59,290
tokens, then the supply would
be a much bigger number.

80
00:04:59,440 --> 00:05:03,670
We also set the amount of tokens we
receive as a creator of the contract.

81
00:05:03,910 --> 00:05:08,590
For now, we'll just set it equal to the
supply. So we receive all the tokens.

82
00:05:08,860 --> 00:05:10,450
We could set it with different rules,

83
00:05:10,451 --> 00:05:13,420
so different founders of our project
could receive different amounts,

84
00:05:13,630 --> 00:05:16,090
but we're going lone wolf right now.
All right,

85
00:05:16,120 --> 00:05:20,380
now we'll deploy this token to the
etherium test net just to see if it works.

86
00:05:20,620 --> 00:05:25,060
We can download metta mask since it has
an easy to use interface to test this

87
00:05:25,061 --> 00:05:28,600
out. Once installed, we'll set
up the rops, didn't test network.

88
00:05:28,780 --> 00:05:31,660
Then we'll head to the
solidity remix compiler,

89
00:05:31,840 --> 00:05:36,040
which is an online compiler that
publishes smart contracts straight to the

90
00:05:36,041 --> 00:05:36,874
blockchain.

91
00:05:37,210 --> 00:05:41,380
We can copy and paste the source code
of our contract into the main window.

92
00:05:41,650 --> 00:05:45,910
We can go to the setting and select
the latest release compiler version and

93
00:05:45,970 --> 00:05:47,770
uncheck enable optimization.

94
00:05:48,100 --> 00:05:51,010
We'll go back to the
contract tab and hit create.

95
00:05:51,190 --> 00:05:52,840
Under the name of the token function.

96
00:05:52,930 --> 00:05:57,710
We create Mehta mask will then pop up
asking us to hit submit to pay for the

97
00:05:57,711 --> 00:06:00,770
transaction. Of course we
will. It's not real ether.

98
00:06:00,771 --> 00:06:05,090
It's a test net and when we hit submit
it'll say contract pending in metal mask.

99
00:06:05,360 --> 00:06:09,050
When we click the date, it'll bring up
a screen that details the transaction.

100
00:06:09,470 --> 00:06:13,790
Now we can see if it actually created
the tokens and sent them to our wallet.

101
00:06:14,060 --> 00:06:18,080
We'll copy the contract address and
add it to the Metta Mask Tokens Tab.

102
00:06:18,380 --> 00:06:20,390
It says we have a hundred tokens,
so it worked.

103
00:06:20,720 --> 00:06:24,800
Now we can send those tokens or sell
them on a market if we decide to.

104
00:06:25,160 --> 00:06:28,730
We can also create another contract
that automatically sends these tokens of

105
00:06:28,731 --> 00:06:31,190
people.
If they send us a certain amount of ether,

106
00:06:31,370 --> 00:06:34,370
which could power your
next ICO like Jesus coin.

107
00:06:34,730 --> 00:06:37,850
We'll also want to verify the source
code so that the public knows we're not

108
00:06:37,851 --> 00:06:38,930
doing anything shady.

109
00:06:39,560 --> 00:06:43,220
We can deploy our token to the main
net so people can actually use it.

110
00:06:43,370 --> 00:06:45,650
So we'll basically do the
same thing we just did,

111
00:06:45,830 --> 00:06:49,730
except instead of being connected to the
rob test network will be connected to

112
00:06:49,731 --> 00:06:53,450
the main net. Will need to fund our
contract with real ether. To do this,

113
00:06:53,660 --> 00:06:58,370
it can cost anywhere from 20 to $50
worth of ether. As of now is summarize.

114
00:06:58,430 --> 00:07:02,900
A token is a digital asset that can
represent anything from loyalty points to

115
00:07:02,901 --> 00:07:04,730
vouchers to securities.

116
00:07:05,060 --> 00:07:10,040
Tokens are smart contracts and we can
easily create them using the etherium

117
00:07:10,041 --> 00:07:13,430
blockchains, Turing complete
scripting language called solidity.

118
00:07:13,580 --> 00:07:14,810
And to create a token,

119
00:07:15,170 --> 00:07:19,100
we just fill in a smart contract template
written in solidity with our details

120
00:07:19,250 --> 00:07:23,180
and deploy it to the theory and
blockchain the a tool called Metta mask.

121
00:07:23,510 --> 00:07:25,940
Please subscribe for more
programming videos. And for now,

122
00:07:26,000 --> 00:07:28,880
I've got a great Suraj Goin,
so thanks for watching.

