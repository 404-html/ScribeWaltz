1
00:00:00,510 --> 00:00:04,860
What are stigma? 80 most Netties,
which means orders. I'm ready.

2
00:00:04,861 --> 00:00:08,010
My home has been in ancient Greek.
Hello world.

3
00:00:08,040 --> 00:00:12,660
It's Saroj and Coobernetti's is an open
source project that enables developers

4
00:00:12,661 --> 00:00:16,230
to automates the process of deploying,
scaling,

5
00:00:16,290 --> 00:00:19,470
and managing containerized apps.
That's right.

6
00:00:19,560 --> 00:00:24,560
Not just any kind of apps specifically
containerized that by the way,

7
00:00:24,751 --> 00:00:29,220
if you want to be notified when my
weekly tutorial videos are released,

8
00:00:29,370 --> 00:00:30,600
hit the subscribe button.

9
00:00:30,870 --> 00:00:35,430
I'll of course explain what
containerized means. In fact,

10
00:00:35,460 --> 00:00:38,970
we'll go through the three steps
necessary to make this happen.

11
00:00:39,240 --> 00:00:42,300
We'll create a cloud
environment for our application.

12
00:00:42,301 --> 00:00:46,890
Using Google cloud will build and
containerize an image classifier APP.

13
00:00:47,220 --> 00:00:51,450
Then we'll deploy our app to the
cloud using the power of Kubernetes,

14
00:00:51,750 --> 00:00:56,640
and this same process works for
any kind of APP, email services,

15
00:00:56,641 --> 00:01:01,641
social networks on APP that raises $1
million just to send Yoda people literally

16
00:01:02,460 --> 00:01:07,170
anything is possible. Really any kind
of APP. A container is a lightweight,

17
00:01:07,180 --> 00:01:11,940
standalone executable package of a
piece of software that has everything

18
00:01:11,941 --> 00:01:16,140
necessary to run it.
Code runtime system tools,

19
00:01:16,141 --> 00:01:20,280
system libraries and settings.
It wraps up everything on APP needs,

20
00:01:20,281 --> 00:01:24,570
not just the code, but all
the dependencies, libraries,
and configurations.

21
00:01:24,840 --> 00:01:29,160
It abstracts away from any of the
environments, physical or virtual needs,

22
00:01:29,161 --> 00:01:30,030
which it will run on.

23
00:01:30,330 --> 00:01:35,220
That means containerized
apps run consistently across
environments from Dev to

24
00:01:35,221 --> 00:01:35,790
test,

25
00:01:35,790 --> 00:01:40,790
to prod from a local machine to a cloud
instance without the need for retooling.

26
00:01:41,250 --> 00:01:41,881
Nowadays,

27
00:01:41,881 --> 00:01:46,881
users expect Apps to be available 24
seven and developers expect to deploy new

28
00:01:47,341 --> 00:01:49,590
versions of these apps
several times a day.

29
00:01:49,920 --> 00:01:54,000
Containerization helps package
software to reach these goals,

30
00:01:54,210 --> 00:01:59,010
enabling apps to be released an
updated in an easy and fast way without

31
00:01:59,011 --> 00:02:01,350
downtime.
Over the past few years,

32
00:02:01,351 --> 00:02:05,910
developers have come to rely on container
technology to increase the portability

33
00:02:06,180 --> 00:02:11,180
of their code and ensure that their apps
run consistently across a variety of

34
00:02:11,370 --> 00:02:12,210
platforms.

35
00:02:12,450 --> 00:02:17,450
They enable a much shorter deployment
time and improved APP or liability for 51

36
00:02:18,091 --> 00:02:23,091
research predicts the APP container market
will approach two point $7 billion in

37
00:02:23,521 --> 00:02:28,080
2020 up from a projected
1.5 billion in 2018 not bad.

38
00:02:28,081 --> 00:02:32,670
Considering that containers only started
to become popular five years ago with

39
00:02:32,671 --> 00:02:36,270
the release of a popular open
source project called docker.

40
00:02:36,570 --> 00:02:40,920
Docker was the first to package Linux
kernel features together in a way that

41
00:02:40,921 --> 00:02:43,950
allowed teams to create artifacts easily.

42
00:02:43,951 --> 00:02:48,300
They could run on different servers
and it's now become a household name.

43
00:02:48,600 --> 00:02:53,600
Docker containers made it so much easier
for developers to enjoy parody between

44
00:02:53,820 --> 00:02:55,050
each of their environments.

45
00:02:55,230 --> 00:02:59,410
They could run the same exact
container image across all them.

46
00:02:59,770 --> 00:03:03,610
Instead of building out an entire
server to run a service or an APP,

47
00:03:03,760 --> 00:03:08,740
just run a docker container image on a
host and it will use a smaller amounts of

48
00:03:08,741 --> 00:03:11,380
that host's resources to run the APP.

49
00:03:11,620 --> 00:03:14,410
Compared to traditional
virtual machine images,

50
00:03:14,650 --> 00:03:17,230
containers are lightweight and ephemeral.

51
00:03:17,410 --> 00:03:22,410
They can be spun up and spun down as
resources increased or decreased or as the

52
00:03:22,481 --> 00:03:27,481
APP scales in the age of cloud
architectures and increasingly distributed

53
00:03:27,701 --> 00:03:29,080
computing environments,

54
00:03:29,350 --> 00:03:33,040
docker has seen very
rapid adoption these days.

55
00:03:33,070 --> 00:03:37,900
Docker has become synonymous with the
container technology at its core. In fact,

56
00:03:38,170 --> 00:03:42,190
you might even hear a developer say docker
when they're really just referring to

57
00:03:42,191 --> 00:03:46,190
containers. In general. I
dockerized that using mezzos you,

58
00:03:47,020 --> 00:03:52,020
you did what a problem arose though
early adopters of docker found that they

59
00:03:52,331 --> 00:03:56,290
were soon running hundreds or even
thousands of workloads inside these

60
00:03:56,291 --> 00:03:59,560
containers. This quickly became
an operational challenge.

61
00:03:59,561 --> 00:04:02,980
If you have a few
containers and a few apps,

62
00:04:03,250 --> 00:04:05,560
orchestrating them isn't too complicated,

63
00:04:05,561 --> 00:04:08,770
but with thousands of
containers and services,

64
00:04:08,890 --> 00:04:11,200
it definitely gets complicated.

65
00:04:11,500 --> 00:04:16,500
Enter Coobernetti's Kubernetes is one
of the highest velocity projects in open

66
00:04:16,841 --> 00:04:17,860
source history.

67
00:04:18,160 --> 00:04:22,060
It was first developed as an internal
tool in the go programming language at

68
00:04:22,061 --> 00:04:22,840
Google.

69
00:04:22,840 --> 00:04:27,840
Then later made open source as a tool
for any developer to use for container

70
00:04:27,911 --> 00:04:28,810
orchestration.

71
00:04:29,140 --> 00:04:33,910
Kubernetes is a tool for automating the
deployment management and scaling of

72
00:04:33,911 --> 00:04:35,140
containerized apps.

73
00:04:35,170 --> 00:04:40,170
It makes the ongoing orchestration of
potentially thousands of containers

74
00:04:40,480 --> 00:04:44,020
manageable and helps ensure
your app is always running.

75
00:04:44,380 --> 00:04:49,380
Coubernetties is becoming to orchestration
as docker has become to containers,

76
00:04:49,870 --> 00:04:54,550
as Microsoft has become to open
source somehow pretty much synonymous.

77
00:04:54,700 --> 00:04:59,260
Think of docker and Kubernetes as two
significant pieces of a larger system.

78
00:04:59,500 --> 00:05:03,700
Docker will containerize
your APP. COOBERNETTI's.
We'll automate it's pipeline.

79
00:05:03,970 --> 00:05:07,630
Let's go over some of the fee
concepts in Coobernetti's. First,

80
00:05:07,690 --> 00:05:10,210
a container is the smallest unit it has.

81
00:05:10,360 --> 00:05:14,530
The whole point of Kubernetes is to
manage, deploy, and monitor containers.

82
00:05:14,890 --> 00:05:18,820
These could be docker containers,
but any kind of containers work.

83
00:05:19,120 --> 00:05:22,060
A node is the host that
the container runs on.

84
00:05:22,360 --> 00:05:27,070
A pod is a management unit
in Coobernetti's comprise
of one or more containers.

85
00:05:27,400 --> 00:05:30,670
Each pod has a unique IP
address in storage namespace.

86
00:05:30,730 --> 00:05:34,330
All containers share these
networking and storage resources.

87
00:05:34,600 --> 00:05:38,650
We use a Yammel file to define
a pod Yammel, by the way,

88
00:05:38,651 --> 00:05:42,010
since for yet another markup language.
I love that.

89
00:05:42,011 --> 00:05:44,200
The file extension is literally a mean.

90
00:05:44,650 --> 00:05:49,390
This Yammel file contains pod attributes
like any med at metadata or the API

91
00:05:49,391 --> 00:05:53,920
version. Then there's deployment. When
a pod is deleted, it's gone for good,

92
00:05:53,980 --> 00:05:55,180
but with deployment,

93
00:05:55,360 --> 00:06:00,360
Kubernetes ensures that number of pods
that are user specifies is always up and

94
00:06:00,921 --> 00:06:03,260
running in the system.
A deployment,

95
00:06:03,261 --> 00:06:06,920
we'll specify how many
instances of a pod we'll run.

96
00:06:07,160 --> 00:06:12,110
We again use a Yammel file to define
this deployment with instructions. Oh,

97
00:06:12,111 --> 00:06:16,250
and there's one more Yammel file
that's used. It helps define a service.

98
00:06:16,490 --> 00:06:21,230
A service is an abstraction that defines
a local set of pods and a policy by

99
00:06:21,231 --> 00:06:24,410
which to access them.
Sometimes called a microservice.

100
00:06:24,440 --> 00:06:28,790
A service is connected to a deployment
via the label attributes. In this case,

101
00:06:28,791 --> 00:06:30,440
the label is Ngi and ECS.

102
00:06:30,800 --> 00:06:34,790
Kubernetes depends on these Yamille files
to check if the desired pod deployment

103
00:06:34,791 --> 00:06:36,830
or service is running as defined.

104
00:06:37,280 --> 00:06:41,270
The overall architecture of
Kubernetes has three main components,

105
00:06:41,450 --> 00:06:45,320
master nodes, worker nodes in
a distributed key value store.

106
00:06:45,560 --> 00:06:49,520
The master node is the entry point for
all administrative tasks related to

107
00:06:49,521 --> 00:06:53,810
managing the Kubernetes cluster.
The master node has an API server,

108
00:06:54,140 --> 00:06:57,500
a scheduler that schedules
casks to worker nodes.

109
00:06:57,710 --> 00:07:01,700
It controller manager that watches
the desired state of the objects.

110
00:07:01,701 --> 00:07:05,900
It manages and watches their current
state throughout the API server.

111
00:07:06,110 --> 00:07:09,500
If the current state of an object
doesn't meet the desired states,

112
00:07:09,710 --> 00:07:14,060
then the control loop takes corrective
steps to ensure the current state is the

113
00:07:14,061 --> 00:07:18,290
same as the desired states and
one more a key value store.

114
00:07:18,290 --> 00:07:22,250
It stores the cluster state
and configuration details.

115
00:07:22,370 --> 00:07:27,370
It also uses a special consensus
mechanism to let multiple servers agree on

116
00:07:27,531 --> 00:07:29,880
these values.
There's more to Coopernetti's,

117
00:07:29,900 --> 00:07:32,300
but that's it for a high level overview.

118
00:07:32,540 --> 00:07:37,540
Now let's use Kubernetes to help deploy
an image classifier web API that anyone

119
00:07:37,911 --> 00:07:42,170
can use. Three steps here. We'll
create our environment on Google cloud.

120
00:07:42,171 --> 00:07:46,220
Then we'll use the care os library to
build a deep neural network for image

121
00:07:46,221 --> 00:07:47,150
classification.

122
00:07:47,570 --> 00:07:52,430
Package it inside of a web app using
flask and containerize it with docker.

123
00:07:52,610 --> 00:07:55,790
Lastly, we'll deploy this
container using Coobernetti's.

124
00:07:56,060 --> 00:07:58,820
We'll first start a virtual
machine on Google cloud.

125
00:07:59,060 --> 00:08:03,170
We just need to select compute engine.
Then create an instance.

126
00:08:03,410 --> 00:08:06,920
Let's keep it small for this demo.
Once we set some details,

127
00:08:06,921 --> 00:08:11,090
we'll click create to launch an
instance to set up our environment.

128
00:08:11,330 --> 00:08:14,480
Now for step two,
building an image classifier.

129
00:08:14,750 --> 00:08:17,120
If we open up a terminal and the browser,

130
00:08:17,121 --> 00:08:21,500
we can connect to our newly created
virtual machine in the cloud.

131
00:08:21,800 --> 00:08:24,500
We can go ahead and install docker,
then start it up.

132
00:08:24,770 --> 00:08:29,390
Once docker is running will containerize
an existing deep convolutional neural

133
00:08:29,391 --> 00:08:31,340
network built in chaos.

134
00:08:31,580 --> 00:08:36,290
I have a very detailed
video on how convolutional
networks work to help classify

135
00:08:36,291 --> 00:08:38,720
images,
see the link in the video description,

136
00:08:39,080 --> 00:08:42,890
but in order for our code to run
inside of a docker container,

137
00:08:43,100 --> 00:08:46,430
we'll need to create a
requirement's dot txt file,

138
00:08:46,520 --> 00:08:50,660
which will contain all the packages
are code needs to run. That way,

139
00:08:50,661 --> 00:08:53,120
no matter where we ship
our docker container,

140
00:08:53,121 --> 00:08:57,060
the server will be able to
install our codes dependencies.

141
00:08:57,390 --> 00:09:01,830
Then we'll create a docker file so
docker will know how to build and run our

142
00:09:01,831 --> 00:09:05,700
project. We can build our docker
container in a single line,

143
00:09:05,760 --> 00:09:10,410
then run it with our model running. We can
easily test it. Let's give it an input,

144
00:09:10,440 --> 00:09:15,000
a photo of a dog, and it will classify
it by returning. It's breed. Boom,

145
00:09:15,001 --> 00:09:16,650
Shakalaka homie instance.

146
00:09:16,651 --> 00:09:21,210
Api builtin python served with
flask and wrapped in docker.

147
00:09:21,450 --> 00:09:24,840
Now we can deploy this
container to Coobernetti's.

148
00:09:25,110 --> 00:09:27,450
First we'll create a docker hub account.

149
00:09:27,780 --> 00:09:31,830
We're going to instruct Coobernetti's to
install our container from a centrally

150
00:09:31,920 --> 00:09:36,480
host server docker hub. We'll log
into docker hub from command line,

151
00:09:36,600 --> 00:09:40,020
tag our container,
then push our container to docker hub.

152
00:09:40,380 --> 00:09:43,500
Now in Google cloud will
select Coobernetti's engine,

153
00:09:43,740 --> 00:09:48,120
create a new Coubernetties cluster and
then connect to the cluster using the

154
00:09:48,121 --> 00:09:49,110
cloud shell.

155
00:09:49,380 --> 00:09:54,360
We can now run our docker container in
Coobernetti's the image tag points to our

156
00:09:54,361 --> 00:09:57,450
hosted docker image on docker hub.
Lastly,

157
00:09:57,451 --> 00:10:02,451
we'll expose our pod on port 80 to the
outside world once it's running and test

158
00:10:02,821 --> 00:10:07,440
out our APP by running a rest command
pointing to our Coubernetties cluster

159
00:10:07,710 --> 00:10:08,490
success,

160
00:10:08,490 --> 00:10:13,490
we just created a scalable
image classifier API that
anyone can access on the

161
00:10:14,011 --> 00:10:15,210
web.
Moving forward,

162
00:10:15,211 --> 00:10:19,020
we can explore all the different scaling
and management features that Kubernetes

163
00:10:19,021 --> 00:10:23,460
has, but that's too much for this
one video. Three things to remember.

164
00:10:23,610 --> 00:10:27,900
Coobernetti's is an open source project
that enables developers to automate the

165
00:10:27,901 --> 00:10:30,240
process of deploying,
scaling,

166
00:10:30,241 --> 00:10:34,680
and managing containerized
apps on a cluster of machines.

167
00:10:35,040 --> 00:10:40,040
Containers enable a much
shorter deployment time and
improved APP reliability by

168
00:10:40,291 --> 00:10:44,160
including required runtime
resources along with app code,

169
00:10:44,490 --> 00:10:47,550
and we can use a combination of python,
docker,

170
00:10:47,551 --> 00:10:52,100
and Kubernetes to create a reliable
and scalable web app pretty easily.

171
00:10:52,490 --> 00:10:54,650
What's currently your
favorite devops tool?

172
00:10:54,651 --> 00:10:58,100
Share it with me in the comments section
if you want to stay updated on my

173
00:10:58,101 --> 00:11:00,500
weekly programming tutorials,
it subscribed,

174
00:11:00,501 --> 00:11:04,340
and for now I've got to look into
Cuba flow, so thanks for watching.

