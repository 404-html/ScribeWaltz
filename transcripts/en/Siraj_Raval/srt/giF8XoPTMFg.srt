1
00:00:00,030 --> 00:00:01,080
And Spacey.

2
00:00:01,140 --> 00:00:05,640
I love this combination
of Siphon and spacey.

3
00:00:06,330 --> 00:00:10,290
This is one of my favorite combinations
for machine learning. All right.

4
00:00:10,560 --> 00:00:11,280
Hello world.

5
00:00:11,280 --> 00:00:16,280
It's Saroj and welcome to my live stream
on natural language processing in.

6
00:00:16,800 --> 00:00:21,800
See now I know a lot of you might be
thinking why see write python works well

7
00:00:22,321 --> 00:00:22,711
enough.

8
00:00:22,711 --> 00:00:27,180
It's a great introductory language to
bring a lot of people into the field,

9
00:00:27,480 --> 00:00:31,170
but there is a problem.
And let me tell you what that problem is.

10
00:00:31,171 --> 00:00:36,171
The problem is that sometimes we want
really fast implementations of machine

11
00:00:36,661 --> 00:00:37,770
learning algorithms.

12
00:00:37,880 --> 00:00:41,880
We want machine learning algorithms that
are going to work very, very well, very,

13
00:00:41,881 --> 00:00:46,260
very fast. And, uh, you know,
I'm talking about health care,

14
00:00:46,261 --> 00:00:48,330
I'm talking about life
or death situations.

15
00:00:48,331 --> 00:00:52,650
I'm talking about times when milliseconds
matter for both inference and for

16
00:00:52,651 --> 00:00:53,484
training.

17
00:00:53,640 --> 00:00:58,640
So what see allows us to do as a language
is to manually allocate memory and

18
00:01:00,451 --> 00:01:02,550
manually deallocate memory.

19
00:01:02,880 --> 00:01:07,740
So what's happening in python and the
python runtime environment is a process

20
00:01:07,741 --> 00:01:12,330
called garbage collection. Okay. And a
lot of you might be familiar with this,

21
00:01:12,331 --> 00:01:17,331
but garbage collection is a runtime
process that automatically looks for,

22
00:01:17,600 --> 00:01:21,960
um, that looks for objects in memory
that have not been deallocated.

23
00:01:22,170 --> 00:01:26,150
And if, if it, if it, depending on the
type of interpreter we're using it,

24
00:01:26,260 --> 00:01:28,800
if it feels like it's time
to deallocate that object,

25
00:01:28,830 --> 00:01:30,360
it will deallocate it for us.

26
00:01:30,570 --> 00:01:33,870
Now this is great because we don't want
to have to spend our time dealing with

27
00:01:34,080 --> 00:01:37,410
memory, right? Allocating
objects, d allocating them.

28
00:01:37,560 --> 00:01:39,780
We just want to worry
about the algorithms.

29
00:01:40,480 --> 00:01:40,860
Okay?

30
00:01:40,860 --> 00:01:45,450
So, uh, that's why we use python,
but sometimes it's necessary.

31
00:01:45,451 --> 00:01:46,420
So in this livestream,

32
00:01:46,500 --> 00:01:50,760
what I'm gonna do is I'm going to
first demo how [inaudible] works.

33
00:01:50,780 --> 00:01:55,350
[inaudible] is by the way, is it's a
bunch of sea extensions for python.

34
00:01:55,351 --> 00:01:58,440
So we could literally write
c code inside of Python.

35
00:01:58,441 --> 00:02:01,600
And I want you to do this
with me in a Google colab.

36
00:02:01,601 --> 00:02:06,601
So go to colab.research.google.com
and once we've done that,

37
00:02:07,050 --> 00:02:10,950
we will, uh, we'll first coat
out a python implementation,

38
00:02:11,160 --> 00:02:14,220
then we'll do a site on implementation.
We'll benchmark both of them.

39
00:02:14,520 --> 00:02:17,040
And then we're going to use it
for natural language processing,

40
00:02:17,041 --> 00:02:19,800
specifically using a
library called spacey.

41
00:02:20,070 --> 00:02:23,280
And then after that we're going to demo
it for a little bit more deep learning

42
00:02:23,281 --> 00:02:27,710
after that. All right, so we've got a
lot of things to do in this live stream.

43
00:02:27,960 --> 00:02:30,480
Um, I will marry you
Conrad. Thank you very much.

44
00:02:30,481 --> 00:02:34,590
I will marry all of you because you guys
matter to me a lot, like a lot. So, okay,

45
00:02:34,591 --> 00:02:38,400
so let's get into this. I want you to
do this with me in the browser. Yes,

46
00:02:38,401 --> 00:02:41,070
we can code, see inside
of the browser. Okay.

47
00:02:41,071 --> 00:02:44,040
I'm going to show you what the deal is
with this, but before we do anything,

48
00:02:44,041 --> 00:02:47,790
what I want you to do is installed
two dependencies with me. Okay. Ready?

49
00:02:48,090 --> 00:02:51,210
So the first dependency we're going
to install is sites on itself.

50
00:02:51,211 --> 00:02:54,210
It's acts just like a
regular python package.

51
00:02:55,810 --> 00:02:56,150
Okay.

52
00:02:56,150 --> 00:03:01,030
Uh, but, uh, so we have po,

53
00:03:01,090 --> 00:03:02,890
we have siphon,
and then we're going to use spacey,

54
00:03:02,891 --> 00:03:05,470
which is spacey is an Nlp Library,

55
00:03:05,471 --> 00:03:10,471
the fastest and LP Python Library that
exists currently that uses carefully

56
00:03:10,841 --> 00:03:15,841
constructed Siphon Constructs for
memory management to allow for rapid,

57
00:03:16,040 --> 00:03:19,900
um, p part of speech
tagging and, um, you know,

58
00:03:19,901 --> 00:03:24,901
tokenization and word two VEC [inaudible]
and all of those little NLP techniques

59
00:03:24,911 --> 00:03:25,661
that we need.
Okay.

60
00:03:25,661 --> 00:03:29,050
So these are the two libraries that we're
going to install and this is going to

61
00:03:29,051 --> 00:03:31,180
take like probably two minutes to run.

62
00:03:31,181 --> 00:03:35,090
So just let's let these dependencies
installed while we talk about, uh,

63
00:03:35,170 --> 00:03:39,430
the rest of this. Okay. So spacey
takes a little time to install.

64
00:03:39,580 --> 00:03:43,540
So as you can see, spacey is installing
right now, by the way, because of Colab,

65
00:03:43,541 --> 00:03:47,110
I just want to, you know, I gave, I
gave Colab a shadow on, on Twitter,

66
00:03:47,111 --> 00:03:51,490
but really amazing tool. No longer
can anybody use the excuse. Well,

67
00:03:51,491 --> 00:03:54,610
it doesn't work for my windows
environment or my whatever environment.

68
00:03:54,790 --> 00:03:59,740
Now you can do it in the browser.
All right, so back to this, right.

69
00:03:59,741 --> 00:04:02,700
So, um, python, it's
great. Like I said, uh,

70
00:04:02,800 --> 00:04:06,790
but when it comes to execution
speed necessarily, it's
not that good necessarily.

71
00:04:06,791 --> 00:04:10,840
Okay, so, right,

72
00:04:10,841 --> 00:04:13,240
so here's a little image we can see of,
of what's happening here.

73
00:04:13,241 --> 00:04:15,400
When we writes out some Siphon code,

74
00:04:15,520 --> 00:04:18,190
it's going to be compiled
by the siphon compiler.

75
00:04:18,220 --> 00:04:22,720
Now this is a specific compiler made to
work with the python compiler is going

76
00:04:22,721 --> 00:04:27,450
to create two. Uh, it's going
to create two different, uh,
files, a c file and N. Dot.

77
00:04:27,460 --> 00:04:28,211
S O file.

78
00:04:28,211 --> 00:04:31,780
And both of them are going to be able
to be launched from a python file later.

79
00:04:32,080 --> 00:04:35,980
Now what is the difference
between C and Python? Now,
not, not everybody knows. See,

80
00:04:35,981 --> 00:04:40,380
not everybody has been able to um,
write spacey.

81
00:04:40,381 --> 00:04:42,640
Spacey is a very cool library.
I really like spacey.

82
00:04:43,000 --> 00:04:46,780
So not everybody's able to has,
has had experience with c.

83
00:04:46,781 --> 00:04:49,390
But what is the real difference
between both of these languages? Well,

84
00:04:49,391 --> 00:04:53,980
there's one, um, besides the memory
management stuff that I talked about,

85
00:04:54,250 --> 00:04:57,850
um, there is one thing that is a
big difference and that is, uh, the,

86
00:04:57,940 --> 00:05:02,050
the idea of strong versus weak typing.
As you can see in this image right here,

87
00:05:02,051 --> 00:05:05,500
right?
So C has strong typing,

88
00:05:05,640 --> 00:05:09,730
meaning the type must be known by the
compiler and Python has week typing.

89
00:05:09,760 --> 00:05:12,190
And this is for,
this is,

90
00:05:12,220 --> 00:05:16,030
this is also for memory management reasons
that it always comes back to memory

91
00:05:16,031 --> 00:05:20,290
when it comes, when it comes to the
sea versus python debate. Uh, but

92
00:05:22,340 --> 00:05:24,800
let's go ahead and write
out a simple example first.

93
00:05:24,801 --> 00:05:29,090
So what I want to start off with in
this example is some basic python. Okay.

94
00:05:29,091 --> 00:05:32,660
Let's see if our dependencies installed.
By the way. See it's still running.

95
00:05:32,661 --> 00:05:37,550
It's gonna take a little a
little while. But um, well, okay.

96
00:05:37,551 --> 00:05:40,490
So while this is, this
is a download, let me,

97
00:05:40,520 --> 00:05:44,840
let me just answer some questions
in the comment section. Someone,

98
00:05:44,930 --> 00:05:48,140
uh,
is very happy that I use spacey.

99
00:05:48,470 --> 00:05:51,500
And why see though?
Well, like I said, Mitch,

100
00:05:51,580 --> 00:05:56,030
mission critical applications need,
uh, the, the maximum speed that we can,

101
00:05:57,320 --> 00:06:00,200
we can,
we can utilize what were the two imports?

102
00:06:00,201 --> 00:06:03,200
The two imports are Siphon and spacey.
Okay.

103
00:06:03,201 --> 00:06:08,201
So Siphon is the set of see extensions
for python that we will use and spacey is

104
00:06:08,751 --> 00:06:12,950
built directly on top of scythe
on. So it's like, it's not,

105
00:06:13,190 --> 00:06:16,190
it's not pure siphon but
it's very close to it.

106
00:06:16,191 --> 00:06:18,260
And it's made specifically for

107
00:06:20,710 --> 00:06:22,480
Siphon.
Which laptop do you have?

108
00:06:22,481 --> 00:06:26,530
I have a Mac book pro
2016 I think or 2017.

109
00:06:26,890 --> 00:06:30,280
I don't like the touch bar
at all. Uh, and in fact, I,

110
00:06:30,370 --> 00:06:32,950
I envy people who don't have a touch bar.

111
00:06:33,310 --> 00:06:37,420
Can you please explain about
both dependencies? Like
I just did, I love, see,

112
00:06:37,600 --> 00:06:41,080
I love C as well. How much of see
should I know? Great question.

113
00:06:41,081 --> 00:06:45,940
So if you're doing anything in
robotics, right? So a mobile robots,

114
00:06:46,030 --> 00:06:50,110
factory, robots, um, robots,

115
00:06:50,170 --> 00:06:52,150
then you're going to need to know some,
see why?

116
00:06:52,151 --> 00:06:53,800
Because when it comes to hardware,

117
00:06:54,310 --> 00:06:58,030
what you're dealing with when it comes
to robotics specifically is a bunch of

118
00:06:58,031 --> 00:07:02,830
integration issues, right? You've got
to get the arm connected to the, uh,

119
00:07:02,920 --> 00:07:04,960
the body connecting to the wheel base,

120
00:07:04,970 --> 00:07:09,400
connected to the other arm or whatever
it is. And all of these are drivers.

121
00:07:09,401 --> 00:07:13,610
Usually they're written in c plus plus
or c. And this can be annoying, right?

122
00:07:13,640 --> 00:07:17,680
It's because we have to integrate all of
these and ideally it was all written in

123
00:07:17,681 --> 00:07:20,470
python, but that's not the
case. So we need to know some,

124
00:07:20,471 --> 00:07:24,220
see if we're going to do
anything in robotics. Meanwhile,
this is still loading.

125
00:07:24,490 --> 00:07:29,020
Have you tried Gpu Laptop?
I have. I have. Yeah.

126
00:07:29,080 --> 00:07:29,913
Um,

127
00:07:30,090 --> 00:07:30,550
yeah,

128
00:07:30,550 --> 00:07:34,930
but you know what, overall I liked
the form factor of the Oh, of Osx.

129
00:07:34,931 --> 00:07:37,840
I liked the fact that I can
use final cut pro and uh,

130
00:07:37,841 --> 00:07:42,610
that's why so c is so much faster.
Yes, it is. I'm just going to,

131
00:07:42,611 --> 00:07:45,040
I'm just going to start typing this
wild while this loads, by the way.

132
00:07:45,041 --> 00:07:46,540
So let's create these rectangles,
right?

133
00:07:46,660 --> 00:07:49,810
So what are we going to do right now
is we're going to create a big bunch of

134
00:07:49,811 --> 00:07:52,420
rectangles, right? In Python,
pure python, no siphon.

135
00:07:52,870 --> 00:07:55,510
And then we're going to count how
many rectangles we have. Okay?

136
00:07:55,511 --> 00:07:58,630
And so this is going to be a speed test.
So let's just do this right now.

137
00:07:58,750 --> 00:08:01,090
So the first thing I'm
going to import is this. Uh,

138
00:08:01,170 --> 00:08:02,740
and this is not going
to require scythe on,

139
00:08:02,741 --> 00:08:05,920
so I can go ahead and just
start coding this right now.

140
00:08:07,270 --> 00:08:11,620
So we want to create a random,
a bunch of randomly size rectangles.

141
00:08:11,621 --> 00:08:15,700
That's why imported this pseudo random
number generator called random. Now,

142
00:08:15,701 --> 00:08:19,870
inside of our rectangle class,
good object oriented programming practice.

143
00:08:20,050 --> 00:08:22,660
We're going to have an
initialization function. This,

144
00:08:22,790 --> 00:08:25,450
this is the initialization
function for the rectangle.

145
00:08:25,660 --> 00:08:27,910
The rectangle is going
to take two parameters.

146
00:08:27,911 --> 00:08:30,190
It's going to be the height and the width.

147
00:08:33,840 --> 00:08:36,270
So I'm going to have the height
and the width, right? So though,

148
00:08:37,270 --> 00:08:39,950
because rectangles can have any different,
the,

149
00:08:39,960 --> 00:08:41,890
the width and height of
rectangles are different.

150
00:08:42,070 --> 00:08:46,600
That's why I have two parameters for
those ELLs. It would not be a rectangle.

151
00:08:46,780 --> 00:08:50,800
Now I'm going to write out the formula
for defining the area of a rectangle.

152
00:08:51,310 --> 00:08:56,310
What is, can anybody tell me the formula
before I type it? It's going to be yes,

153
00:08:56,311 --> 00:09:00,810
it's going to be the weight
or the width times the height.

154
00:09:00,840 --> 00:09:04,740
Very simple, very simple
area formula. Now,

155
00:09:06,650 --> 00:09:10,580
okay, so we have those two
initialization functions. Now we can say,

156
00:09:10,581 --> 00:09:13,460
let's check out these rectangles. It's
let's see what's what's happening here.

157
00:09:13,790 --> 00:09:17,240
So in this we're going to check to see
if it's area is within our thresholds.

158
00:09:17,241 --> 00:09:20,780
So we're going to have
some threshold value. Yes,

159
00:09:20,781 --> 00:09:23,900
this video will be available later on
Youtube and I will answer questions

160
00:09:23,901 --> 00:09:25,550
periodically as I'm coding this.

161
00:09:26,990 --> 00:09:31,100
What we're going to have is a
function that's going to check the,

162
00:09:31,640 --> 00:09:36,230
the um, area of each of the
rectangles that I create.

163
00:09:36,530 --> 00:09:39,860
Now this counter variable in
is going to start at zero.

164
00:09:40,130 --> 00:09:44,690
Now what we're going to say is for every
rectangle that we have in our list of

165
00:09:44,691 --> 00:09:48,560
rectangles,
which is our parameter,

166
00:09:48,980 --> 00:09:50,390
we're going to check,

167
00:09:55,430 --> 00:09:55,850
yeah,

168
00:09:55,850 --> 00:10:00,850
we're going to check if I just
want to make sure this is proper.

169
00:10:03,120 --> 00:10:06,900
Um,
right.

170
00:10:08,830 --> 00:10:09,663
Nope.

171
00:10:13,550 --> 00:10:14,383
Yup.

172
00:10:15,160 --> 00:10:19,250
Good.
Zoom.

173
00:10:19,880 --> 00:10:23,420
I'll zoom in a bit. Let
me zoom in more. Okay.

174
00:10:23,421 --> 00:10:25,600
So for each of the rectangles
that we have, we're going to say,

175
00:10:25,670 --> 00:10:28,190
we're going to check if that,
if the right,

176
00:10:28,250 --> 00:10:32,090
if the area of the rectangle is
greater than our threshold value.

177
00:10:32,450 --> 00:10:35,990
Now if it is greater than our threshold
value, then we're going to say,

178
00:10:36,020 --> 00:10:38,690
let's increment our counter because
that's what we're looking to count.

179
00:10:38,930 --> 00:10:41,930
And then at the end of all of that will
return the number of rectangles that we

180
00:10:41,931 --> 00:10:45,530
have, number of rectangles
like that. Okay.

181
00:10:45,980 --> 00:10:47,810
And I made the screen bigger.
Cool.

182
00:10:49,380 --> 00:10:49,890
Okay.

183
00:10:49,890 --> 00:10:53,100
It could be less than, but let's
just say greater than. Okay.

184
00:10:53,101 --> 00:10:56,370
So now we're going to say, let's, uh,

185
00:10:56,640 --> 00:11:00,000
let's have this main function and we'll
call it slow because we're going to

186
00:11:00,001 --> 00:11:01,020
speed it up in a second.

187
00:11:01,350 --> 00:11:06,350
And we're going to say the number of
rectangles is 1 million rectangles,

188
00:11:08,240 --> 00:11:12,590
1 million. We want a million
of these things, rectangles.

189
00:11:14,230 --> 00:11:15,130
And

190
00:11:16,750 --> 00:11:19,000
we're going to initialize this rectangles.

191
00:11:19,001 --> 00:11:23,860
Object to list that we're going
to input. Yes. Move 37 is free.

192
00:11:24,370 --> 00:11:26,950
That we're going to input into the,

193
00:11:28,250 --> 00:11:29,040
yeah,

194
00:11:29,040 --> 00:11:31,480
a previous function that I just wrote.

195
00:11:32,860 --> 00:11:33,693
Okay.

196
00:11:34,730 --> 00:11:39,730
For every rectangle in the range of
the number of rectangles that we have,

197
00:11:41,700 --> 00:11:42,100
and then,
and

198
00:11:42,100 --> 00:11:44,890
closed that,
and now I can perform the check.

199
00:11:44,891 --> 00:11:48,160
So now I'll perform the check and
I'll say, check those rectangles.

200
00:11:48,161 --> 00:11:52,960
Check every single one that we
have and just see, just see, like,

201
00:11:53,620 --> 00:11:54,453
uh,

202
00:11:59,030 --> 00:12:01,110
I'll call this check reg rectangled pie

203
00:12:03,620 --> 00:12:07,310
or check rectangles
pie now just to see if,

204
00:12:09,320 --> 00:12:13,550
how, how many rectangles we have. And now
we can finally define that's 10 million,

205
00:12:13,551 --> 00:12:18,260
isn't it? 10. Oh, you're right.
That's 10 million rectangles.

206
00:12:18,261 --> 00:12:20,870
That would have been a lot.
Uh, it doesn't matter actually.

207
00:12:21,170 --> 00:12:22,880
They're really very small.

208
00:12:22,881 --> 00:12:27,881
The footprint is small and we can now
print out everything that we have now.

209
00:12:29,690 --> 00:12:32,990
Okay,
now let's see if this compiles.

210
00:12:34,370 --> 00:12:38,480
Good. Now let's time. Oh, let's see if
our dependencies installed. By the way,

211
00:12:39,260 --> 00:12:43,760
are you serious? Oh No. Okay, great.
Great. The dependencies installed.

212
00:12:44,000 --> 00:12:48,170
Yo See us coming. Relax.
One step at a time.

213
00:12:48,230 --> 00:12:51,470
This is a process, my
friends, this is a process.

214
00:12:51,800 --> 00:12:54,650
You can't start running until
you start walking. Okay?

215
00:12:54,651 --> 00:12:57,980
You gotta walk before you crawl.
That's not how it works. Okay?

216
00:12:58,220 --> 00:13:02,990
So let's run this thing. We'll say,
let's run this. We have our function.

217
00:13:03,110 --> 00:13:06,710
Let's run it. Time it.
What do we got here? Okay,

218
00:13:06,711 --> 00:13:10,460
this is creating a bunch of
rectangles and it's okay.

219
00:13:10,461 --> 00:13:13,580
So there are 400 Oh let's see,

220
00:13:13,640 --> 00:13:18,260
there are 403,987 rectangles
that were within our threshold,

221
00:13:18,590 --> 00:13:23,060
okay? And that took a CPU time of
2.23 seconds to do all of this.

222
00:13:23,360 --> 00:13:26,870
Now let's see how much we can
speed this up using Psiphon.

223
00:13:28,610 --> 00:13:33,320
Okay, so now here's how we're going to
use C in the browser. Get ready for this.

224
00:13:33,321 --> 00:13:35,240
By the way,
let me make sure everything's good.

225
00:13:35,780 --> 00:13:37,880
Here's how we're going to use see
in the browser. Okay, so here we go.

226
00:13:38,210 --> 00:13:42,960
I'm going to say low. The extension on

227
00:13:45,850 --> 00:13:49,660
this just told Colab to
load a site on extension.

228
00:13:49,661 --> 00:13:51,370
Now let's do this.
Okay,

229
00:13:51,371 --> 00:13:56,371
so now what we're going to do for this
faster site on implementation is we're

230
00:13:56,741 --> 00:14:01,630
going to say, here, get ready
for this. We're going to
use a siphon flag like this.

231
00:14:01,780 --> 00:14:06,520
That's all we have to do. Now this, this,
this code block is going to use Psiphon,

232
00:14:06,550 --> 00:14:09,990
okay?
So the first Siphon,

233
00:14:10,090 --> 00:14:14,210
a file that I'm going to import,
it's called PSI men and what this is,

234
00:14:14,211 --> 00:14:18,340
and I'm going to use the word [inaudible]
specific keyword seat important.

235
00:14:18,341 --> 00:14:20,920
Instead of just pure import.
Now what this is is it is,

236
00:14:20,940 --> 00:14:25,690
it is a memory management helper for
python specifically poor, the poor object.

237
00:14:25,750 --> 00:14:29,590
We're going to use it to allocate and
we can also use it to deallocate memory.

238
00:14:29,800 --> 00:14:31,210
Now in the case of this program,

239
00:14:31,211 --> 00:14:35,880
we're going to use pool to allocate a
bunch of rectangles. Yes, the scream,

240
00:14:35,920 --> 00:14:38,110
the stream is recorded and you're
going to get to see it later.

241
00:14:40,820 --> 00:14:43,730
Okay?
So that is our first tool.

242
00:14:43,731 --> 00:14:45,650
And then we're going to have
some good old python as well.

243
00:14:45,651 --> 00:14:47,060
For our random number generator,

244
00:14:47,210 --> 00:14:51,690
we can use both sides on and python
in the same code block under um,

245
00:14:51,740 --> 00:14:56,600
what's it called? Magic cell. Uh, magic
sell keyword or something that this, uh,

246
00:14:56,601 --> 00:14:59,120
this thing up here. Okay, so
now let's, let's do this again.

247
00:14:59,180 --> 00:15:04,130
So we're going to create the
statement called see death. Okay,

248
00:15:04,131 --> 00:15:06,470
so what seed def is it to stay?

249
00:15:06,500 --> 00:15:11,300
It's a site on specific statement that's
used to declare, see variables, types,

250
00:15:11,301 --> 00:15:14,810
functions, anything see related,
we can use c deaf for that, right?

251
00:15:14,811 --> 00:15:17,960
So what we can do in c is create a struct.

252
00:15:18,770 --> 00:15:20,060
Our type rectangles.

253
00:15:20,061 --> 00:15:24,110
This is our type and now we
can use pure see variables.

254
00:15:24,111 --> 00:15:27,380
A float for our with a
float for our height. Okay,

255
00:15:27,650 --> 00:15:30,200
so that's our see deaf for our struck.
Now

256
00:15:32,240 --> 00:15:35,570
it's just like Malaak. Exactly.
It's just like Malak. Good question.

257
00:15:35,810 --> 00:15:40,610
Keep them coming. So now let's write
our new check rectangles method.

258
00:15:40,611 --> 00:15:42,440
Okay,
so check rectangles.

259
00:15:43,500 --> 00:15:44,160
Okay,

260
00:15:44,160 --> 00:15:47,820
cy instead of Pie.
Now what are we going to give this thing?

261
00:15:47,850 --> 00:15:50,460
What are the first parameter is going
to be of course, or a rectangle,

262
00:15:50,461 --> 00:15:53,130
but we're not just going to
give it a plain rectangle.

263
00:15:53,280 --> 00:15:57,780
We're going to give it a pointer.
Hold on. Pointer, pointer, rectangle.

264
00:15:58,230 --> 00:16:02,830
Because,
because what is a point?

265
00:16:02,831 --> 00:16:04,710
Or can anybody tell me
what a point or does

266
00:16:06,330 --> 00:16:09,180
a point or points to a space in memory?
Why?

267
00:16:09,181 --> 00:16:13,410
Why do we use a point or why don't we
just call that object as a whole? Because,

268
00:16:13,500 --> 00:16:14,333
uh,

269
00:16:14,880 --> 00:16:18,510
we can avoid making a duplicate of that
object if we can just point to where it

270
00:16:18,511 --> 00:16:20,460
is in memory.
We don't have to make a duplicate.

271
00:16:20,490 --> 00:16:22,380
That saves a space and
that makes things faster.

272
00:16:22,470 --> 00:16:26,670
So that's where we're going to
use a pointer to, to the memory.

273
00:16:27,420 --> 00:16:28,380
Yes.
You need commas.

274
00:16:29,720 --> 00:16:30,270
Okay.

275
00:16:30,270 --> 00:16:31,650
So I'll call this rectangles

276
00:16:33,980 --> 00:16:36,770
and I'm going to have a number
of those rectangles. Right.

277
00:16:39,110 --> 00:16:39,943
Okay.

278
00:16:40,280 --> 00:16:42,050
And I'm going to have of course,
my threshold.

279
00:16:42,920 --> 00:16:43,540
Yeah.

280
00:16:43,540 --> 00:16:45,340
We want to save memory.
Exactly.

281
00:16:45,550 --> 00:16:48,340
What's one of the core values
that our community has?

282
00:16:48,341 --> 00:16:52,030
Can anybody tell me that's
related to saving? Saving memory,

283
00:16:52,090 --> 00:16:57,040
saving money, saving time,
saving energy. Unnecessary stuff.

284
00:16:59,450 --> 00:17:02,000
What is it? So someone can tell
me, well, like while I typed this,

285
00:17:02,570 --> 00:17:06,350
be frugal by the way. Okay, back to this,
I forgot it for a second. Oh my God.

286
00:17:06,710 --> 00:17:10,460
I've forgotten one of my own core values.
Our own core core value. All right,

287
00:17:10,461 --> 00:17:13,850
so see deaf that, that's that. Okay. So
now we're going to continue. Like I said,

288
00:17:13,851 --> 00:17:17,210
we can you see that for declaring
functions for variables as well.

289
00:17:17,390 --> 00:17:21,260
And so we're going to have
this see variable int that.

290
00:17:21,261 --> 00:17:23,510
We'll use that for.
Okay.

291
00:17:23,511 --> 00:17:28,010
So now we're going to do the same loop
that we did before just like before

292
00:17:28,070 --> 00:17:30,790
except
uh,

293
00:17:30,900 --> 00:17:35,610
s c arrays contained no size.
So no size information that is,

294
00:17:35,730 --> 00:17:38,730
so we need to state it explicitly,
which is what we're doing right here.

295
00:17:40,470 --> 00:17:41,303
Yeah,

296
00:17:47,240 --> 00:17:52,140
you guys are hilarious. By the way. You
guys say the funniest things in the chat.

297
00:17:52,470 --> 00:17:55,980
Java is a robust and secure language.
All caps.

298
00:17:56,520 --> 00:17:58,440
That is what needs to be said.
You know,

299
00:17:58,441 --> 00:18:03,441
like completely random stuff
like that is the greatest man.

300
00:18:03,811 --> 00:18:08,490
You guys are hilarious. Back to this. So
what, what are we going to do here? Well,

301
00:18:08,491 --> 00:18:11,850
we're going to do exactly what we did
before. We're going to take our weights.

302
00:18:11,851 --> 00:18:14,820
We're going to multiply by our height,
and that's not our weight.

303
00:18:14,910 --> 00:18:17,700
I'm to machine learning mode right now.
Our width by our height,

304
00:18:18,210 --> 00:18:20,070
that's going to be greater
than our threshold.

305
00:18:22,050 --> 00:18:25,470
And then we can say increment that

306
00:18:28,170 --> 00:18:31,320
and we'll return the number
number of them. Okay.

307
00:18:32,610 --> 00:18:37,170
Make sure that's all good. It's
all good. Yup. It's all good.

308
00:18:38,600 --> 00:18:43,080
Yep. Now back to our main method. Now
let's do this main rectangle. Don't worry,

309
00:18:43,081 --> 00:18:45,750
we're getting to the machine learning.
We're getting to the machine learning.

310
00:18:45,751 --> 00:18:47,680
I just want to demo some scythe on.

311
00:18:47,850 --> 00:18:51,630
Just just show you the performance gains
that we get from this thing and prove

312
00:18:51,631 --> 00:18:54,660
that we can code,
see inside of this Colab as well,

313
00:18:55,110 --> 00:18:58,740
which I had to get working myself. This,
it took a while, but really it's a,

314
00:18:59,070 --> 00:19:02,960
you know, it's easy. Thank you.

315
00:19:03,590 --> 00:19:06,710
The area of the rectangle is
initialized randomly for all of them.

316
00:19:06,740 --> 00:19:08,600
There are a bunch of them.
It's not just one rectangle.

317
00:19:08,780 --> 00:19:10,880
So how many are we going to have? We're
going to have, like I said before,

318
00:19:11,060 --> 00:19:14,990
a million. Okay. We have
a million rectangles.

319
00:19:15,140 --> 00:19:18,530
We have this threshold value just
like before, it's gonna be 0.25.

320
00:19:20,000 --> 00:19:24,500
Now let's use pool. Get ready for
some python people or some seat.

321
00:19:24,830 --> 00:19:26,840
Now here, here we go with
pool, by the way. Okay,

322
00:19:26,841 --> 00:19:30,530
so the pool object is going to save,

323
00:19:30,560 --> 00:19:35,510
is going to save memory addresses
internally. And so then in the F

324
00:19:37,790 --> 00:19:42,110
it's not like garbage collection is not
happening. It's still happening. Okay?

325
00:19:42,111 --> 00:19:44,990
Garbage collection is still happening.
However,

326
00:19:45,110 --> 00:19:49,040
we can manually allocate and
deallocate memory. In addition to that,

327
00:19:49,130 --> 00:19:52,250
which is going to save us
some runtime resources.

328
00:19:53,810 --> 00:19:55,520
So I'll say

329
00:19:58,460 --> 00:19:59,990
four rectangles.
Typo.

330
00:20:01,840 --> 00:20:05,670
Where? Four rectangles. Uh Huh.

331
00:20:09,790 --> 00:20:11,560
We'll see.
We'll see where the typo is.

332
00:20:13,420 --> 00:20:16,900
So we're going to initialize
our rectangles right now.

333
00:20:17,620 --> 00:20:22,620
This is our list of rectangles and this
bracket is going to typecast r w w the

334
00:20:25,031 --> 00:20:27,340
object that we allocate
here into a rectangle.

335
00:20:27,490 --> 00:20:32,490
So here is us using this pool object has
men to allocate all of these rectangles

336
00:20:34,090 --> 00:20:37,750
just like that in memory.
Now what's the size is going to be,

337
00:20:37,751 --> 00:20:39,250
this is some pure Seaver by the way.

338
00:20:39,520 --> 00:20:43,510
The size is going to be the size of
the rectangle that we just defined.

339
00:20:46,780 --> 00:20:50,830
All. All right Matt, this is
going crazy with Java by the way.

340
00:20:50,831 --> 00:20:54,670
I don't know why you guys are mentioning
Java. This is about c and Python.

341
00:20:54,880 --> 00:20:59,680
So get that job of talking about
here. Yes, Java is lame. I agree.

342
00:20:59,681 --> 00:21:04,650
Java is lame. I'm just going to say
that. All right. Back to this. Okay.

343
00:21:05,100 --> 00:21:09,900
Java. So old John was like computer
science classes in like like 10 years ago.

344
00:21:10,500 --> 00:21:13,530
Um, I know I'm going to get some
hate for that. I don't care. Anyway,

345
00:21:14,610 --> 00:21:17,550
I'm just kind of trolling. No, I mean
it's true. I don't like Java anyway.

346
00:21:17,551 --> 00:21:20,340
I mean there is deep learning for J. I
don't want to get too into this right now.

347
00:21:20,360 --> 00:21:21,660
I'm,
I'm coding something.

348
00:21:24,220 --> 00:21:28,420
This is like an all out war of
programming languages happening. Okay?

349
00:21:29,590 --> 00:21:32,260
So, so let's do this now. Okay.

350
00:21:32,261 --> 00:21:34,150
So we're gonna do the exact
same thing we did before.

351
00:21:34,390 --> 00:21:36,130
So for every rectangle we have,

352
00:21:36,370 --> 00:21:41,370
we're going to initialize book it's WIC
with and its height randomly that and

353
00:21:44,050 --> 00:21:45,970
that's why we imported that random,
uh,

354
00:21:48,110 --> 00:21:52,640
that random important. Okay.

355
00:21:52,641 --> 00:21:55,910
So we'll do that for the width.
We'll do that for the height.

356
00:22:04,480 --> 00:22:08,560
Oh my God. That's hilarious. Okay. So, um,

357
00:22:09,190 --> 00:22:14,190
so now we've randomly allocated all of
these with all of these heights and now

358
00:22:14,921 --> 00:22:19,390
we can use our check rectangles function
that we just defined and give it the

359
00:22:19,391 --> 00:22:24,070
number of rectangles and the
threshold and we're good. Right?

360
00:22:24,130 --> 00:22:28,210
Right, right. Yes. Good.

361
00:22:29,290 --> 00:22:33,250
Print them out. Print them
all out. Okay, everybody good?

362
00:22:34,820 --> 00:22:39,680
Where's the extra parentheses?
Gimme Line numbers people. Okay,

363
00:22:39,681 --> 00:22:42,410
let's see what's going on here.
Is this going to work? Who knows?

364
00:22:46,790 --> 00:22:47,623
[inaudible] [inaudible]

365
00:22:48,750 --> 00:22:49,710
I see,
I see.

366
00:22:58,760 --> 00:23:02,870
Okay, so it's got an error. Okay.

367
00:23:03,890 --> 00:23:04,100
Okay,

368
00:23:04,100 --> 00:23:08,440
Gotcha, Gotcha, Gotcha. Gotcha. This
rectangle opulus. Let's check this out.

369
00:23:08,560 --> 00:23:12,130
Oh yeah. Right. Duh. All
right, let's get back to this

370
00:23:13,850 --> 00:23:17,900
if rectangle. Right? Where's that?

371
00:23:18,140 --> 00:23:19,430
If rectangle

372
00:23:22,120 --> 00:23:24,080
dot w what does it say?
What's the error?

373
00:23:36,550 --> 00:23:38,380
Okay, let's see what,
let's see what I did here

374
00:23:40,460 --> 00:23:42,500
for rectangle.

375
00:23:44,370 --> 00:23:46,010
It's like one of these typing errors.

376
00:23:46,430 --> 00:23:50,240
I'm like doing multiple things
here at once. See that rectangle?

377
00:23:57,910 --> 00:24:02,190
Yup. Yup. I see.

378
00:24:02,191 --> 00:24:07,191
So it's four rectangle in
rectangles and that's how that goes.

379
00:24:15,980 --> 00:24:18,980
I know I should have enabled line
numbers. Oh yeah. How do I do that?

380
00:24:19,010 --> 00:24:20,270
Enabling line numbers.

381
00:24:22,640 --> 00:24:24,800
Four rectangles.

382
00:24:27,640 --> 00:24:28,510
Let's see here.

383
00:24:34,750 --> 00:24:35,583
Okay.

384
00:24:38,890 --> 00:24:42,320
I'm just going to go through this
siphon. All right. You guys are,

385
00:24:42,370 --> 00:24:43,570
you guys are distracting me.
Hold on.

386
00:24:43,571 --> 00:24:47,860
I'm just going to put you in
the corner for a second from,

387
00:24:48,420 --> 00:24:52,000
they've got cy thon imported the pool.
I'm just going to go over,

388
00:24:52,001 --> 00:24:54,340
this could be cause
necessarily. Anyway, we,

389
00:24:54,360 --> 00:24:57,490
we imported the pool for
memory allocation and then

390
00:24:59,410 --> 00:25:03,040
we created our structure.
Our struct are type a rectangle type.

391
00:25:03,880 --> 00:25:06,400
And then we said,
let me just see,

392
00:25:10,280 --> 00:25:14,790
let's just do this.
Okay,

393
00:25:15,150 --> 00:25:17,370
let's just compile that.
Okay.

394
00:25:17,371 --> 00:25:22,280
This proves that we can compile,
see colab.

395
00:25:22,350 --> 00:25:25,710
Okay, so that was the first part. Now
let me do the same thing over here.

396
00:25:27,690 --> 00:25:31,200
I'm just going to break
this up. Break it up. Okay.

397
00:25:32,400 --> 00:25:35,040
There we go.
In valid syntax.

398
00:25:37,450 --> 00:25:39,430
Oh, you know what? It's
gotta to be inside of a,

399
00:25:39,970 --> 00:25:44,650
I've got to have this magic
thing going on. Uh, Sai Thong.

400
00:25:53,930 --> 00:25:55,040
Oh,

401
00:26:01,880 --> 00:26:02,713
okay.

402
00:26:07,520 --> 00:26:12,080
We, okay. We got some, we've
got a lot of NLP NLP to cover.

403
00:26:12,260 --> 00:26:16,250
By the way, I have this code on get hot
by the way, so definitely check it out.

404
00:26:16,720 --> 00:26:21,650
It's the latest repository that I have.
Definitely check it out.

405
00:26:23,660 --> 00:26:27,860
We've got other things to cover here.
These are my comments, by the way.

406
00:26:27,861 --> 00:26:32,310
Some amazing comments. I have to say
myself. What? Wait, we'll wait. Oh, okay.

407
00:26:32,370 --> 00:26:36,710
This one away. Okay, cool. I was, I was
about to say like, wait a second. Okay,

408
00:26:36,980 --> 00:26:39,980
now let's time it.
Let's see the difference in timing.

409
00:26:40,430 --> 00:26:42,290
Main rectangles fast.

410
00:26:45,820 --> 00:26:47,410
Good. Okay. Milliseconds.

411
00:26:47,440 --> 00:26:51,460
842 milliseconds compared
to what it was before.

412
00:26:53,610 --> 00:26:55,920
Yeah. Control ml. Okay, thank you.

413
00:26:57,240 --> 00:27:02,240
2.3 2.23 seconds versus 842 milliseconds.

414
00:27:03,060 --> 00:27:07,800
That is a two x. How many
milliseconds are there in a second?

415
00:27:07,801 --> 00:27:11,820
1,000 how many times
were there 2000 so yeah,

416
00:27:11,880 --> 00:27:15,390
it's like a two x speed up for the
same thing. Okay, so there we go.

417
00:27:15,630 --> 00:27:20,220
Rule number one, do not do a live
demo. See, that's how exactly.

418
00:27:20,370 --> 00:27:23,040
If you, if you can't code it,
sometimes you got a copy paste.

419
00:27:23,041 --> 00:27:27,390
You got to keep going. I'm a human, you
know, so that's how that goes. All right,

420
00:27:27,391 --> 00:27:30,660
so now we've timed it. No. Okay.
So that's it for [inaudible],

421
00:27:31,050 --> 00:27:33,210
straight to machine learning.
Now we've got that out of the way.

422
00:27:33,900 --> 00:27:38,340
So when we're doing natural language
processing, we're dealing with strings,

423
00:27:38,370 --> 00:27:38,581
right?

424
00:27:38,581 --> 00:27:43,581
We're dealing with strengths and see
isn't necessarily all of these like,

425
00:27:44,400 --> 00:27:48,540
um, numerical functions aren't
necessarily made for strings.

426
00:27:49,140 --> 00:27:53,340
But what's so what we need is to kind of
intermediary solution that allows us to

427
00:27:53,341 --> 00:27:57,090
use the fine grain control over memory.

428
00:27:57,090 --> 00:27:58,660
That c allows a,

429
00:27:58,690 --> 00:28:03,690
which allows for a faster
execution environment but
also a high level interface

430
00:28:03,931 --> 00:28:07,200
that lets us deal with strings.
So what spacey is,

431
00:28:07,201 --> 00:28:11,610
is it's this great library. I love this.
Uh, I love this branding by the way.

432
00:28:11,611 --> 00:28:15,900
Industrial Strength, natural language
processing, fastest in the world,

433
00:28:15,930 --> 00:28:20,580
big claim, big, big claim. And look
at this, look at this beautiful,

434
00:28:21,060 --> 00:28:25,650
oh man. As, as a technical writer,
I just, I love their documentation.

435
00:28:25,940 --> 00:28:27,510
Um,
I love their design,

436
00:28:27,780 --> 00:28:31,500
especially at like of the terminal window
and the colors and stuff are very cool

437
00:28:31,501 --> 00:28:35,730
stuff. So when it comes to
natural language processing,

438
00:28:35,731 --> 00:28:37,550
we have to do a bunch of,
um,

439
00:28:38,370 --> 00:28:43,260
preprocessing steps before we feed any
kind of text data in to a deep learning

440
00:28:43,261 --> 00:28:44,160
or machine learning model,

441
00:28:44,161 --> 00:28:47,070
whether it's a neural network or
a support vector machine, right?

442
00:28:47,071 --> 00:28:50,110
This includes tokenization,
part of speech tagging. Part of,

443
00:28:50,190 --> 00:28:54,030
let me slow down part of speech tagging,
dependency parsing,

444
00:28:54,430 --> 00:28:58,620
a named entity recognition.
What is this word? It? Well,
it's a, it's a person. It's,

445
00:28:58,630 --> 00:28:59,910
it's a place, right? So,

446
00:29:02,110 --> 00:29:07,110
so I really think like if we took
this comment section and we just,

447
00:29:07,480 --> 00:29:12,340
I think the birth of all programming
means memes come from the wizards in this

448
00:29:12,341 --> 00:29:14,530
common section. By the
way, like we are the,

449
00:29:14,890 --> 00:29:19,210
we are the source of all
programming means God is html.

450
00:29:19,570 --> 00:29:24,460
Exactly. Exactly. Okay. So
all right, so that spacey,

451
00:29:24,461 --> 00:29:24,761
so let's,

452
00:29:24,761 --> 00:29:29,761
let's code some spacey right over 400
times faster than an t k which I've done

453
00:29:30,041 --> 00:29:33,080
videos on before, which is amazing.
It's a newer, it's a newer lie.

454
00:29:33,081 --> 00:29:37,930
It's newer than El Nltk. NLTK
is pretty old. So we gotta get,

455
00:29:37,931 --> 00:29:39,200
we gotta get with the Times.
And the,

456
00:29:39,201 --> 00:29:43,690
and the coolest part I think is
this idea word vectors, right?

457
00:29:43,700 --> 00:29:46,720
So before we input words into
a machine learning model,

458
00:29:46,780 --> 00:29:51,250
we have to convert them into
vectors. Okay. We have to
convert them into vectors.

459
00:29:51,280 --> 00:29:56,280
And vectors are a representation
that is easily possible by function.

460
00:29:56,680 --> 00:30:00,160
Approximators like neural
networks. So, so what does,

461
00:30:00,220 --> 00:30:04,330
what specifically is spacey doing two
strings? Well, what it's doing is,

462
00:30:05,890 --> 00:30:10,390
what it does is it stores every string
in a single Beta structure called string

463
00:30:10,391 --> 00:30:15,190
store. Okay. This is a, this, this, and
then this is a c, this is a c object.

464
00:30:15,670 --> 00:30:20,670
And then all of these strings are
indexed by a 64 bit sea level hash,

465
00:30:20,980 --> 00:30:24,250
right? So Hash is the same idea
behind bitcoin. You know, this,

466
00:30:24,251 --> 00:30:28,240
this long string of characters like
numbers and numbers and letters.

467
00:30:29,380 --> 00:30:33,190
And what this allows us
to do is very fast lookup,

468
00:30:33,191 --> 00:30:37,900
constant time look up and
constant time a storage, right?

469
00:30:37,901 --> 00:30:41,260
So retrieval and storage are both
constant time, which is awesome.

470
00:30:41,530 --> 00:30:44,860
And this is very fast. But so that's
what it's doing under the hood.

471
00:30:44,861 --> 00:30:49,570
It's converting every string into this,
uh, in this, into the string store object,

472
00:30:49,800 --> 00:30:53,020
uh, it storing it and then it's
you were indexed by this hash.

473
00:30:53,050 --> 00:30:56,170
So whenever we need it, we
can, we can, um, pick it up.

474
00:30:57,940 --> 00:30:58,773
So,

475
00:31:00,240 --> 00:31:00,680
okay.

476
00:31:00,680 --> 00:31:01,790
Uh, yeah, so there's that.

477
00:31:01,791 --> 00:31:03,950
And so there's a bunch of things
that we need to do tagging.

478
00:31:03,951 --> 00:31:06,020
So we're going to do a few
of those examples right now.

479
00:31:06,230 --> 00:31:09,620
And the great thing about spacey is it
integrates with all of these major deep

480
00:31:09,621 --> 00:31:11,300
learning libraries very easily.

481
00:31:11,510 --> 00:31:15,890
There are so many examples on
get hub of this happening, right?

482
00:31:16,910 --> 00:31:20,210
Here's one example by the, here's
the spacey a repository. By the way,

483
00:31:20,211 --> 00:31:24,380
they've got a bunch of great examples.
If we just go under the examples folder,

484
00:31:25,150 --> 00:31:29,200
uh, we've got oh care os nice deep
wanting care, Ross. All right, so what,

485
00:31:29,270 --> 00:31:30,260
let's see what they're doing here.

486
00:31:31,130 --> 00:31:33,950
They're doing an LSTM sentiment
classification model, right?

487
00:31:33,951 --> 00:31:37,760
So they're trying to detect,
you know, what the sentiment
of some words are, right?

488
00:31:37,761 --> 00:31:40,460
This is natural language
processing or a part of it,

489
00:31:41,510 --> 00:31:42,180
okay?

490
00:31:42,180 --> 00:31:45,900
So notice in their
training loop before they,

491
00:31:45,960 --> 00:31:50,940
here's their LSTM model, before
they give, uh, the, the, the Corpus,

492
00:31:50,941 --> 00:31:52,980
the text to the model to train,

493
00:31:53,400 --> 00:31:57,840
they are turning it into a bunch
of vectors. Word vectors, right?

494
00:31:57,841 --> 00:32:00,050
Like I said before, how
are they doing this? Well,

495
00:32:00,090 --> 00:32:05,090
what they imported spacey up there and
then they said spacey don't load English

496
00:32:05,101 --> 00:32:08,550
vectors. So they've got a bunch of
English factors preloaded just like that.

497
00:32:08,880 --> 00:32:12,630
And then we can take this NLP object and
we can say, well, make it into sentences,

498
00:32:12,900 --> 00:32:16,590
get those word embeddings and
then input those to the model.

499
00:32:16,620 --> 00:32:20,580
So this is a preprocessing step.
Works very well with deep learning models.

500
00:32:20,700 --> 00:32:22,560
Let's do a bunch of those
things right now. Okay.

501
00:32:22,561 --> 00:32:26,250
So the first thing we'll do
is we'll set up spacey, right?

502
00:32:26,251 --> 00:32:31,050
So we can say import Spacey
Dot Cli Spacey Dot Cli. Dot.

503
00:32:31,051 --> 00:32:35,070
Download.
We want the English a corpus.

504
00:32:35,610 --> 00:32:40,220
And um,
we'll say load

505
00:32:40,250 --> 00:32:43,580
it right here. Yeah. And it's for English.

506
00:32:46,470 --> 00:32:47,500
All right.

507
00:32:51,330 --> 00:32:55,890
Yeah. Okay, we've got that. And
now we want some test data. Okay.

508
00:32:55,891 --> 00:33:00,240
So let's, let's think of some
test data. Um, I'm going to say,

509
00:33:00,960 --> 00:33:05,170
what do I want there to be
for test data. Um, build it,

510
00:33:05,400 --> 00:33:07,830
train it,
test it.

511
00:33:08,220 --> 00:33:11,970
Makes it be all day.
Train it tests.

512
00:33:11,971 --> 00:33:16,950
It makes it smarter. Better,
faster. No, no, no, no, no,

513
00:33:16,951 --> 00:33:21,690
no. What was it? What was it? Oh my God,
I'm forgetting my own music. Oh my God.

514
00:33:21,720 --> 00:33:25,230
Okay. We got to see this for a second.
Smarter Saroj how does this go?

515
00:33:26,970 --> 00:33:31,250
This was like build a train it test.
It makes it denser or deeper.

516
00:33:31,260 --> 00:33:33,960
Faster or smarter, but, but at
that the, okay. That's what it was.

517
00:33:34,590 --> 00:33:38,970
Makes it denser, deeper, faster,

518
00:33:39,420 --> 00:33:40,380
smarter.

519
00:33:40,980 --> 00:33:45,180
I got to read papers to
try and make me smarter.

520
00:33:45,300 --> 00:33:50,280
I train my models into, cause
my takes longer. Oh man, that's,

521
00:33:50,281 --> 00:33:53,700
that's a sick song by the way. Sometimes
I'm like listening to that. Like,

522
00:33:54,120 --> 00:33:58,170
just like walking, like I'm
listening to my own music. Okay.

523
00:33:58,171 --> 00:34:01,590
We're talking about spacey, not my
smarter Song. All right. Where were we?

524
00:34:02,430 --> 00:34:06,990
All right. Yes, I know Hindi, by the
way. I know Hindi. I know Spanish.

525
00:34:07,020 --> 00:34:11,040
I know [inaudible]. I know a little
bit of Russian. I'm learning Chinese.

526
00:34:11,070 --> 00:34:15,030
I need to learn some Chinese. And uh, yes.

527
00:34:15,300 --> 00:34:18,990
So don't even question what the deal
is, you know, like I know, I know,

528
00:34:19,020 --> 00:34:21,000
I know Hindi. Okay. So,

529
00:34:24,410 --> 00:34:25,243
mmm.

530
00:34:26,010 --> 00:34:31,010
I got to read papers to
try and make me smarter.

531
00:34:32,760 --> 00:34:36,720
I train my models. Okay.
That's the second line.

532
00:34:38,770 --> 00:34:39,603
Okay.

533
00:34:39,850 --> 00:34:44,200
In the cloud now,
because my laptop takes longer,

534
00:34:44,490 --> 00:34:46,030
I parse through data

535
00:34:48,460 --> 00:34:49,930
like a one more line and then we're done.

536
00:34:51,090 --> 00:34:51,923
Okay.

537
00:34:53,170 --> 00:34:55,660
Like,
like a boss now.

538
00:34:56,380 --> 00:35:01,380
Back then mock code was wronger
subscribe if you want to learn.

539
00:35:01,541 --> 00:35:05,830
Now let's spread this AI power. Okay,

540
00:35:05,831 --> 00:35:09,340
so four lines. Do you know English? No,

541
00:35:09,341 --> 00:35:13,460
actually I'm still learning English. I
don't know English. So maybe someday.

542
00:35:13,480 --> 00:35:17,110
I hope. I hope someday I'll
learn how that works. Okay,

543
00:35:17,680 --> 00:35:19,460
so we have our,
um,

544
00:35:19,510 --> 00:35:23,860
we have our test sentence that
will input just like this.

545
00:35:24,610 --> 00:35:28,540
And now we have our parsed data.
Let's see if this works.

546
00:35:36,740 --> 00:35:37,930
Oh, right. Space Spacey.

547
00:35:41,800 --> 00:35:46,300
Breve yet. Breve yet
my friend. I will wrap.

548
00:35:46,301 --> 00:35:50,320
Don't tell me don't wrap because that's
gonna make me wrap even harder. Okay.

549
00:35:50,500 --> 00:35:53,680
That's how this works. You know
what I mean? That's how this works.

550
00:35:53,681 --> 00:35:54,970
Let's see where we are time wise.

551
00:35:55,610 --> 00:35:56,040
Okay.

552
00:35:56,040 --> 00:36:00,530
35 minutes. Good. I'll definitely wrap
now. No, I was going, I'm, I'm Delfin Rob.

553
00:36:00,560 --> 00:36:04,170
All right. Here we go. Space. He's
not defined. I did. Oh, right. See,

554
00:36:04,171 --> 00:36:08,860
I can't even spell my own thing. All
right, here we go. I don't speak Tamil.

555
00:36:08,861 --> 00:36:11,920
Aldo. I should, there's this
hilarious like Tom Hill movie,

556
00:36:11,921 --> 00:36:13,180
which is like all these robots,

557
00:36:13,181 --> 00:36:16,990
like hundreds of them or something
or it's like this. It's hilarious.

558
00:36:17,680 --> 00:36:20,890
Uh, Parse multisense yeah,
I did define it. Oh, right.

559
00:36:23,920 --> 00:36:24,753
Yeah.

560
00:36:24,990 --> 00:36:29,130
You can now load it. Yes.
Okay. There we go. I loaded the
model. Right? So here we go.

561
00:36:29,910 --> 00:36:31,290
Let's do some part of speech tagging.

562
00:36:31,650 --> 00:36:34,920
So what we're gonna do is we're going to
look for the part of speech of each of

563
00:36:34,921 --> 00:36:39,600
these words in my test corpus.
Okay. So I'm going to say,

564
00:36:41,210 --> 00:36:41,910
okay.

565
00:36:41,910 --> 00:36:44,190
Parsed data.
I,

566
00:36:44,220 --> 00:36:47,490
so that's all of those
words that I just defined.

567
00:36:58,440 --> 00:37:03,030
Yeah. I speak, I speak Dutch as well.
Wholehearted. I speak some Dutch.

568
00:37:03,060 --> 00:37:06,750
I mean it's a hard language. I just
spent a year in Amsterdam, by the way.

569
00:37:07,230 --> 00:37:11,460
I spent an entire lifetime in a year.

570
00:37:11,760 --> 00:37:12,900
That was some pretty

571
00:37:13,900 --> 00:37:14,733
mmm.

572
00:37:15,330 --> 00:37:16,800
Incredible stuff.

573
00:37:19,080 --> 00:37:23,310
Don't want to get too reminiscent.
I don't want to reminisce.

574
00:37:24,330 --> 00:37:27,330
Reminisce about things like Tupac.
Okay.

575
00:37:27,720 --> 00:37:31,740
I'm feeling like a joker today on
this live stream, man. Alright,

576
00:37:31,770 --> 00:37:35,220
back to this.
I'll reminisce.

577
00:37:36,780 --> 00:37:41,310
Alright. Part of speech tagging or
was that okay, what are we doing here?

578
00:37:41,490 --> 00:37:44,310
So we're going through each of those
words in the parse data and we're saying

579
00:37:44,311 --> 00:37:46,830
where does it start, where does it
end? And then for each of those words,

580
00:37:46,831 --> 00:37:50,600
we're going to, we're going to tag
it. Okay. So each of those, should I,

581
00:37:50,620 --> 00:37:51,780
I should say tokens,

582
00:37:52,290 --> 00:37:57,290
we're going to say print the the word as
well as it's part of speech and you'll

583
00:37:57,601 --> 00:37:59,400
see exactly what I mean right now.

584
00:38:02,240 --> 00:38:03,073
[inaudible]

585
00:38:04,060 --> 00:38:05,830
break is invalid syntax.

586
00:38:08,670 --> 00:38:09,503
Really?

587
00:38:11,490 --> 00:38:13,770
You Go, you go. No, no, no. Okay.

588
00:38:22,330 --> 00:38:26,770
Well I'd be attending these
conferences. Look after slush. Okay.

589
00:38:26,771 --> 00:38:31,060
Slush in Helsinki. Nothing can
compare. A slush was the most epic.

590
00:38:31,270 --> 00:38:33,760
And I know I'm really promoting slash
by saying this right now and their

591
00:38:33,761 --> 00:38:38,710
applications are gonna go up. But slush
was the most epic, um, conference ever.

592
00:38:38,980 --> 00:38:42,910
I mean, okay. Let me just give
you guys a little secret. Okay.

593
00:38:42,911 --> 00:38:47,410
So like I go to this, okay. There's this
like speaker's dinner. Okay. This too.

594
00:38:47,890 --> 00:38:51,190
There's too much to like talking about
right now. We've got to get the coat on.

595
00:38:53,640 --> 00:38:54,473
Okay.

596
00:38:54,530 --> 00:38:56,840
Close the brackets, right?
That's what it is. Of course,

597
00:39:01,390 --> 00:39:02,223
right?

598
00:39:04,440 --> 00:39:08,470
Yup. Yup. Porkin. Where's Torkan?

599
00:39:09,780 --> 00:39:11,070
Toke and

600
00:39:14,410 --> 00:39:17,800
orth
and then underscore,

601
00:39:19,990 --> 00:39:21,640
get Joe brackets,
right.

602
00:39:22,110 --> 00:39:24,080
Boom.
Oh,

603
00:39:24,240 --> 00:39:29,030
verbs. Nouns, punctuation marks,
build it, train it. Tested.

604
00:39:29,070 --> 00:39:32,370
Makes it denser. The Berg faster. Smarter.

605
00:39:33,090 --> 00:39:34,710
I got to read.
Okay.

606
00:39:34,711 --> 00:39:38,910
So that was one part we can
do more dependency tagging
named entity recognition

607
00:39:38,911 --> 00:39:43,890
where we at time wise, 39 minutes, we
were still good torque and exactly.

608
00:39:44,070 --> 00:39:47,730
That's how we roll torquing.
All right. So, uh, that was
one thing that we could do.

609
00:39:47,731 --> 00:39:50,640
Let's, let's do another thing.
We can do some dependency
tagging. Now. What is this?

610
00:39:51,090 --> 00:39:55,410
I am 27 years old.
Helsinki's in the house. Um,

611
00:39:56,940 --> 00:40:01,930
how to reach you right here. Here I am.
Kim Show means how are you in Gujrati?

612
00:40:01,950 --> 00:40:05,610
I'm good. Uh, that's
some Russian right there.

613
00:40:06,960 --> 00:40:11,550
It says in Sylvia Tura. No, I'm just
kidding. Rap. Got to read them papers.

614
00:40:11,580 --> 00:40:11,791
All right,

615
00:40:11,791 --> 00:40:15,030
so dependency tagging is when we have a
bunch of words that depend on each other.

616
00:40:15,031 --> 00:40:18,930
What specifically do I mean?
Uh,

617
00:40:20,750 --> 00:40:21,583
yeah,

618
00:40:21,970 --> 00:40:25,390
there's a tree of words that depend
on each other. So it's actually,

619
00:40:25,391 --> 00:40:27,520
I should have had a
slide for the dependency.

620
00:40:27,521 --> 00:40:32,020
Tagging on image speaks a thousand words.
There we go.

621
00:40:35,600 --> 00:40:38,420
So it's just like this right submitted.
Who submitted the bill? Well,

622
00:40:38,421 --> 00:40:43,010
bills were submitted by
who? That's the preposition.
What's the object? As senator,

623
00:40:43,011 --> 00:40:47,540
what is his description? Republican
of Kansas, whatever, et cetera. Right?

624
00:40:47,541 --> 00:40:50,360
So it's just like that.
Now let's do this

625
00:40:52,130 --> 00:40:56,830
in our example. Let's, let me, let
me do another wrap line of mine. Uh,

626
00:40:56,840 --> 00:41:01,790
what was my latest rap? Uh, it was
like, this model is taking too long.

627
00:41:02,120 --> 00:41:03,770
I need addenda.
And then it's like

628
00:41:06,710 --> 00:41:11,630
when they update the weights, they
call it, they call it back propagate.

629
00:41:11,660 --> 00:41:15,770
They call it back propagate. Find that
in your dictionary back propagate.

630
00:41:16,610 --> 00:41:18,470
And they want it the waste,
they call it back for per day.

631
00:41:18,500 --> 00:41:20,960
That's what every single section of
these new papers say. That's what,

632
00:41:20,961 --> 00:41:25,760
let's just leave it at that.
Okay? So that's our example.

633
00:41:26,210 --> 00:41:29,690
And now that we have our example,
we can say

634
00:41:31,250 --> 00:41:33,080
put it into our English.

635
00:41:34,130 --> 00:41:37,130
And now for every token that
we have in our parsed example,

636
00:41:37,160 --> 00:41:41,810
now that it's been formatted properly,
let's print out both the original,

637
00:41:42,020 --> 00:41:42,853
um,

638
00:41:43,850 --> 00:41:48,090
tag for it as well as its dependency.

639
00:41:48,091 --> 00:41:51,950
So notice how all of these attributes
of the token keyword is what we're using

640
00:41:51,951 --> 00:41:52,784
here.

641
00:41:54,100 --> 00:41:54,933
Okay,

642
00:41:55,000 --> 00:41:58,290
head. And this is using
scythe on under the hood.

643
00:41:58,291 --> 00:42:01,530
So notice the hell I'm not
specifically typing out to sea,

644
00:42:02,040 --> 00:42:03,480
but it's very close to it.

645
00:42:10,520 --> 00:42:11,353
Okay.

646
00:42:14,020 --> 00:42:15,280
They're not in text form.

647
00:42:15,281 --> 00:42:19,420
They're just somewhere in my head and on
the internet in terms of videos. Okay.

648
00:42:22,370 --> 00:42:26,540
Now. Okay, so for each of those files I
want to show what the tree looks like.

649
00:42:26,541 --> 00:42:30,650
So that's why I'm going to say what's
on the left and then what's on the right

650
00:42:30,710 --> 00:42:31,940
of the tree. Right. So,

651
00:42:34,760 --> 00:42:35,593
okay.

652
00:42:35,680 --> 00:42:40,400
T dot.
Worth for t n token dot.

653
00:42:41,510 --> 00:42:42,343
Rights.

654
00:42:46,550 --> 00:42:49,410
Let's see what happens here.
Good.

655
00:42:51,150 --> 00:42:56,070
When they update the wait, they, okay, so
that's dependency tagging. There we go.

656
00:42:56,071 --> 00:42:58,170
Like I said before and now for the,
okay,

657
00:42:58,171 --> 00:43:02,850
so next time I will do
line numbers. Okay. So

658
00:43:08,010 --> 00:43:11,550
Hola, Como Estas? [inaudible] Raj,

659
00:43:12,090 --> 00:43:15,720
Yo Hablo Espanol. Tambien which
means my name is Raj and yes,

660
00:43:15,721 --> 00:43:19,260
I speak Spanish very well. And I was just
listening to deaths by, oh by the way,

661
00:43:19,261 --> 00:43:22,800
cause I'm going to la in an hour and I
always listened to desk pasito before I

662
00:43:22,801 --> 00:43:27,370
go to La because this is how we
do it down in Puerto Rico. That,

663
00:43:27,371 --> 00:43:31,630
that makes sense. Okay. The thing about
named entity recognition is it. So, um,

664
00:43:34,920 --> 00:43:37,320
it's not as relevant,
but basically it's like

665
00:43:40,630 --> 00:43:43,250
w w it just comes down
to us using this token,

666
00:43:43,400 --> 00:43:47,510
these attributes of the
word token. Right? But, um,

667
00:43:48,950 --> 00:43:51,620
I think that's it for this video.
Yeah, this is a good amount.

668
00:43:51,621 --> 00:43:54,940
This is a good amount of
prostate, but definitely check
out these docs, these doc,

669
00:43:54,980 --> 00:43:57,960
this documentation for spacey.
It's some great stuff. Um,

670
00:43:57,961 --> 00:44:01,190
I want to see more people
using c implementations,

671
00:44:01,191 --> 00:44:05,660
more wizards using both scythe on to
speed up implementation that their models

672
00:44:05,840 --> 00:44:09,080
for data preprocessing,
especially when it comes to NLP.

673
00:44:09,290 --> 00:44:11,400
I will be very impressed by that.
Um,

674
00:44:11,410 --> 00:44:15,620
and you can expect us to go more
low level in the future. And uh,

675
00:44:15,621 --> 00:44:17,570
that's it for this livestream.

676
00:44:18,680 --> 00:44:23,240
Now I'm going to do a rap part.

677
00:44:23,510 --> 00:44:25,730
Let me do a wrap here and then we're done.
We're done.

678
00:44:25,731 --> 00:44:30,731
Someone say a word and then I'm going to
freestyle to that to say a word ideally

679
00:44:31,281 --> 00:44:34,930
about machine learning.
Okay.

680
00:44:34,931 --> 00:44:36,460
Let me just pull up an instrumental,

681
00:44:59,870 --> 00:45:04,330
Julia.
I guess it's going to be,

682
00:45:07,960 --> 00:45:09,670
I try to use NLP.

683
00:45:10,030 --> 00:45:14,920
Don't you see all of these word vectors?
I think it's three down,

684
00:45:15,010 --> 00:45:19,300
man, king woman, Aubrey, where I'm trying
to add these up and subtract. Damn,

685
00:45:19,301 --> 00:45:23,170
don't you care? You can add them.
Multiply it. You can divide.

686
00:45:23,171 --> 00:45:26,470
You can use all of these operations,
man. It's all in your mind.

687
00:45:27,040 --> 00:45:29,830
Think of these words is numbers
that you can add into the track.

688
00:45:29,980 --> 00:45:33,060
Try to think of them as something
more as they go back to bat.

689
00:45:33,130 --> 00:45:35,920
You can line them up,
you can put them in a dictionary,

690
00:45:36,130 --> 00:45:40,300
you can put them in any data
structure. It's history. Yo. Okay.

691
00:45:40,301 --> 00:45:43,990
That's it for this rap Ganz this next
time, but that was my short wrap.

692
00:45:43,991 --> 00:45:47,770
Thank you everybody for coming. I love
you guys and for now I've got to go to la,

693
00:45:47,771 --> 00:45:48,850
so thanks for watching.

694
00:45:49,720 --> 00:45:51,800
All right,
that's it for this stream.

