1
00:00:00,000 --> 00:00:03,870
Don't have a boss be the
boss with a hello world.

2
00:00:03,900 --> 00:00:08,900
It's so Raj and I'm going to show you how
you can build a profitable business on

3
00:00:09,331 --> 00:00:14,160
your own using tensorflow, Google's
widely popular machine learning framework.

4
00:00:14,400 --> 00:00:15,600
A couple of years ago,

5
00:00:15,630 --> 00:00:20,630
deep learning started to outperform all
other machine learning models when given

6
00:00:21,180 --> 00:00:26,180
massive amounts of data and Google saw
that it could use these deep neural

7
00:00:26,881 --> 00:00:30,330
networks to improve its
services from g-mail,

8
00:00:30,350 --> 00:00:31,980
two photos to search.

9
00:00:32,220 --> 00:00:37,110
They built a framework called tensorflow
out of a need to let researchers and

10
00:00:37,140 --> 00:00:40,080
developers work together on AI models,

11
00:00:40,110 --> 00:00:44,550
best animate crossover ever and have
them scale to billions of people.

12
00:00:44,820 --> 00:00:47,670
Originally it was made
for internal use only,

13
00:00:47,671 --> 00:00:50,820
but they open sourced it
so now anyone can use it.

14
00:00:51,120 --> 00:00:54,960
We can build a really simple
tensorflow model pretty easily.

15
00:00:55,170 --> 00:00:59,760
There are lots of examples online
for say classification for example.

16
00:00:59,940 --> 00:01:03,090
All of it comes out to just
under a hundred lines of code.

17
00:01:03,450 --> 00:01:07,770
The pipeline generally follows the
pattern of preprocess your dataset.

18
00:01:08,040 --> 00:01:09,030
Build the model,

19
00:01:09,150 --> 00:01:13,500
then train the model in a training loop
to ultimately saving the train of model

20
00:01:13,501 --> 00:01:16,230
file to your local disk.
As a binary file,

21
00:01:16,620 --> 00:01:18,660
but when our model is fully trained,

22
00:01:18,690 --> 00:01:21,420
will want to serve it to
our users on a server.

23
00:01:21,660 --> 00:01:26,340
That way they can access it from the web
and that's where the tensorflow serving

24
00:01:26,370 --> 00:01:27,570
library comes in.

25
00:01:27,930 --> 00:01:32,930
Serving implements a server that runs
ml models and provides remote access to

26
00:01:33,451 --> 00:01:34,080
them.

27
00:01:34,080 --> 00:01:39,080
We can do common tasks like prediction
and classification of any provided data.

28
00:01:40,140 --> 00:01:42,720
Server bowls are the
central abstraction here.

29
00:01:42,870 --> 00:01:47,430
They already objects that clients use
to perform computation like a lookup or

30
00:01:47,431 --> 00:01:48,264
inference.

31
00:01:48,330 --> 00:01:52,890
It could be a single shard of a lookup
table or one machine learning model or

32
00:01:52,891 --> 00:01:53,760
five of them.

33
00:01:54,090 --> 00:01:59,090
Let's say we have a model that is trained
to detect fraudulent data in a bitcoin

34
00:01:59,131 --> 00:02:04,080
transaction dataset. We call this a
source. Later on, as we get more users,

35
00:02:04,081 --> 00:02:09,081
we retrain our model on a new version of
the data and therefore have a new model

36
00:02:09,151 --> 00:02:10,830
with all new weight values.

37
00:02:11,070 --> 00:02:14,370
The source will detect a new
version of the model weights.

38
00:02:14,580 --> 00:02:19,580
It will then create a loader that contains
a pointer to the model data on disk

39
00:02:20,160 --> 00:02:23,700
loaders, manage the lifecycle
of a servable the source.

40
00:02:23,701 --> 00:02:27,960
We'll notify the dynamic manager
of the new version of the model.

41
00:02:28,200 --> 00:02:33,200
This dynamic manager checks with
whatever version policy you've chosen and

42
00:02:33,721 --> 00:02:35,670
decides to load the new version.

43
00:02:36,060 --> 00:02:40,800
The dynamic manager will then
tell the loader that, hey,
there's enough in memory.

44
00:02:41,070 --> 00:02:45,630
It will then instantiate the tensor flow
graph with all the new wade following

45
00:02:45,660 --> 00:02:46,493
values.

46
00:02:46,590 --> 00:02:51,480
A clients can then request a handle to
the latest version of the model and the

47
00:02:51,481 --> 00:02:56,481
dynamic manager will return a handle to
the new version of the servable because

48
00:02:56,911 --> 00:03:00,100
tensorflow has been available
in c plus and python.

49
00:03:00,340 --> 00:03:04,510
It's been relatively easy to integrate
it into web frameworks built in those

50
00:03:04,511 --> 00:03:07,570
languages like Django
for Python for example.

51
00:03:07,900 --> 00:03:12,760
Recently Google released tensorflow dot
js which lets javascript developers get

52
00:03:12,761 --> 00:03:17,020
in on the game as well. I'm just
waiting for Schiffman to go in on this.

53
00:03:17,320 --> 00:03:22,320
We can use it to develop client side AI
apps where the data remains entirely in

54
00:03:22,571 --> 00:03:26,920
the browser building. Draining all
of it can be done from the browser,

55
00:03:27,190 --> 00:03:32,170
but think about a mobile architecture
for AI. If we want to build a mobile app,

56
00:03:32,410 --> 00:03:36,880
we can have it use a server client
architecture where the APP will just send

57
00:03:36,881 --> 00:03:40,300
data to the server,
have it perform a prediction there,

58
00:03:40,450 --> 00:03:43,600
then retrieved the output
and display it in the APP.

59
00:03:43,630 --> 00:03:47,260
But what if we'd like to do
on device predictions? Well,

60
00:03:47,290 --> 00:03:50,080
we can use the tensorflow lite library.

61
00:03:50,290 --> 00:03:54,310
It optimizes for low latency
and small model sizes.

62
00:03:54,490 --> 00:03:58,900
There's also lets our app work offline
so we don't even need Internet access.

63
00:03:59,170 --> 00:04:01,540
Once we have a trained tensorflow model,

64
00:04:01,690 --> 00:04:06,010
we can convert that model to a
tensorflow lite file using the converter.

65
00:04:06,340 --> 00:04:09,400
Then we can use that converted
file in our mobile APP.

66
00:04:09,670 --> 00:04:14,670
This works for both android and Ios
devices with the available Java and Swift

67
00:04:15,060 --> 00:04:19,480
Api. This one problem with tensorflow
though was that it was missing a crucial

68
00:04:19,481 --> 00:04:23,530
feature that AI developers
wanted imperative programming.

69
00:04:23,980 --> 00:04:28,150
What that means is tension flow offers
a defined and run framework where you

70
00:04:28,151 --> 00:04:32,410
define a computation graph then run it.
But newer AI models,

71
00:04:32,411 --> 00:04:37,030
especially variance of recurrent
networks change in size while training,

72
00:04:37,330 --> 00:04:41,290
they aren't static.
So a defined and run framework is needed,

73
00:04:41,291 --> 00:04:46,120
which is a gap that the popular Pi
Torch Library built by Facebook filled,

74
00:04:46,150 --> 00:04:50,950
but even then tensorflow
recently implemented eager
execution that gave it it

75
00:04:51,100 --> 00:04:55,030
that capability as well.
In addition to all of these tools,

76
00:04:55,031 --> 00:04:59,470
there are helper libraries built on
tensorflow for a variety of application

77
00:04:59,471 --> 00:05:04,000
specific use cases from genomics
to music generation. Okay,

78
00:05:04,001 --> 00:05:09,001
so all that is to say that tensorflow
offers developers a toolset that gives us

79
00:05:09,611 --> 00:05:14,611
an end to end AI pipeline to build
an AI as a service business with.

80
00:05:14,980 --> 00:05:19,750
But the question is what kind of business
should we build AI assisted Brazilian

81
00:05:19,751 --> 00:05:24,700
waxing. There are lots of potential
industries ripe for disruption.

82
00:05:24,790 --> 00:05:29,260
Let's pick two that I'm particularly
passionate about. Energy and education.

83
00:05:29,590 --> 00:05:32,800
When it comes to energy,
climate change is a massive problem.

84
00:05:33,010 --> 00:05:37,300
The amount of co two emissions globally
is far exceeding what it should.

85
00:05:37,540 --> 00:05:39,100
The ice caps are melting,

86
00:05:39,260 --> 00:05:43,750
entire ecosystems will suffer and
this is bad for all of humanity.

87
00:05:44,050 --> 00:05:48,700
How can AI help prevent this problem?
If we look at it from a macro scale,

88
00:05:48,730 --> 00:05:52,600
it seems almost impossible
for a small startup to solve,

89
00:05:52,810 --> 00:05:57,620
but if we zone in on one small
solution that would help us get started

90
00:05:57,621 --> 00:05:58,454
somewhere.

91
00:05:58,520 --> 00:06:03,520
We know that climate change could cause
severe weather patterns like hurricanes,

92
00:06:04,460 --> 00:06:07,640
higher temperatures,
and rising sea levels.

93
00:06:07,940 --> 00:06:12,940
What if we could predict
where the riskiest and most
vulnerable regions we're on

94
00:06:13,040 --> 00:06:15,380
earth for these severe weather conditions?

95
00:06:15,590 --> 00:06:19,250
We could then help local
governments prepare for the impacts.

96
00:06:19,280 --> 00:06:23,630
We could also use AI to improve the
energy efficiency of machines like

97
00:06:23,840 --> 00:06:28,160
thermostats, irrigation systems,
trains, roller coasters,

98
00:06:28,280 --> 00:06:30,350
anything really that uses energy.

99
00:06:30,620 --> 00:06:33,550
Imagine energy like a grid
with multiple endpoints.

100
00:06:33,780 --> 00:06:36,530
Each end point being a different device,
needing energy.

101
00:06:36,830 --> 00:06:41,830
We can hard code in certain rules for
how and when and how much to power each

102
00:06:42,141 --> 00:06:44,720
end point or we can optimize it.

103
00:06:44,721 --> 00:06:49,721
We can build an algorithm that powers
each end point just as much as necessary

104
00:06:49,761 --> 00:06:53,810
and not more so that it functions while
using as little energy as possible.

105
00:06:53,870 --> 00:06:58,490
I like this use case and it'd be easier
to sell to businesses that specialize in

106
00:06:58,491 --> 00:07:01,190
this sort of thing. Then governments, oh,

107
00:07:01,191 --> 00:07:06,140
and ideally we don't have to build a
hardware solution since softcore alone

108
00:07:06,141 --> 00:07:07,880
would be much easier to deploy.

109
00:07:08,000 --> 00:07:12,850
So farms use a bunch of systems to
maintain their crop harvest. Howdy doody?

110
00:07:12,910 --> 00:07:14,180
Yeah, John Smith. Okay.

111
00:07:14,510 --> 00:07:18,620
Maybe we could build a system
that learns from crop yields,

112
00:07:18,830 --> 00:07:23,830
energy amounts and weather data to
route data in the most efficient way for

113
00:07:24,261 --> 00:07:27,650
farmers who powered their
crop maintenance subsystems,

114
00:07:27,860 --> 00:07:31,310
which would save them money in
a way they couldn't. Otherwise.

115
00:07:31,730 --> 00:07:34,940
If we could build a
solution for a single farm,

116
00:07:35,120 --> 00:07:39,380
we could scale it to more later.
We could find a local farm,

117
00:07:39,470 --> 00:07:43,700
ask them for their Dataset, and this
case it would be their energy bill.

118
00:07:43,760 --> 00:07:48,650
The most basic version of this would
be to say optimize just one subsystem,

119
00:07:48,830 --> 00:07:53,210
the one that waters their crops. If it
rains a good amount in the next month,

120
00:07:53,330 --> 00:07:57,590
they shouldn't have to power their
automatic watering systems as much,

121
00:07:57,620 --> 00:07:59,210
which would save them money.

122
00:07:59,480 --> 00:08:04,480
We can train a neural network
on a combination of past
weather data and energy

123
00:08:05,241 --> 00:08:10,241
usage and use it to predict how much
power to give the system next month.

124
00:08:10,690 --> 00:08:11,120
All right.

125
00:08:11,120 --> 00:08:16,120
Let's do one more education or advocacy
own in Espanol Si how cultured I am.

126
00:08:16,610 --> 00:08:20,840
There is a trend towards democratizing
education that's currently happening

127
00:08:20,990 --> 00:08:25,990
because more people are getting access
to the Internet and startups offering

128
00:08:26,600 --> 00:08:28,760
online educational content.

129
00:08:29,060 --> 00:08:32,960
How could AI help further this
goal of educating humanity?

130
00:08:33,440 --> 00:08:37,130
There are a huge number of teachers
out there willing to teach,

131
00:08:37,340 --> 00:08:42,200
but they don't always have the resources
they need to help students learn

132
00:08:42,530 --> 00:08:45,020
grading administrative tasks.

133
00:08:45,140 --> 00:08:47,600
These are basic things
that can be automated.

134
00:08:47,900 --> 00:08:52,900
A full stack solution for teachers that
lets them do what they do best and have

135
00:08:53,121 --> 00:08:58,121
the hard stuff automated by learning
algorithms would enable more teachers to

136
00:08:58,531 --> 00:09:01,710
teach full curriculums online.
What's narrowed down?

137
00:09:01,770 --> 00:09:06,760
Individualized supports can be costly.
For example, I get more requests for help.

138
00:09:06,761 --> 00:09:10,050
Then I alone as a person can handle.
Ideally,

139
00:09:10,140 --> 00:09:15,140
we could train an AI on my past data and
build a Saroj AI that could just answer

140
00:09:15,511 --> 00:09:17,370
support requests just like I would.

141
00:09:17,730 --> 00:09:21,450
A support Bot would be a great
example of Ai for education,

142
00:09:21,480 --> 00:09:24,000
so let's go with that.
To find our niche.

143
00:09:24,090 --> 00:09:27,390
Let's pick a single subject and
focus on that. Say Calculus,

144
00:09:27,690 --> 00:09:32,690
we'll find a data set of
calculus questions and answers
or create one ourselves

145
00:09:32,820 --> 00:09:35,130
by pulling from the web via an API.

146
00:09:35,490 --> 00:09:40,230
Then we can use tensorflow to find
the pattern between q's and A's.

147
00:09:40,590 --> 00:09:41,460
Once we do that,

148
00:09:41,490 --> 00:09:45,870
we can use tensorflow serving to put
our trained chat Bot on a server,

149
00:09:46,050 --> 00:09:50,910
then have it update and retrain as it
receives new questions so it gets better

150
00:09:50,940 --> 00:09:51,773
over time.

151
00:09:51,930 --> 00:09:56,930
We can sell our solution to small online
schools that need more support for

152
00:09:56,941 --> 00:10:01,140
their students, for our initial
clients and scale up from there.

153
00:10:01,290 --> 00:10:06,290
Adding new features like automated
grading and even full on AI teachers.

154
00:10:06,630 --> 00:10:08,340
Are you hyper yet?
You should be.

155
00:10:08,580 --> 00:10:11,370
There are three things to
remember from this video.

156
00:10:11,670 --> 00:10:16,670
The open source tensorflow library
offers a huge suite of tools that offer

157
00:10:16,721 --> 00:10:21,721
developers an end to end pipeline
to build profitable AI businesses.

158
00:10:22,380 --> 00:10:24,120
To build a profitable business,

159
00:10:24,270 --> 00:10:29,270
pick an industry and find where a solution
that uses data could solve a problem

160
00:10:29,701 --> 00:10:34,701
for ideally other businesses and start
small focus on profitability in a very

161
00:10:35,041 --> 00:10:37,110
small niche and scale up from there.

162
00:10:37,170 --> 00:10:40,950
Please subscribe for more programming
videos and per now I've got to grow a

163
00:10:40,951 --> 00:10:42,990
business,
so thanks for watching.

