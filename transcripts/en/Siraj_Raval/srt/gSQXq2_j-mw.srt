1
00:00:00,030 --> 00:00:02,610
Hello world,
it's to Raj and don't go anywhere.

2
00:00:02,670 --> 00:00:06,180
This is going to be one of the most
important videos you've ever seen in your

3
00:00:06,181 --> 00:00:08,760
life.
So sit down and enjoy the ride.

4
00:00:09,120 --> 00:00:12,990
What I'm going to do in this video is
I'm going to build a voting APP, okay?

5
00:00:12,991 --> 00:00:16,470
And let me demo it first. Okay.
This is my hello world voting APP.

6
00:00:16,620 --> 00:00:19,680
It's got three candidates and
I'm going to vote for one.

7
00:00:19,681 --> 00:00:24,630
I'm going to pick one Rama and then
click vote and the vote shows up. Okay?

8
00:00:24,631 --> 00:00:26,250
There are three candidates in this app.

9
00:00:26,430 --> 00:00:30,870
I voted and then the vote shows up and
anybody who uses this app can vote and

10
00:00:30,871 --> 00:00:34,410
then that vote is going to show up in
the web app. So you might be thinking,

11
00:00:34,650 --> 00:00:37,530
wait a second, it's so easy.
Why are you demoing this?

12
00:00:37,590 --> 00:00:42,360
Because the difference between this
voting app and a normal voting app is that

13
00:00:42,361 --> 00:00:44,490
this voting APP is unhackable.

14
00:00:44,640 --> 00:00:49,050
That means that no one can
modify the votes, the w, okay,

15
00:00:49,080 --> 00:00:50,160
so it is hackable,

16
00:00:50,161 --> 00:00:55,140
but it's hackable in that you wouldn't
have to have access to the 500 fastest

17
00:00:55,141 --> 00:00:57,630
supercomputers in the world combined.

18
00:00:57,930 --> 00:01:01,740
That's how much computing power you
would have to have in order to hack this.

19
00:01:01,830 --> 00:01:05,880
So it's basically unhackable unless
you have that much computing power,

20
00:01:05,881 --> 00:01:10,860
which no one does. And this is
called a decentralized application.

21
00:01:11,130 --> 00:01:15,240
Now you are probably used to building a
centralized application. So am I right?

22
00:01:15,241 --> 00:01:19,740
That's what we do. We all have a web
development, all of mobile development,

23
00:01:19,741 --> 00:01:23,460
all of it is centered around
building centralized software.

24
00:01:23,610 --> 00:01:26,730
And we're going to talk
about what centralized and
decentralized are in a second.

25
00:01:27,060 --> 00:01:28,890
But that's the,
that's the voting app we're going to do.

26
00:01:28,891 --> 00:01:31,020
That's the demo we're
going to build today.

27
00:01:31,230 --> 00:01:33,930
I'm going to go through setting up the
environment and all the tools you need to

28
00:01:33,931 --> 00:01:36,210
build it and then we'll
build it ourselves.

29
00:01:36,330 --> 00:01:40,200
But first let's talk a little bit
about the worldwide web. Okay.

30
00:01:40,230 --> 00:01:43,200
So the web started off decentralized.
What does that mean?

31
00:01:43,770 --> 00:01:47,820
If you are around in the early nineties
and I was a little baby, but you know,

32
00:01:47,821 --> 00:01:51,600
I was still there. Uh, then if
you want it to make a website,

33
00:01:51,601 --> 00:01:54,990
you would just buy a server, right?
You buy a server that has a computer,

34
00:01:55,170 --> 00:01:58,740
you put it in your room and then you
would put your webpage or your blog,

35
00:01:58,741 --> 00:02:00,990
they weren't even called blogs
back then, but you're, you know,

36
00:02:00,991 --> 00:02:04,500
whenever you want it on your server
or on your computer and then you,

37
00:02:04,530 --> 00:02:09,300
you owned that server because no one
was offering to host your data for you.

38
00:02:09,600 --> 00:02:14,600
What that meant was the web consisted of
a series of nodes that were all linked

39
00:02:15,151 --> 00:02:15,601
together,

40
00:02:15,601 --> 00:02:20,601
a very neutral playing
field where everybody owned
their data or the data that

41
00:02:20,701 --> 00:02:24,840
they contributed to the worldwide web.
That's how the web started off.

42
00:02:25,050 --> 00:02:29,010
But what happened was
during the.com bubble,

43
00:02:29,310 --> 00:02:33,600
entrepreneurs realized that if you
want it to provide value on top of this

44
00:02:33,601 --> 00:02:37,050
neutral playing field, then you
would create some service, right?

45
00:02:37,051 --> 00:02:41,850
You create some service and that service
would collect data and monetize it.

46
00:02:42,120 --> 00:02:45,450
And this per proved, extremely,
extremely useful, right?

47
00:02:45,780 --> 00:02:49,320
We started hosting our data on Geo cities.
If you remember,

48
00:02:49,321 --> 00:02:53,250
shout out to Geo cities or any of the
old, you know, web hosting services.

49
00:02:53,430 --> 00:02:54,940
We started using,
you know,

50
00:02:55,080 --> 00:03:00,080
a whole host of services that were
centralized and what this meant was you

51
00:03:00,401 --> 00:03:01,600
didn't have to buy your own server.

52
00:03:01,601 --> 00:03:05,290
You could just use these services
and have a very thin client.

53
00:03:06,250 --> 00:03:11,250
But what's happened is these services
have become so massive that the web is now

54
00:03:13,331 --> 00:03:18,280
a scent. A set is, it's, it's
basically a handful of huge nodes.

55
00:03:18,430 --> 00:03:23,430
It's become centralized around a handful
of of huge notes and these notes are

56
00:03:23,800 --> 00:03:28,090
Amazon, Google, Facebook, snapchat,

57
00:03:28,120 --> 00:03:28,953
Instagram.

58
00:03:29,260 --> 00:03:33,550
All data is routed through
these all data requests,

59
00:03:33,551 --> 00:03:38,200
all queries data is routed through
the central nodes and this is bad,

60
00:03:38,530 --> 00:03:42,580
really bad.
And here's why we of course,

61
00:03:42,581 --> 00:03:46,960
the services provided great value to our
lives. We use them every day, right? We,

62
00:03:46,961 --> 00:03:50,080
I use Google and all the services
every day, they make our lives easier,

63
00:03:50,230 --> 00:03:54,550
but it's bad for four reasons. The first
reason is that it shrinking our economy.

64
00:03:54,910 --> 00:03:58,780
What I mean by that is that in a good
economy we monetize more and more,

65
00:03:58,930 --> 00:04:02,020
but in a bad economy we
monetize less and less.

66
00:04:02,080 --> 00:04:06,370
And that's what's happening because data
is the natural resource of our time.

67
00:04:06,700 --> 00:04:08,980
And because data is so centralized,

68
00:04:08,981 --> 00:04:11,830
that means the ownership
of data is so centralized,

69
00:04:12,160 --> 00:04:16,810
there are less opportunities for people
to generate value to generate capital

70
00:04:16,930 --> 00:04:21,220
because all the data is being collected,
right? Data is how you make money, right?

71
00:04:21,250 --> 00:04:22,210
As a society,

72
00:04:22,480 --> 00:04:27,250
we are starting to value more and more
data and less and less labor. Right?

73
00:04:27,251 --> 00:04:29,530
Before we valued labor.
Now not so much.

74
00:04:29,531 --> 00:04:34,060
It's all about the data and as this uh,
economic trend progresses,

75
00:04:34,240 --> 00:04:38,890
it's going to only, the value of data
is only going to increase over time.

76
00:04:39,130 --> 00:04:41,770
And because that data
is so siloed right now,

77
00:04:41,950 --> 00:04:45,670
it's hard for normal people
to make money off of it.

78
00:04:45,940 --> 00:04:48,760
You would have to be a part of one
of these big corporations to do so.

79
00:04:49,030 --> 00:04:53,830
And that's not the future that
we want. Right? Uh, so that's,

80
00:04:53,860 --> 00:04:55,920
that's a problem.
The other problem is that,

81
00:04:55,921 --> 00:04:59,710
that this is just too much concentrated
power, right? Knowledge is power, right?

82
00:04:59,711 --> 00:05:04,390
And knowledge is data, information is
power. Information is data. And it's,

83
00:05:04,391 --> 00:05:09,391
it's just too much of an overhead God
view of what everybody is doing for any of

84
00:05:10,451 --> 00:05:12,280
these companies to have Uber.
For example,

85
00:05:12,460 --> 00:05:15,880
I had a friend who will remain
nameless who worked at Uber,

86
00:05:15,881 --> 00:05:17,230
who showed me God mode.

87
00:05:17,530 --> 00:05:22,060
And if you don't know God mode is what
they are able to view all Uber rides that

88
00:05:22,061 --> 00:05:26,290
are happening obviously at the same time.
So they can, they can basically predict,

89
00:05:26,470 --> 00:05:30,040
you know, who's having a one
night stand or who is, you know,

90
00:05:30,550 --> 00:05:33,580
anything really personal details
they can glean from this.

91
00:05:33,910 --> 00:05:35,950
And that's just one of many,
many,

92
00:05:35,951 --> 00:05:40,120
many examples and that that is
just too much power for any,

93
00:05:40,121 --> 00:05:41,440
any one entity to have.

94
00:05:41,620 --> 00:05:44,950
And that's just not good because it
doesn't matter what our intentions were.

95
00:05:45,140 --> 00:05:49,840
This is a problem and we have no say
in how our data is used, right? Once,

96
00:05:49,900 --> 00:05:54,900
once we exchange our data control of
our data for access to a free service.

97
00:05:55,180 --> 00:05:57,620
And what this means is they
can do anything with our data.

98
00:05:57,620 --> 00:06:00,830
They can sell it to advertisers,
they can use it to manipulate us,

99
00:06:00,950 --> 00:06:03,170
they can learn our personal details,

100
00:06:03,380 --> 00:06:06,500
they can sell it to the u s
government or any governments really.

101
00:06:06,710 --> 00:06:09,560
And we just have no say in
how this goes in the end.

102
00:06:09,590 --> 00:06:12,830
The last point is that we should
be paid for our data. We need to,

103
00:06:13,040 --> 00:06:16,370
we are generating this valuable resource,
this natural resource,

104
00:06:16,580 --> 00:06:17,630
and we should be paid for it.

105
00:06:18,710 --> 00:06:23,420
So a great book on this is called
who owns the future by Jerome Linear.

106
00:06:23,421 --> 00:06:27,470
The dude looks really wild. He's got
these long dreadlocks and he, you know,

107
00:06:27,471 --> 00:06:30,200
big Dude in Berkeley and he plays all
these instruments. He's a really cool guy,

108
00:06:30,320 --> 00:06:33,620
but I mean, no one can talk about this
in the way that your own linear can.

109
00:06:33,740 --> 00:06:35,800
He's one of the pioneers of the Internet.

110
00:06:35,820 --> 00:06:39,560
He now works at Microsoft
research as a virtual reality, uh,

111
00:06:39,620 --> 00:06:43,640
researcher and a, yeah, so that's
a great book. And also, I mean,

112
00:06:44,090 --> 00:06:48,050
I wrote the book on
decentralized applications.

113
00:06:48,200 --> 00:06:52,160
I don't really talk about it that much
because the code is deprecated at this

114
00:06:52,161 --> 00:06:56,690
point. But, um, yeah, if you want to see a
great book on decentralized applications,

115
00:06:57,020 --> 00:07:01,010
then check out my book. It's an O'Reilly
book as well, but the code is deprecated,

116
00:07:01,011 --> 00:07:04,160
but the idea is remain. I just don't
have time to keep maintain that code.

117
00:07:04,161 --> 00:07:07,430
I'm making videos like a madman.
Anyway, back to this. So let's,

118
00:07:07,431 --> 00:07:11,270
let's talk about this decentralized
versus centralized versus distributed.

119
00:07:11,360 --> 00:07:12,590
What is the difference?

120
00:07:12,710 --> 00:07:16,940
So a centralized application is what
we're used to Google, Facebook, Amazon.

121
00:07:17,330 --> 00:07:21,710
What happens with the
centralized application is we
create a server and then we

122
00:07:21,711 --> 00:07:24,350
have a bunch of clients
connect to that server.

123
00:07:24,410 --> 00:07:27,050
So everybody connects to these,

124
00:07:27,051 --> 00:07:31,490
this central point of authority
that defines the rules
of how the network works.

125
00:07:31,700 --> 00:07:35,810
An example is Facebook, right? We,
whenever we go to facebook.com we're,

126
00:07:35,811 --> 00:07:40,490
our browsers are acting as clients that
in our browsers are requesting data from

127
00:07:40,491 --> 00:07:42,530
Facebook and posting data to Facebook.

128
00:07:42,680 --> 00:07:46,400
It's a central server and
that's how pretty much all
of the web works right now.

129
00:07:46,700 --> 00:07:49,820
It's easy. It was just easy to
do. That's why we did it. And,

130
00:07:49,821 --> 00:07:53,240
but it's difficult to scale and it
has a single point of failure, right?

131
00:07:53,241 --> 00:07:56,690
If someone takes down that data center,
all of our data is lost.

132
00:07:57,650 --> 00:08:00,830
So that's centralized.
Let me talk about distributed next,

133
00:08:00,831 --> 00:08:03,110
which is this right here,
this image right here.

134
00:08:03,440 --> 00:08:08,270
So a distributed system is one worse
computation is spread out across the

135
00:08:08,271 --> 00:08:09,920
network. So, um,

136
00:08:11,420 --> 00:08:14,870
actually all of the services
that we use are distributed.

137
00:08:14,930 --> 00:08:17,030
So a service can be both centralized.

138
00:08:17,031 --> 00:08:20,810
That means there is a central point
of authority and distributed as in the

139
00:08:20,811 --> 00:08:24,650
computation is spread across multiple
nodes. Because if you think about it,

140
00:08:24,950 --> 00:08:27,320
Facebook doesn't just
have one giant server.

141
00:08:27,440 --> 00:08:31,400
They have several data centers that are
scattered across the web and data is

142
00:08:31,401 --> 00:08:35,700
routed through the servers
depending on where you are. And uh,

143
00:08:35,870 --> 00:08:39,410
so the services are both
centralized and they're distributed.

144
00:08:40,280 --> 00:08:44,240
And so this having a distributed
architecture speeds of computing,

145
00:08:44,241 --> 00:08:47,370
and it's just data latency, it
increases bandwidth. There's a,

146
00:08:47,371 --> 00:08:49,910
there's a bunch of pros to having
a distributed architecture.

147
00:08:50,030 --> 00:08:52,760
It's a little harder,
but the pros are worth it.

148
00:08:52,761 --> 00:08:54,980
And that's why these big
companies do that. Now,

149
00:08:54,990 --> 00:08:58,740
the last one I'm going to talk
about are decentralized systems,

150
00:08:58,741 --> 00:09:00,780
like the middle picture right here.

151
00:09:00,990 --> 00:09:05,700
So for a decentralized system
in a decentralized system, uh,

152
00:09:06,090 --> 00:09:09,870
you can take away one of those nodes
and the network will still run.

153
00:09:10,080 --> 00:09:13,740
That means that no note is
telling any other node what to do.

154
00:09:13,950 --> 00:09:15,930
There is no central point of authority.

155
00:09:16,170 --> 00:09:20,720
All nodes are equal and the network
in terms of their authority. Uh,

156
00:09:20,730 --> 00:09:23,090
so bitcoin is a,
is an example of an,

157
00:09:23,160 --> 00:09:28,160
of a system of a network that is both
distributed because it's a timestamp to

158
00:09:28,321 --> 00:09:33,120
public ledger. It's a, it's a database
where everybody owns a copy of the data,

159
00:09:33,390 --> 00:09:35,550
right?
They resides on multiple computers.

160
00:09:35,551 --> 00:09:40,380
So it's distributed and it's decentralized
because if one node goes down,

161
00:09:40,500 --> 00:09:44,610
the network is still able to operate,
right? You could take down, you know,

162
00:09:45,000 --> 00:09:48,920
20 bitcoin miners, but bitcoin would
still run. It's a, it's, it's a,

163
00:09:48,990 --> 00:09:53,820
it's a more resilient way of building
software. It's faster software.

164
00:09:53,910 --> 00:09:56,130
The demand and failures
are better handled.

165
00:09:56,340 --> 00:10:01,340
So examples of decentralized software are
all of these crypto currencies that we

166
00:10:01,651 --> 00:10:04,320
look at. Bitcoin, ethereum lite coin,

167
00:10:04,560 --> 00:10:06,690
these are all decentralized systems.

168
00:10:06,930 --> 00:10:09,560
And when it comes to
decentralized applications, um,

169
00:10:09,750 --> 00:10:14,340
there's really only one that satisfies
my criteria, at least right now.

170
00:10:14,400 --> 00:10:17,340
And that's called Steemit.
And I'll talk about that in a second.

171
00:10:17,700 --> 00:10:18,930
But a steam at is one,

172
00:10:19,050 --> 00:10:21,930
what does a profitable
decentralized application look like?

173
00:10:22,050 --> 00:10:26,970
So if we look at the web 2.0 stack, okay,
let's look at the the web 2.0 stack.

174
00:10:27,030 --> 00:10:30,960
So anytime you want to build software
and any kind of web APP or mobile app,

175
00:10:31,230 --> 00:10:33,320
you are using these tools right there.

176
00:10:33,350 --> 00:10:38,350
There are certain parts of a website or
an APP that you need to use tools for,

177
00:10:38,401 --> 00:10:42,840
right? So four payments, you're going
to use credit cards and paypal, stripe,

178
00:10:42,841 --> 00:10:45,660
some kind of API for
monetization. You know, you'll,

179
00:10:45,720 --> 00:10:47,910
you'll develop some
strategy like selling ads,

180
00:10:48,080 --> 00:10:52,920
pay wall and your content selling some
good, uh, some goods, external data.

181
00:10:52,950 --> 00:10:56,790
You use a third party Api from
some service, right? Like, um,

182
00:10:57,360 --> 00:11:00,690
clarify or any of these
APIs for file storage,

183
00:11:00,691 --> 00:11:04,560
you use Amazon s three or Google
cloud or you know, what have you.

184
00:11:04,770 --> 00:11:09,300
And lastly for computation, you use
Amazon [inaudible] or Heroku or you know,

185
00:11:09,301 --> 00:11:13,650
there's a lot of services
out there because web 2.0
has been around for so long,

186
00:11:13,950 --> 00:11:18,950
but now we are moving into web 3.0 and
that means that because of the invention

187
00:11:19,741 --> 00:11:24,540
of a certain set of technologies in
order a bit torrent which maximize

188
00:11:24,541 --> 00:11:26,060
bandwidth,
bitcoin,

189
00:11:26,100 --> 00:11:30,570
which allowed for decentralized consensus
amongst a set of nodes in a system for

190
00:11:30,571 --> 00:11:33,570
the first time, uh, several
of these technologies,

191
00:11:34,500 --> 00:11:37,170
we are now able to make
decentralized apps.

192
00:11:37,290 --> 00:11:41,970
So the web is kind of like a pendulum
and it started off as centralized and it

193
00:11:41,971 --> 00:11:43,560
start off as decentralized.

194
00:11:43,680 --> 00:11:47,760
It moved to centralized and now
it's moving back to decentralized.

195
00:11:48,030 --> 00:11:52,540
And that is the mission of the many of
many developers right now it's to breed,

196
00:11:52,541 --> 00:11:56,830
decentralize the web. And so there are
tools out there that will let us do that.

197
00:11:57,040 --> 00:12:00,160
A theory on Bitcoin, all these
cryptocurrencies are for payments.

198
00:12:00,460 --> 00:12:02,180
That token model for monetization.

199
00:12:02,200 --> 00:12:05,230
Now this is a really interesting bit
and I'll talk about the token model in a

200
00:12:05,231 --> 00:12:07,630
second.
Oracle's for external data.

201
00:12:07,750 --> 00:12:12,250
Oracle's our third party data sources
that you don't have to trust a human for,

202
00:12:12,251 --> 00:12:17,140
like you have to trust, um, stripe or
any of these APIs to provide valid data.

203
00:12:17,320 --> 00:12:22,320
But an oracle is essentially a smart
contract that has some data that you can

204
00:12:23,291 --> 00:12:26,740
trust,
but it's run by machines for file storage.

205
00:12:26,741 --> 00:12:29,650
You would use a network like
the interplanetary file system,

206
00:12:29,651 --> 00:12:33,400
which I'll talk about, which is
essentially a big distributed hash table.

207
00:12:33,700 --> 00:12:38,590
And lastly, for a computation you would
use etherium for example, which is a,

208
00:12:38,600 --> 00:12:41,560
which is a decentralized virtual machine.

209
00:12:41,740 --> 00:12:45,370
It's kind of like a decentralized
Heroku that you could push code to,

210
00:12:45,610 --> 00:12:49,780
but it doesn't leave on one central
server. It's, it's, it's decentralized.

211
00:12:50,230 --> 00:12:54,340
And so I put rep, you know,
ready for these bottom tube
and these are in progress.

212
00:12:54,341 --> 00:12:57,340
But really like if you think about
it, you can use all of these. It's,

213
00:12:57,350 --> 00:13:02,300
it's just not going to be at
the, um, these tools aren't
as evolved as, you know,

214
00:13:02,380 --> 00:13:06,670
the web 2.0 tools, but you can use
all of them for sure. So what does,

215
00:13:06,730 --> 00:13:07,541
what does it look like?
Well,

216
00:13:07,541 --> 00:13:11,410
there are four features that make up a
profitable decentralized application.

217
00:13:11,680 --> 00:13:15,100
The first feature is that
it's open source. So you might
be asking, wait a second,

218
00:13:15,370 --> 00:13:19,180
if I open source my code,
couldn't someone just steal it then?

219
00:13:19,420 --> 00:13:22,330
And now if you're using a
traditional business model, yes.

220
00:13:22,540 --> 00:13:24,550
If a competitor can see your code,

221
00:13:25,240 --> 00:13:27,850
a lot of the times that he's
your competitive advantage,

222
00:13:28,030 --> 00:13:31,960
they could then just use that code and
then fork it and then profit off of your

223
00:13:31,961 --> 00:13:36,850
coat. But in a decentralized application,
if you're using a token business model,

224
00:13:36,851 --> 00:13:41,560
an APP coin model, then they could
not take away from your network,

225
00:13:41,710 --> 00:13:46,480
right? Because it depends on the
community of users. It depends on, um,

226
00:13:48,550 --> 00:13:51,540
it depends on the trust of your
users and that you're, you're,

227
00:13:51,630 --> 00:13:54,130
you're users are profiting
from your model as well.

228
00:13:54,370 --> 00:13:58,750
So people want to join the
network that has the most trust,

229
00:13:58,751 --> 00:14:02,260
that's built the most trust over time.
Trust is a moving concept.

230
00:14:02,380 --> 00:14:03,850
It's not just established once.

231
00:14:04,000 --> 00:14:07,120
You have to continually
prove and reprove that trust.

232
00:14:07,330 --> 00:14:11,950
And so people want to go with the
longest, a chain of trust, so to speak.

233
00:14:13,510 --> 00:14:16,780
The second feature is the use
of cryptocurrency. So this is a,

234
00:14:16,781 --> 00:14:21,700
this is an image of, of uh, some
random, uh, companies, uh, timeline for,

235
00:14:21,780 --> 00:14:25,630
for ICO or initial coin
offering. But basically, um,

236
00:14:25,720 --> 00:14:28,310
the use of cryptocurrency is this.
So you know,

237
00:14:28,540 --> 00:14:32,320
their traditional models for
monetization, right? The transaction fees,

238
00:14:32,530 --> 00:14:36,820
advertising revenues, but the
cryptocurrency way is to do this. Okay?

239
00:14:36,821 --> 00:14:41,620
So you would allocate some scarce resource
in your network using a scarce token,

240
00:14:41,621 --> 00:14:45,880
right? That's scarce resource could
be storage space, it could be images,

241
00:14:45,881 --> 00:14:49,090
it could be videos,
some scarce resources and scarce data.

242
00:14:49,091 --> 00:14:51,890
That's people are contributing
to the network that,

243
00:14:51,950 --> 00:14:54,920
and you monetize that with an app coin,
some kind of token.

244
00:14:55,280 --> 00:14:59,930
And what happens is users need this
app co op coin to access the scarce

245
00:14:59,931 --> 00:15:04,790
resource. And because of
that, you're creating a supply
and a demand, right? You're,

246
00:15:04,791 --> 00:15:09,530
you're drinking, posing this artificial
scarcity. And what that does is owners,

247
00:15:09,531 --> 00:15:11,930
all the scarce resource
get paid in APP coins.

248
00:15:12,050 --> 00:15:15,380
So they get paid for their tweets and
their images and the whatever data that

249
00:15:15,381 --> 00:15:20,300
they contribute. And what this does is
it makes the value of the APP coin arise,

250
00:15:20,690 --> 00:15:23,870
right? So this app coin is
kind of like a hybrid asset.

251
00:15:24,050 --> 00:15:28,010
It's both a stock but
it's also a currency.

252
00:15:28,880 --> 00:15:31,190
And so it's both. It's not
right. So you can make,

253
00:15:31,280 --> 00:15:36,280
you can own it and you can just keep it
as investment or you can use it and you

254
00:15:37,150 --> 00:15:41,030
or you could just use, do both, keep
it, keep a part of it as an investment.

255
00:15:41,180 --> 00:15:44,360
And the other part has, has use
of that, of that, of that APP.

256
00:15:44,630 --> 00:15:48,380
So that's one way in bitcoin does as well.
File coin does as well,

257
00:15:48,381 --> 00:15:49,850
like in the fall coin network,

258
00:15:50,030 --> 00:15:55,030
miners of the scarce resorts storage space
get paid in file coin and then people

259
00:15:55,221 --> 00:15:59,780
who want to store their data on the file
coin network pay have to pay file coin

260
00:15:59,781 --> 00:16:00,614
to access it.

261
00:16:00,680 --> 00:16:04,790
And so there is this market that's been
created and this can apply to any kind

262
00:16:04,791 --> 00:16:08,540
of decentralized application and a
scarce resource could be anything, right?

263
00:16:08,541 --> 00:16:13,280
So steam, it is a great example of
a decentralized application, right?

264
00:16:13,550 --> 00:16:15,710
Because, uh, there is

265
00:16:20,150 --> 00:16:23,900
because there is a digital point system
and people are getting paid for their

266
00:16:23,930 --> 00:16:26,900
scarce resource, which, which are
their posts. As you can see here,

267
00:16:26,950 --> 00:16:31,700
they're the most valuable posts
are the most paid posts and uh,

268
00:16:31,760 --> 00:16:34,970
it's open source.
It uses cryptocurrency under the hood,

269
00:16:34,971 --> 00:16:39,200
but it's got a dollar rapper here,
but anyone can pay and cryptocurrency.

270
00:16:39,201 --> 00:16:43,160
So Steven is a great example of a,
of a working decentralized application.

271
00:16:44,690 --> 00:16:47,570
The third feature is
decentralized consensus.

272
00:16:47,720 --> 00:16:52,720
So what I mean by that is the ability for
a network to all agree upon everything

273
00:16:54,111 --> 00:16:58,100
that's happening in the APP.
And only until very recently,
this was not possible.

274
00:16:58,340 --> 00:17:02,840
Bitcoin proved that we could reach
decentralized consensus using the proof of

275
00:17:02,841 --> 00:17:03,770
work algorithm.

276
00:17:04,100 --> 00:17:09,100
51% of the nodes in the bitcoin network
have to approve a transaction before

277
00:17:09,921 --> 00:17:13,470
it's made valid and added to the
chain of blocks, the block chain.

278
00:17:13,880 --> 00:17:15,110
And not just an,

279
00:17:15,170 --> 00:17:19,130
as they vote on the
validity of a transaction,

280
00:17:19,310 --> 00:17:22,610
they also have to offer a proof
of their computational work.

281
00:17:22,820 --> 00:17:25,190
And so what this means
is they have to have,

282
00:17:25,280 --> 00:17:29,450
you have to have more computing power
than 51% of the bitcoin network in order

283
00:17:29,451 --> 00:17:30,860
to fake a transaction.

284
00:17:31,370 --> 00:17:35,030
And that's where the 500
fastest supercomputers phrase
I talked about comes from.

285
00:17:35,360 --> 00:17:36,230
And so that's,

286
00:17:36,380 --> 00:17:40,430
that was one very popular way of
reaching decentralized consensus.

287
00:17:41,360 --> 00:17:44,720
And so another thing is the
blockchain alone isn't enough.

288
00:17:44,750 --> 00:17:48,290
It's not just like you just
take an application, sprinkle
some blockchain on it,

289
00:17:48,410 --> 00:17:50,490
and you're good. No, blockchain is a,

290
00:17:50,491 --> 00:17:53,190
is a big part of it is a data
structure that you would use,

291
00:17:53,340 --> 00:17:56,490
but it's only a part of the stack.
So for big files,

292
00:17:56,580 --> 00:18:00,480
you're not going to store big files
on a blockchain, right? For big files,

293
00:18:00,510 --> 00:18:03,150
you're going to store that on some
kind of distributed hash table.

294
00:18:03,390 --> 00:18:07,680
And one that I really like is called IPFS,
which I'll talk about for feature for,

295
00:18:07,980 --> 00:18:12,300
but right, so you use a distributed hash
table to store the data and then you,

296
00:18:12,320 --> 00:18:15,480
you'd use a blockchain
for APP level constructs.

297
00:18:15,600 --> 00:18:17,730
These are timestamped constructs,

298
00:18:17,731 --> 00:18:20,340
like usernames and status
updates and high scores.

299
00:18:20,670 --> 00:18:24,060
Anything that you need the
network to agree on, agree upon.

300
00:18:24,330 --> 00:18:28,760
And so the reason you use a DHT and a
blockchain is because the blockchain

301
00:18:28,800 --> 00:18:31,530
solves the major security
issue of the HTS,

302
00:18:31,710 --> 00:18:35,640
which is not forcing nodes to trust
each other on the validity of the data.

303
00:18:35,850 --> 00:18:40,320
So the DHT is more of like a dumb data
store that no one controls and the block

304
00:18:40,321 --> 00:18:44,430
chain helps to DHT reach
consensus on the data,

305
00:18:44,610 --> 00:18:49,530
which lets you create
applications on top of it. Lastly,

306
00:18:49,830 --> 00:18:51,990
there's the idea of smart contracts,

307
00:18:52,110 --> 00:18:56,460
which are crypto economically
secured bits of code, right?

308
00:18:56,460 --> 00:19:00,420
So in a normal piece of code. Now here's
an example. In a normal piece of code,

309
00:19:00,510 --> 00:19:04,650
you would upload it to some
central computation engine
like Heroku and then you

310
00:19:04,651 --> 00:19:09,180
would trust Heroku to compile
that code and keep that code,

311
00:19:09,480 --> 00:19:12,660
uh,
an unmodified just like you pushed.

312
00:19:13,050 --> 00:19:16,650
But in a smart contract, you don't
have to trust any central source.

313
00:19:16,740 --> 00:19:21,060
You push it directly to a blockchain.
Ideally the ethereum blockchain,

314
00:19:21,061 --> 00:19:23,400
because they have a touring
complete block chain,

315
00:19:23,640 --> 00:19:27,270
which allows for loops and all sorts
of application level constructs.

316
00:19:28,230 --> 00:19:32,460
But you would push some code
to the ethereum blockchain
and then it would run on

317
00:19:32,461 --> 00:19:34,080
that blockchain.
And so everybody,

318
00:19:34,170 --> 00:19:38,910
every miner has a piece of that code
and it's Crypto, economically secured.

319
00:19:38,970 --> 00:19:39,541
So it's that.

320
00:19:39,541 --> 00:19:44,541
What that means is it is a pre agreed
upon snippet of code that wants deployed

321
00:19:44,551 --> 00:19:48,870
is unchangeable. It is immutable.
Okay, so that's a smart contract.

322
00:19:48,871 --> 00:19:52,920
And lastly, for a profitable
decentralized application,

323
00:19:53,070 --> 00:19:55,110
there is no central point of failure.

324
00:19:55,320 --> 00:19:59,390
That means that you just could not take
this application down if you want it to.

325
00:19:59,750 --> 00:20:04,380
So, right. So all of these big countries
that try to block access like China to

326
00:20:04,440 --> 00:20:07,590
applications like Facebook,
they could not do that for,

327
00:20:07,650 --> 00:20:10,560
for a decentralized
application. Why? Well,

328
00:20:10,561 --> 00:20:14,790
one way is again,
to use IPFS as your data store.

329
00:20:15,000 --> 00:20:19,520
So IPFS and I, I won the creator
of, this was my roommate when,

330
00:20:19,521 --> 00:20:24,270
when he was writing the paper,
and there's a lot, there's a lot.

331
00:20:24,300 --> 00:20:27,900
I could do an entire video series on IPFS.
There's a lot here,

332
00:20:27,901 --> 00:20:32,430
but basically it is a replay.
It is meant to be a replacement for http,

333
00:20:32,580 --> 00:20:37,020
which isn't the normal way in which we
access websites on the Internet right now.

334
00:20:37,050 --> 00:20:41,670
So for IPFS there are certain technologies
and you can see them here that that

335
00:20:41,700 --> 00:20:42,930
makeup it's stack.

336
00:20:42,960 --> 00:20:47,960
But the idea for IPFS is that
instead of Ip addressing our web,

337
00:20:48,970 --> 00:20:51,010
instead of Ip addressing our content,

338
00:20:51,011 --> 00:20:56,011
meaning we location address where some
data is let's content address it and

339
00:20:56,681 --> 00:21:01,240
access it that way. So instead of going
to a website by using its Ip address,

340
00:21:01,450 --> 00:21:06,400
we would use its content address, kind
of like get right, like get has those,

341
00:21:06,490 --> 00:21:08,410
these hashes that represent data.

342
00:21:08,590 --> 00:21:12,040
So IPFS is essentially
like a giant get tree,

343
00:21:12,041 --> 00:21:15,190
a miracle Dag as,
as they call it in IPFS.

344
00:21:16,270 --> 00:21:19,720
We're all data is linked together and
there's resiliency happening in the

345
00:21:19,721 --> 00:21:20,554
network as well.

346
00:21:20,710 --> 00:21:25,030
Bits and shards of data or
replicated across multiple nodes.

347
00:21:25,180 --> 00:21:29,530
So you couldn't just take down some
content address because there are multiple

348
00:21:29,531 --> 00:21:33,680
copies of it. They're constantly being
replicated inside of the network. Uh,

349
00:21:33,700 --> 00:21:37,990
so you could take down a website
by just ddosing it, right?

350
00:21:38,080 --> 00:21:42,220
But you could not DDoSs and IPFS
node because the data is replicated.

351
00:21:42,220 --> 00:21:45,010
It's not location addressed,
it's content addressed.

352
00:21:45,100 --> 00:21:47,920
And there's a lot of reasons for
creating IPFS that I could go into.

353
00:21:47,921 --> 00:21:52,600
But basically it helps us create a
permanent web where links never die.

354
00:21:52,720 --> 00:21:57,520
So it's more resilient web
then http. Okay. So, and it's,

355
00:21:57,760 --> 00:22:00,880
it's decentralized. So in, in general,

356
00:22:01,030 --> 00:22:06,010
these technologies are all away for us
to build more autonomous software that is

357
00:22:06,011 --> 00:22:10,480
software that is independent
of its creators. It's, it's,
it's almost like where,

358
00:22:10,540 --> 00:22:10,691
you know,

359
00:22:10,691 --> 00:22:14,980
with AI and with blockchain and all of
these very interesting new technologies,

360
00:22:16,000 --> 00:22:19,150
we are creating ways of removing
the human from the loop.

361
00:22:19,270 --> 00:22:22,840
Because with humans there is always
some kind of trust involved, right?

362
00:22:22,841 --> 00:22:24,700
Whether it's a taxi and you know,

363
00:22:24,701 --> 00:22:28,900
having to trust the taxi driver to give
you a fair price or using some kind of

364
00:22:28,901 --> 00:22:29,650
meter,
right?

365
00:22:29,650 --> 00:22:34,150
So you offload that trust onto the
machine and so you don't have to trust a

366
00:22:34,151 --> 00:22:37,900
human and it just makes the whole process,
the whole system better.

367
00:22:38,080 --> 00:22:40,720
So with artificial intelligence
and with blockchain,

368
00:22:40,870 --> 00:22:44,440
it's our way of making
more autonomous software.

369
00:22:44,500 --> 00:22:48,760
It's almost like entities that live and
exist independently on the Internet.

370
00:22:49,180 --> 00:22:51,910
And this was very exciting.
So I have this image right here.

371
00:22:51,911 --> 00:22:55,000
So just we'll get the one on the box on
the left. Let me just talk about that.

372
00:22:55,240 --> 00:22:56,260
So the,
the,

373
00:22:56,290 --> 00:23:00,580
the old way of creating organizations
companies was that humans at the edges and

374
00:23:00,581 --> 00:23:04,240
humans at the center, just humans. And
those are boring old organizations.

375
00:23:04,480 --> 00:23:08,470
The next step is to have automation
at the edges and humans at the center.

376
00:23:08,560 --> 00:23:12,250
So the assembly line is a great example.
Robots are doing all the grunt work,

377
00:23:12,280 --> 00:23:16,150
but humans are overhead watching it
now where we're heading towards our

378
00:23:16,210 --> 00:23:20,920
distributed autonomous
organizations, which is what
adapt is another word for it.

379
00:23:21,760 --> 00:23:25,780
And that means automation is at the
center, the trust is in the blockchain.

380
00:23:25,810 --> 00:23:27,040
It's in these distributed,

381
00:23:27,190 --> 00:23:30,250
decentralized technologies
and humans are at the edges.

382
00:23:30,251 --> 00:23:33,790
So the community kind of
supports this autonomous network.

383
00:23:34,000 --> 00:23:37,660
So like a decentralized Uber, the drivers
would be at the edges of the network,

384
00:23:37,780 --> 00:23:42,280
but they would have more of a say in
how the network operates than in a model

385
00:23:42,281 --> 00:23:46,790
like Uber, which is centralized.
And lastly, you would have
automation at the edge.

386
00:23:46,791 --> 00:23:51,440
It's an automation at the center and
that is just the holy grail, right?

387
00:23:51,470 --> 00:23:55,790
Just pure Ai. So in the end, these
technologies are all really related.

388
00:23:56,810 --> 00:23:58,910
Lastly, before we, before
I go into the code,

389
00:23:59,390 --> 00:24:04,390
this blockchain and the ICO model
is just a way for us to more closely

390
00:24:05,391 --> 00:24:08,200
approximate the,
uh,

391
00:24:08,300 --> 00:24:12,260
the value generation and
capital generation, right?

392
00:24:12,320 --> 00:24:15,860
That's what we're trying to do because
a lot of times capital generation and

393
00:24:15,861 --> 00:24:18,430
value generation are just not aligned.
What that,

394
00:24:18,431 --> 00:24:21,710
what I mean is people do things that
are not providing a lot of value,

395
00:24:21,711 --> 00:24:26,270
but they get paid a lot of money like
football players or Kim Kardashians or

396
00:24:26,271 --> 00:24:26,480
right.

397
00:24:26,480 --> 00:24:30,200
All these people who are making millions
of dollars but not really providing

398
00:24:30,201 --> 00:24:31,730
real value to society.

399
00:24:31,880 --> 00:24:35,930
Whereas the social impact causes that
are fighting climate change and trying to

400
00:24:35,931 --> 00:24:39,710
solve cancer, they have to raise
money. They're considered nonprofits.

401
00:24:39,770 --> 00:24:41,180
But with the blockchain model,

402
00:24:41,870 --> 00:24:45,140
we can more closely
approximates this so we can,

403
00:24:45,170 --> 00:24:49,640
we can give these people more money. They
can earn as much money as they deserve.

404
00:24:49,820 --> 00:24:54,820
And so it's a really exciting time if
you want to monetize more social impact

405
00:24:54,981 --> 00:24:58,430
causes like volunteering
or scientific research,

406
00:24:58,490 --> 00:25:02,150
like the people who were working on
a theory, them are extremely wealthy.

407
00:25:02,151 --> 00:25:04,520
And some of the original
scientists that worked on it,

408
00:25:04,730 --> 00:25:09,380
independent scientists who
were doing research that was
worthy of turning awards,

409
00:25:09,500 --> 00:25:13,190
they were, they were, they were
incentivized with the ether coin,

410
00:25:13,191 --> 00:25:15,050
which is skyrocketed in value,
right?

411
00:25:16,160 --> 00:25:18,660
So it's a way to more closely,
you know,

412
00:25:18,740 --> 00:25:22,340
give value or capital to the people at
generating real value for the world.

413
00:25:22,670 --> 00:25:23,660
Let's get into our voting APP.

414
00:25:23,661 --> 00:25:26,720
So this is the first step is for
us to set up our environment.

415
00:25:26,900 --> 00:25:28,580
So what we're gonna do
is we're going through,

416
00:25:28,581 --> 00:25:32,140
just use etherium and I know
I talked about IPFS. That's,

417
00:25:32,170 --> 00:25:34,760
that's where maybe a later
tutorial right now, just a very,

418
00:25:34,761 --> 00:25:35,990
very simple application.

419
00:25:36,230 --> 00:25:40,160
We don't really need a distributed hash
table for this because it's so simple.

420
00:25:40,161 --> 00:25:43,970
It's essentially just a smart contract
that we deployed to a blockchain.

421
00:25:44,210 --> 00:25:48,800
And then we have a thin client that
can access that smart contract on the

422
00:25:48,801 --> 00:25:51,800
blockchain,
which is just html and Java script.

423
00:25:52,070 --> 00:25:54,770
So this is what it looks like,
right?

424
00:25:54,771 --> 00:25:58,880
So we have the etherium blockchain,
which is a blockchain like bitcoin,

425
00:25:59,030 --> 00:26:02,270
except it's a Turing complete.
So that means we can,

426
00:26:02,540 --> 00:26:06,560
there is a scripting language associated
with this that we can deploy to not

427
00:26:06,561 --> 00:26:08,360
just transactions but code.

428
00:26:08,360 --> 00:26:12,860
We can have code run on the blockchain
and then we can access that code just

429
00:26:12,861 --> 00:26:16,490
like we would have server. And so this
is called the etherium virtual machine.

430
00:26:16,820 --> 00:26:21,320
And then we would have, we have some thin
client, which is called web three js,

431
00:26:21,590 --> 00:26:23,690
which we're going to access this from.

432
00:26:23,930 --> 00:26:27,620
And we can do all of this from a
web browser. So that's, that's,

433
00:26:27,621 --> 00:26:30,710
that's what it's gonna look like. So
let's go ahead and set up our environment.

434
00:26:30,800 --> 00:26:34,840
Okay. So the first step
is for us to download, um,

435
00:26:35,870 --> 00:26:38,450
the theory, I'm test RPC. Well this is a,

436
00:26:38,451 --> 00:26:43,100
this is an in memory blockchain and
it's great for testing out a blockchain,

437
00:26:43,440 --> 00:26:45,870
having to download the actual blockchain.
Okay.

438
00:26:45,871 --> 00:26:50,310
So we're going to go ahead and install
that by running npm install ethereum js

439
00:26:50,530 --> 00:26:52,880
test RPC and web three in row.

440
00:26:52,980 --> 00:26:57,600
Now remember web three is our thin client
that lets us access the blockchain,

441
00:26:57,870 --> 00:27:02,100
but basically test RPC is gonna let us
create 10 test accounts that we can play

442
00:27:02,101 --> 00:27:04,710
with automatically.
And these accounts are going to be,

443
00:27:04,770 --> 00:27:08,820
are going to come preloaded with a
hundred ethers. These are fake ethers.

444
00:27:08,821 --> 00:27:13,260
It's you also call them gas in etherium
like this is how the network runs,

445
00:27:13,261 --> 00:27:18,261
like you make transactions
and these transactions or
how you deploy contracts to

446
00:27:18,930 --> 00:27:22,350
the blockchain, right? And so because
it's happening on a test network,

447
00:27:22,380 --> 00:27:24,450
we don't have to pay anything
at all, right? It's all free.

448
00:27:24,720 --> 00:27:29,320
But this is on the test network. So it's
going to take a, it's going to, you know,

449
00:27:29,340 --> 00:27:32,790
download all this stuff and when it's
done we're going to go to step two,

450
00:27:32,940 --> 00:27:37,260
which is creating a voting smart contract.
Okay, now it's done. All right, so,

451
00:27:37,290 --> 00:27:38,280
so that was our first step.

452
00:27:38,281 --> 00:27:41,070
And so now we're going to create
our voting smart contract.

453
00:27:41,190 --> 00:27:42,780
We're going to use [inaudible] language,

454
00:27:42,781 --> 00:27:45,810
which is called solidity for
programmings are smart contract.

455
00:27:46,050 --> 00:27:49,920
We're going to deploy that contract to
the ethereum blockchain and it's going to

456
00:27:49,921 --> 00:27:51,150
consist of two functions.

457
00:27:51,330 --> 00:27:55,560
One is going to return the total votes
a candidate has received and the other

458
00:27:55,620 --> 00:27:57,920
two increment the vote
count of four candidate.

459
00:27:58,230 --> 00:28:00,810
And these deployed
contracts are immutable.

460
00:28:00,930 --> 00:28:02,850
If we have any changes we want to make,

461
00:28:02,940 --> 00:28:06,990
we would just deploy a new contract unlike
in irregular web app where you could

462
00:28:06,991 --> 00:28:09,780
just modify the existing code. You
can't do that. These are, these are,

463
00:28:09,781 --> 00:28:11,850
these are immutable pieces of code.

464
00:28:11,940 --> 00:28:16,620
So we would just upload a new contract if
we wanted to make any changes, uh, and,

465
00:28:16,760 --> 00:28:20,070
and we can link them back to each other.
I'll get if we want it to.

466
00:28:20,400 --> 00:28:24,450
But to do this, we're going to
first install the solidity compiler,

467
00:28:24,720 --> 00:28:28,110
which is also an Mpm,
a node package.

468
00:28:28,140 --> 00:28:31,770
So we can run NPM install Sol,
see the solidity compiler.

469
00:28:33,510 --> 00:28:36,930
And when we're done with that, we'll
go ahead and code this thing, right?

470
00:28:36,960 --> 00:28:38,790
So let's write some solidity here,
shall we?

471
00:28:39,150 --> 00:28:42,250
So we're going to start off by
saying, uh, we're going to specify,

472
00:28:44,260 --> 00:28:48,790
we're going to start up by specifying
the version of the compiler that we want

473
00:28:48,791 --> 00:28:52,840
to use.
Whole 0.41.

474
00:28:53,200 --> 00:28:54,970
Now we're going to create our contracts.

475
00:28:54,971 --> 00:28:56,920
So we could think of
this as kind of like a,

476
00:28:57,310 --> 00:29:01,930
a class in whatever your favorite
object oriented language is. Okay?

477
00:29:01,931 --> 00:29:05,410
So,
so this is our voting contract.

478
00:29:05,650 --> 00:29:08,420
Our first bit is to create a mapping fuel,

479
00:29:08,421 --> 00:29:13,060
which is the equivalent of creating
an associative array or hash.

480
00:29:13,390 --> 00:29:17,030
And what this is going to do
is we're going to say, uh,

481
00:29:17,140 --> 00:29:20,850
we're going to say you can't Tate.

482
00:29:21,880 --> 00:29:25,120
And this is a public, this is the
number of votes we've received.

483
00:29:25,330 --> 00:29:29,020
It's a key of the map in the key of the
mapping is the candidate name is Stuart

484
00:29:29,021 --> 00:29:30,310
has the type bytes,

485
00:29:30,311 --> 00:29:34,690
32 in the value is an unsigned
integer to store the vote count.

486
00:29:35,080 --> 00:29:37,310
Okay? So that is our, uh,

487
00:29:37,360 --> 00:29:40,690
number of votes received that
we're going to store here now.

488
00:29:42,100 --> 00:29:42,730
So literally,

489
00:29:42,730 --> 00:29:47,350
so solidity doesn't let us pass in an
array of strings in the constructor yet.

490
00:29:47,440 --> 00:29:51,880
So we're going to use an
array of bytes, 32 bytes, 32,

491
00:29:53,760 --> 00:29:54,593
okay.

492
00:29:54,740 --> 00:29:59,330
Uh, to store the list of
candidates, right? And we
want to have three candidates.

493
00:29:59,331 --> 00:30:00,650
So I'm going to say candidate list.

494
00:30:02,570 --> 00:30:06,440
Then we're going to create our
constructure, our con, our constructor,

495
00:30:06,650 --> 00:30:11,240
which is going to be called once
when we deploy the contract, right?

496
00:30:11,241 --> 00:30:15,680
So this is our voting constructor, right?
For our class it's going to be uptight,

497
00:30:15,710 --> 00:30:19,910
block 32, and the parameter is
going to be the candidate names.

498
00:30:20,270 --> 00:30:25,270
And inside of the constructor we can set
our variable candidate list candidate

499
00:30:25,341 --> 00:30:29,690
list to the parameter candidate names,
which is how we initialize it.

500
00:30:30,140 --> 00:30:33,650
Okay? So then when we deploy the contract,
when a pass an array of candidates,

501
00:30:33,810 --> 00:30:38,780
we will be contesting in the, in the
election. And so once we have that,

502
00:30:38,990 --> 00:30:40,090
we can return,

503
00:30:40,091 --> 00:30:45,091
it will create a function that's going
to return the total votes for the

504
00:30:45,351 --> 00:30:50,000
candidate that candidate has
received so far. And the, again,

505
00:30:50,001 --> 00:30:55,001
the parameter is going to be the candidate
and then it's going to return the

506
00:30:55,581 --> 00:30:57,690
total votes as a,
uh,

507
00:30:57,890 --> 00:31:02,390
integer k as an integer.
And so yes,

508
00:31:02,391 --> 00:31:05,030
we can go ahead and return it.
Votes received candidates.

509
00:31:22,020 --> 00:31:24,930
Now we're going to, we're
going to create, wait, so,

510
00:31:24,931 --> 00:31:26,460
so now we have two more functions.

511
00:31:26,640 --> 00:31:31,350
So the next function is going
to be to vote for the candidate,

512
00:31:31,680 --> 00:31:35,460
right? So this is the function
that increments the vote
count for the specified

513
00:31:35,461 --> 00:31:39,360
candidate. And it's equivalent to casting
about, so for voting for a candidate,

514
00:31:39,900 --> 00:31:41,580
so voting for candidate,

515
00:31:43,170 --> 00:31:46,860
that's going to be bytes
32 for a given candidate,

516
00:31:46,980 --> 00:31:49,910
we want to say if it's a valid candidate.

517
00:31:49,911 --> 00:31:54,150
So if the candidate is valid and
we'll write that, that function last.

518
00:31:54,570 --> 00:31:56,880
So if this candidate is valid,

519
00:32:04,310 --> 00:32:08,930
votes received four
candidate plus equals one.

520
00:32:15,140 --> 00:32:17,180
So if, if, if it is a valid candidate,

521
00:32:17,210 --> 00:32:21,710
then and only then do we
increment the vote count. If
not, then we, then we don't.

522
00:32:21,920 --> 00:32:26,120
So this last function is going to help
us decide if a candidate is valid or not.

523
00:32:26,390 --> 00:32:27,980
So we'll say bytes 32

524
00:32:29,570 --> 00:32:33,920
candidate returns.
Bull.

525
00:32:34,310 --> 00:32:38,210
Okay. So we're going to say, okay,
we're going to create a loop.

526
00:32:38,211 --> 00:32:42,620
And now here is the completeness coming
out, right? Cause because we can do loops.

527
00:32:42,800 --> 00:32:46,970
We couldn't do loops in a Bitcoin
scripting language as Toshi did this for

528
00:32:46,971 --> 00:32:48,390
security reasons. But, um,

529
00:32:48,860 --> 00:32:53,570
overall we need this if we're going
to be able to build robust, capable,

530
00:32:53,830 --> 00:32:55,730
uh,
applications on top of it.

531
00:32:55,970 --> 00:33:00,920
So we're going to say go through the
list of candidates and if the given

532
00:33:00,921 --> 00:33:02,930
candidate is inside of
the list of candidates,

533
00:33:03,200 --> 00:33:05,630
then and only then do
we know that it is a,

534
00:33:05,631 --> 00:33:10,631
in fact a valid candidate because we pass
in a candidate name from our thin web

535
00:33:11,241 --> 00:33:16,100
client. Okay. So that's it for our, uh,
code. Let me return false at the end.

536
00:33:16,940 --> 00:33:21,900
Return. False. Okay. That's it for,

537
00:33:22,030 --> 00:33:24,780
that's it for our solidity code.
And then for our client,

538
00:33:24,960 --> 00:33:27,510
our client is going to be simple html,
right?

539
00:33:27,511 --> 00:33:31,350
So we have some table that's going to
show this, the three candidates, Roma,

540
00:33:31,410 --> 00:33:35,340
nick and Jose. And then
we have um, uh, this,

541
00:33:35,480 --> 00:33:39,540
this on click code. That's going to
say once you type in a name like Rama,

542
00:33:39,541 --> 00:33:43,020
and then you hit boat, it's going to
execute this function, vote for candidate.

543
00:33:43,380 --> 00:33:45,840
And then it's going to update that.
So in the javascript section,

544
00:33:45,841 --> 00:33:48,030
we can see what this code looks like.

545
00:33:48,920 --> 00:33:49,590
Okay.

546
00:33:49,590 --> 00:33:52,690
Right here. But what happens is, uh,

547
00:33:52,960 --> 00:33:55,300
we say we create a new web three object.

548
00:33:55,630 --> 00:34:00,040
We then retrieve that that contract
that we've deployed to the blockchain.

549
00:34:00,430 --> 00:34:03,130
And then we vote for the candidate or we,

550
00:34:03,940 --> 00:34:08,410
we retrieve the content that we deployed
to the blockchain. And then we use that.

551
00:34:08,470 --> 00:34:11,440
We then we then update the,

552
00:34:11,650 --> 00:34:14,380
we then send the vote from the string,

553
00:34:14,381 --> 00:34:17,740
the string vote that we did in the web
app to the blockchain to update the

554
00:34:17,741 --> 00:34:18,370
candidate.

555
00:34:18,370 --> 00:34:22,870
And then we can retrieve it from the
blockchain and then display it in the html

556
00:34:22,900 --> 00:34:26,200
web app. So, uh,

557
00:34:26,230 --> 00:34:30,670
so then we can say, okay, so
after riding our smart contract,

558
00:34:30,820 --> 00:34:35,230
we're going to use web three js to
deploy our APP and interact with it.

559
00:34:35,231 --> 00:34:37,600
So our first step,
Lee makes us bigger,

560
00:34:40,450 --> 00:34:44,260
is to open up the node console. And then
we're going to say, okay, so web three,

561
00:34:44,290 --> 00:34:48,550
we're going to initialize our web three
object require web three. Oh Shit.

562
00:34:50,130 --> 00:34:50,963
Okay,
hold on.

563
00:34:51,060 --> 00:34:56,060
Web three equals require web three.

564
00:34:58,800 --> 00:35:02,930
Okay. And so that, okay,

565
00:35:02,931 --> 00:35:07,880
so we did that. And so now we're going
to say web three equals new web three

566
00:35:09,560 --> 00:35:11,120
and we'll create a,
an instance,

567
00:35:11,121 --> 00:35:16,121
a local host instance for this to let
us access the ethereum blockchain,

568
00:35:17,061 --> 00:35:20,000
the test chain from http.

569
00:35:20,001 --> 00:35:25,001
So it's kind of like an interface
between http and the etherium test.

570
00:35:26,781 --> 00:35:29,960
HARPC chain clothes.
Okay,

571
00:35:29,990 --> 00:35:34,070
we did that and now we can
ensure that web three a. Dot.

572
00:35:34,071 --> 00:35:38,550
JS initialized by querying the accounts on
the blockchain. All right, we've, we've,

573
00:35:38,551 --> 00:35:40,650
we've queried those accounts.
And lastly,

574
00:35:40,651 --> 00:35:44,370
we're going to compile this
contract by reading it.

575
00:35:49,080 --> 00:35:49,913
Hold on.

576
00:35:53,890 --> 00:35:57,070
We're going to compile this
contract by reading it directly.

577
00:35:57,100 --> 00:36:01,480
So I called it voting, got solidity,
converting it into a string.

578
00:36:05,980 --> 00:36:06,813
Got It.

579
00:36:06,970 --> 00:36:11,970
Then we'll say require
the solidity compiler

580
00:36:14,650 --> 00:36:19,650
and then finally we can then compile
the contract and deploy it by saying

581
00:36:21,341 --> 00:36:26,110
compile code equals solidity
dot compile code. Okay.

582
00:36:26,140 --> 00:36:31,090
And so once I've done that, then I can
interact with the contract via that, uh,

583
00:36:31,091 --> 00:36:33,910
no job via that node. Dot. Js Console,

584
00:36:33,940 --> 00:36:38,470
or we could just interact with it
directly from our, um, html interface,

585
00:36:38,471 --> 00:36:39,490
which I already have here.

586
00:36:39,580 --> 00:36:42,730
So let's go ahead and interact
with it from our html interface.

587
00:36:43,090 --> 00:36:46,960
So let's see.
I'll just say,

588
00:36:47,830 --> 00:36:50,020
um, you know, Rama, again,

589
00:36:50,080 --> 00:36:54,820
to see if it up increments and
it increments. Okay. So that is,

590
00:36:54,940 --> 00:36:58,960
that is my simple voting app demo. All
the code for this is in the description.

591
00:36:59,080 --> 00:37:03,610
Check it out on get hub. If you have any
comments, uh, please feel free to comment.

592
00:37:03,611 --> 00:37:08,080
I love Saint Comments, uh,
for, for my videos. And, uh,
I hope you found this useful.

593
00:37:08,410 --> 00:37:10,540
Hey, I hope you really liked
this video and if you did,

594
00:37:10,541 --> 00:37:13,870
please hit that subscribe button for now.
I've got to go read,

595
00:37:13,871 --> 00:37:16,420
decentralize the web.
So thanks for watching.

