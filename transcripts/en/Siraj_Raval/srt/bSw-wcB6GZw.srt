1
00:00:00,870 --> 00:00:03,180
This quantum computer is too powerful.

2
00:00:05,250 --> 00:00:09,570
Let's see how it works.
Hello world it Saroj in.

3
00:00:09,571 --> 00:00:14,460
Anyone who has a laptop and an Internet
connection can now use a quantum

4
00:00:14,461 --> 00:00:19,461
computer to submit and run applications
receiving solutions in seconds.

5
00:00:19,850 --> 00:00:24,850
The waves leap service is the first
cloudbase quantum application environment

6
00:00:25,650 --> 00:00:30,120
that gives developers real time
access to alive quantum computer.

7
00:00:30,450 --> 00:00:31,320
In this video,

8
00:00:31,321 --> 00:00:36,321
we'll use the leap service to build a
simple application to monitor a crop

9
00:00:36,601 --> 00:00:37,980
health sensor network.

10
00:00:38,310 --> 00:00:43,310
Quantum computing is already being
applied to early real world applications.

11
00:00:44,070 --> 00:00:45,600
Volkswagen,
for example,

12
00:00:45,601 --> 00:00:50,601
first used data from 418 taxis and
Beijing to see how well a quantum computer

13
00:00:51,480 --> 00:00:54,570
could optimize the travel
time of taxis in the city.

14
00:00:54,960 --> 00:00:56,610
Based on that success,

15
00:00:56,640 --> 00:01:01,320
VW has stated that they are working
on putting their algorithm to use

16
00:01:01,321 --> 00:01:04,290
commercially for traffic management.
In Lisbon.

17
00:01:04,740 --> 00:01:09,740
Recruit communications applied it to
optimize the efficiency of matching

18
00:01:10,020 --> 00:01:15,020
advertisements to customers for web
advertising and recently announced they

19
00:01:15,691 --> 00:01:20,691
could increase sales using a quantum
algorithm from cryptography to medicine to

20
00:01:21,691 --> 00:01:22,890
financial markets.

21
00:01:23,040 --> 00:01:28,040
Quantum computing can be applied to
almost every industry to solve real

22
00:01:28,621 --> 00:01:29,454
problems.

23
00:01:29,670 --> 00:01:34,670
Quantum mechanics is the
body of scientific laws
that describe the motion and

24
00:01:34,831 --> 00:01:37,620
interaction of photons,
electrons,

25
00:01:37,740 --> 00:01:40,950
and other subatomic particles
that make up our universe.

26
00:01:41,220 --> 00:01:45,840
Quantum computers exploit the rules of
quantum mechanics to solve problems,

27
00:01:46,110 --> 00:01:50,790
and these rules are hard for
us to conceptualize because
there are so different

28
00:01:50,791 --> 00:01:55,650
than what we're used to.
Let's say we flipped the coin,
we know what will happen.

29
00:01:55,800 --> 00:01:59,760
It'll go up and then down
and land on heads or tails.

30
00:01:59,940 --> 00:02:03,960
These are all single truths, but if
we shrunk down to the subatomic level,

31
00:02:03,961 --> 00:02:07,740
and again flip the coin,
there would be multiple truths.

32
00:02:07,950 --> 00:02:12,060
The coin would be in both heads and
tails simultaneously in the air.

33
00:02:12,330 --> 00:02:17,190
It could be 60% heads and 40%
tails, for example, simultaneously,

34
00:02:17,520 --> 00:02:21,540
and he would stay in midair until it's
observed by some measuring device,

35
00:02:21,720 --> 00:02:26,550
be it a human or a machine. Pretty
Wild, right? To quote Dr Feinman,

36
00:02:26,580 --> 00:02:29,040
if you think you understand
quantum mechanics,

37
00:02:29,070 --> 00:02:31,530
you don't understand quantum mechanics.

38
00:02:31,680 --> 00:02:36,330
Quantum computing exploits
three key features of quantum
mechanics for computing.

39
00:02:36,550 --> 00:02:37,470
Superposition,

40
00:02:37,560 --> 00:02:42,450
entanglement and quantum tunneling
particles can exist across all possible

41
00:02:42,451 --> 00:02:44,160
states simultaneously.

42
00:02:44,430 --> 00:02:48,120
And this is known as a superposition
of states and electron, for example,

43
00:02:48,121 --> 00:02:53,121
may exist in two possible spin states
usually referred to as spin up and spin

44
00:02:53,341 --> 00:02:54,930
down simultaneously.

45
00:02:55,440 --> 00:03:00,040
And sometimes groups of particles interact
in ways such that the quantum state

46
00:03:00,070 --> 00:03:04,900
of each particle cannot be described
independently of the state of the others,

47
00:03:05,140 --> 00:03:09,400
even when the particles are
separated by a large distance.

48
00:03:09,640 --> 00:03:14,320
This is called entanglement and quantum
tunneling helps quantum computers

49
00:03:14,440 --> 00:03:19,440
explore the space of all
possible solutions to a
problem which can be thought of

50
00:03:19,781 --> 00:03:24,160
as low line points in a mountainous
terrain by drilling through all the

51
00:03:24,161 --> 00:03:27,880
mountains simultaneously rather
than having to go over them.

52
00:03:28,120 --> 00:03:33,120
D-Wave invited me to Vancouver to see
their quantum computer in person and it

53
00:03:33,131 --> 00:03:34,930
was an incredible experience.

54
00:03:35,140 --> 00:03:40,140
I saw that while a classical computer
uses bits that perform computation there,

55
00:03:40,481 --> 00:03:42,370
quantum machine uses cubits.

56
00:03:42,580 --> 00:03:45,610
So in San up taking on the
value of either zero or one,

57
00:03:45,880 --> 00:03:49,390
it can take on both at the same
time in a super imposed state.

58
00:03:49,720 --> 00:03:53,980
And these cubits can be entangled with
each other to compute huge amounts of

59
00:03:53,981 --> 00:03:58,690
data and solve certain complex problems
that would take classical computers

60
00:03:58,870 --> 00:04:00,730
millions of years to calculate.

61
00:04:01,150 --> 00:04:05,890
The way this is done is not by using what
we're used to that classical see moss

62
00:04:05,920 --> 00:04:09,670
or complimentary metal oxide
semiconductor transistor,

63
00:04:09,940 --> 00:04:14,740
but instead what's called
a squid or superconducting
quantum interference device,

64
00:04:15,010 --> 00:04:18,550
Aka quantum transistors.
Instead of using silicon,

65
00:04:18,551 --> 00:04:23,551
it uses a metal called neodymium that
when cooled below negative 264 degrees

66
00:04:24,521 --> 00:04:29,521
Celsius becomes a super conductor and
starts to exhibit quantum mechanical

67
00:04:29,951 --> 00:04:30,784
effects.

68
00:04:30,850 --> 00:04:35,200
While irregular transistor only lets
us encode to different states using

69
00:04:35,201 --> 00:04:36,034
voltages,

70
00:04:36,310 --> 00:04:41,310
accubid can encode to states as tiny
magnetic fields that can point up or down

71
00:04:41,951 --> 00:04:46,480
simultaneously couplers connect cubits
together as such that they can exchange

72
00:04:46,481 --> 00:04:51,220
information easily. As amazing as
quantum machines are, let's be clear,

73
00:04:51,370 --> 00:04:55,240
they are not a replacement for
classical computers. Instead,

74
00:04:55,360 --> 00:04:59,350
they're complimentary for a
subset of classical problems.

75
00:04:59,470 --> 00:05:02,830
Quantum computing will
make a dramatic difference.

76
00:05:03,100 --> 00:05:07,840
We can in fact think of the quantum
computation process as engineering the

77
00:05:07,841 --> 00:05:12,310
pattern of a complex set of waves in
hope of channeling the flow towards the

78
00:05:12,311 --> 00:05:13,240
correct answer.

79
00:05:13,480 --> 00:05:17,830
So let's take a look at the leap service
firsthand to see what it offers us.

80
00:05:18,130 --> 00:05:21,040
We can sign up for an
account on the landing page.

81
00:05:21,190 --> 00:05:26,190
Then we'll be able to access the dashboard
here we can see how much time we have

82
00:05:26,320 --> 00:05:29,530
to use the quantum
processing unit or QP you.

83
00:05:29,890 --> 00:05:31,690
It doesn't seem like a lot of time,

84
00:05:31,691 --> 00:05:34,750
but it is because quantum
computers are so fast,

85
00:05:35,140 --> 00:05:38,230
they can perform computations
in just milliseconds.

86
00:05:38,500 --> 00:05:42,640
There are a whole host of learning
materials on this dashboard including

87
00:05:42,880 --> 00:05:45,670
educational videos,
research publications,

88
00:05:45,820 --> 00:05:50,770
and real world case studies that show
how their clients have used their quantum

89
00:05:50,771 --> 00:05:53,440
computer to solve customer problems.

90
00:05:53,770 --> 00:05:58,400
The Community Support Tab also leads to
access to their technical forums that

91
00:05:58,401 --> 00:06:01,490
allow developers to share and
learn about quantum computing.

92
00:06:01,820 --> 00:06:06,770
My favorite part of the dashboard or the
interactive demos that can be viewed in

93
00:06:06,771 --> 00:06:11,771
the browser to learn more about specific
use cases as well as Jupiter notebooks

94
00:06:12,230 --> 00:06:16,010
that demonstrate different
quantum algorithms. In the cloud.

95
00:06:16,340 --> 00:06:21,340
The ocean Sdk is the waves python library
that wraps the API and lets us access

96
00:06:21,981 --> 00:06:24,650
to QP you in a simple three step process.

97
00:06:24,890 --> 00:06:27,710
After installing it using
the popular pip installer,

98
00:06:27,800 --> 00:06:32,630
we just set our API token and we can
verify our connection to the CUPE you with

99
00:06:32,631 --> 00:06:35,810
the D Wave Ping Command.
So for our use case,

100
00:06:35,811 --> 00:06:40,430
imagine we're a software as a service
startup that creates custom sensor

101
00:06:40,431 --> 00:06:45,020
networks for farmers so that they
get crop information in real time,

102
00:06:45,050 --> 00:06:47,210
allowing them to make smarter decisions.

103
00:06:47,630 --> 00:06:52,580
We can build a network of devices that
can sense water quality, air pollution,

104
00:06:52,581 --> 00:06:53,840
crop health,
and more.

105
00:06:54,230 --> 00:06:59,210
Then we'll want to create a
security system that ensures
that this system is not

106
00:06:59,211 --> 00:07:04,010
compromised by a third party and the
data's stolen will want to monitor network

107
00:07:04,011 --> 00:07:07,070
traffic as it moves
between all of our routers.

108
00:07:07,340 --> 00:07:11,330
We could place a traffic monitor on
every single device in our network,

109
00:07:11,510 --> 00:07:15,290
but that would be an expensive
hardware cost. Instead,

110
00:07:15,320 --> 00:07:19,790
what if we placed network traffic
sensors in the minimum amount of spots

111
00:07:19,820 --> 00:07:24,560
necessary such that the sensors are
still able to monitor all traffic in the

112
00:07:24,561 --> 00:07:27,530
network?
We can consider this a graph problem.

113
00:07:27,710 --> 00:07:32,710
Nodes are sensor outposts
full of different equipment
and the edges represent

114
00:07:32,840 --> 00:07:36,200
all the paths that data flows through.
Between these notes,

115
00:07:36,440 --> 00:07:41,360
we're trying to find what's called the
minimum vertex cover of vertex cover is a

116
00:07:41,361 --> 00:07:46,220
set of vertices such that each edge of
the graph is incident with at least one

117
00:07:46,221 --> 00:07:47,630
vertex in the set.

118
00:07:48,020 --> 00:07:52,640
A minimum for techs cover then is
the vertex cover of smallest size.

119
00:07:52,760 --> 00:07:57,140
Let's open our own cloud notebook
using the leap service to solve an

120
00:07:57,141 --> 00:07:58,460
optimization problem.

121
00:07:58,670 --> 00:08:03,670
We can visualize a simple example of
this using the network x Python package.

122
00:08:04,010 --> 00:08:08,630
It's used to study the structure of
complex networks. After importing it,

123
00:08:08,631 --> 00:08:12,020
we can create a five node
star graph in a single line.

124
00:08:12,320 --> 00:08:15,920
The minimum set of vertices that
touch all edges is node zero.

125
00:08:16,130 --> 00:08:18,470
That's the solution to
this simple problem,

126
00:08:18,650 --> 00:08:22,820
but the general problem of finding
as such a set is NP hard. Well first,

127
00:08:22,821 --> 00:08:26,600
solve this problem on a CPU.
Since first a small number of variables,

128
00:08:26,630 --> 00:08:30,320
it's possible to compute classically
in a relatively short time.

129
00:08:30,620 --> 00:08:33,080
Then we'll do it on
the QP you to solve it.

130
00:08:33,081 --> 00:08:37,670
On the CPU will initialize a sampler
using the exact solver module of the

131
00:08:37,671 --> 00:08:39,290
official Die Mod Api.

132
00:08:39,620 --> 00:08:44,030
A solver is a resource that runs a
problem and samplers are processes that

133
00:08:44,031 --> 00:08:47,960
sample from low energy states of
a problems. Objective function,

134
00:08:48,050 --> 00:08:51,620
which is a mathematical expression
of the energy of a system.

135
00:08:52,100 --> 00:08:57,100
The sampler we've initialized returns a
binary models value for every possible

136
00:08:58,231 --> 00:09:00,570
assignment of variable values.

137
00:09:00,870 --> 00:09:05,340
This is a collection of binary valued
variable that are variables that can be

138
00:09:05,341 --> 00:09:09,810
assigned to values like negative one
and one with associated linear and

139
00:09:09,811 --> 00:09:12,530
quadratic biases. Uh, Bq m samplers,

140
00:09:12,531 --> 00:09:16,860
samples from low energy states in one of
the default models defined by d wave in

141
00:09:16,861 --> 00:09:20,820
the API and returns an iterable of
samples in order of increasing energy.

142
00:09:21,240 --> 00:09:23,970
This helps formulate
optimization problems.

143
00:09:24,180 --> 00:09:29,180
Then we can use the wave network's library
to produce a Bq m four our grab and

144
00:09:29,431 --> 00:09:33,840
solve it on our select sampler.
We're not explicitly creating the Bq em,

145
00:09:33,870 --> 00:09:37,740
it's obstructed by the ocean tool.
So given the problem graph,

146
00:09:37,770 --> 00:09:41,310
it returns a solution to a Bq
em that it creates internally.

147
00:09:41,490 --> 00:09:43,800
Now to solve it on a quantum processor,

148
00:09:43,950 --> 00:09:48,240
we can use a d wave sampler and a new
addition. The embedding composite.

149
00:09:48,600 --> 00:09:53,340
This maps unstructured problems to the
graph structure of the selected sampler

150
00:09:53,520 --> 00:09:56,040
via a process called minor embedding.

151
00:09:56,460 --> 00:10:01,460
Our problem star graph must be mapped
to the qps numerically indexed cubits.

152
00:10:02,130 --> 00:10:06,030
We'll see that it creates a new
graph and solves it on the QP you.

153
00:10:06,270 --> 00:10:09,150
We can know that this solution
isn't unique. In fact,

154
00:10:09,151 --> 00:10:11,280
there are multiple valid solutions.

155
00:10:11,460 --> 00:10:16,350
When we give our algorithm a much larger
graph that consists of real world data,

156
00:10:16,530 --> 00:10:21,530
it will perform the same tasks and we
can use the output as a guide as to where

157
00:10:21,841 --> 00:10:25,230
exactly we should place
traffic monitoring equipment.

158
00:10:25,590 --> 00:10:30,590
We now know the least amount of equipment
we need to buy to monitor the entire

159
00:10:30,960 --> 00:10:35,850
network. A lot to take in all at once.
I know, but it's a very exciting field.

160
00:10:36,060 --> 00:10:38,220
There are three things to
remember from this video.

161
00:10:38,550 --> 00:10:43,500
The waves leap is the first cloud based
quantum application environment that

162
00:10:43,501 --> 00:10:47,280
gives developers realtime access
to allied quantum computer.

163
00:10:47,490 --> 00:10:52,490
Quantum computing uses three key features
from quantum mechanics to perform

164
00:10:52,741 --> 00:10:55,730
computations,
including superposition.

165
00:10:55,980 --> 00:10:57,990
Entanglement and tunneling,

166
00:10:58,290 --> 00:11:03,290
and we can solve the minimum bird techs
problem for a graph much faster using a

167
00:11:03,571 --> 00:11:06,720
quantum machine than a classical one.
Also,

168
00:11:06,780 --> 00:11:08,580
coding challenge for the week.

169
00:11:08,850 --> 00:11:12,930
Create a simple application
using leap that solves a problem.

170
00:11:12,960 --> 00:11:17,220
I'll give a shout out next week to the
top two entries and a special prize for

171
00:11:17,221 --> 00:11:21,630
number one. I'm looking for great
documentation and an interesting use case.

172
00:11:21,810 --> 00:11:22,643
Good luck wizards.

173
00:11:22,650 --> 00:11:25,860
Please subscribe for more programming
videos and for now I'll get a stop

174
00:11:25,861 --> 00:11:28,110
interfering.
So thanks for watching.

