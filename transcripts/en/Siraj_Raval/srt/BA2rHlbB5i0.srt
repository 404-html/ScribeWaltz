1
00:00:00,340 --> 00:00:05,080
Hello world. It's Saroj and it's
time to upgrade the entire Internet.

2
00:00:05,440 --> 00:00:10,390
I'm going to explain how the
interplanetary file system or IPFS works.

3
00:00:10,600 --> 00:00:15,600
We'll also use it to build a simple video
streaming web app onwards towards the

4
00:00:15,851 --> 00:00:19,450
permanent wet. The web is the
backbone of our civilization.

5
00:00:19,480 --> 00:00:22,450
So much of our economy,
our mission critical systems,

6
00:00:22,690 --> 00:00:26,410
our most basic communication
channels depend on it to function.

7
00:00:26,740 --> 00:00:31,450
The Orchestra of apps that give us such
amazing capabilities today are only

8
00:00:31,451 --> 00:00:35,740
possible because we built the necessary
infrastructure to support them.

9
00:00:35,920 --> 00:00:39,640
What we call the web is just
a collection of protocols.

10
00:00:39,820 --> 00:00:41,260
These are sets of rules,

11
00:00:41,290 --> 00:00:46,150
ideas on how to best transmit data that
have won over the hearts of developers

12
00:00:46,360 --> 00:00:49,600
and then made standard by browser
adoption and tool dependency.

13
00:00:49,630 --> 00:00:54,490
Anyone can write a protocol
and the existing ones were
written by people aiming

14
00:00:54,491 --> 00:00:59,491
to solve small problems for themselves
and in the process ended up being adopted

15
00:00:59,891 --> 00:01:03,370
by everybody else because
they worked really well.

16
00:01:03,670 --> 00:01:05,440
There's one protocol in particular,

17
00:01:05,441 --> 00:01:10,441
however that is in need of a serious
upgrade http developed by Tim Berners Lee.

18
00:01:21,790 --> 00:01:22,030
We

19
00:01:22,030 --> 00:01:24,580
use http to access most of the web.

20
00:01:24,610 --> 00:01:29,260
It delivers virtually all file types and
is considered a client server protocol.

21
00:01:29,440 --> 00:01:32,500
A client you on your laptop
with the browser for example,

22
00:01:32,630 --> 00:01:34,900
can send the request message to a server,

23
00:01:34,930 --> 00:01:39,270
say amazon.com and the server will then
return a response message like a home

24
00:01:39,271 --> 00:01:41,350
page.
It's worked well enough,

25
00:01:41,380 --> 00:01:44,530
but we're starting to see
some real problems with http.

26
00:01:44,830 --> 00:01:46,900
The first problem is bandwidth.

27
00:01:47,080 --> 00:01:51,610
More and more of the world is coming
online fast and that means more people are

28
00:01:51,611 --> 00:01:53,170
demanding more data.

29
00:01:53,380 --> 00:01:57,550
Websites crash all the time because too
many people are trying to access them at

30
00:01:57,551 --> 00:01:59,980
the same time.
Imagine this scenario.

31
00:02:00,040 --> 00:02:04,270
Let's say I'm sitting in a classroom with
some other students were studying sex

32
00:02:04,271 --> 00:02:08,860
robots. I want to share a useful picture
with them so I upload it to Facebook.

33
00:02:09,070 --> 00:02:12,010
Then give them all the link
so they can fetch the image.

34
00:02:12,220 --> 00:02:15,910
Assuming there are say eight links and
the total bandwidth required from my

35
00:02:15,911 --> 00:02:20,470
upload is eight megabytes.
Then when 30 students request that image,

36
00:02:20,560 --> 00:02:23,680
now that's 240 megabytes
of bandwidth usage.

37
00:02:23,860 --> 00:02:27,550
If I uploaded a video and that
took 200 megs of bandwidth,

38
00:02:27,730 --> 00:02:31,750
when all the other people watch it,
it'll take 48 gigs of bandwidth.

39
00:02:32,050 --> 00:02:36,880
This is a horribly inefficient routing
scheme since they are so physically close

40
00:02:36,881 --> 00:02:41,440
to me and it's getting to the point where
providing this amount of bandwidth is

41
00:02:41,441 --> 00:02:43,720
no longer profitable for companies.

42
00:02:44,080 --> 00:02:47,980
If we look at how much bandwidth has
improved over the past few years,

43
00:02:48,400 --> 00:02:50,110
it's not very significant.

44
00:02:50,230 --> 00:02:54,820
Compare that to how fast our storage
space is decreasing in cost and it's clear

45
00:02:54,821 --> 00:02:58,900
that we are fast saturating these
pipes so the web will start to feel,

46
00:02:59,680 --> 00:03:02,140
which leads to the second problem.
Latency.

47
00:03:02,380 --> 00:03:05,860
Unfortunately we can't get around
the speed of light. It's a constant.

48
00:03:05,950 --> 00:03:07,990
Could we just do an ICO? No. What?

49
00:03:08,200 --> 00:03:12,910
So the only way to make data transfer
faster is to move the data closer to you,

50
00:03:13,060 --> 00:03:16,780
which is why some cloud services
offer storage locations by region.

51
00:03:17,020 --> 00:03:21,280
Still if I need a file and it just so
happens to be on a device one meter away

52
00:03:21,281 --> 00:03:25,600
from me having my device make a request
through the backbone of the web to some

53
00:03:25,601 --> 00:03:30,601
nearby city isn't nearly as fast as just
pulling it from that device directly.

54
00:03:30,910 --> 00:03:34,420
The third problem is resiliency
in terms of connectivity.

55
00:03:34,600 --> 00:03:38,770
If your ISP has an outage and your towns
connection to the global Internet goes

56
00:03:38,771 --> 00:03:40,120
down,
you're out of luck.

57
00:03:40,270 --> 00:03:43,870
There's nothing you can do about
that in terms of data permanence,

58
00:03:44,020 --> 00:03:47,080
if Wikipedia was hacked
and all its data deleted,

59
00:03:47,200 --> 00:03:50,800
we'd lose that knowledge forever.
It'd be akin to book burning Dwin.

60
00:03:50,950 --> 00:03:53,770
Only a few copies of certain
books were available,

61
00:03:54,040 --> 00:03:56,650
but it doesn't even have to
be that drastic an event.

62
00:03:56,920 --> 00:04:01,150
Does this error look familiar to you?
You've likely seen a four oh four before,

63
00:04:01,151 --> 00:04:04,570
which signifies that some content
has been deleted or moved.

64
00:04:04,900 --> 00:04:08,110
Http links get broken all the time.

65
00:04:08,290 --> 00:04:10,630
It's like mini book burning all the time.

66
00:04:10,720 --> 00:04:15,070
If data isn't manually copied by someone,
that data is gone forever.

67
00:04:15,610 --> 00:04:20,170
The last problem is centralization
because data has become so centralized.

68
00:04:20,290 --> 00:04:25,210
Abuse services own most of our data and
we have no say in how that data is used.

69
00:04:25,510 --> 00:04:27,460
This is unimaginable power.

70
00:04:27,461 --> 00:04:32,461
The services can manipulate large swaths
of the populist with a few clicks and

71
00:04:32,891 --> 00:04:37,891
access to them can be easily blocked by
governments and other oppressive forces

72
00:04:38,140 --> 00:04:42,370
like what happened during the Arab spring
or during the pro democracy protests

73
00:04:42,520 --> 00:04:46,930
in Hong Kong in 2014 we have
got to upgrade the internet.

74
00:04:46,990 --> 00:04:48,790
It's too important not to.

75
00:04:49,090 --> 00:04:53,500
IPFS was designed to help fix these
problems and help us move towards the

76
00:04:53,501 --> 00:04:54,730
permanent web,
uh,

77
00:04:54,731 --> 00:04:58,630
web where links never die and
no entity controls your data.

78
00:04:58,810 --> 00:05:01,810
While the http web is Ip addressed,

79
00:05:01,960 --> 00:05:04,780
the IPFS web is content addressed.

80
00:05:04,900 --> 00:05:07,240
When requesting data
from a content address,

81
00:05:07,360 --> 00:05:11,440
you'll receive it faster since it'll
route from whoever owns a copy of that

82
00:05:11,441 --> 00:05:13,600
content address closest to you.

83
00:05:13,900 --> 00:05:16,900
This helps make bandwidth
usage much more efficient.

84
00:05:17,110 --> 00:05:19,630
When you upload a file to Ipfs,

85
00:05:19,780 --> 00:05:22,120
you get back it's immutable Hash.

86
00:05:22,270 --> 00:05:27,040
Each file in the network is identified
by its content. Using this hash.

87
00:05:27,220 --> 00:05:31,480
The Hash is cryptographically
guaranteed to represent only that file.

88
00:05:31,540 --> 00:05:34,390
Anyone can provide storage for IPFS data.

89
00:05:34,600 --> 00:05:39,130
The storage providers are incentivized
with a crypto token and data is

90
00:05:39,131 --> 00:05:43,900
replicated and chunked across all of
them by the network to maintain data

91
00:05:43,901 --> 00:05:44,734
permanence.

92
00:05:44,770 --> 00:05:49,770
To achieve this IPFS combines several
great ideas from computer science in the

93
00:05:51,430 --> 00:05:53,290
past few years.
First to store data,

94
00:05:53,440 --> 00:05:58,440
it uses a distributed hash table similar
to one propose at MIT called cord.

95
00:05:59,360 --> 00:06:04,160
A DHT is a dictionary like interface to
data that is stored on nodes that are

96
00:06:04,161 --> 00:06:06,050
distributed across the network.

97
00:06:06,200 --> 00:06:10,730
The node that gets to store a particular
key is found by hashing that key,

98
00:06:10,880 --> 00:06:15,470
so in effect, the Hash table buckets
are now independent nodes. In a network.

99
00:06:15,530 --> 00:06:19,760
Data is exchanged between these nodes
using a mechanism called bits swamp.

100
00:06:19,790 --> 00:06:22,820
Inspired by the popular
bittorrent torrent protocol,

101
00:06:22,880 --> 00:06:26,270
the de facto way to transfer
large datasets across the web.

102
00:06:26,480 --> 00:06:30,920
A user can discover nearby peers to share
data with. Then when requesting a file,

103
00:06:30,921 --> 00:06:35,690
they can download many small bits of it
for many different peers all at once.

104
00:06:35,870 --> 00:06:38,450
This format compensates
for bottleneck points,

105
00:06:38,451 --> 00:06:43,250
which makes it much faster
than downloading a large
file from a single source to

106
00:06:43,251 --> 00:06:47,420
give structure to the DHT and let users
find the data they need when they need

107
00:06:47,421 --> 00:06:47,780
it.

108
00:06:47,780 --> 00:06:52,780
IPFS uses a data structure called a Merkle
Dag inspired by the gift protocol get

109
00:06:54,021 --> 00:06:59,021
uses a Merkle Dag to enable distributed
version control for source code and IPFS

110
00:06:59,391 --> 00:07:04,040
uses it to give structure to the entire
network. It's simple and flexible.

111
00:07:04,130 --> 00:07:08,660
We can conceptualize it as a series of
nodes connected together in the form of a

112
00:07:08,661 --> 00:07:10,880
directed a cyclic graph.

113
00:07:11,090 --> 00:07:13,760
It can look like a singly
linked list or a tree,

114
00:07:13,880 --> 00:07:16,310
so whenever data is added to the Dht,

115
00:07:16,460 --> 00:07:21,140
the system generates a public private key
pair and the user gets both. All right.

116
00:07:21,170 --> 00:07:22,970
Let's get our hands dirty with IPFS.

117
00:07:23,390 --> 00:07:26,450
We'll first install the
IPFS client on our machines.

118
00:07:26,510 --> 00:07:30,260
There's a tar ball available for Mac and
Linux and an exe for installation for

119
00:07:30,261 --> 00:07:32,120
windows.
Once I downloaded it,

120
00:07:32,150 --> 00:07:37,070
I can untarnished and move the IPFS
binary to somewhere in my executable so I

121
00:07:37,071 --> 00:07:40,760
can just run it directly from
terminal like so it's installed.

122
00:07:40,820 --> 00:07:44,600
We can now initialize IPFS from
terminal and it will create our node,

123
00:07:44,780 --> 00:07:48,530
generate an identity for us and allow
us to read files on the network.

124
00:07:48,680 --> 00:07:49,850
If I read an address,

125
00:07:49,880 --> 00:07:53,630
I can see the text I just
retrieved in terminal to go online.

126
00:07:53,660 --> 00:07:55,550
We'll run the demon in another terminal.

127
00:07:55,700 --> 00:07:59,870
We can now discover our peers in the
network by their peer identities.

128
00:08:00,080 --> 00:08:04,700
We can read files directly from these
peers and there's even a fancy web console

129
00:08:04,701 --> 00:08:08,570
for us to be able to see where
all the peers are in the world.

130
00:08:08,840 --> 00:08:11,780
We can use this Ui to manage our instance.

131
00:08:11,960 --> 00:08:14,780
Let's say we want to upload
a video that we have locally.

132
00:08:15,050 --> 00:08:19,730
We can use the IPFS add command to add
that video to the network and use the

133
00:08:19,731 --> 00:08:23,120
resulting hash we get as his identity.
Then in terminal,

134
00:08:23,121 --> 00:08:27,500
we can view it directly or we can watch
it via a local gateway. In the browser.

135
00:08:27,830 --> 00:08:32,300
Let's say we have a simple static web
app that lets users upload video and view

136
00:08:32,301 --> 00:08:34,700
it.
It's just a simple html webpage.

137
00:08:34,701 --> 00:08:39,701
With some assets we can add the whole
directory containing our web app to IPFS

138
00:08:39,921 --> 00:08:44,360
directly. The very last hash next to
the folder name is the one we want.

139
00:08:44,540 --> 00:08:48,560
It's the highest level hash of
the Merkle Dag we've just created.

140
00:08:48,800 --> 00:08:53,000
We could create a simple DNS text
record and that view our site locally

141
00:08:53,030 --> 00:08:58,030
or@theonlinehdptoipfsgatewayatipfs.io
it's called interplanetary because if and

142
00:09:01,141 --> 00:09:03,900
when we do become an
interplanetary species,

143
00:09:04,050 --> 00:09:07,650
it's much more efficient to use a web
that finds the data you need that's

144
00:09:07,770 --> 00:09:09,990
closest to you,
not light years away.

145
00:09:10,140 --> 00:09:14,850
The three closing points are the http
web is a few decades old now and has

146
00:09:14,851 --> 00:09:17,250
become slow impermanent and centralized.

147
00:09:17,490 --> 00:09:22,050
IPFS is a newer protocol that aims to
create a permanent web or links our

148
00:09:22,051 --> 00:09:27,051
content not IP addressed and it uses a
distributed hash tables to store data,

149
00:09:27,570 --> 00:09:28,111
a Merkle,

150
00:09:28,111 --> 00:09:32,160
Dak to give it structure and a bit
torrent like data exchange mechanism to

151
00:09:32,161 --> 00:09:36,150
maximize bandwidth. Last week, coding
challenge winner is two showers.

152
00:09:36,151 --> 00:09:40,650
Tony Open mind needed to be
able to compute operations
on a tensor of arbitrary

153
00:09:40,651 --> 00:09:45,120
type, so to shard demonstrated how to do
this programmatically. Such an epic PR,

154
00:09:45,150 --> 00:09:47,830
great job, and the runner
up it's row hot, so walked.

155
00:09:48,030 --> 00:09:51,990
Who implemented some much needed and
awesome styling updates to open minds

156
00:09:51,991 --> 00:09:52,824
documentation.

157
00:09:53,040 --> 00:09:58,040
This week's coding challenge is to
create your own simple web app using IPFS

158
00:09:58,200 --> 00:09:58,831
post who get help.

159
00:09:58,831 --> 00:10:02,730
Link in the comments because
I'm announcing the top
two entries next Friday.

160
00:10:02,910 --> 00:10:06,630
I really hope you liked this video and
if you did hit the subscribe button and

161
00:10:06,690 --> 00:10:10,650
all your dreams will come true. For
now, I've got to make a crypto rap,

162
00:10:10,740 --> 00:10:12,090
so thanks for watching.

