1
00:00:00,090 --> 00:00:00,901
Hello world,

2
00:00:00,901 --> 00:00:05,820
it's Saroj and I'm going to show you
how to build an AI startup in Pi torch.

3
00:00:06,090 --> 00:00:09,390
Specifically. I'm going to show
you how to build an AI therapist,

4
00:00:09,391 --> 00:00:13,230
and that's the APP that you're seeing
behind me. It's called mind relax her.

5
00:00:13,231 --> 00:00:16,950
It's an APP that I built and let me
show you a quick demo of how this works.

6
00:00:16,951 --> 00:00:21,360
This is an AI therapist,
so I'll type in my email,

7
00:00:21,361 --> 00:00:25,200
I'll type in my password,
and then I'll log in.

8
00:00:25,950 --> 00:00:29,640
Now I'm a new user, so I'm going to
have to pay. This is a paid service,

9
00:00:29,790 --> 00:00:32,910
so I'm going to use paypal.
I've integrated paypal into this APP.

10
00:00:33,150 --> 00:00:37,650
I've already typed in my card information.
This is a fake card and I'll pay,

11
00:00:37,651 --> 00:00:42,630
it's 35 USD a month to use this
automated service, which is much,

12
00:00:42,690 --> 00:00:46,200
much cheaper than a human therapist.
So let me charge it.

13
00:00:46,890 --> 00:00:51,090
It's processing. And now I
have paid, I've logged in,

14
00:00:51,091 --> 00:00:53,760
I've authenticated the
database is connected to me,

15
00:00:53,761 --> 00:00:55,830
and now I'm going to talk to
my therapist and I'll say,

16
00:00:56,040 --> 00:00:59,340
how are you as Saroj?

17
00:00:59,430 --> 00:01:04,110
And hopefully my therapist will
reply, my AI therapist. Great,

18
00:01:04,200 --> 00:01:07,380
wonderful. Thanks for asking and
we can continue the conversations.

19
00:01:07,410 --> 00:01:08,880
This is an automated assistant.

20
00:01:08,881 --> 00:01:12,450
I'm going to show you how to build this
with the popular deep learning library,

21
00:01:12,600 --> 00:01:17,430
Pi Torch. But it's not just pie torch by
torch is just one part of the pipeline,

22
00:01:17,640 --> 00:01:17,881
right?

23
00:01:17,881 --> 00:01:21,900
There's so many tutorials out there
that show you how to train a model in Pi

24
00:01:21,901 --> 00:01:23,890
torch, how to put, uh,

25
00:01:24,120 --> 00:01:28,530
put some model on a server with tensorflow
serving, how to build an android APP,

26
00:01:28,620 --> 00:01:31,530
how to use all these other tools.
But it's very rare to see,

27
00:01:31,531 --> 00:01:35,370
it's a tutorial that combines all of these
components to show you how to build a

28
00:01:35,371 --> 00:01:38,070
profitable business using this technology.

29
00:01:38,070 --> 00:01:40,980
And that's what I'm here to do and
I'm going to continue to do that.

30
00:01:40,981 --> 00:01:44,160
And if you want to be one of the first
to get notified when I released these,

31
00:01:44,161 --> 00:01:48,030
very valuable to [inaudible] hit
the red subscribe button. All right,

32
00:01:48,120 --> 00:01:49,810
so let me show you how
I'm going to do this. The,

33
00:01:50,070 --> 00:01:53,910
the stack that I'm going to use to build
this app called mind relax her that

34
00:01:53,911 --> 00:01:56,070
I've built with android studio,

35
00:01:56,100 --> 00:02:01,050
which I'll show you how is I use Pi
torch to train a sentiment analyzer.

36
00:02:01,350 --> 00:02:02,430
I used Onyx,

37
00:02:02,431 --> 00:02:06,630
which is a library to convert Pi torch
models into other types of models.

38
00:02:06,631 --> 00:02:07,350
In fact,

39
00:02:07,350 --> 00:02:11,610
you can use onyx to convert any type of
popular deep learning framework model

40
00:02:11,670 --> 00:02:14,400
into another popular deep
learning framework model.

41
00:02:14,460 --> 00:02:17,280
I'll show you what I mean by that
in a second. I'll use tensor flow.

42
00:02:17,281 --> 00:02:21,090
I'll use android, I use dialogue
flow, I'll use Firebase,

43
00:02:21,091 --> 00:02:26,040
I'll use paypal, all of these together
to build this simple android APP. Okay,

44
00:02:26,041 --> 00:02:28,890
so let's get started.
We have a lot to cover in this video.

45
00:02:29,550 --> 00:02:32,670
So let's start off with the
first essential question here.

46
00:02:32,850 --> 00:02:37,050
And the essential question here is
how do I make money with Pi Torch?

47
00:02:37,080 --> 00:02:42,080
So in this example we have built a chat
Bot and a chat Bot can apply to so many

48
00:02:42,901 --> 00:02:47,550
industries. Think about anytime you
need advice, whether it's legal advice,

49
00:02:47,670 --> 00:02:51,710
whether it's a news advice,
trading advice, right?

50
00:02:51,750 --> 00:02:56,400
Investment Advice, marketing advice,
whether you need support for sales,

51
00:02:56,410 --> 00:02:59,100
whatever you need,
advice for people,

52
00:02:59,110 --> 00:03:01,480
train their brains on this data,

53
00:03:01,481 --> 00:03:04,810
and then we ask these people and we
have to charge a premium for that.

54
00:03:04,990 --> 00:03:08,500
But if we take the data,
we can automate that knowledge,

55
00:03:08,501 --> 00:03:12,700
we can automate those responses
to our questions, right?

56
00:03:12,850 --> 00:03:14,020
Pattern recognition.

57
00:03:14,170 --> 00:03:18,070
We can do this with neural networks and
other machine learning technologies.

58
00:03:18,071 --> 00:03:19,480
And let me show you how to do that.

59
00:03:19,720 --> 00:03:24,270
So this is just an example of all the
different use cases we can use chatbots

60
00:03:24,310 --> 00:03:28,690
for. Of course, there are a lot more.
This is just one example. In fact,

61
00:03:28,870 --> 00:03:32,740
there are seven major ways to make money
with machine learning and I'm not going

62
00:03:32,741 --> 00:03:36,370
to repeat all of those that I
listed in this video by the way,

63
00:03:36,371 --> 00:03:39,850
the notebook that I have behind
me is in the video description.

64
00:03:39,851 --> 00:03:42,550
So if you click on it, it'll
go to get hub. You'll type,

65
00:03:42,551 --> 00:03:47,260
you'll click on the dot Ip Nyb the
python notebook. It's gonna open up,

66
00:03:47,261 --> 00:03:49,840
right on get hub. You don't have
to install or download anything.

67
00:03:49,841 --> 00:03:53,320
So you can see all the links. To my
videos that I'm going to list right here.

68
00:03:53,321 --> 00:03:58,060
Very valuable stuff. So there are seven
ways to make money with machine learning.

69
00:03:58,090 --> 00:04:01,210
Watch my video on that.
One of them is to start a startup.

70
00:04:01,210 --> 00:04:04,600
I just made a video on this
watch that I made two. In fact,

71
00:04:04,690 --> 00:04:08,650
the second way is to write a book and
I have a video on how to do technical

72
00:04:08,651 --> 00:04:11,860
writing. I'm really good at this.
This is what I do. I write scripts,

73
00:04:11,861 --> 00:04:16,300
technical scripts about technology to
explain complex AI concepts to people.

74
00:04:16,420 --> 00:04:20,260
I know how to do this and I made a video
showing you how to do that as well.

75
00:04:20,350 --> 00:04:23,920
So whether it's youtube, a
blog, a podcast, a newsletter,

76
00:04:24,070 --> 00:04:28,170
you can also make money teaching
people how to use this stuff, right?

77
00:04:28,390 --> 00:04:29,860
Ad Revenue,
sponsorships.

78
00:04:29,861 --> 00:04:33,790
There's a lot of different
avenues for you to do here.

79
00:04:33,970 --> 00:04:37,450
The fourth is to join a company and I've
got some great programming interview

80
00:04:37,451 --> 00:04:40,690
tutorials for you as well
on how to build your resume,

81
00:04:40,691 --> 00:04:43,780
how to answer questions properly,
how to get an internship.

82
00:04:44,020 --> 00:04:47,710
The fifth way is contract work.
Whether that's freelance work,

83
00:04:47,830 --> 00:04:51,460
whether that's you know, a longer term
contract. I've got videos for that.

84
00:04:51,700 --> 00:04:56,290
The sixth way is a programming
competition like Kaggle of which I've done

85
00:04:56,291 --> 00:04:58,000
several videos on.

86
00:04:58,030 --> 00:05:01,990
You can see one right here
for this hundred thousand
dollar Kaggle challenge and

87
00:05:01,991 --> 00:05:06,991
the seventh way is to create an automated
trading bot that can trade stocks or

88
00:05:07,421 --> 00:05:11,590
assets. What have you, and I have
several videos on that as well.

89
00:05:11,710 --> 00:05:16,600
Now to the question,
what is the use case of Pi Torch?

90
00:05:16,601 --> 00:05:18,520
What makes Pi Torch special?

91
00:05:18,580 --> 00:05:22,810
So Pi Torch for those who don't
know is a deep learning framework.

92
00:05:22,811 --> 00:05:27,370
We use this library to build
neural networks, a type
of machine learning model.

93
00:05:27,550 --> 00:05:32,200
And the reason that Pie torch is getting
more and more popular are in fact three

94
00:05:32,201 --> 00:05:35,620
reasons, not one reason, but three
reasons. So let me list them.

95
00:05:35,740 --> 00:05:39,940
The first is that Pie torch allows
for python native debugging.

96
00:05:39,940 --> 00:05:43,720
What do I mean with tensorflow?
The other popular deep learning framework,

97
00:05:43,930 --> 00:05:47,920
there is a built in tensorflow debugger
that works just with tensorflow.

98
00:05:48,430 --> 00:05:52,840
But if we use a python native
debugger, we can, it's more modular.

99
00:05:52,841 --> 00:05:56,620
So let's say we have some library that's
not related to our machine learning

100
00:05:56,621 --> 00:05:58,850
model. Say a drawing library. Well,

101
00:05:58,851 --> 00:06:02,030
we can combine those components with
the components of our deep learning

102
00:06:02,031 --> 00:06:07,031
framework and we can debug it very fine
grained control as to where variable

103
00:06:07,790 --> 00:06:12,470
data is passing, what the
threads are, where, what, what
is concurrent, what isn't.

104
00:06:12,560 --> 00:06:15,920
We can debug all of that with
the native Python debugger,

105
00:06:16,040 --> 00:06:18,860
which is called key db right here.
As you can see here,

106
00:06:19,130 --> 00:06:23,210
python native debugging right there,
PDB dot set trace.

107
00:06:23,270 --> 00:06:26,450
So this is just an example of how
to do that, but that is not all.

108
00:06:26,451 --> 00:06:29,120
There's actually much more
than Pi Torch does for us.

109
00:06:29,120 --> 00:06:33,740
It also follows what's called an
imperative programming paradigm.

110
00:06:33,860 --> 00:06:35,780
What do I mean by that?
Well,

111
00:06:35,781 --> 00:06:38,660
let's talk about the difference
between imperative and declarative.

112
00:06:38,870 --> 00:06:42,230
Imperative specifies
how to achieve our goal,

113
00:06:42,350 --> 00:06:45,800
whereas declarative specifies
what we want to achieve.

114
00:06:45,980 --> 00:06:50,360
Another way of saying this is
that imperative programming.

115
00:06:50,361 --> 00:06:52,280
Here's an example of
imperative programming.

116
00:06:52,610 --> 00:06:57,560
What's happening here is it is defining
the computations that need to happen and

117
00:06:57,561 --> 00:07:01,820
these computations are happening
as we type them out line by line.

118
00:07:01,821 --> 00:07:02,660
So NP.

119
00:07:02,661 --> 00:07:06,740
Dot One's 10 will compute the matrix
that needs to be computed right then and

120
00:07:06,741 --> 00:07:10,070
there on that line. Whereas in a
different programming paradigm,

121
00:07:10,220 --> 00:07:12,380
whether that's declarative or symbolic,

122
00:07:12,650 --> 00:07:17,120
we have to first define all of our
variables and then in one single line,

123
00:07:17,150 --> 00:07:18,410
in this case compile,

124
00:07:18,680 --> 00:07:23,680
we're going to compute all of those
operations and imperative is closer to the

125
00:07:24,261 --> 00:07:27,320
python, python, Anik style of programming.

126
00:07:27,320 --> 00:07:30,800
So it's more closely related
to what python was meant for.

127
00:07:31,700 --> 00:07:35,750
And a piece of that is the actual
third component of Pi Torch dynamic

128
00:07:35,751 --> 00:07:38,990
computation graphs,
which is a type of imperative programming.

129
00:07:38,991 --> 00:07:43,550
The idea is that Pie torch is
a defined by run framework,

130
00:07:43,570 --> 00:07:46,840
whereas tensorflow is a
defined and run frameworks.

131
00:07:46,841 --> 00:07:51,470
So the idea is that a lot of the newer
neural architectures are dynamic.

132
00:07:51,471 --> 00:07:54,650
They will change over time,
sometimes wild training.

133
00:07:54,740 --> 00:07:58,040
They'll add new layers to themselves,
they'll create new connections,

134
00:07:58,220 --> 00:08:00,530
they'll add skip connections,
you know, things like that.

135
00:08:00,770 --> 00:08:04,370
And the problem is that with tensorflow
used to define all of that at the start

136
00:08:04,790 --> 00:08:08,600
and then run it. Whereas some of the
newer models, they're not static.

137
00:08:08,601 --> 00:08:09,261
They're dynamic,

138
00:08:09,261 --> 00:08:13,010
they're going to change during training
and so Pi Torch is really good for this.

139
00:08:13,011 --> 00:08:17,420
It was build for this, right? Every line
you type out when you're running it,

140
00:08:17,421 --> 00:08:20,630
it's going to compute as
that line is processed.

141
00:08:21,650 --> 00:08:24,290
So in terms of pros and cons,

142
00:08:24,291 --> 00:08:28,190
that default defined by run
mode is perfect for python,

143
00:08:28,340 --> 00:08:32,030
which allows for more information,
parallelism and easier debugging.

144
00:08:32,240 --> 00:08:37,240
The con and the major con here is that
Pie torch doesn't really have a good

145
00:08:37,581 --> 00:08:38,900
production framework.

146
00:08:38,930 --> 00:08:43,520
Of course you can take a pie torch model
and convert it to what's called cafe to

147
00:08:43,521 --> 00:08:48,410
a different library, but the tools there
are just not good. What you should do,

148
00:08:48,440 --> 00:08:51,920
and this is me being objective
about something, having an opinion,

149
00:08:52,160 --> 00:08:56,520
because this is what I would do is you
have to build a model with Pi Torch and

150
00:08:56,521 --> 00:08:59,040
once you have that model,
that fully trained model file,

151
00:08:59,220 --> 00:09:03,660
you convert it to tensorflow and then
you use what's called tensorflow serving

152
00:09:03,840 --> 00:09:06,150
the production grade model,

153
00:09:06,151 --> 00:09:10,710
serving architecture that
Google themselves use for
Google search and g mail and

154
00:09:10,711 --> 00:09:15,060
all of their AI products. That's what
you want to use to serve your users. Why?

155
00:09:15,240 --> 00:09:18,690
Because that thing can scale to
millions and millions of people.

156
00:09:18,810 --> 00:09:21,960
It's battle tested and if Google
can use it for production,

157
00:09:22,200 --> 00:09:25,140
we can use it for production
and tensorflow serving. Really,

158
00:09:25,290 --> 00:09:30,150
it's still the best library for production
grade serving of machine learning

159
00:09:30,151 --> 00:09:33,570
models. And no, they're not paying me
to say this. I genuinely believe this.

160
00:09:33,750 --> 00:09:38,420
So let's continue going here. Right. So
there was a survey that was taken up,

161
00:09:38,421 --> 00:09:42,540
tensorflow and Pi Torch users and
tensorflow is still the most used machine

162
00:09:42,541 --> 00:09:43,980
learning library.
However,

163
00:09:44,340 --> 00:09:49,340
there are a lot of areas that Pi Torch
is improving in primarily in terms of

164
00:09:49,711 --> 00:09:52,380
prototyping.
You can prototype much faster,

165
00:09:52,530 --> 00:09:54,660
you can try out different models faster.

166
00:09:54,840 --> 00:09:59,670
The experimentation cycle for Pi Torch
is generally just better in every way.

167
00:09:59,790 --> 00:10:03,990
So the idea is to build with Pi towards
prototype experiment and when you're

168
00:10:03,991 --> 00:10:07,200
ready, use tensorflow to
serve that model. All right,

169
00:10:07,350 --> 00:10:11,280
so I've got several free pie
torch learning resources for you,

170
00:10:11,760 --> 00:10:16,320
including good hub, the tutorials, you,
Udacity course in x course. I mean,

171
00:10:16,321 --> 00:10:18,630
look at this,
the incredible Pi Torch.

172
00:10:18,780 --> 00:10:23,780
Look at all of these amazing tutorials
from boys to medical recurrent networks.

173
00:10:25,770 --> 00:10:29,100
This, this is a lot. This is a lot.
Let's just click on a random one.

174
00:10:29,370 --> 00:10:33,770
V Gans a Vegan. Look at that. Look
at this beautiful code, right?

175
00:10:33,771 --> 00:10:36,900
Your Skeleton Code. You can easily
get up and running in a second.

176
00:10:36,901 --> 00:10:40,980
That's what I like to see. So definitely
check out these resources. All right,

177
00:10:41,810 --> 00:10:43,350
let's get right into building this now.

178
00:10:43,351 --> 00:10:48,351
So what we're going to do is we're going
to build a sentiment analyzer in Pi

179
00:10:48,480 --> 00:10:49,320
Torch in the cloud.

180
00:10:49,590 --> 00:10:53,880
And what we're going to train this
sentiment analyzer on our movie reviews.

181
00:10:54,030 --> 00:10:58,470
And the reason we want to train it on
movie reviews is because what we want is

182
00:10:58,471 --> 00:11:01,950
for our sentiment analyzer
to live in our android APP.

183
00:11:02,130 --> 00:11:05,440
And every time we say
something to our AI therapist,

184
00:11:05,490 --> 00:11:09,970
allow what you've just seen here. It's
going to analyze the sentiment of what we,

185
00:11:10,050 --> 00:11:12,630
we said is it positive or is it negative?

186
00:11:12,780 --> 00:11:15,390
And once it knows whether
it's positive or negative,

187
00:11:15,540 --> 00:11:17,850
then it's going to perform
whatever action we need.

188
00:11:17,940 --> 00:11:21,810
So this is a local machine learning
model happening on the client.

189
00:11:21,830 --> 00:11:23,370
That means on the android APP,

190
00:11:23,520 --> 00:11:27,630
and we're going to train it in the
cloud using Google colab. Alright,

191
00:11:28,440 --> 00:11:31,560
by the way, let me just say this, and
this was with my tweet from earlier today,

192
00:11:31,740 --> 00:11:34,380
it's getting a lot of likes and
re shares because it's true.

193
00:11:34,590 --> 00:11:37,680
Now is the time to build an AI startup.

194
00:11:37,890 --> 00:11:41,220
Everything that you need is freely
accessible. Whether that's data,

195
00:11:41,430 --> 00:11:44,310
whether that's algorithms,
whether that's education,

196
00:11:44,430 --> 00:11:48,330
whether that's computing power,
Colab, right, everything is available.

197
00:11:48,390 --> 00:11:52,260
You have no excuses. It's time to
start building enough with a theory.

198
00:11:52,500 --> 00:11:53,560
I mean we need theory,

199
00:11:53,590 --> 00:11:57,160
but enough with the theory mostly
let's get to the implementation.

200
00:11:57,340 --> 00:12:01,990
There are real problems to solve on
this planet and we need teams of smart,

201
00:12:01,991 --> 00:12:04,570
motivated people from all over the world.

202
00:12:04,571 --> 00:12:09,220
This is not just one country
or two countries. This is
everywhere on the planet.

203
00:12:09,430 --> 00:12:14,350
We need people building this technology
to solve real problems and create wealth

204
00:12:14,351 --> 00:12:17,920
for themselves, for their community,
for their family, for everybody.

205
00:12:17,950 --> 00:12:20,200
And that's what I'm here to do
is to help you out with this.

206
00:12:20,201 --> 00:12:24,390
So let's get right on into this.
So when it comes to sentiment analysis,

207
00:12:24,391 --> 00:12:25,930
so let's take a look at this notebook.

208
00:12:25,960 --> 00:12:29,570
What we're going to do is we're going
to build a recurrent neural network,

209
00:12:29,571 --> 00:12:34,030
specifically a long short term memory,
recurrent network.

210
00:12:34,150 --> 00:12:36,220
I know that's a mouthful,
but guess what?

211
00:12:36,400 --> 00:12:40,780
I've got perfect videos for you to
learn what I'm talking about here.

212
00:12:40,960 --> 00:12:43,540
I've got an LSTM network video.
Watch it.

213
00:12:43,720 --> 00:12:46,630
I've got a word to that video watch.

214
00:12:46,630 --> 00:12:50,590
It explains how to take
word a textual data strings,

215
00:12:50,591 --> 00:12:53,530
right words and convert them
into what are called vectors.

216
00:12:53,680 --> 00:12:57,670
And vectors are groups of numbers that
we feed it to our machine learning model.

217
00:12:57,671 --> 00:13:00,190
You can't just feed a string
into a neural network.

218
00:13:00,191 --> 00:13:02,770
You've got to take the string,
convert it to a group of numbers,

219
00:13:02,980 --> 00:13:06,790
and then give it to your neural network.
And word two VEC is the way to do that.

220
00:13:06,791 --> 00:13:10,270
Watch that video. And lastly,
learn how we optimize.

221
00:13:10,271 --> 00:13:14,200
The way to optimize a network
is to use gradient descent.

222
00:13:14,230 --> 00:13:17,800
I've got a great video on that, so once
you watch all three of these videos,

223
00:13:18,190 --> 00:13:18,881
I promise you,

224
00:13:18,881 --> 00:13:22,600
you will be able to learn a lot faster
and you'll get what I'm saying in this

225
00:13:22,601 --> 00:13:26,860
video. By the way, watch these
videos at two x or three x speed.

226
00:13:26,861 --> 00:13:30,070
I'm going to pack so much value
into this video. Watch me.

227
00:13:30,190 --> 00:13:32,650
I watch my videos at three x speed.

228
00:13:32,680 --> 00:13:35,110
I know a lot of you don't
believe that that's possible,

229
00:13:35,111 --> 00:13:38,530
but I literally learned for a living.
I learned for a living.

230
00:13:38,531 --> 00:13:43,531
And the way to take all
of this information and to
process it as fast as I have

231
00:13:43,601 --> 00:13:48,070
to inward to educate you is to watch
this content at two x or three x speed.

232
00:13:48,071 --> 00:13:51,430
And it's like, it's like
working out, right? So at
first when you're working out,

233
00:13:51,431 --> 00:13:52,930
it's going to be hard to lift weights,

234
00:13:53,170 --> 00:13:57,130
but over time your muscle will adapt and
you'll get better and better at working

235
00:13:57,610 --> 00:13:58,090
out.

236
00:13:58,090 --> 00:14:03,090
The same thing applies to
listening to data at faster speeds.

237
00:14:03,700 --> 00:14:07,720
You've got to start off at 1.25 and
incrementally every week increased that

238
00:14:07,721 --> 00:14:10,060
amount.
And I promise you this is my work.

239
00:14:10,180 --> 00:14:14,080
I promise you eventually you will be
able to listen to stuff at three x speed

240
00:14:14,320 --> 00:14:18,040
and you will be able to retain it as well.
Which is what I do.

241
00:14:18,190 --> 00:14:22,720
The only data, the only videos, I don't
watch it. Three x speed or audio books.

242
00:14:23,090 --> 00:14:27,010
Um, usually music, I mean just music,
right? Everything else, pretty much.

243
00:14:27,400 --> 00:14:29,710
I listened to at three x speed,
sometimes two x,

244
00:14:29,740 --> 00:14:32,440
like if I'm eating lunch and watching,
if I really want to chill,

245
00:14:32,950 --> 00:14:34,280
I'll put it on two X.

246
00:14:34,560 --> 00:14:38,790
I pretty much never watched things
at one x speed by the way. So uh,

247
00:14:38,860 --> 00:14:43,660
be like me and do this and you will learn
faster back to this. So LSTM networks,

248
00:14:43,661 --> 00:14:48,100
the idea after you've watched that video
is we take some inputs sentence best

249
00:14:48,101 --> 00:14:52,460
movie ever. That's going to be one column,
right? One a phrase, best movie ever.

250
00:14:52,461 --> 00:14:55,790
And then we have the label and the
label is going to be either positive or

251
00:14:55,791 --> 00:15:00,650
negative one or zero. And the idea is
to learn the mapping. I said this a lot,

252
00:15:00,651 --> 00:15:04,010
learned the mapping and LSTM
networks will help us do this.

253
00:15:04,250 --> 00:15:06,440
And the idea is that
with recurrent networks,

254
00:15:06,500 --> 00:15:10,850
we're taking the hidden state from the
last time step and we're inputting it

255
00:15:10,851 --> 00:15:14,000
into the neural net in the next time step.
So at each time step,

256
00:15:14,150 --> 00:15:16,790
not just the input data or next word,

257
00:15:16,820 --> 00:15:19,430
we're also inputting the hidden
state from the last time step.

258
00:15:19,431 --> 00:15:20,360
Both of those go in.

259
00:15:20,600 --> 00:15:23,990
And that's the difference
between a recurrent network
and a feed forward network.

260
00:15:24,110 --> 00:15:25,970
So the data flow is
going to look like this.

261
00:15:26,030 --> 00:15:28,310
We're going to collect the text data,
movie reviews,

262
00:15:28,610 --> 00:15:31,550
we're going to take it and we're going
to encode it into vectors using word two

263
00:15:31,551 --> 00:15:36,350
VEC. We'll take those vectors and we'll
apply it to our LSTM network for sequence

264
00:15:36,351 --> 00:15:38,960
learning text are sequences of words.

265
00:15:39,380 --> 00:15:43,370
We'll take the outputs of that LSTM
network, apply it to a sigmoid function,

266
00:15:43,371 --> 00:15:46,370
and the reason we'll do that,
so we get a binary classification,

267
00:15:46,580 --> 00:15:48,470
yes or no positive or negative,

268
00:15:48,740 --> 00:15:53,120
and then will compute a loss by comparing
it to the actual label using gradient

269
00:15:53,121 --> 00:15:57,140
descent. We'll optimize it just like in
this video. So let's get through this.

270
00:15:57,141 --> 00:16:01,490
By the way, you can literally
run this code in your browser.
All of it works. Okay,

271
00:16:01,700 --> 00:16:05,120
I'm getting better about making sure
all of my code works for you guys.

272
00:16:05,360 --> 00:16:09,740
So let me just do it right here.
The first step for us is to import torch,

273
00:16:09,741 --> 00:16:11,330
which is our Pi Torch Library.

274
00:16:11,630 --> 00:16:16,010
And then we're going to check if Kuda
is available. These are just, you know,

275
00:16:16,040 --> 00:16:17,390
environment variables.

276
00:16:18,010 --> 00:16:18,610
Okay.

277
00:16:18,610 --> 00:16:22,360
And then we're going to download our
data and now it's downloading that,

278
00:16:22,361 --> 00:16:25,480
those movie reviews.
And now that we have those movie reviews,

279
00:16:25,510 --> 00:16:30,080
we can type in the code which will
read the data from the text file.

280
00:16:30,081 --> 00:16:32,740
So read data. Now I'm going
to start typing out some code.

281
00:16:32,741 --> 00:16:35,290
So I'll open up the first movie review,

282
00:16:35,291 --> 00:16:37,930
which is going to be
placed in the data file,

283
00:16:38,350 --> 00:16:41,230
the data's directory as reviews dot txt.

284
00:16:41,440 --> 00:16:43,750
And I'll recursively
searched through all of that.

285
00:16:44,080 --> 00:16:46,000
And at when I'm inside of the file,

286
00:16:46,001 --> 00:16:50,500
I'm going to store everything that I read
from that file using the redx function.

287
00:16:50,800 --> 00:16:55,460
Now I'm going to do the same for not
just the reviews, but also the label.

288
00:16:55,461 --> 00:17:00,461
So both the reviews and the labels are
in their own respective directories and I

289
00:17:01,571 --> 00:17:04,540
could just do the same thing,
right? So it's coordinates,

290
00:17:04,570 --> 00:17:06,100
these files are coordinated.

291
00:17:06,101 --> 00:17:11,101
So every line and one co is sinked
with online in the other text file,

292
00:17:11,381 --> 00:17:15,580
right? Every, every input has its
own label. So I'll just read both.

293
00:17:15,760 --> 00:17:20,720
Hopefully this works great.
And once I've got those,

294
00:17:20,721 --> 00:17:23,670
let me just test it out. Let me
print out review number, I dunno,

295
00:17:23,720 --> 00:17:28,720
2000 and I'll also print out as an empty
line and then I'll print out the labels

296
00:17:30,741 --> 00:17:34,530
for say, I dunno, 20 [inaudible] probably.

297
00:17:37,650 --> 00:17:39,000
And let's see if that works.

298
00:17:42,790 --> 00:17:45,850
There we go. So there's our
review. This is a cartoon comedy.

299
00:17:45,851 --> 00:17:49,740
It's pub by and has an unnatural
feeling. Dadda Dadda. Dadda, right?

300
00:17:49,770 --> 00:17:52,440
It's either positive or negative.
It's taking all of these words.

301
00:17:52,441 --> 00:17:55,620
It's going to take all of these words,
convert them to vectors, numbers,

302
00:17:55,710 --> 00:17:59,130
feed them to a model and classify positive
or negative, and you see it there.

303
00:17:59,610 --> 00:18:02,640
Now our next step is to perform
some data preprocessing.

304
00:18:02,641 --> 00:18:05,880
We've got a preprocessed that data.
Get rid of the punctuation marks.

305
00:18:05,881 --> 00:18:08,280
As you see here,
we've got to get rid of the new lines.

306
00:18:08,281 --> 00:18:11,610
You've got to get rid of the spaces.
We've got to tokenize our words.

307
00:18:11,611 --> 00:18:15,510
So they're all individual tokens
like this, their own strings.

308
00:18:15,840 --> 00:18:20,580
And once we do that, then we can
encode those words using word two vec.

309
00:18:21,630 --> 00:18:23,790
Okay.
Once those words are encoded,

310
00:18:23,791 --> 00:18:28,470
let's print out how many unique
words there are. 74,000 unique words.

311
00:18:28,500 --> 00:18:31,440
That's a lot of unique words.
Once we have those,

312
00:18:31,441 --> 00:18:34,560
we can check if our labels are
either positive or negative.

313
00:18:34,740 --> 00:18:38,130
We also need to make sure to
remove out all the outliers, right?

314
00:18:38,250 --> 00:18:40,740
All the reviews that are
too big or too small.

315
00:18:40,890 --> 00:18:45,090
So we want to see how many reviews are
way too big and how many are too small.

316
00:18:45,091 --> 00:18:49,260
One and two. Five, one, four.
Let's remove those. So we're only,

317
00:18:49,261 --> 00:18:52,740
because the reason we're doing this
is because we want a fixed length.

318
00:18:52,800 --> 00:18:57,800
All of our reviews have to be a fixed
length for our model to be able to process

319
00:18:58,290 --> 00:19:00,450
them. And some of them aren't
going to be a fixed length.

320
00:19:00,451 --> 00:19:05,270
So what we do is we pad them with Zeros
on either edge like this, right? So this,

321
00:19:05,271 --> 00:19:08,970
this is an original example. This is a
padded example and we do that right there.

322
00:19:09,390 --> 00:19:13,200
And once we do that, we can
test our implementation, see
if we padded it properly.

323
00:19:13,260 --> 00:19:17,970
We did. Now it's time to split our data
into training and testing data. Great.

324
00:19:18,090 --> 00:19:18,361
Check.

325
00:19:18,361 --> 00:19:23,160
Our work is create a data loader to then
turn that data into a bunch of tensors

326
00:19:23,190 --> 00:19:26,790
slash. Vectors. Make sure we
done that properly. We did.

327
00:19:27,000 --> 00:19:30,480
And now we can build our sentiment
network and embedding layer,

328
00:19:30,600 --> 00:19:33,300
an LSTM layer and a fully connected layer.

329
00:19:33,570 --> 00:19:37,680
Now let's see if we're training on the
GPU. Good. We're trading on the GPU.

330
00:19:37,681 --> 00:19:40,380
Here's our network right here.
Our sentiment recurrent network.

331
00:19:40,770 --> 00:19:45,420
It's got an embedding layer, LSTM layer,
dropout layer forward propagation,

332
00:19:46,020 --> 00:19:49,020
right? All of this code is going
to be in the video description.

333
00:19:49,320 --> 00:19:53,790
We'll instantiate the network now that
I've created it, printed out perfect.

334
00:19:54,000 --> 00:19:55,980
And time for the training loop.

335
00:19:56,490 --> 00:19:59,820
Here's our last couple of hyper
parameters and start training.

336
00:20:00,090 --> 00:20:03,840
So this is actually going to take maybe
five to 10 minutes for you to train,

337
00:20:04,050 --> 00:20:08,310
which is perfect. Um, we don't have time
for this. We've got a lot to do right now,

338
00:20:08,311 --> 00:20:09,150
but it's training.

339
00:20:09,330 --> 00:20:13,160
But let's just go down here and see what
happened when I trained the model a,

340
00:20:13,170 --> 00:20:18,060
and you can do this in, in your browser.
So you'll give it a test review,

341
00:20:18,061 --> 00:20:21,570
right? So, and you'll say this movie
is the best, you know, good words,

342
00:20:21,571 --> 00:20:25,560
positive words, and then you can run
predict on it. It will predict it.

343
00:20:25,590 --> 00:20:29,310
98% positive.
Now you do the same for a negative.

344
00:20:29,311 --> 00:20:30,540
It's going to do the same for negative,
right?

345
00:20:30,541 --> 00:20:34,260
So let's go back up here to see if
it's training. See there's training,

346
00:20:34,261 --> 00:20:36,090
but it's going to take like 10 minutes.

347
00:20:36,120 --> 00:20:38,490
So we're gonna stop it cause we
don't want to wait. All right,

348
00:20:38,640 --> 00:20:42,150
so once we do that too,
once we've created our train model,

349
00:20:42,420 --> 00:20:47,410
then what we want to do is we want to
take that model and we want to convert it

350
00:20:47,411 --> 00:20:51,760
to a tensorflow file. And I'll just, I'll
let me explain to you why we do that.

351
00:20:52,180 --> 00:20:55,900
But before I explain to you why we do
that, let me show you what onyx is.

352
00:20:56,050 --> 00:21:00,760
So onyx is a framework that was
created in a partnership between AWS,

353
00:21:00,910 --> 00:21:05,710
Microsoft, and Facebook. It stands for
open neural network exchange format.

354
00:21:05,711 --> 00:21:10,711
The idea is we create an ecosystem of
interchangeable AI models so we can use

355
00:21:11,171 --> 00:21:15,130
them between frameworks.
And so onyx is that intermediary layer.

356
00:21:15,280 --> 00:21:19,420
As you can see in this example right here,
it is that intermediary layer.

357
00:21:19,480 --> 00:21:23,650
We take whatever model we have converted
to Onyx and then from onyx we will

358
00:21:23,651 --> 00:21:27,460
create a tensorflow or you know,
whatever version we want, Amex net,

359
00:21:27,790 --> 00:21:30,190
really whatever care us. So, uh,

360
00:21:30,310 --> 00:21:33,400
that's what we want to do and because we
don't want to use, because like I said,

361
00:21:33,401 --> 00:21:36,730
Pie torch isn't good for production.
Tensorflow is,

362
00:21:36,820 --> 00:21:40,180
so that's why we're converting it.
So we'll do that right here. Right?

363
00:21:40,181 --> 00:21:43,930
So the idea is that, you
know, we are Pi Torch,

364
00:21:43,931 --> 00:21:46,510
we convert to onyx and then we
convert to tensorflow, right?

365
00:21:46,511 --> 00:21:48,130
So here's the code for that.

366
00:21:48,280 --> 00:21:52,330
So Pi Torch has onyx built in as a module,
right?

367
00:21:52,390 --> 00:21:56,020
Torch Dot onyx. We'll load the
trained model we have and it was,

368
00:21:56,200 --> 00:22:00,670
it was saved right here as sentiment,
that PTH. Then we export it to onyx.

369
00:22:00,700 --> 00:22:04,630
Let's a dot onyx file.
Once we have the dot onyx file,

370
00:22:04,720 --> 00:22:08,080
we can say onyx, TF.
Dot. Back end prepare.

371
00:22:08,260 --> 00:22:11,680
We'll load the onyx model,
then we'll prepare the model,

372
00:22:11,800 --> 00:22:16,270
and then we'll export it as a p B file.
That is a pro buff file.

373
00:22:16,300 --> 00:22:21,190
It is how models are saved
in the tensorflow framework.
And once we have that,

374
00:22:21,191 --> 00:22:25,210
we will download it to our machine
and we'll use it in our android APP.

375
00:22:25,300 --> 00:22:26,560
That's what,
how that works.

376
00:22:27,700 --> 00:22:32,600
Now I'll get to tensorflow in a second.
You know,

377
00:22:32,630 --> 00:22:35,110
tensorflow lite, tensorflow
serving, et cetera. So,

378
00:22:35,140 --> 00:22:36,820
but first let's talk about android.

379
00:22:37,030 --> 00:22:40,960
So I haven't really talked much about
android and if you'd like me to talk more

380
00:22:40,961 --> 00:22:43,570
about android,
definitely comment in this video.

381
00:22:43,780 --> 00:22:46,930
I think I haven't talked about android
because I thought it was too easy.

382
00:22:47,080 --> 00:22:48,430
Like that's not my place.

383
00:22:48,431 --> 00:22:51,250
Like there are plenty of people
talking about android programming.

384
00:22:51,251 --> 00:22:54,130
Let me talk about the hardest stuff,
which I consider to be AI,

385
00:22:54,131 --> 00:22:58,330
which is also the funniest stuff.
But let's talk about android for a second.

386
00:22:59,530 --> 00:23:01,660
So android is actually a version of Linux.

387
00:23:01,661 --> 00:23:04,330
It is a Linux distro
like Ubuntu or red hat.

388
00:23:04,480 --> 00:23:08,020
It's Google's version and they use it.
It is hardware agnostic.

389
00:23:08,021 --> 00:23:10,990
That means it can run on many,
many different types of hardware.

390
00:23:11,320 --> 00:23:14,950
And so at the kernel level there are a
bunch of bindings that we don't have to

391
00:23:14,951 --> 00:23:16,060
worry about.
In fact,

392
00:23:16,360 --> 00:23:19,630
we don't really have to worry about any
of these levels including the android

393
00:23:19,631 --> 00:23:24,550
runtime. What we care about is the API
level, right? This green area right here,

394
00:23:24,730 --> 00:23:28,510
these are all of those modules that
we're going to pull from the Internet.

395
00:23:28,720 --> 00:23:32,920
Whether that's Firebase
for authentication, whether
that's paypal for payments,

396
00:23:33,040 --> 00:23:34,600
whether that's you know,
pie torch,

397
00:23:34,601 --> 00:23:37,000
whether that's tensorflow
that's in the green level.

398
00:23:37,001 --> 00:23:40,570
And once we put all those together,
we create our applications.

399
00:23:41,620 --> 00:23:45,650
And so the way android programming works
is it follows what's called model view

400
00:23:45,651 --> 00:23:49,520
controller. That is a, that is a
programming paradigm and in which that,

401
00:23:49,521 --> 00:23:52,520
I mean it's been around for
over a decade now I think.

402
00:23:52,521 --> 00:23:57,521
But the basic idea is that you have
a controller and the controller is,

403
00:23:58,220 --> 00:24:02,630
is exactly what it's called. It is
controlling the lifecycle of the APP.

404
00:24:02,660 --> 00:24:03,830
It is in control,

405
00:24:03,950 --> 00:24:07,700
is watching over the creation of models.

406
00:24:07,700 --> 00:24:10,040
And how the model life cycle moves.

407
00:24:10,160 --> 00:24:13,310
So you have a controller that's watching
over everything and then you have

408
00:24:13,311 --> 00:24:17,420
models and you can think of models
as templates from models come views.

409
00:24:17,540 --> 00:24:18,410
So for example,

410
00:24:19,640 --> 00:24:23,870
let's say for a chat app we would have a
controller that would look at different

411
00:24:24,710 --> 00:24:28,520
models and direct how data passes
between these models. Okay.

412
00:24:28,670 --> 00:24:30,140
And what I'm talking about model here,

413
00:24:30,141 --> 00:24:31,880
I'm not talking about
machine learning model,

414
00:24:31,881 --> 00:24:34,790
I'm talking about a model
for say a chat window.

415
00:24:34,970 --> 00:24:38,690
And that chat window could actually be
different depending on which user is

416
00:24:38,691 --> 00:24:41,480
using it.
Some user could create a blue chat window,

417
00:24:41,481 --> 00:24:43,280
they could customize it for themselves,

418
00:24:43,430 --> 00:24:46,550
whereas another user would want a
black chat window, whatever you want.

419
00:24:46,880 --> 00:24:50,570
And so the idea is that we have this
general model of a chat window and then

420
00:24:50,571 --> 00:24:53,630
views are created from
it specific to a user.

421
00:24:53,690 --> 00:24:58,490
So views are instances of a model and
models are controlled by controllers,

422
00:24:58,610 --> 00:25:02,210
model view controller.
And in the context of Android,

423
00:25:02,750 --> 00:25:05,120
the models are entities or classes.

424
00:25:05,121 --> 00:25:09,980
These are Java entities or classes
views our XML. We can code, you know,

425
00:25:09,981 --> 00:25:13,460
drag and drop buttons. We can code
Xml, what are the views look like?

426
00:25:13,461 --> 00:25:18,260
And the controllers are the activities
and that's where most of the logic that

427
00:25:18,261 --> 00:25:21,170
we're going to write is going to go in.
Okay.

428
00:25:21,350 --> 00:25:25,220
So there are four different types of
APP components when it comes to android

429
00:25:25,221 --> 00:25:29,030
development. We have the activity,
the intent receiver, the service,

430
00:25:29,120 --> 00:25:31,670
and the content provider.
And in our case,

431
00:25:31,910 --> 00:25:36,020
what we're really worried about are the
activities in 10 receivers have to do

432
00:25:36,021 --> 00:25:40,550
with notifications. And those are all
[inaudible] far before features, right?

433
00:25:40,551 --> 00:25:43,940
Right now we want a very
simple model user logs in,

434
00:25:44,060 --> 00:25:48,620
pays and can talk to our agent. None of
that custom stuff, no extra features.

435
00:25:48,770 --> 00:25:51,590
We're trying to get down to business
here and we can build off of that later.

436
00:25:51,591 --> 00:25:54,050
Right?
Fastest method to prototype.

437
00:25:54,051 --> 00:25:58,310
That is our mentality now
to android applications,

438
00:25:59,510 --> 00:26:03,500
right? So an activity is the
entry point for a user services,

439
00:26:03,501 --> 00:26:06,680
broadcast receivers and content providers.
There's a lot.

440
00:26:06,681 --> 00:26:10,100
But the best way to teach you about
this is said just start building.

441
00:26:10,310 --> 00:26:13,940
So what is the first application
that we wanted to, um,

442
00:26:13,970 --> 00:26:17,720
what is the first integration that we
want to create for our android APP?

443
00:26:17,721 --> 00:26:21,200
Let's think about that. Well, if we
go to, our dependencies will say,

444
00:26:21,201 --> 00:26:23,900
well Pi Torch Onyx, which
is the easiest, I mean,

445
00:26:24,260 --> 00:26:29,260
which is the one that it would be the
easiest to build off of if it already

446
00:26:30,441 --> 00:26:34,700
existed. That's, that's the question.
And the answer is dialogue flow.

447
00:26:34,940 --> 00:26:39,860
The idea behind dialogue flow is that
this is Google's cloud service that uses a

448
00:26:39,861 --> 00:26:44,760
lot of natural language processing
models to create a chat Bot for us in the

449
00:26:44,761 --> 00:26:48,420
cloud. And there's a whole
paradigm around how to do this.

450
00:26:49,050 --> 00:26:52,110
I've signed up for dialogue flow,
it's free to try, which is great.

451
00:26:52,140 --> 00:26:56,160
And so I've got this dialogue flow
console here that allows me to create an

452
00:26:56,161 --> 00:26:59,910
agent in the cloud and then I
use an API to talk to that agent.

453
00:27:00,060 --> 00:27:03,510
So you'll notice that I've
trained a model right locally,

454
00:27:03,630 --> 00:27:05,520
but I'm also using dialogue flow.

455
00:27:05,700 --> 00:27:10,380
And so the reason I'm doing this is
because it's a good example to see how you

456
00:27:10,381 --> 00:27:14,370
can use, you can train machine learning
yourself and you can do it client side,

457
00:27:14,520 --> 00:27:16,770
but you can also use a cloud service,
right?

458
00:27:16,771 --> 00:27:21,771
You can also wrap an existing cloud
service and you can create a paid service

459
00:27:22,351 --> 00:27:26,520
out of somebody else's cloud service.
This is also a possibility, right?

460
00:27:26,521 --> 00:27:28,410
So I wanted to show you both ways.

461
00:27:28,860 --> 00:27:32,610
The reason you do this yourself is because
you want more fine grained control.

462
00:27:32,610 --> 00:27:36,630
You want more detail over what the model
learns, what the data set looks like,

463
00:27:36,631 --> 00:27:39,210
and what type of architecture to use.
However,

464
00:27:39,390 --> 00:27:42,840
it's good to prototype using
APIs like dialogue flow.

465
00:27:43,800 --> 00:27:47,640
And so when it comes to dialogue flow,
before I start building the android app,

466
00:27:47,641 --> 00:27:51,240
I want to just briefly explain
how dialogue flow works.

467
00:27:51,360 --> 00:27:54,270
The idea is that whenever
a user has a query,

468
00:27:54,300 --> 00:27:58,080
we're going to turn that query
into an intent. So for example,

469
00:27:58,081 --> 00:28:02,190
if the query is something like, you
know, is it going to rain today?

470
00:28:02,340 --> 00:28:04,890
Where's the nearest uh,
umbrella store,

471
00:28:04,891 --> 00:28:09,150
whatever the intent of both of those is,
whether discussion,

472
00:28:09,151 --> 00:28:11,160
whether weather, right?
So that's the intent.

473
00:28:11,161 --> 00:28:15,570
So it's the abstract concept that the
user is talking about and natural language

474
00:28:15,571 --> 00:28:20,571
processing allows us to find what that a
concept or a vector to be technical is.

475
00:28:21,900 --> 00:28:25,410
And that's the great thing about dialogue
flow is that it lets you define these

476
00:28:25,710 --> 00:28:30,300
intense, right? So tell me a chord, show
me a chord, how to play another court.

477
00:28:30,330 --> 00:28:32,580
All of these phrases
relate to a single intent.

478
00:28:32,581 --> 00:28:36,750
And that intent is show me a
chord chord suggestions, right?

479
00:28:36,751 --> 00:28:41,040
And then we have entities which are used
to answer requests from the user and

480
00:28:41,041 --> 00:28:42,900
then fulfillment requests,
et cetera.

481
00:28:42,930 --> 00:28:45,780
There's a lot there and I'm going to
show you how that works when I build it.

482
00:28:45,781 --> 00:28:48,240
But let's start out by
building our android APP.

483
00:28:49,950 --> 00:28:52,380
Now I'm using android
studio to build this,

484
00:28:52,560 --> 00:28:54,660
which you can download
right from the website.

485
00:28:54,661 --> 00:28:56,880
It's pretty easy to do
if you haven't done it.

486
00:28:56,881 --> 00:28:59,580
I'd highly recommend
downloading android studio.

487
00:28:59,880 --> 00:29:03,150
It's a great development framework,
easily one click download, right?

488
00:29:03,360 --> 00:29:07,800
So let's get into android studio. In
a s right? So here is my android APP,

489
00:29:07,801 --> 00:29:12,690
but how did I build this? Rather
than, um, building dialog flows,

490
00:29:12,691 --> 00:29:15,840
integration myself.
What I did

491
00:29:17,340 --> 00:29:22,340
was I found an existing dialogue flow
chat bot using good hub right here and I

492
00:29:24,721 --> 00:29:28,770
built off of that. So what this
guy did was he took an android app,

493
00:29:28,800 --> 00:29:32,010
bare bones and he integrated
dialogue flow into it.

494
00:29:32,340 --> 00:29:37,340
So what we can do is we can see what
he did and we can build off of that.

495
00:29:38,400 --> 00:29:40,860
So I will find it right here,

496
00:29:42,130 --> 00:29:47,050
dow to great. And I'll go into android
studio, I'll minimize my existing one.

497
00:29:47,051 --> 00:29:48,460
I'll open a new one

498
00:29:51,510 --> 00:29:55,760
in a new window.
And here we are,

499
00:30:01,350 --> 00:30:04,710
right?
So let's see what this looks like in Rez.

500
00:30:09,110 --> 00:30:10,730
Boom. Okay. So there it is, it works.

501
00:30:11,060 --> 00:30:16,060
And I'll say hello has fish and there's
not going to be a response because I

502
00:30:16,551 --> 00:30:17,361
just downloaded it.

503
00:30:17,361 --> 00:30:22,310
I need to put my specific dialogue flow
API key into this app for it to work.

504
00:30:22,430 --> 00:30:25,370
So it works just downloading it
and directly running. It worked.

505
00:30:25,670 --> 00:30:28,550
So we're going to build off of this,
right?

506
00:30:28,551 --> 00:30:31,730
So dialogue flow is already integrated.
If we go to main activity,

507
00:30:32,210 --> 00:30:36,810
let's see what we got here. It's got
to chat view inside of the chat view.

508
00:30:37,380 --> 00:30:38,490
It's got,

509
00:30:41,100 --> 00:30:45,570
it's got a bunch of code
that will draw the chat view.

510
00:30:53,810 --> 00:30:55,070
It's got to use your class.

511
00:30:55,280 --> 00:30:59,000
So this is a model user
model has got this activity,

512
00:31:00,020 --> 00:31:01,040
which is the controller.

513
00:31:06,300 --> 00:31:08,910
So it's already got dialogue
flow integrated in there.

514
00:31:08,911 --> 00:31:13,911
So we just need to replace the dialog
flow settings with our own settings.

515
00:31:14,190 --> 00:31:16,890
And now that we have this basic
version of the APP running,

516
00:31:16,891 --> 00:31:21,510
it's got dialogue flow integrated.
I'm going to search for,

517
00:31:27,810 --> 00:31:29,370
here's the access token right here.

518
00:31:29,490 --> 00:31:33,150
So I need to replace this access
token with my own access tokens.

519
00:31:33,151 --> 00:31:34,560
We'll go into dialogue flow.

520
00:31:39,810 --> 00:31:43,950
There it is, there's my access token
right there, developer access token,

521
00:31:44,160 --> 00:31:47,920
and I'll paste it in right there.
And now it's connected to my agent.

522
00:31:47,921 --> 00:31:48,754
So let's try it out.

523
00:31:55,460 --> 00:31:59,240
Ha, there we go. Awesome. So now it's
connected to my dialogue flow agent,

524
00:31:59,241 --> 00:32:02,150
which I'll build in the cloud.
So there's the basic functionality.

525
00:32:02,151 --> 00:32:05,390
Now we want to add some functionality
to this. What do we need to add?

526
00:32:05,660 --> 00:32:10,660
We need to add user authentication and
we need to add what else we need to add.

527
00:32:10,760 --> 00:32:15,380
We need to add our model to
it. User authentication and
we need to add what else?

528
00:32:16,100 --> 00:32:20,570
Let me go back up here. We've got
dialogue, flow, user Auth, paypal,

529
00:32:20,630 --> 00:32:23,450
tensorflow lite, and Pi Torch,
right? So that's what we need to do.

530
00:32:24,610 --> 00:32:28,120
But before we do any of that, let's
let's, let's look at dialog flow.

531
00:32:28,150 --> 00:32:31,330
What we want to do is we want to
automate cognitive behavioral therapy.

532
00:32:31,510 --> 00:32:33,790
This is something people
go in and train for,

533
00:32:33,791 --> 00:32:38,791
but what we can do is we can create
rules in dialogue flow that will allow a

534
00:32:39,710 --> 00:32:43,760
chat bots to respond to a person in
the way that a human would, right?

535
00:32:43,761 --> 00:32:47,570
So we can detect these ideas as intense.

536
00:32:47,571 --> 00:32:51,290
So negative thinking is one intent,
negative thinking patterns,

537
00:32:51,291 --> 00:32:53,840
all or nothing is one in 10
focusing on the negatives,

538
00:32:54,920 --> 00:32:57,650
negative self labeling is
one in 10 I'm a failure. See,

539
00:32:57,770 --> 00:33:01,460
this is all training data that we can
use for our dialogue flow bought six more

540
00:33:01,461 --> 00:33:03,410
negative thinking patterns causes,
right?

541
00:33:03,590 --> 00:33:06,560
We can go to our dialogue flow bought
and let me just show you how to do this

542
00:33:07,610 --> 00:33:08,780
and we'll create a new intent.

543
00:33:09,170 --> 00:33:13,070
And so what I've done is I started off
by looking at a prebuilt agent and that

544
00:33:13,071 --> 00:33:17,240
is the small talk agent right here. You
can import that. When you click import,

545
00:33:17,510 --> 00:33:21,860
it's going to import an existing
array of prebuilt in intense.

546
00:33:22,070 --> 00:33:25,190
And we'll add our own intent.
Let's just say happy is our intent.

547
00:33:25,460 --> 00:33:29,990
There already is one for small talk, but
let's add another one. I'm very happy,

548
00:33:30,670 --> 00:33:34,730
like I'm super, super excited. So I'll
create an intent for that. Now I'll say,

549
00:33:34,731 --> 00:33:37,970
what are the trainings, phrases, what are
the training phrases for this? I'm super,

550
00:33:38,060 --> 00:33:42,500
super happy. You know what
else? I'm very, I'm very happy.

551
00:33:43,820 --> 00:33:47,960
You know, life is good, life is good,

552
00:33:48,320 --> 00:33:52,250
life is good. And um, here's my response.

553
00:33:52,251 --> 00:33:56,540
Well the response could be something
like, great, continue with that,

554
00:33:57,440 --> 00:33:59,120
continue with your life,
whatever.

555
00:33:59,121 --> 00:34:04,010
Like I'm not a CBT and I'm not
like actually looking at it,

556
00:34:04,011 --> 00:34:04,910
but you get the picture here.

557
00:34:04,910 --> 00:34:07,520
I'm showing you the technical
details of how you would do this.

558
00:34:07,521 --> 00:34:10,490
Just put more time and energy into
this, right? So continue with your life.

559
00:34:11,060 --> 00:34:14,420
You have others, you could have
other responses. You're doing great.

560
00:34:14,660 --> 00:34:16,850
And then you can say save,
right?

561
00:34:16,851 --> 00:34:20,510
So any kind of intent where
it detects a happiness,

562
00:34:20,600 --> 00:34:23,030
it will then create
those responses for that.

563
00:34:23,031 --> 00:34:27,110
Whether it doesn't have to be the
exact question or the exact statement,

564
00:34:27,230 --> 00:34:31,580
it will relate to relate what you've
typed to that via semantic similarity.

565
00:34:31,581 --> 00:34:35,480
Remember it's vectorizing words
and when words are vectors,

566
00:34:35,750 --> 00:34:40,490
once vert words are vectors, we can then
find how close they are to each other,

567
00:34:40,491 --> 00:34:42,650
right? Man, woman, King, child.

568
00:34:42,651 --> 00:34:46,430
Why we can say that a man is
different from a woman or you know,

569
00:34:46,431 --> 00:34:49,610
whatever we want to say. A queen
is the type of woman, et Cetera.

570
00:34:49,760 --> 00:34:53,360
We can relate words mathematically
and that's what it does in the cloud.

571
00:34:53,480 --> 00:34:57,980
Now what models is dialogue flow using?
Nobody knows it is proprietary,

572
00:34:58,100 --> 00:35:02,270
but it's very likely that it is using
some kind of transformer network,

573
00:35:02,271 --> 00:35:06,410
which is a newer type of sequence
learning model because it's in their best

574
00:35:06,411 --> 00:35:09,050
interest to do so.
If they don't do it another service.

575
00:35:09,051 --> 00:35:14,000
Well and they want to provide the
best service. So that's dialogue flow.

576
00:35:14,180 --> 00:35:16,850
Let's continue with this.
What else do we want to add to our APP?

577
00:35:17,060 --> 00:35:19,280
What we want to add a authentication.

578
00:35:19,281 --> 00:35:22,460
And the way to do that is
to set it up with Firebase.

579
00:35:22,550 --> 00:35:24,890
So Firebase is pretty amazing.

580
00:35:25,130 --> 00:35:30,130
Firebase is a great all in one tool and
what it allows you to do is fire based,

581
00:35:30,731 --> 00:35:35,450
lets you build off cloud functions,
uh, Crashlytics analytics,

582
00:35:35,451 --> 00:35:39,390
predictions, messaging, it does so
much and it was bought by Google. Um,

583
00:35:39,570 --> 00:35:43,230
but what we want to use it for is we
want to use it to store our users and to

584
00:35:43,231 --> 00:35:46,950
authenticate them. That's
it. And one service,

585
00:35:46,951 --> 00:35:51,420
Firebase will sync across all of our
apps and we can do that pretty easily.

586
00:35:51,421 --> 00:35:54,810
We just have to go to fire base,
sign up, go to the console.

587
00:35:55,740 --> 00:36:00,000
And once we're there we're going to say,
okay, we've got a new project and will,

588
00:36:00,001 --> 00:36:02,280
I've already actually got a project
right here, which I created.

589
00:36:02,281 --> 00:36:06,750
But you just easily create a new
project and we have to say, okay,

590
00:36:06,780 --> 00:36:11,190
we want to create off, um,
set up a sign in method email,

591
00:36:11,191 --> 00:36:13,800
password, enable it, save

592
00:36:15,660 --> 00:36:19,260
just like that.
And database.

593
00:36:23,130 --> 00:36:27,860
Shay, create a database for our
users. Start in test mode. Enable.

594
00:36:31,640 --> 00:36:32,473
Okay.

595
00:36:32,950 --> 00:36:36,790
Okay, there is our link. We can make rest.

596
00:36:36,850 --> 00:36:40,000
We can make API requests for you that
if we want to, we can do anything.

597
00:36:40,240 --> 00:36:44,770
We'll get Jason back hosting
authentication. We've got it all here.

598
00:36:48,890 --> 00:36:51,260
And then we're going to type
in the name of our android APP.

599
00:36:51,261 --> 00:36:56,261
So the name of our android APP
is calm.fly Fisher for now.

600
00:36:56,900 --> 00:36:57,733
Dot.

601
00:36:59,450 --> 00:37:04,450
Dialogue Flow Chat Bot exam
dialogue flow chat Bot example,

602
00:37:09,800 --> 00:37:14,170
register.
Here's our,

603
00:37:14,230 --> 00:37:16,960
we add this config file
to our APP just like that.

604
00:37:17,920 --> 00:37:22,780
And then we add the STK by adding this
dependency to our class file. And then

605
00:37:25,250 --> 00:37:28,220
that's it. So how do, so
how do we add that? Well,

606
00:37:28,280 --> 00:37:32,330
what I've got here is I want to show
you what I've done. So under our Java

607
00:37:34,360 --> 00:37:36,490
I've added an activity.
So to add an activity,

608
00:37:36,491 --> 00:37:39,580
you just go to new and then
you can click on activity.

609
00:37:39,820 --> 00:37:42,640
And then basic activity just like that.
And once you create an activity,

610
00:37:42,641 --> 00:37:43,750
it's going to be empty.

611
00:37:44,140 --> 00:37:47,710
But under under layouts,

612
00:37:47,860 --> 00:37:52,780
Rez layout, you'll see the XML
file associated with each activity.

613
00:37:52,840 --> 00:37:57,790
And what you can do with each of these
activities is you can create the XML

614
00:37:57,791 --> 00:38:02,260
file. So either via XML or design,
we can add in components, you know,

615
00:38:02,261 --> 00:38:06,520
just drag and drop like as you're seeing
right here, you know, add an image view.

616
00:38:06,880 --> 00:38:09,370
There it is. Or I want to remove
the image of view whatever you want.

617
00:38:09,371 --> 00:38:12,640
And I've added two text views,
a button to log in.

618
00:38:12,641 --> 00:38:16,120
And then a logo that I
designed using brand mark.io,

619
00:38:16,121 --> 00:38:17,680
which I talked about in previous video.

620
00:38:17,681 --> 00:38:20,860
Mine for lack cert and the
domain is free as well.

621
00:38:20,890 --> 00:38:25,120
So that's why I also picked it.
So in the log in activity,

622
00:38:25,820 --> 00:38:30,100
um, what I did was I said
in on create. So by the way,

623
00:38:30,400 --> 00:38:33,430
there's so much here, there's so
much to fit into a single video.

624
00:38:33,431 --> 00:38:36,820
I really just want to give you
the important bits as I see them.

625
00:38:36,821 --> 00:38:41,821
I could sit here and explain the entire
activity lifecycle when on create fires,

626
00:38:42,220 --> 00:38:45,580
when on delete when you know all these,

627
00:38:45,581 --> 00:38:48,990
like all these event listeners fire,
but I'm not going to,

628
00:38:49,020 --> 00:38:50,230
I'm going to tell you is that we,

629
00:38:50,440 --> 00:38:55,440
once we created both of those XML
text inputs and then the button,

630
00:38:55,660 --> 00:38:59,920
we can call those inside of the
activity, right? So get em email,

631
00:38:59,921 --> 00:39:03,730
get you dot text, right? There's an
email, there's the password. Okay.

632
00:39:03,731 --> 00:39:05,740
And then we send those to fire based.

633
00:39:05,741 --> 00:39:09,670
It's going to send us back that
authentication Jason File. And if that,

634
00:39:09,700 --> 00:39:13,570
if the returns success,
then we take the user to the next view.

635
00:39:14,600 --> 00:39:18,700
Right? So that's the idea. We send it
to Firebase, we've integrated the SDK.

636
00:39:18,790 --> 00:39:23,170
If it was successful, then we log the
user in, right? So that's for Firebase.

637
00:39:23,171 --> 00:39:25,510
What else do we have here?
Once we've added Firebase,

638
00:39:25,630 --> 00:39:29,410
then we add our pretrained model, which
you can see there it is frozen in France.

639
00:39:29,411 --> 00:39:32,620
Graft up PD. Okay. That's the model.

640
00:39:32,740 --> 00:39:35,770
So the idea here is that
once I type in something,

641
00:39:35,771 --> 00:39:40,771
it's going to detect if what I typed in
was positive or negative and once out of

642
00:39:40,901 --> 00:39:44,170
every 10 times,
if what I said was negative,

643
00:39:44,350 --> 00:39:49,030
then what it's gonna do is it's going
to ping the reddit API are slash memes,

644
00:39:49,180 --> 00:39:53,350
pull back the funniest meme or the top
rated meme and show that to me as an

645
00:39:53,440 --> 00:39:55,210
automated assistant would.

646
00:39:55,450 --> 00:39:59,080
But the rest of the time it's going to
use dialogue flow to interpret what I've

647
00:39:59,081 --> 00:40:03,160
said. So this is an example
of AI happening client's side,

648
00:40:03,310 --> 00:40:07,030
but it's also happening in the cloud
but it doesn't have to be both.

649
00:40:07,120 --> 00:40:09,370
You can choose one or
the other or do both.

650
00:40:09,550 --> 00:40:12,930
But this is just to show you how you would
do both. And so right here you see my,

651
00:40:13,090 --> 00:40:16,690
my inference graph, right train
and Pi Torch converted to annex,

652
00:40:16,750 --> 00:40:19,840
converted to tensorflow,
downloaded and here it is on the client.

653
00:40:19,900 --> 00:40:22,420
Tensorflow lite is allowing me to do this,

654
00:40:22,480 --> 00:40:25,630
which is TensorFlow's android
version or mobile version.

655
00:40:27,280 --> 00:40:30,340
So, um, once I've logged in and
I've created the log in activity,

656
00:40:30,341 --> 00:40:32,090
then I want the payment activity.

657
00:40:32,091 --> 00:40:34,570
So I've created another
activity called payments.

658
00:40:34,930 --> 00:40:38,950
And the idea behind payments is look
at this right here. Begin payment.

659
00:40:39,310 --> 00:40:42,640
It will say, what's your client id?
Now this comes from paypal, right?

660
00:40:42,641 --> 00:40:47,050
So from paypal I use paypal because
paypal was the easiest to integrate with

661
00:40:47,051 --> 00:40:50,350
android compared to stripe and
compare it to a few other ones,

662
00:40:50,650 --> 00:40:53,470
although my friend did create a
brain tree. Shout out to Brian,

663
00:40:53,471 --> 00:40:57,580
but I'm sorry Brian, but that's
okay. So um, client ID is right there

664
00:40:59,050 --> 00:40:59,411
and uh,

665
00:40:59,411 --> 00:41:04,150
we can go to the paypal developer
documentation to see how to set up our

666
00:41:04,151 --> 00:41:08,230
developer environment for android.
It's got some great documentation here.

667
00:41:08,440 --> 00:41:09,850
And the great thing about Android,

668
00:41:09,851 --> 00:41:14,851
what I really like about the
newest versions of Android
is the fact that you can

669
00:41:15,430 --> 00:41:20,430
easily install so many different libraries
by going to your build dot grateful.

670
00:41:24,090 --> 00:41:25,860
And you can just type it in there.

671
00:41:28,730 --> 00:41:33,020
There it is, right? So what I did
here was I said, look at this here,

672
00:41:33,200 --> 00:41:37,790
this file. I said compile paypal,
compile a tensorflow for Android, I,

673
00:41:37,791 --> 00:41:42,791
all I do is I put those compile
lines inside of the bill dock rail.

674
00:41:43,400 --> 00:41:44,990
When I build the project,

675
00:41:45,050 --> 00:41:49,490
it's going to download and install those
dependencies for me and I can use them

676
00:41:49,491 --> 00:41:51,410
in my app.
It's going to link everything.

677
00:41:51,411 --> 00:41:55,220
So many different class files are going
to be linked in any activity that I

678
00:41:55,221 --> 00:41:56,480
create,
which is awesome.

679
00:41:56,720 --> 00:42:00,230
So those are the vials right there.

680
00:42:00,410 --> 00:42:02,270
I've got this payments class right here.

681
00:42:02,810 --> 00:42:07,730
I've got the payments button right here.
So I just created a button for payments.

682
00:42:07,940 --> 00:42:11,900
It's an image button and I just
found a paypal button off the web.

683
00:42:12,050 --> 00:42:16,130
And then I linked it to this function
here in payments called begin payment.

684
00:42:16,340 --> 00:42:20,210
I set the price here, I said
USD, it's gonna be 35 bucks.

685
00:42:20,360 --> 00:42:23,150
And the great thing about paypal
is it's kind of like stripe,

686
00:42:23,300 --> 00:42:28,300
whereas all of that payment functionality
and logic is happening server side.

687
00:42:28,431 --> 00:42:30,980
So we don't have to worry about that.
And then when it's done,

688
00:42:30,981 --> 00:42:32,810
it's just going to return a success token.

689
00:42:33,110 --> 00:42:35,840
And if we get that success
token similar to user off,

690
00:42:35,960 --> 00:42:40,940
we then move the user to the next
activity, right? So it's just like that.

691
00:42:41,270 --> 00:42:45,080
And so that's for paypal.
And the last bit is we've,

692
00:42:45,081 --> 00:42:48,260
we've authenticated the user,
we've made them pay.

693
00:42:48,410 --> 00:42:52,160
We have put the model locally
on our android device.

694
00:42:52,340 --> 00:42:55,760
We've integrated dialogue flow and
the last step for us is to talk about

695
00:42:55,761 --> 00:42:56,840
tensorflow lite.

696
00:42:56,870 --> 00:43:00,230
So it tends to flow light is pretty
epic because what it does is it lets you

697
00:43:00,231 --> 00:43:05,231
take a train tensorflow model and convert
it into a file that can be read on

698
00:43:05,331 --> 00:43:06,320
android devices.

699
00:43:06,320 --> 00:43:09,590
So you will just put it in your android
device and it's going to run on your

700
00:43:09,591 --> 00:43:13,340
android device locally.
Now most of these files are image files,

701
00:43:13,550 --> 00:43:15,590
but um,
you know,

702
00:43:15,591 --> 00:43:19,010
there's a lot of NLP files and I hope
to see more of those because we want to

703
00:43:19,011 --> 00:43:23,900
get to a world where we are
modularly using these AI components,

704
00:43:23,901 --> 00:43:26,450
these pretrained models together.
That's what we need.

705
00:43:26,451 --> 00:43:30,860
We need to be able to import a pretrained
model from NLP, from computer vision,

706
00:43:30,861 --> 00:43:35,270
from, you know, data analysis from data
science. And just use them as components,

707
00:43:35,510 --> 00:43:36,830
as pieces of the puzzle,

708
00:43:36,950 --> 00:43:41,210
and then let end users and developers
be able to build off of those and we're

709
00:43:41,211 --> 00:43:45,230
just, we're just not there yet, but
we will be in terms of the ecosystem,

710
00:43:45,710 --> 00:43:49,760
in terms of what we can build in, what
kind of impact we can have. Of course,

711
00:43:49,761 --> 00:43:50,990
we can all have an impact,

712
00:43:50,991 --> 00:43:55,580
but the actual modularity of these
components definitely has room for

713
00:43:55,581 --> 00:43:59,270
improvement and remember,
the more complex something is to do,

714
00:43:59,330 --> 00:44:00,620
the fewer people will do it,

715
00:44:00,740 --> 00:44:04,400
which gives you this person with a lot
of motivation. Who's watching my videos,

716
00:44:04,460 --> 00:44:09,050
who I love very deeply for making it to
this point? It gives you an opportunity,

717
00:44:09,590 --> 00:44:14,270
okay, this is your time to shine.
This is your time to shine.

718
00:44:14,271 --> 00:44:18,500
Ai is your medium to shine.
I'm talking to you like forget all about,

719
00:44:18,530 --> 00:44:21,680
forget about this for a second.
Ai is your time to shine.

720
00:44:22,460 --> 00:44:25,280
This is your way to make money. This is
your way to have an impact on the world.

721
00:44:25,281 --> 00:44:28,700
If you've ever wondered what your
places on this planet, why you're here,

722
00:44:29,090 --> 00:44:32,130
I'm telling you that this is it.
This is why we all have humanity,

723
00:44:32,131 --> 00:44:35,560
has been building up to this point
where we can build these AI system,

724
00:44:35,561 --> 00:44:39,900
these artificially intelligent systems
that will increase our productivity,

725
00:44:39,901 --> 00:44:42,180
our happiness,
our meaningfulness in life.

726
00:44:42,210 --> 00:44:44,820
It will increase the
quality of our intelligence.

727
00:44:44,821 --> 00:44:46,290
It's going to do so much for us,

728
00:44:46,380 --> 00:44:51,360
but we need people to start building
these applications like you. And in fact,

729
00:44:52,280 --> 00:44:54,810
well, I'll talk about this last
point at the end of the video.

730
00:44:55,200 --> 00:44:56,460
So let's keep going here.
By the way,

731
00:44:56,461 --> 00:44:59,790
there's a bunch of pretrained models
that you can find on get hub right here.

732
00:44:59,791 --> 00:45:02,760
I've got a link to it for you,
which are very easy to implement.

733
00:45:03,270 --> 00:45:07,770
So let's get back to this code and
I want to show you something. So,

734
00:45:07,830 --> 00:45:12,630
uh, in the main activity, um,

735
00:45:12,960 --> 00:45:16,740
so once I have found a message,

736
00:45:16,741 --> 00:45:18,600
so here's the code that
I was talking about.

737
00:45:19,230 --> 00:45:21,960
So what this does is it says,

738
00:45:22,650 --> 00:45:26,550
instantiate a new request to read it.

739
00:45:29,000 --> 00:45:29,540
Okay?

740
00:45:29,540 --> 00:45:33,110
So it's memes dot Jason.
It will pull those memes.

741
00:45:33,590 --> 00:45:37,700
If the user's intent is, you know,
this is the means. Dot. Jason.

742
00:45:37,701 --> 00:45:41,030
This shows all the data from
orange slash means as a Jason file.

743
00:45:41,210 --> 00:45:45,410
Really easy to pull via a
simple rest and http request.

744
00:45:45,920 --> 00:45:50,240
And then we'll just going to
show it to the end user, Huh?

745
00:45:50,300 --> 00:45:55,070
Jordan Peele and I commented this code
out for now. Now let me uncommon tit.

746
00:45:55,100 --> 00:45:58,280
There we go. So it's reading
whatever the user typed in,

747
00:45:58,281 --> 00:46:00,140
it's then once we have that,

748
00:46:00,290 --> 00:46:03,440
here is the code for doing inference
with tensorflow right here.

749
00:46:03,650 --> 00:46:06,980
So what's happening here is here
is the file are frozen graph.

750
00:46:07,310 --> 00:46:09,140
It's going to retrieve that.

751
00:46:09,141 --> 00:46:12,200
It's going to feed whatever the user
typed in and then it's going to run

752
00:46:12,230 --> 00:46:16,420
inference, right? And so
once we had the inference,

753
00:46:16,430 --> 00:46:19,010
we can do whatever we want, right?
So that's an example of that.

754
00:46:19,011 --> 00:46:23,510
So it's an example of mixing dialogue,
flow and inference happening locally.

755
00:46:24,230 --> 00:46:28,400
Now what I want to do is I want to run
this one more time for you so we could

756
00:46:28,401 --> 00:46:32,510
see this one more time.
The fully finished version.

757
00:46:33,770 --> 00:46:38,150
Yes, access my contacts. All
right, so I'll type in my email,

758
00:46:38,300 --> 00:46:39,650
my password,

759
00:46:40,550 --> 00:46:45,350
sign in to mind relaxed her a pay with
paypal. I remember the payment activity.

760
00:46:45,351 --> 00:46:49,910
Remember the XML file, remember
the paypal integration, right?

761
00:46:49,911 --> 00:46:54,590
We just add that into the bill dot Gredo
file to integrate and then we call it

762
00:46:54,850 --> 00:46:57,230
a, whenever one of the
activities is finished,

763
00:46:57,231 --> 00:47:01,730
whenever I hit the sign in
button and Firebase returns
and authenticated Id, yes,

764
00:47:01,731 --> 00:47:04,430
no,
and then we show this paypal charge card.

765
00:47:04,490 --> 00:47:06,360
This is going to send a request to paypal.

766
00:47:06,380 --> 00:47:10,550
It's going to return an ID did pay or
did not pay or it's a binary value.

767
00:47:10,700 --> 00:47:14,270
Once we got that, we go to the next
phase and then we type in something.

768
00:47:14,540 --> 00:47:18,920
This is our therapist Siraj therapist's
greetings and it's going to ask you

769
00:47:18,921 --> 00:47:21,500
things. Now, obviously you
can improve this therapist.

770
00:47:21,650 --> 00:47:23,960
You can give this therapist's
more capabilities.

771
00:47:24,050 --> 00:47:27,260
It's using better CBT techniques.
It gets better over time.

772
00:47:27,410 --> 00:47:30,250
You do market validation,
you a team, et Cetera,

773
00:47:30,370 --> 00:47:34,330
but hopefully this gave
you some inspiration and
education on how you can build

774
00:47:34,331 --> 00:47:38,440
an AI startup with Pi torch
and a bunch of other tools.

775
00:47:38,590 --> 00:47:42,820
Now one more thing before you go.
I'm creating a challenge for you.

776
00:47:42,821 --> 00:47:45,970
I want to help gamify this.
Why? I Dunno it, it's just fun.

777
00:47:46,210 --> 00:47:51,160
So it's called AI startup challenge.
It's a three step process. Create an APP.

778
00:47:51,190 --> 00:47:53,110
It could be android, Ios, web,

779
00:47:53,140 --> 00:47:57,640
anything that uses AI in some
way anyway to solve a problem.

780
00:47:57,910 --> 00:48:01,120
If you can get three paying
customers for your app,

781
00:48:01,180 --> 00:48:05,200
that means money in your pocket.
Then if you submit your entry,

782
00:48:05,590 --> 00:48:09,760
you will get a video shout out from me
as well as a private hangout section

783
00:48:09,910 --> 00:48:12,580
where we'll just, if you, if you
want to chat, we'll just, we'll,

784
00:48:12,581 --> 00:48:16,090
we'll chat you and I will chat about
whatever. Okay. For, for an hour.

785
00:48:16,480 --> 00:48:18,460
And the way to do this
is to submit a form.

786
00:48:18,461 --> 00:48:21,970
I'll have a form in the video description
if you want to submit your challenge

787
00:48:21,971 --> 00:48:26,770
to uh, your, your startup too. And
the due date for this is May 15th,

788
00:48:26,980 --> 00:48:30,400
right? So you have some time to build
this. Uh, it's, it's going to be fun.

789
00:48:30,401 --> 00:48:35,401
The first three people or teams to create
an APP that gets at least three paying

790
00:48:35,411 --> 00:48:39,760
customers, gets a video shout out and
I'll do a private hangout with them.

791
00:48:39,880 --> 00:48:42,160
If you can't find anybody to
check out our slack channel,

792
00:48:42,310 --> 00:48:44,980
asked for teammates in the
comment section of this video,

793
00:48:45,220 --> 00:48:48,010
and I hope you found this video
useful. Hey, if you liked this video,

794
00:48:48,190 --> 00:48:48,791
do me a favor.

795
00:48:48,791 --> 00:48:53,260
It's national like button and please
subscribe for more technology videos for

796
00:48:53,261 --> 00:48:56,790
now. I've got a code in
Ios, so thanks for watching.

