1
00:00:00,090 --> 00:00:03,600
Hello world.
It's the Raj and do you own your data?

2
00:00:04,770 --> 00:00:05,370
No.

3
00:00:05,370 --> 00:00:10,370
I'm going to demo an open source project
that aims to bring power back to the

4
00:00:10,681 --> 00:00:12,660
people called open mind.

5
00:00:12,900 --> 00:00:17,900
It's a community focused on building
technology for decentralized ownership of

6
00:00:18,391 --> 00:00:19,710
data and AI.

7
00:00:20,070 --> 00:00:24,630
The original dream for the web was
for everyone to be able to participate

8
00:00:24,660 --> 00:00:27,360
equally for the betterment of humanity.

9
00:00:27,570 --> 00:00:32,570
The webs first pioneers had the ethos
that data should be freely available for

10
00:00:32,791 --> 00:00:34,980
all that wanted.
At its start,

11
00:00:34,981 --> 00:00:39,900
the web was just a series of nodes
joined by links with no central node.

12
00:00:39,960 --> 00:00:43,440
Everyone hosted their own
data on their own server,

13
00:00:43,620 --> 00:00:48,000
but this altruism begin to fade
during the first.com bubble.

14
00:00:48,270 --> 00:00:53,270
Entrepreneurs realize that an easy way
to provide value on top of this neutral

15
00:00:53,491 --> 00:00:58,491
playing field was to build centralized
services that collected data and

16
00:00:59,160 --> 00:01:00,120
monetized it.

17
00:01:00,240 --> 00:01:05,190
You freely exchanged your
data to access a free service,

18
00:01:05,400 --> 00:01:09,990
but what's happened now is that these
services now own the majority of the

19
00:01:09,991 --> 00:01:13,500
world's data.
The web has become centralized.

20
00:01:13,620 --> 00:01:16,260
Let's say we want to start an AI startup,

21
00:01:16,320 --> 00:01:19,620
meaning we want to use
AI to solve some problem.

22
00:01:19,860 --> 00:01:24,750
The current business model for this
is to first acquire data about people

23
00:01:24,780 --> 00:01:25,613
somehow.

24
00:01:25,800 --> 00:01:30,750
The next step is to train a model on that
data so that it does something useful

25
00:01:30,870 --> 00:01:35,870
and the last step is to sell the use of
that model in the form of a usable APP.

26
00:01:36,240 --> 00:01:41,240
The problem with this business model is
that people lose control of their data

27
00:01:41,370 --> 00:01:43,170
and aren't compensated for it.

28
00:01:43,470 --> 00:01:48,470
Open mind is a peer to peer network that
lets anyone train their AI models on

29
00:01:49,171 --> 00:01:54,171
user data that normally only big companies
had access to while letting users

30
00:01:54,601 --> 00:01:59,601
maintain ownership and get compensated
for their data and achieves this by

31
00:01:59,731 --> 00:02:03,960
sprinkling for newer technologies
on itself. Deep learning,

32
00:02:04,260 --> 00:02:05,520
federated learning,

33
00:02:05,670 --> 00:02:09,390
homomorphic encryption and
blockchain smart contracts.

34
00:02:09,570 --> 00:02:12,780
Let's go over each at a high
level. First, deep learning.

35
00:02:12,840 --> 00:02:17,840
This is a way to convert one dataset
into another dataset so we can go from a

36
00:02:18,481 --> 00:02:23,481
partially labeled Dataset of Mri Scans
to a fully labeled Dataset of Mri Scans.

37
00:02:25,350 --> 00:02:28,620
The next technology is federated learning.

38
00:02:28,740 --> 00:02:33,740
Normally you'd collect some data set from
users and store it all on one server.

39
00:02:34,440 --> 00:02:37,500
You then train your model on that server.

40
00:02:37,560 --> 00:02:40,980
So the data and the model
are in the same place.

41
00:02:41,280 --> 00:02:43,470
Federated Learning flips the script.

42
00:02:43,710 --> 00:02:47,550
Instead of bringing all the
data to the models location,

43
00:02:47,760 --> 00:02:52,440
we bring the model to each
individual data source. Lastly,

44
00:02:52,470 --> 00:02:57,470
the model is then updated in the cloud
using all the gradients it receives.

45
00:02:57,600 --> 00:03:01,150
The third technology is
called homomorphic encryption.

46
00:03:01,540 --> 00:03:06,540
This is a scheme that lets you perform
computation on values that you don't know

47
00:03:07,061 --> 00:03:10,540
the actual value of just the cipher text.

48
00:03:10,690 --> 00:03:15,670
So if you have a number like five you
can homomorphic Lee encrypted into a

49
00:03:15,671 --> 00:03:20,671
cipher text than perform operations on
that cipher using known values and get

50
00:03:21,071 --> 00:03:24,820
results all without ever knowing
the real value of the cipher.

51
00:03:24,910 --> 00:03:28,840
The last one is called blockchain
smart contract technology.

52
00:03:29,070 --> 00:03:32,050
A blockchain is a decentralized database.

53
00:03:32,080 --> 00:03:37,080
It's immutable so no one can delete
an old entry and no one can fake a new

54
00:03:37,631 --> 00:03:42,580
entry. A copy of it is stored on
every node that makes up its network.

55
00:03:42,760 --> 00:03:46,240
A smart contract is some data
that's stored on the blockchain.

56
00:03:46,510 --> 00:03:50,590
This data usually includes an event,
some state and some code.

57
00:03:50,860 --> 00:03:54,040
It's like a regular
app but de centralized.

58
00:03:54,070 --> 00:03:57,190
So what is open minds workflow look like?

59
00:03:57,460 --> 00:04:01,480
Assuming we only use deep learning
and federated learning together,

60
00:04:01,750 --> 00:04:03,460
we as a startup can say,

61
00:04:03,640 --> 00:04:07,330
let's train our model using
three different people's data.

62
00:04:07,390 --> 00:04:11,350
So we first train it on user A's data,
the model updates,

63
00:04:11,380 --> 00:04:13,870
Aka gradients are sent back to us.

64
00:04:14,020 --> 00:04:17,290
Then we do the same for
the other users at first.

65
00:04:17,291 --> 00:04:22,291
This seems good enough since everyone
got to maintain control of their data and

66
00:04:23,050 --> 00:04:28,050
our startup didn't have to see any of
the user's data to train our models on

67
00:04:28,241 --> 00:04:29,074
that data.

68
00:04:29,080 --> 00:04:33,670
The problem though is that any of these
users could just steal the model when

69
00:04:33,671 --> 00:04:37,750
they receive a copy of it
and sell it themselves. Also,

70
00:04:37,751 --> 00:04:42,751
the gradients give hints about the
type of data a user has and lastly,

71
00:04:42,940 --> 00:04:44,890
no one got paid for their data.

72
00:04:45,160 --> 00:04:48,250
What if we sprinkle some home
morphic encryption on this?

73
00:04:48,490 --> 00:04:53,490
Meaning we encrypt our model before
we send it out to users for training.

74
00:04:54,400 --> 00:04:55,030
Well,

75
00:04:55,030 --> 00:04:59,620
user a would increase the intelligence
of the model by training it on their own

76
00:04:59,621 --> 00:05:02,890
data and can't see what
the model's values are.

77
00:05:03,070 --> 00:05:06,820
Same for the other two users so
they couldn't steal the model,

78
00:05:06,970 --> 00:05:11,970
but our startup could still
reverse engineer user's
data and users still aren't

79
00:05:12,611 --> 00:05:14,260
being paid for their data.

80
00:05:14,540 --> 00:05:19,540
Enter blockchain smart
contracts are startup consent
as model specification to a

81
00:05:20,471 --> 00:05:21,580
smart contract.

82
00:05:21,760 --> 00:05:26,050
That means the type of model we want
to use and some money in the form of a

83
00:05:26,051 --> 00:05:28,720
bounty that we want to pay for the model.

84
00:05:29,020 --> 00:05:34,020
The smart contract initializes the model
itself because the weights are randomly

85
00:05:34,241 --> 00:05:39,241
initialized by the smart contract and all
the information used to initialize the

86
00:05:39,941 --> 00:05:41,650
weights is public.

87
00:05:41,950 --> 00:05:46,950
There are no hidden secrets inside the
homomorphic encryption that our startup

88
00:05:47,381 --> 00:05:52,381
could embed to make it so that the model
secretly memorizes user data when user

89
00:05:53,021 --> 00:05:57,070
a request the model specs from the
smart contracts, they can agree,

90
00:05:57,260 --> 00:06:02,260
let the model Spec train on their
data and send it back the gradients.

91
00:06:02,990 --> 00:06:07,460
The smart contract evaluates
the validity of those gradients,

92
00:06:07,580 --> 00:06:11,630
then sends them to some bounty
in the form of cryptocurrency.

93
00:06:11,990 --> 00:06:16,790
Now we can't steal their data
and they can't steal our model.

94
00:06:16,850 --> 00:06:21,410
Plus it creates a marketplace so
users get paid for their data.

95
00:06:21,620 --> 00:06:26,620
The only remaining problem now is that
whoever holds the public private keys for

96
00:06:27,081 --> 00:06:32,081
the homomorphic encryption can decrypt
any part of the system at any time.

97
00:06:32,780 --> 00:06:35,540
The solution is to use an oracle,

98
00:06:35,690 --> 00:06:40,220
so the difference would be that the smart
contract sends the model Spec to the

99
00:06:40,250 --> 00:06:44,210
Oracle. It generates a public
private key pair and crips.

100
00:06:44,211 --> 00:06:47,510
The model then sends it
back to the smart contract,

101
00:06:47,750 --> 00:06:52,610
so the Oracle holds the key pairs
after training on all the user data.

102
00:06:52,730 --> 00:06:55,250
The model is sent back to the Oracle.

103
00:06:55,340 --> 00:06:59,450
It's decrypted encrypted with
the oracles keys then sent back.

104
00:06:59,720 --> 00:07:02,600
Since the oracle acts as
a trusted third party,

105
00:07:02,840 --> 00:07:05,540
no one can decrypt the model or gradients.

106
00:07:05,780 --> 00:07:10,780
A second smart contract can act as an
insurance policy against the oracle

107
00:07:10,970 --> 00:07:14,150
sharing its secret keys.
If we look at the open mind,

108
00:07:14,151 --> 00:07:17,510
get hub account will notice
quite a lot of moving parts.

109
00:07:17,750 --> 00:07:22,400
This is a big project with many
contributors and growing daily.

110
00:07:22,640 --> 00:07:26,900
There are four main components though.
The first is sonar,

111
00:07:26,960 --> 00:07:29,090
which is the federated learning server.

112
00:07:29,240 --> 00:07:34,240
It's a smart contract running on the
Theorem blockchain that handles all

113
00:07:34,611 --> 00:07:35,444
activity.

114
00:07:35,510 --> 00:07:40,510
This contract holds bounties and pointers
to AI models in the form of Ip fs

115
00:07:41,270 --> 00:07:43,970
addresses.
That's where the models are stored.

116
00:07:44,180 --> 00:07:49,180
Sonar has an interface to it as well that
we interact with to train our models.

117
00:07:49,550 --> 00:07:51,470
It communicates with capsule,

118
00:07:51,590 --> 00:07:56,590
which is a third party Django web app
used to generate PGP public and private

119
00:07:56,811 --> 00:08:01,811
keys for encrypting models that anyone
can host as an oracle users store their

120
00:08:02,571 --> 00:08:04,970
data in a mine.
This is a node dot.

121
00:08:04,971 --> 00:08:09,971
JS client that acts as a safe warehouse
for data and communicates with sonar

122
00:08:10,280 --> 00:08:15,280
constantly checking for new models to
contribute relevant data to users can pull

123
00:08:16,101 --> 00:08:20,810
their data from existing centralized
services via custom adapters.

124
00:08:21,020 --> 00:08:25,880
The idea is that you can download your
Facebook or Google data directly into

125
00:08:25,881 --> 00:08:29,330
your mind.
Then sell it for models to train on.

126
00:08:29,690 --> 00:08:31,370
The last component is sift,

127
00:08:31,550 --> 00:08:35,810
which is a neural network library that
can be trained in a homomorphic Lee

128
00:08:35,811 --> 00:08:37,040
encrypted state.

129
00:08:37,460 --> 00:08:42,110
Let's say we're trying to predict whether
or not someone has diabetes or not.

130
00:08:42,530 --> 00:08:47,510
A data scientist will first create a
request to sonar in order to begin a

131
00:08:47,511 --> 00:08:48,740
training campaign.

132
00:08:49,130 --> 00:08:53,630
They define a set of basic parameters
like the amount of money they're willing

133
00:08:53,631 --> 00:08:56,580
to spend in order to train their model.

134
00:08:56,880 --> 00:09:01,880
A description of the data being requested
from the minds like certain images,

135
00:09:02,580 --> 00:09:06,270
a description of the desired
output like image labels,

136
00:09:06,540 --> 00:09:09,840
the starting accuracy
and the desired accuracy.

137
00:09:10,140 --> 00:09:15,140
A model is generated from this campaign
and place on the sonar blockchain sonar

138
00:09:15,871 --> 00:09:19,860
communicates with capsule which
generates a public private key.

139
00:09:20,160 --> 00:09:24,210
A public key is sent back to
sonar and stored with the model.

140
00:09:24,420 --> 00:09:29,420
The private key is kept secret in the
capsule minds can pull the model and train

141
00:09:30,001 --> 00:09:31,620
it.
After training.

142
00:09:31,680 --> 00:09:36,540
The gradients are uploaded back to
the sonar blockchain and the change in

143
00:09:36,541 --> 00:09:40,200
accuracy is calculated
when training is complete.

144
00:09:40,350 --> 00:09:45,030
The encrypted model has sent to the
capsule to be decrypted using the private

145
00:09:45,031 --> 00:09:49,710
key then delivered to the data scientist.
Three things to remember here.

146
00:09:50,010 --> 00:09:55,010
The web has become way too centralized
of a few people are profiting off the

147
00:09:55,291 --> 00:09:59,760
data of many.
A great potential solution is open mind.

148
00:09:59,790 --> 00:10:04,080
A project that aims to create a
marketplace to let data scientists trained

149
00:10:04,081 --> 00:10:09,081
models and pay users for their data
directly and open mind uses four key

150
00:10:09,841 --> 00:10:14,700
technologies, deep learning, federated
learning, homomorphic encryption,

151
00:10:14,880 --> 00:10:16,620
and blockchain smart contracts.

152
00:10:16,710 --> 00:10:20,610
This week's coding challenge is to
make a contribution to open minds.

153
00:10:20,820 --> 00:10:23,300
They've got lots of
issues on their get hubs,

154
00:10:23,301 --> 00:10:27,150
so just pick one and make a pull
request with your contribution.

155
00:10:27,390 --> 00:10:31,260
The more valuable, the better posts your
get hub link in the comment section,

156
00:10:31,380 --> 00:10:33,960
and I'll announce the winners next week.
Hey,

157
00:10:33,961 --> 00:10:35,730
I hope you liked this
video and if you did,

158
00:10:35,731 --> 00:10:39,870
please hit that subscribe button for now.
I've got to go own my data,

159
00:10:40,050 --> 00:10:41,400
so thanks for watching.

