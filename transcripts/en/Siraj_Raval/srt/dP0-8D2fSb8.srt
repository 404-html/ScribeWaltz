1
00:00:00,060 --> 00:00:04,800
Hello world. It's the Raj and I've really
been digging smart contracts lately.

2
00:00:04,860 --> 00:00:06,060
There are so powerful.

3
00:00:06,300 --> 00:00:10,290
We're going to build a smart contract
that implements proof of existence.

4
00:00:10,560 --> 00:00:15,560
It's an immutable digital notary that
proves the ownership and existence of any

5
00:00:15,751 --> 00:00:18,540
document without needing to hire a lawyer.

6
00:00:18,570 --> 00:00:23,220
The advent of bitcoin proved that we could
exchange value over the internet in a

7
00:00:23,221 --> 00:00:26,640
way that didn't need to involve
a third party, namely a bank.

8
00:00:26,880 --> 00:00:31,230
What made this possible was its use of
a data structure that distributes trust

9
00:00:31,440 --> 00:00:32,700
across many nodes.

10
00:00:32,730 --> 00:00:37,730
Instead of a few called the blockchain
think I'm ready to jump on the every no

11
00:00:40,741 --> 00:00:44,790
downloads a copy of it and stores every
single transaction that's occurred in

12
00:00:44,791 --> 00:00:45,624
the network.

13
00:00:45,630 --> 00:00:50,630
It can't be hacked or tampered with
because it's secured by the proof of Work

14
00:00:50,790 --> 00:00:54,360
Algorithm only Jeff Dean has that
much computing power. Since then,

15
00:00:54,361 --> 00:00:58,890
several cryptocurrencies have popped up
adding their own features to the bitcoin

16
00:00:58,891 --> 00:01:01,230
blockchain to extend its functionality,

17
00:01:01,620 --> 00:01:04,980
but the cryptocurrency with the second
highest market cap in the world,

18
00:01:05,050 --> 00:01:10,050
etherium is by far the most interesting
in terms of its potential to power a new

19
00:01:10,711 --> 00:01:15,150
wave of applications. Etherium is
a digital currency like bitcoin,

20
00:01:15,300 --> 00:01:17,130
but it's also got its own terrain,

21
00:01:17,131 --> 00:01:21,210
complete programming language that
lets you build what are called smart

22
00:01:21,270 --> 00:01:24,870
contracts. Let's rewind a
bit. In the bitcoin network,

23
00:01:24,871 --> 00:01:27,540
any coins that you buy are
sent to a unique address.

24
00:01:27,570 --> 00:01:29,760
No coins are actually
held at this address.

25
00:01:29,940 --> 00:01:34,140
It just acts as a unique identifier like
a bank account number that allows the

26
00:01:34,141 --> 00:01:38,250
total of the transactions to and
from this address to be calculated.

27
00:01:38,550 --> 00:01:43,050
We can think of Bitcoin as a ledger that
records the deposits and withdrawals

28
00:01:43,140 --> 00:01:46,860
from account. When we send a
transaction via the bitcoin network,

29
00:01:46,950 --> 00:01:51,000
the old balance is reduced by some
amount and another accounts balance is

30
00:01:51,001 --> 00:01:55,230
increased by this amount,
but no physical value is ever moved.

31
00:01:55,290 --> 00:01:57,750
Etherium works slightly differently.

32
00:01:57,810 --> 00:02:02,070
It stores the number of coins you own
at an address called a smart contract.

33
00:02:02,310 --> 00:02:05,700
This is a piece of code which is
stored on the blockchain network.

34
00:02:05,910 --> 00:02:10,500
It defines the conditions to which all
parties using the contract agree upon,

35
00:02:10,710 --> 00:02:14,670
so if required conditions are met,
certain actions are executed,

36
00:02:14,820 --> 00:02:19,820
no need for a judge or AWS or really
any third party to enforce the rules.

37
00:02:20,250 --> 00:02:24,690
The ability to store info at these
addresses is called the etherium state,

38
00:02:24,900 --> 00:02:28,950
whereas Bitcoin only stores transactions
that have been sent into blockchain,

39
00:02:29,280 --> 00:02:33,600
any type of data can be stored in the
theory I'm state and thereby the etherium

40
00:02:33,601 --> 00:02:34,434
blockchain.

41
00:02:34,530 --> 00:02:38,760
The information that is stored could
range from the amount of ether you have to

42
00:02:38,761 --> 00:02:43,440
the type of life insurance you own,
and since computation is scarce,

43
00:02:43,590 --> 00:02:48,510
there must be a mechanism to limit
the resources used by each contract.

44
00:02:48,810 --> 00:02:53,640
Every single operation that is
executed inside the EVM is actually

45
00:02:53,670 --> 00:02:57,270
simultaneously executed by
every node in the network.

46
00:02:57,630 --> 00:03:02,200
This is why gas gas is internal.
It can't be purchased.

47
00:03:02,230 --> 00:03:07,060
It's used to calculate the price of a
transaction and ether and ultimately limit

48
00:03:07,061 --> 00:03:09,280
the EVM and etherium transaction.

49
00:03:09,281 --> 00:03:13,780
Contract code can trigger data reads and
writes do expensive computations like

50
00:03:13,781 --> 00:03:18,400
using cryptographic primitives, making
calls to other contracts, et cetera.

51
00:03:18,730 --> 00:03:23,730
Each of these operations have a cost
measured in gas and each gas unit consumed

52
00:03:23,921 --> 00:03:28,840
by a transaction must be paid for an
ether based on a gas to either price which

53
00:03:28,841 --> 00:03:30,130
changes dynamically.

54
00:03:30,340 --> 00:03:33,910
This price is deducted from the ethereum
accounts sending the transaction.

55
00:03:34,120 --> 00:03:39,040
Smart contracts enable etherium to operate
as a global server where you pay for

56
00:03:39,041 --> 00:03:43,510
each transaction instead of a monthly
fee for some central server provider.

57
00:03:43,870 --> 00:03:47,920
The gas as well motivates developers to
write efficient code so that it would

58
00:03:47,921 --> 00:03:50,470
require less gas for the execution.

59
00:03:50,800 --> 00:03:55,630
One interesting thing to note is that
smart contracts can't execute API call

60
00:03:55,631 --> 00:03:56,464
directly.

61
00:03:56,530 --> 00:04:00,670
If we wanted to build a weather app and
wanted to connect to a weather API to

62
00:04:00,671 --> 00:04:03,160
retrieve data and show
the info accordingly,

63
00:04:03,460 --> 00:04:06,940
that code would need to be
executed on each and every node,

64
00:04:07,120 --> 00:04:12,100
so that call to the weather Api could
happen at different times as a nodes might

65
00:04:12,101 --> 00:04:14,770
start executing the code,
not at the same time.

66
00:04:15,040 --> 00:04:19,120
In one second we could have rainy weather
data returned and in another we could

67
00:04:19,121 --> 00:04:23,890
have sunny weather nodes wouldn't be
able to reach consensus on the result of

68
00:04:23,891 --> 00:04:28,060
this smart contract. In this case,
but we need data from the real world.

69
00:04:28,090 --> 00:04:32,140
It's super useful. So the solution
is to use what's called an oracle.

70
00:04:32,440 --> 00:04:35,470
Instead of the smart contract
calling an External Api,

71
00:04:35,680 --> 00:04:38,590
the API itself pushes the
data to the blockchain,

72
00:04:38,770 --> 00:04:42,610
so that means that all the nodes now
have the same data within the network.

73
00:04:42,790 --> 00:04:46,900
So a contract triggers an event on
external app can listen to that event,

74
00:04:47,050 --> 00:04:51,340
retrieve the data from the API and add
a transaction with the result to the

75
00:04:51,341 --> 00:04:52,174
contract.

76
00:04:52,270 --> 00:04:56,200
We can ensure the integrity of the
oracle bi using a smart contract as an

77
00:04:56,201 --> 00:05:00,780
insurance policy against a corrupting
the integrity of the data. But wait,

78
00:05:01,300 --> 00:05:06,300
bitcoin's got smart contract functionality
too with bitcoin smart contracts.

79
00:05:06,790 --> 00:05:10,800
It's important to understand that each
transaction exists as a data structure

80
00:05:10,810 --> 00:05:14,500
composed of inputs and outputs.
In order to send Bitcoin,

81
00:05:14,620 --> 00:05:16,330
users must provide certain inputs,

82
00:05:16,331 --> 00:05:20,530
meeting predetermined requirement's that
prove they own and therefore have the

83
00:05:20,560 --> 00:05:23,170
authority to send bitcoins.
They claim to own.

84
00:05:23,500 --> 00:05:27,940
Users can also create
contract transactions that
require a more complex set of

85
00:05:27,941 --> 00:05:30,850
inputs in order to trigger
the release of bitcoins.

86
00:05:31,090 --> 00:05:35,950
A simple example of more complex
inputs is a multisignature transaction,

87
00:05:36,130 --> 00:05:40,120
which requires more than one entity
that sign off on the release of Bitcoin.

88
00:05:40,150 --> 00:05:45,150
Proving useful in escrow situations where
two of three parties have to vouch for

89
00:05:45,461 --> 00:05:46,294
a transfer.

90
00:05:46,510 --> 00:05:51,510
Smart contracts in general are pretty
computationally expensive to execute,

91
00:05:51,820 --> 00:05:56,820
so not every conditional transaction
is appropriate for execution via a,

92
00:05:57,920 --> 00:06:02,090
we should only use them for features
that demand the distributed and secure

93
00:06:02,091 --> 00:06:03,680
nature of a shared ledger.

94
00:06:03,840 --> 00:06:07,970
I think about an apartment complex and
all the administrative work required to

95
00:06:07,971 --> 00:06:08,804
maintain it.

96
00:06:08,930 --> 00:06:13,010
If we use smart contracts where tendency
is registered on the blockchain,

97
00:06:13,250 --> 00:06:17,540
they can be used to control access to
the building. When you pay the rent,

98
00:06:17,780 --> 00:06:19,910
each tenant's access to
the building is renewed.

99
00:06:20,090 --> 00:06:24,020
Owners with registered keys are granted
access to all the various types of

100
00:06:24,021 --> 00:06:27,050
utilities like mailboxes
and washing machines.

101
00:06:27,200 --> 00:06:30,350
We can also use biometrics
to help authenticate users.

102
00:06:30,530 --> 00:06:33,800
No need to maintain a server.
It's all completely automated.

103
00:06:34,100 --> 00:06:38,660
This can be applied to grant ownership
that is publicly verifiable over really

104
00:06:38,661 --> 00:06:40,580
anything physical objects as well,

105
00:06:40,581 --> 00:06:44,480
making them smart property and you
can even incorporate a company on the

106
00:06:44,481 --> 00:06:46,880
blockchain and if we're really ambitious,

107
00:06:47,150 --> 00:06:51,860
an entire nation could be defined not by
geography but by the rules and benefits

108
00:06:51,861 --> 00:06:54,080
of citizenship on the blockchain.

109
00:06:54,650 --> 00:06:57,650
Let's get to building to start
developing etherium apps.

110
00:06:57,710 --> 00:06:59,810
We'll need a client to
connect to the network.

111
00:06:59,990 --> 00:07:03,980
It will act as a window to the distributed
network and provide a view of the

112
00:07:03,981 --> 00:07:07,490
blockchain where all the
EVM states are represented.

113
00:07:07,730 --> 00:07:10,700
There are various compatible
clients for the protocol.

114
00:07:10,850 --> 00:07:15,620
The most popular being guests a go
language implementation. However,

115
00:07:15,621 --> 00:07:17,150
it's not the most developer friendly.

116
00:07:17,330 --> 00:07:21,380
The best option I found is the test
RPC node, which we can install and run.

117
00:07:21,740 --> 00:07:25,850
We can run test RPC in a new terminal
and leave it running while we develop.

118
00:07:26,120 --> 00:07:28,040
Each time we run test RPC,

119
00:07:28,220 --> 00:07:32,570
it will generate 10 new addresses with
simulated test funds for us to use.

120
00:07:32,780 --> 00:07:36,650
This is not real money and we're safe
to try anything with no risk of losing

121
00:07:36,651 --> 00:07:37,400
funds.

122
00:07:37,400 --> 00:07:41,390
The most popular language for writing
smart contracts in ethereum is solidity,

123
00:07:41,420 --> 00:07:45,740
so we'll be using that. We're also
using the truffle development framework,

124
00:07:45,800 --> 00:07:50,750
which helps with smart contract creation,
compiling, deployment and testing.

125
00:07:51,020 --> 00:07:55,520
We should be able to compile the example
contracts by running truffle compile.

126
00:07:55,760 --> 00:08:00,760
Then to deploy the contracts
to the simulated network
using the test RPC node we

127
00:08:00,981 --> 00:08:03,710
have running,
we need to run truffle migrate.

128
00:08:03,920 --> 00:08:07,370
We'll be writing a simple proof
of existence. Smart contract.

129
00:08:07,580 --> 00:08:12,580
The idea is to create a digital notary
that store's Hashes of documents as proof

130
00:08:12,650 --> 00:08:16,610
of their existence. We can use truffle
create contracts to get started.

131
00:08:16,880 --> 00:08:20,450
Then we'll open proof of existence.
That's Sol. In a text editor.

132
00:08:20,720 --> 00:08:22,760
Contracts have state and functions.

133
00:08:22,910 --> 00:08:26,570
It's important to distinguish two
kinds of functions that can appear in a

134
00:08:26,571 --> 00:08:29,390
contract.
The first are read only functions,

135
00:08:29,510 --> 00:08:32,330
functions that don't
perform any state changes.

136
00:08:32,450 --> 00:08:37,450
They only read state perform computations
and return values and the other kind

137
00:08:38,061 --> 00:08:39,740
are transactional functions.

138
00:08:39,980 --> 00:08:44,240
Functions that perform a state
change in the contract or move funds.

139
00:08:44,570 --> 00:08:48,860
Our code only stores one proof at
a time using the data type bytes.

140
00:08:48,861 --> 00:08:52,550
32 which is the size of
a Sha two five six hash.

141
00:08:52,880 --> 00:08:57,570
The transactional function notarize
allows one to store the hash of a document

142
00:08:57,571 --> 00:09:00,450
in our smart contracts
state variable proof.

143
00:09:00,480 --> 00:09:04,920
The variable is public and is the only
way I user of our contract has to verify

144
00:09:04,921 --> 00:09:09,120
if a document has been notarized. Let's
deploy proof of existence to the network.

145
00:09:09,270 --> 00:09:13,290
This time we'll have to edit the migration
file to make truffle deploy our new

146
00:09:13,291 --> 00:09:17,040
contract. Now that our contract
is deployed, we can play with it.

147
00:09:17,100 --> 00:09:21,180
As in we can send messages to it.
The function calls and read.

148
00:09:21,181 --> 00:09:25,500
It's public state using the truffle
console. So what have we learned?

149
00:09:25,800 --> 00:09:30,800
A smart contract is code that is stored
and run on a blockchain making it

150
00:09:31,081 --> 00:09:35,040
trustless and immutable.
We can use them to verify ownership,

151
00:09:35,160 --> 00:09:40,110
automate financial instruments and create
more autonomous software and etherium

152
00:09:40,111 --> 00:09:44,130
is currently the most developed
platform to build smart contracts.

153
00:09:44,460 --> 00:09:48,630
This week's coding challenge is to
create a smart contract that an AI can

154
00:09:48,631 --> 00:09:52,200
interact with. More details are
in the read me get hub links.

155
00:09:52,201 --> 00:09:56,220
Go in the comments and I'll give the top
two entries. A shout out next Friday.

156
00:09:56,280 --> 00:09:59,280
Hope you liked the video, please
subscribe for more programming videos.

157
00:09:59,281 --> 00:10:02,600
And for now I've got to fight the power,
so thanks for watching.

