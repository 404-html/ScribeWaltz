WEBVTT

1
00:00:01.020 --> 00:00:04.530
Okay.
So when you come to the base rendering lecture,

2
00:00:05.070 --> 00:00:10.020
this is going to be unit four.
We will have two parts in it.
So one,

3
00:00:10.170 --> 00:00:13.410
the first part will be spatial acceleration structures.

4
00:00:13.620 --> 00:00:15.670
At the next part we be my bank.

5
00:00:16.680 --> 00:00:21.360
I will hold to the next three lectures.
So this one and two more.

6
00:00:21.600 --> 00:00:23.880
And then um,
Carter,
it takes over again.

7
00:00:25.050 --> 00:00:25.830
<v 1>Okay.</v>

8
00:00:25.830 --> 00:00:30.620
<v 0>So I'm spatial accelerations to act.
Just so we are we,
um,</v>

9
00:00:32.400 --> 00:00:36.210
the rain during pipeline as it was shown in the first lecture.

10
00:00:36.270 --> 00:00:38.370
So we started with a three d scene,

11
00:00:39.910 --> 00:00:42.120
perform some kind of light simulation,

12
00:00:42.150 --> 00:00:46.320
generates a image out of it that's going to be these plate.

13
00:00:46.920 --> 00:00:50.720
So spatial acceleration structures are,
um,

14
00:00:51.000 --> 00:00:56.000
central to the light simulation because they increase the efficiency of ratio.

15
00:00:57.150 --> 00:00:59.940
So Seo hurt last time,
um,

16
00:01:00.000 --> 00:01:02.330
re based methodologies.

17
00:01:02.331 --> 00:01:07.331
So from geometric optics are mainly employed to enable photorealistic rendering.

18
00:01:09.150 --> 00:01:13.230
And in this work you have to shoot a lot of race.

19
00:01:13.440 --> 00:01:18.440
So usually in the order of medium 2 billion and if you can cut down the

20
00:01:19.231 --> 00:01:23.940
computational cost of this procedure,
then you will gain significant speed up.

21
00:01:24.030 --> 00:01:24.863
<v 1>Oops.</v>

22
00:01:26.770 --> 00:01:27.603
<v 0>So,</v>

23
00:01:29.550 --> 00:01:29.910
<v 1>okay</v>

24
00:01:29.910 --> 00:01:34.910
<v 0>though Samurais so generally the Monte Carlo method uses racial thing to sample,</v>

25
00:01:35.071 --> 00:01:38.400
to integration of the rendering equation or shown the last time.

26
00:01:38.760 --> 00:01:42.930
So usually you have to compute the closest intersection with the scene.

27
00:01:43.200 --> 00:01:46.680
So this is equivalent to computing the local recipe litty.

28
00:01:46.740 --> 00:01:49.210
So how far does it rate,
um,

29
00:01:50.070 --> 00:01:54.960
travel through the scene before it hits its first,
um,
object.

30
00:01:56.000 --> 00:01:56.230
<v 1>Okay.</v>

31
00:01:56.230 --> 00:02:01.230
<v 0>And this is usually very expensive for large amount of scene objects because if</v>

32
00:02:01.631 --> 00:02:06.150
you start with one raid and you want to check does it intersect any of my scene,

33
00:02:06.151 --> 00:02:07.240
say triangles,

34
00:02:07.720 --> 00:02:11.860
then if you have millions of triangles that each ray has to check all the

35
00:02:11.861 --> 00:02:14.740
mundane of triangles,
which one's the first that they intersect.

36
00:02:15.610 --> 00:02:19.250
If you have millions of race,
you'll see that this is a good,

37
00:02:19.310 --> 00:02:24.310
I think explosion and you will not converge in any reasonable time to a high

38
00:02:24.791 --> 00:02:25.930
quality image.

39
00:02:27.470 --> 00:02:31.080
So the naive approach would be just to,
uh,

40
00:02:31.230 --> 00:02:35.960
determined the intersection with each object.
So the object could now be,

41
00:02:36.710 --> 00:02:36.900
yeah,

42
00:02:36.900 --> 00:02:41.900
usually triangles can also be nonlinear surface patches or whatever you want to

43
00:02:42.891 --> 00:02:43.724
use.

44
00:02:44.540 --> 00:02:45.170
<v 1>Okay.</v>

45
00:02:45.170 --> 00:02:48.290
<v 0>So if you just go through all the objects,</v>

46
00:02:48.291 --> 00:02:52.430
one after the other and check which one is the closest.

47
00:02:53.460 --> 00:02:53.810
<v 1>Okay.</v>

48
00:02:53.810 --> 00:02:56.870
<v 0>You have to go through all the op check to,
it's a linear approach.</v>

49
00:02:56.900 --> 00:02:58.700
So the complexities of an,

50
00:02:59.890 --> 00:03:04.890
a better approach would be to reorganize all the objects in your scene,

51
00:03:05.080 --> 00:03:10.080
say the triangles in some kind of spacial hierarchy so that I know that safe in

52
00:03:10.421 --> 00:03:13.330
the left half of this room is,

53
00:03:13.390 --> 00:03:16.840
are these triangles in the right half of these triangles.

54
00:03:17.020 --> 00:03:21.910
And then if I have a rate that I know that it only travels through one half of

55
00:03:21.911 --> 00:03:22.744
the room,

56
00:03:22.970 --> 00:03:27.970
that can immediately discard half of the triangles in my scene and don't need to

57
00:03:29.711 --> 00:03:32.210
intersect against them.
Yeah.

58
00:03:32.510 --> 00:03:36.940
So these are this approach.
I mean it's um,

59
00:03:37.070 --> 00:03:42.070
a bit more sophisticated than that leads then to a sub linear complexity.

60
00:03:42.680 --> 00:03:45.590
Usually it gets close to lava rhythmic.

61
00:03:47.420 --> 00:03:50.690
So I mean,
this isn't very old topic.

62
00:03:50.691 --> 00:03:54.200
So this popped up very soon when,
um,

63
00:03:55.070 --> 00:03:57.470
ray tracing was used.

64
00:03:57.471 --> 00:04:02.471
So there are many methodologies that were looked into and two main techniques

65
00:04:04.640 --> 00:04:08.060
say are considered the state of the art.

66
00:04:08.330 --> 00:04:13.330
So one our Katie trees and the other are bounding volume hierarchies.

67
00:04:15.320 --> 00:04:19.880
So a kd tree subdivides the space itself.
So,

68
00:04:20.230 --> 00:04:24.140
um,
your scene is situated in a surrounding space,

69
00:04:24.230 --> 00:04:29.230
three dimensional and you then um,

70
00:04:29.660 --> 00:04:34.660
cut this space into pieces as can be seen in this example on the right hand side

71
00:04:35.900 --> 00:04:36.560
here,

72
00:04:36.560 --> 00:04:41.560
the space in which the opposite of checks reside is just the square and each

73
00:04:43.041 --> 00:04:44.720
object is just a point.

74
00:04:46.070 --> 00:04:48.310
And as you see with um,

75
00:04:49.280 --> 00:04:51.860
requested sub division of the space,

76
00:04:52.460 --> 00:04:57.460
you group objects together in a spatially local volumes.

77
00:05:00.620 --> 00:05:02.570
So,
and if you,

78
00:05:03.560 --> 00:05:08.560
the right side gives you the subdivision of the space itself and whether the

79
00:05:09.441 --> 00:05:11.000
object line those,

80
00:05:11.480 --> 00:05:16.480
but each split of the space can be seen as uh,

81
00:05:16.870 --> 00:05:19.940
um,
as a construction of a binary tree.

82
00:05:20.180 --> 00:05:25.100
So you start off,
have the root node,

83
00:05:25.101 --> 00:05:26.540
which is the whole space.

84
00:05:26.870 --> 00:05:31.870
Then you try to find some kind of good cart through the space so that

85
00:05:32.421 --> 00:05:36.170
approximately half of the objects are in one half and half of the opportunities

86
00:05:36.171 --> 00:05:37.004
and the other.

87
00:05:37.340 --> 00:05:42.340
So it doesn't make sense to start off with the whole volume and then separate a

88
00:05:42.741 --> 00:05:47.741
very small part from it because every ray has to start,

89
00:05:47.840 --> 00:05:52.460
it's traversal of the tree at the root node and then it has the decision,

90
00:05:52.820 --> 00:05:56.870
am I in the big volume or do I have to check the small volume too?

91
00:05:57.090 --> 00:06:00.170
If you have a lot of small volumes and this is inefficient again,

92
00:06:00.380 --> 00:06:05.380
so what do you want to do is to place or to get the criteria that you are not

93
00:06:08.031 --> 00:06:12.620
going to have to intersect a lot of triangles as far up in the two years

94
00:06:12.621 --> 00:06:16.810
possible.
So in this example,
the first cart,

95
00:06:16.910 --> 00:06:21.030
the vertical cut through the whole space,
um,

96
00:06:21.950 --> 00:06:26.360
subdivides the objects approximately in half so that half of the objects are

97
00:06:26.361 --> 00:06:27.470
left of the cart,

98
00:06:27.471 --> 00:06:32.471
half of the objects or right of the cut in three d this would be a cut plane

99
00:06:32.950 --> 00:06:37.190
through the volume,
but it's the same procedure.

100
00:06:37.850 --> 00:06:42.850
And then you recursively sub divide the,

101
00:06:43.041 --> 00:06:44.420
um,
the parts.

102
00:06:44.600 --> 00:06:49.490
So the two south volumes that you generated with the first cart.
And,

103
00:06:50.550 --> 00:06:54.080
uh,
also try again to have half of the objects,

104
00:06:54.081 --> 00:06:59.081
they are half of the chicken Steyer and you continue with this procedure until

105
00:07:00.290 --> 00:07:03.110
you will have one object per volume.

106
00:07:04.970 --> 00:07:07.970
I mean of course you can also terminate earlier.

107
00:07:08.240 --> 00:07:13.240
So if you are okay with having 100 triangles in each leaf node of the tree,

108
00:07:13.850 --> 00:07:18.270
then you have to check through all these 100 triangles if you entered the

109
00:07:18.290 --> 00:07:20.780
subspace.
But the

110
00:07:22.280 --> 00:07:27.280
domain advantage you gain with this is that if you have some ray from this

111
00:07:27.381 --> 00:07:28.220
volume,

112
00:07:28.430 --> 00:07:32.930
then you can do very quick checks against the subspaces.

113
00:07:32.990 --> 00:07:36.230
So you know that all the subspace here,
uh,
um,

114
00:07:36.380 --> 00:07:41.300
rectangles in a volume,
they won't be boxes.

115
00:07:41.390 --> 00:07:46.010
And you can do very quick intersection tests against boxes.
And if the,

116
00:07:46.130 --> 00:07:50.840
if you know that you are not going to intersect a box,
which is one test,

117
00:07:51.170 --> 00:07:54.170
but there are thousands of triangles in this box,

118
00:07:54.230 --> 00:07:59.230
then you can immediately discard all these triangles for your real intersection

119
00:07:59.511 --> 00:08:00.080
test.

120
00:08:00.080 --> 00:08:05.080
So you only have to check the triangle intersections in those boxes that you

121
00:08:06.470 --> 00:08:09.110
checked beforehand that you intersect.

122
00:08:10.280 --> 00:08:11.570
And you can imagine

123
00:08:14.480 --> 00:08:19.480
that if you have huge areas that you don't intersect,

124
00:08:20.960 --> 00:08:25.700
you gain a lot of speed because you don't do unnecessary work.

125
00:08:26.600 --> 00:08:31.520
So Katie threes sub divide the space and then you have to,

126
00:08:31.580 --> 00:08:34.400
um,
and then in the app volumes,

127
00:08:34.430 --> 00:08:37.970
the object slide and other approach,
uh,

128
00:08:38.390 --> 00:08:43.390
bounding volume hierarchies there you grouped the objects together.

129
00:08:43.970 --> 00:08:48.380
So you take,
you start with the triangles and then you'll say,

130
00:08:48.381 --> 00:08:51.950
I put clothes,
triangles into groups,

131
00:08:53.450 --> 00:08:56.940
and then you can build up a tree structure.

132
00:08:57.000 --> 00:09:01.650
But this three structional,
um,
depends on the triangles.

133
00:09:01.860 --> 00:09:05.610
So the fundamental unit there is a triangle,

134
00:09:05.611 --> 00:09:09.630
not a sub space of your whole scene him.

135
00:09:12.190 --> 00:09:13.200
So,
um,

136
00:09:14.110 --> 00:09:17.260
now they have advantages and disadvantages.

137
00:09:17.320 --> 00:09:22.000
Otherwise you would only take the better one.
So I'm Katie trees.

138
00:09:22.210 --> 00:09:26.020
They are usually faster for traversal.
On the CPU.
Here,

139
00:09:26.021 --> 00:09:28.540
I mean a multicore CPU,
yes.

140
00:09:29.930 --> 00:09:30.190
<v 1>Okay.</v>

141
00:09:30.190 --> 00:09:35.190
<v 0>But they have usually a larger amount of nodes and the health,</v>

142
00:09:36.230 --> 00:09:41.230
the applicator references.
Because if we go back to this example here,

143
00:09:41.830 --> 00:09:45.190
we have points.
Okay.
At point can,
um,

144
00:09:45.370 --> 00:09:47.740
does not have a spatial extent,

145
00:09:47.950 --> 00:09:52.360
but if you imagine that you have triangles and your cart through the whole

146
00:09:52.361 --> 00:09:53.140
volume,

147
00:09:53.140 --> 00:09:58.140
then it could be that your caught through triangles and then you have two

148
00:09:58.691 --> 00:10:03.010
possibilities.
I know you just add the triangle to both volumes.

149
00:10:03.100 --> 00:10:05.320
So you'll get the applicator for ansys.

150
00:10:05.500 --> 00:10:08.420
That means your triangle,

151
00:10:08.460 --> 00:10:13.150
this card is less efficient because you have to check against this triangle.

152
00:10:13.240 --> 00:10:18.010
If you're in the left or in the writer or you cut the triangle it safe.

153
00:10:18.190 --> 00:10:20.770
And Ed one half of the year,
one half of the year.

154
00:10:21.400 --> 00:10:26.400
But I'm cutting a lot of scene called dent is computationally expensive.

155
00:10:27.131 --> 00:10:30.640
So this would then degrade the,
um,

156
00:10:31.180 --> 00:10:35.420
the performance of the KD three generation.
Um,

157
00:10:35.620 --> 00:10:40.620
bounding volume hierarchies are very popular for a gps and multicore

158
00:10:42.100 --> 00:10:46.980
architectures.
So the scene for example.
So they,
um,

159
00:10:47.320 --> 00:10:50.020
got more attention in the,
um,

160
00:10:50.320 --> 00:10:53.590
in recent research because it is,
um,

161
00:10:54.040 --> 00:10:57.390
because most of the current work tried to implement,
um,

162
00:10:57.960 --> 00:11:02.870
Soltis spacial hierarchy generation on cheap gps or um,

163
00:11:03.330 --> 00:11:08.120
other highly parallel architectures.
Um,

164
00:11:08.400 --> 00:11:13.400
they are also easier to update because imagine you have a moving object inside

165
00:11:14.301 --> 00:11:19.130
your scene.
A key d three cuts the whole volume apart.

166
00:11:19.340 --> 00:11:21.050
And then if you have eh,

167
00:11:21.110 --> 00:11:25.130
objects moving from one side up volume to another,

168
00:11:25.400 --> 00:11:30.020
you would have to update the whole Katie tree because you don't really have a

169
00:11:30.021 --> 00:11:33.410
grasp on which level you have to edit it.

170
00:11:34.130 --> 00:11:38.630
Bounding volume,
hierarchies on the other side,
the group objects together.

171
00:11:39.380 --> 00:11:42.260
So the air,
you can't just,

172
00:11:42.980 --> 00:11:47.980
you have the option of ignoring dynamic complication because say you have two

173
00:11:49.641 --> 00:11:52.730
objects and B that are close together,

174
00:11:52.880 --> 00:11:55.930
so generate your bounding volume hierarchy.

175
00:11:56.140 --> 00:12:01.140
So they are grouped together at some level of the tree and if they then move

176
00:12:02.081 --> 00:12:06.130
apart,
the group inc is not influenced.

177
00:12:06.370 --> 00:12:10.030
The only thing that happens is that the bounding volume,

178
00:12:10.210 --> 00:12:13.420
the toll both groups gets larger and larger.

179
00:12:13.780 --> 00:12:18.610
So what happens is that you are a spacial hierarchy gets more inefficient

180
00:12:18.850 --> 00:12:23.850
because say a lot of empty spaces generated in between or checked in to be so

181
00:12:25.030 --> 00:12:29.770
Trey a race,
the travel,
exactly.
Through this gap between them,

182
00:12:29.920 --> 00:12:32.650
they would still have to check a and B.

183
00:12:33.070 --> 00:12:38.070
If you would then update your bounding volume hierarchy to acknowledge that they

184
00:12:38.630 --> 00:12:42.280
are spatially separated,
then they would be kept at a,

185
00:12:42.340 --> 00:12:46.630
they would be put into different branches of the tree at a different level,

186
00:12:47.620 --> 00:12:50.170
but you don't have to do that.

187
00:12:50.500 --> 00:12:55.500
So in bounding volume hierarchies dynamic seems just degrade your performance

188
00:12:55.600 --> 00:12:59.650
but don't invalidate your whole,
uh,
hierarchy.

189
00:12:59.830 --> 00:13:04.510
Because in Katy trees,
if you move from one sub volume to the other,

190
00:13:04.600 --> 00:13:06.850
you have to update this in the whole tree.

191
00:13:07.660 --> 00:13:12.660
And this could be quite complicated because I'm traversing the three,

192
00:13:13.781 --> 00:13:18.680
four Hallett and Emerick scene can be very closely.
Um,

193
00:13:19.150 --> 00:13:20.180
I mean,
you,

194
00:13:20.530 --> 00:13:24.970
and another advantage for founding volume hierarchist is that they are,

195
00:13:25.030 --> 00:13:28.930
um,
that every object is only in one three leafs.
I mean,

196
00:13:29.050 --> 00:13:33.490
this is naturally because it's constructed that way.
But,

197
00:13:33.550 --> 00:13:34.750
uh,
um,

198
00:13:35.980 --> 00:13:40.630
a negative point of them are that the nodes can spatially overlap.

199
00:13:41.410 --> 00:13:46.410
So if you put two triangles that are close by each other in two different nodes

200
00:13:47.950 --> 00:13:49.420
of the bonding volume hierarchy,

201
00:13:49.600 --> 00:13:54.160
then you still generate a box around them to do a fast intersection test.

202
00:13:54.490 --> 00:13:56.860
But if those triangles are,
say,

203
00:13:56.861 --> 00:14:01.270
see right next to each other than a simple box,
we'll have some overlap.

204
00:14:02.230 --> 00:14:06.850
So the abounding volume hierarchy can be inefficient.

205
00:14:07.880 --> 00:14:08.410
<v 1>Okay.</v>

206
00:14:08.410 --> 00:14:13.410
<v 0>If you generate a lot of boxes with content in it that overlap to a large</v>

207
00:14:14.351 --> 00:14:14.920
extent.

