WEBVTT

1
00:00:00.870 --> 00:00:05.870
What a wonderful day we have today and what a wonderful time it is to write a

2
00:00:06.391 --> 00:00:09.900
past racer so I don't we get started.

3
00:00:12.330 --> 00:00:16.280
What we are going to be looking at is a program called small paint,

4
00:00:16.320 --> 00:00:21.320
which is a small path tracer in effectively 250 lines of code and it contains

5
00:00:23.011 --> 00:00:25.290
everything that we have learned.

6
00:00:25.320 --> 00:00:30.030
During this course we're going to be able to compute soft shadows,

7
00:00:30.031 --> 00:00:31.140
anti-aliasing,

8
00:00:31.340 --> 00:00:35.190
Monte Carlo integration and defund quasi Monte Carlo sampling,

9
00:00:35.220 --> 00:00:38.250
which basically means low discrepancy sampling.

10
00:00:38.910 --> 00:00:42.720
This version of the program is going to be able to compute refractions,

11
00:00:42.721 --> 00:00:47.721
color bleeding and caustics and in the end the binary you can power from the

12
00:00:48.001 --> 00:00:51.540
cold can be compressed into less than four kilobytes.

13
00:00:52.890 --> 00:00:54.630
This is how the end result looks like.

14
00:00:54.631 --> 00:00:58.890
It has a beautiful painterly look which actually comes from a bug and you can

15
00:00:58.891 --> 00:01:01.920
also see that the light source up there,

16
00:01:02.520 --> 00:01:07.520
the whitish looking sphere is you could say perfectly anti elitist.

17
00:01:09.810 --> 00:01:14.310
In order to achieve this with a recursive ray tracer and no global illumination

18
00:01:14.311 --> 00:01:14.940
algorithm,

19
00:01:14.940 --> 00:01:19.440
you would need to compute the very same image on a much larger resolution.

20
00:01:19.860 --> 00:01:23.190
And then scale it down to a smaller image like this.

21
00:01:23.550 --> 00:01:28.550
And this anti-aliasing effect you get for free if you compute Monte-carlo path

22
00:01:28.561 --> 00:01:29.394
tracing.

23
00:01:30.420 --> 00:01:35.420
So the question is how is this exactly done and now is the best time to put

24
00:01:35.880 --> 00:01:39.840
everything into use that we have learned so far.
So let's get started.

25
00:01:39.870 --> 00:01:44.070
We have a completely standard vector class.

26
00:01:44.100 --> 00:01:48.360
It is a three dimensional vector,
it has its own constructor,

27
00:01:48.390 --> 00:01:50.760
the classical operators that you would expect.

28
00:01:51.060 --> 00:01:56.060
And we also have a dog product for the vector and across product for directory.

29
00:01:56.251 --> 00:02:00.150
It is also obviously possible to compute the length of this factor,

30
00:02:00.151 --> 00:02:02.910
so nothing too exciting or important here,

31
00:02:03.300 --> 00:02:07.050
but we definitely need to build on a solid vector class.
Now,

32
00:02:07.290 --> 00:02:12.290
third presentation of array array has an origin and the direction and if you

33
00:02:13.711 --> 00:02:15.390
take a close look at the constructor,

34
00:02:15.391 --> 00:02:19.230
you can see that when you initialize the array with a direction,

35
00:02:19.780 --> 00:02:21.300
then this direction is normed.

36
00:02:21.840 --> 00:02:26.490
And the reason is that when we compute the top products between these vectors,

37
00:02:26.910 --> 00:02:31.680
most of these information needs to be directional information.

38
00:02:31.681 --> 00:02:34.230
So we are not interested in the magnitude of the vector.

39
00:02:34.410 --> 00:02:36.810
Only interested in the direction of the vector.

40
00:02:37.020 --> 00:02:41.910
A good way to get rid of problems where you would initialize your ray with

41
00:02:41.940 --> 00:02:46.650
directions that are not vectors of unit length but you can do is to normalize

42
00:02:46.651 --> 00:02:51.450
this input in the constructor so you will never have headaches about incorrect

43
00:02:51.451 --> 00:02:54.060
results where you have no idea what is really happening.

44
00:02:55.800 --> 00:02:58.860
What is the representation of an object?
Well,
an object has a,

45
00:02:59.410 --> 00:03:01.090
this is denoted by cl.

46
00:03:01.150 --> 00:03:06.010
This is actually very sloppy notation and this you can imagine as lb dough but

47
00:03:06.160 --> 00:03:08.680
it is not a double so it's not a number.

48
00:03:08.740 --> 00:03:13.740
It is actually a vector and the reason for this is the fact that we need to

49
00:03:13.781 --> 00:03:15.160
define the LB dose,

50
00:03:15.190 --> 00:03:20.190
how much light in different wavelengths is being reflected and how much is being

51
00:03:21.161 --> 00:03:25.240
absorbed.
Biotech,
even object now object may also have a mission.

52
00:03:25.270 --> 00:03:30.100
If they have some non zero emission and they are light sources and by type we

53
00:03:30.101 --> 00:03:33.700
have an integer that would specify what kind of Brdf we have.

54
00:03:34.570 --> 00:03:38.680
It is also important to have an intersection routine and some other function

55
00:03:38.681 --> 00:03:41.890
that can compute the normal of the object.
Now,

56
00:03:41.920 --> 00:03:44.110
these are of course virtual functions.

57
00:03:44.140 --> 00:03:47.080
We don't define them or an abstract object,

58
00:03:47.350 --> 00:03:51.640
but they would have to be implemented in other classes that inherit from the

59
00:03:51.641 --> 00:03:52.474
object.

60
00:03:57.910 --> 00:04:01.690
Let's take a look at the sphere,
so his fear has the C and r.

61
00:04:01.691 --> 00:04:05.890
C is the center of the objects and R is the radius.

62
00:04:06.430 --> 00:04:09.790
The constructor is trivial.
We have the intersection function.

63
00:04:09.820 --> 00:04:14.820
Now you hopefully remember all three of the elements of the quadratic function

64
00:04:15.071 --> 00:04:17.500
that we need to solve that.
If you take a good look,

65
00:04:17.501 --> 00:04:22.060
then you will see that a is missing from here and the question is why is that?

66
00:04:23.560 --> 00:04:28.270
The answer is we are multiplying d with d to direction vector of array with

67
00:04:28.271 --> 00:04:31.350
itself and if it's a vector that is normed,

68
00:04:31.360 --> 00:04:35.290
so it is of length one then this a will always be one.

69
00:04:39.160 --> 00:04:42.070
After that we can deal with the discriminant.

70
00:04:42.220 --> 00:04:47.220
The discriminant is normally not B squared minus four AC.

71
00:04:48.250 --> 00:04:49.690
Remember a is one here,

72
00:04:49.691 --> 00:04:54.250
so it's submitted but it is behind a square root and the square root is

73
00:04:54.251 --> 00:04:58.450
completely omitted here,
which looks like a mistake but it is not.

74
00:04:58.510 --> 00:05:03.040
It is essentially an optimization step because you will see that we are testing

75
00:05:03.041 --> 00:05:07.150
the discriminant if it's less than zero,
if it's less than zero,

76
00:05:07.180 --> 00:05:10.960
then we don't need to deal with this equation because the solutions for the

77
00:05:10.961 --> 00:05:15.961
quadratic equation are going to exist in the plane of complex numbers and that's

78
00:05:16.721 --> 00:05:21.040
not a valid tea.
It's not a valid distance where we would intersect the sphere.

79
00:05:21.610 --> 00:05:23.200
If this is not happening,

80
00:05:23.890 --> 00:05:27.430
then we can compute the square root for the discriminant.

81
00:05:27.820 --> 00:05:28.930
Why after that?

82
00:05:28.960 --> 00:05:32.920
Because if the discriminant is bigger than zero,

83
00:05:33.580 --> 00:05:35.920
then the square root is not going to make a difference.

84
00:05:35.950 --> 00:05:40.330
So what we can essentially do is to postpone the squire road calculation after

85
00:05:40.331 --> 00:05:43.390
the test note that square roots are really,

86
00:05:43.450 --> 00:05:47.530
really expensive so we can save up lots of computational time.

87
00:05:47.560 --> 00:05:49.030
If you're mid this calculation

88
00:05:51.250 --> 00:05:56.200
there is a really nice square root hack in the source code of quake three which

89
00:05:56.201 --> 00:05:57.500
is by the way,
open source.

90
00:05:57.590 --> 00:06:02.030
Take a look at how people are trying to hack to get her functions in order to

91
00:06:02.031 --> 00:06:06.020
work better and faster than they should because the square roots are super

92
00:06:06.021 --> 00:06:10.730
expensive and there are some really interesting hacks in order to speed them up.

93
00:06:12.900 --> 00:06:17.900
We have the plus and minus term and the division by two a is again postponed

94
00:06:20.250 --> 00:06:23.550
and that's also another interesting question.
Why is this postponed?

95
00:06:23.640 --> 00:06:27.690
So you can see that the soul too is divided by two and a soul one is also

96
00:06:27.691 --> 00:06:30.600
divided by two but only after the test.

97
00:06:30.870 --> 00:06:34.230
So it is possible that if we have the solution to,

98
00:06:34.410 --> 00:06:38.310
if it is bigger than epsilon then we have the first expression after the

99
00:06:38.311 --> 00:06:39.060
question mark.

100
00:06:39.060 --> 00:06:42.780
But if it's not then we are looking for the second expression after it,

101
00:06:42.781 --> 00:06:45.960
which is another test and if the answer is no for death as well,

102
00:06:45.990 --> 00:06:47.520
then we are going to return zero.

103
00:06:47.580 --> 00:06:52.580
This would mean that we don't have any hits or the hits are behind us and we are

104
00:06:53.071 --> 00:06:56.220
not interested in intersections that are behind our rea.

105
00:06:56.790 --> 00:07:00.390
There is a possibility that we encountered this and in this case,

106
00:07:00.720 --> 00:07:04.860
I don't want to waste my time by dividing the solutions by two because I'm not

107
00:07:04.861 --> 00:07:05.700
going to use them.

108
00:07:06.720 --> 00:07:07.150
<v 1>Yeah.</v>

109
00:07:07.150 --> 00:07:10.270
<v 0>Why am I splitting hairs here?
That's an important question.</v>

110
00:07:10.780 --> 00:07:15.070
Why do we need to optimize so much?
Because if you grab a profiler,

111
00:07:15.220 --> 00:07:19.510
a program that is able to show you in what functions are you spending most of

112
00:07:19.511 --> 00:07:20.344
your time in,

113
00:07:20.440 --> 00:07:25.440
then this provider would show you that more than 90% of the execution time is

114
00:07:26.140 --> 00:07:28.300
spent in the intersection routines.

115
00:07:28.330 --> 00:07:32.530
So you have to have a really well optimized intersection routine.

116
00:07:32.980 --> 00:07:37.980
Some programs have replaced these expressions with SMB in order to speed it up

117
00:07:38.260 --> 00:07:39.093
even more.

118
00:07:40.080 --> 00:07:40.590
<v 1>Okay,</v>

119
00:07:40.590 --> 00:07:44.130
<v 0>so how do we compute the normal of his sphere?
Well,
very simple.</v>

120
00:07:44.640 --> 00:07:48.210
What we have here is p minus c not what does it mean?

121
00:07:48.720 --> 00:07:53.130
So if I have a minus B,
then this means a factor that points from B to a.

122
00:07:53.220 --> 00:07:57.420
So what this would mean,
look at the figure here.
If I would have a circle,

123
00:07:57.421 --> 00:08:02.250
then this would mean that from the center it is pointing towards the given

124
00:08:02.251 --> 00:08:03.300
points off the sphere.

125
00:08:04.140 --> 00:08:09.140
Now this is also divided by r because you could imagine you have this fear that

126
00:08:09.821 --> 00:08:13.150
is not of unit radius and if it's not off unit radius,

127
00:08:13.170 --> 00:08:17.740
then this normal vector would have a length.
You could compute a normalization.

128
00:08:17.741 --> 00:08:20.920
We have a normalized function in our rector implementation,

129
00:08:21.010 --> 00:08:22.780
but it also has a square root,

130
00:08:22.781 --> 00:08:26.620
so it would be much better to have something that's faster.
Well,

131
00:08:26.650 --> 00:08:29.260
if you just divide by the radius of the sphere,

132
00:08:29.410 --> 00:08:32.500
then you would immediately get a vector of unit length.

133
00:08:34.190 --> 00:08:34.950
<v 1>Okay,</v>

134
00:08:34.950 --> 00:08:38.670
<v 0>so in the end we can get the correct result by just simply dividing by our,</v>

135
00:08:39.090 --> 00:08:39.923
<v 1>hmm.</v>

136
00:08:40.170 --> 00:08:41.003
<v 0>Excellent.</v>

137
00:08:41.400 --> 00:08:42.233
<v 1>Hmm.</v>

138
00:08:42.580 --> 00:08:44.440
<v 0>Now we have a perspective camera here.</v>

139
00:08:44.650 --> 00:08:46.990
Hopefully you remember from the first lecture,

140
00:08:47.080 --> 00:08:50.770
we are basically just copy pasting this expression here.
We have derived,

141
00:08:50.771 --> 00:08:55.090
done rigorously and analyzed how this exactly works.
A simple intuition.

142
00:08:55.110 --> 00:08:58.860
Basically what we are doing,
we have as an input and x and the y.

143
00:08:59.460 --> 00:09:04.080
Basically this means give me a pig solve with this displacement and what it

144
00:09:04.081 --> 00:09:08.010
would give you back is the world's space coordinates of these pixels

145
00:09:10.340 --> 00:09:13.190
uniforms,
sampling of a hemisphere.
What is this for?

146
00:09:13.220 --> 00:09:15.560
If we are encountering a diffuse object,

147
00:09:15.830 --> 00:09:20.830
what we would like to do is to send array out on the hemisphere of this object.

148
00:09:21.710 --> 00:09:23.690
This we would need to uniformly sample.

149
00:09:23.691 --> 00:09:28.691
This means that the diffuse BRDF is one of our pie or roll over pie.

150
00:09:28.821 --> 00:09:33.440
If you take into consideration the lb dose and you need transforms in order to

151
00:09:33.441 --> 00:09:35.660
do it,
there is a reading behind this link.

152
00:09:36.470 --> 00:09:41.470
How it works exactly is drawing uniform samples on a plane which is simple and

153
00:09:42.561 --> 00:09:46.610
then we are projecting it on the hemisphere.
That's basically all there is.

154
00:09:49.620 --> 00:09:53.220
What about the trace function?
As you can see here in the first line,

155
00:09:53.340 --> 00:09:56.280
this code says that there is a maximum depth.

156
00:09:56.640 --> 00:10:01.640
Now clamping after a maximum depth value is not really optimal because whatever

157
00:10:01.801 --> 00:10:02.970
number you put in there,

158
00:10:02.971 --> 00:10:07.320
the higher order bounces are going to be completely omitted.

159
00:10:07.740 --> 00:10:11.220
Now there is a solution would be Russian roulette pass termination,

160
00:10:11.490 --> 00:10:16.490
which we fortunately also have after depth of an arbitrary number like five.

161
00:10:17.521 --> 00:10:22.020
You start to Russian roulette routine which basically says there is a

162
00:10:22.050 --> 00:10:27.050
probability for stopping the light path right there and we generate a random

163
00:10:27.421 --> 00:10:29.550
number and compare to this probability.

164
00:10:29.610 --> 00:10:33.780
If we don't hit this probability then we will continue our path but we will

165
00:10:33.810 --> 00:10:38.810
multiply the output and the contribution of this light path by this given number

166
00:10:39.191 --> 00:10:41.790
that we have specified in one of the previous lectures.

167
00:10:42.030 --> 00:10:45.600
So this was implemented by Christie and Maha check and kind thanks

168
00:10:53.200 --> 00:10:57.310
and you can see that later we are going to use this rr factor in order to

169
00:10:57.340 --> 00:11:00.040
multiply the contribution of array later.

170
00:11:03.560 --> 00:11:05.660
Now what about the intersection routine?

171
00:11:05.690 --> 00:11:10.160
This is definitely not the best way to do it but it's sure as hell the easiest

172
00:11:10.161 --> 00:11:10.994
way to do it.

173
00:11:11.180 --> 00:11:15.650
We specify this tea which is going to be the intersection distance,

174
00:11:15.950 --> 00:11:20.450
how far we are from the start of the rea and how far is this intersection

175
00:11:20.451 --> 00:11:21.230
exactly.

176
00:11:21.230 --> 00:11:25.700
Id is basically which object did we hit and then we iterate through all of the

177
00:11:25.701 --> 00:11:29.720
objects in the scene and what we are interested in is calling the intersection

178
00:11:29.721 --> 00:11:30.200
routine.

179
00:11:30.200 --> 00:11:35.200
This will return a t how far is the intersection and what I am interested in an

180
00:11:35.631 --> 00:11:38.660
intersection that is the smallest number.

181
00:11:38.840 --> 00:11:43.200
This means the closest intersection and also something that is larger than

182
00:11:43.240 --> 00:11:47.810
epsilon because if I would tolerate zero then this would mean that self

183
00:11:47.811 --> 00:11:50.390
intersections are accepted.
Therefore,

184
00:11:50.420 --> 00:11:55.060
every single object that I am on is going to be the first intersection.

185
00:11:55.061 --> 00:11:57.580
I'm not interested in this.
I know where I am.

186
00:11:57.610 --> 00:12:00.940
I just want to know where I am continuing my path.

187
00:12:01.300 --> 00:12:05.050
If there's no intersection then we return.
There is zero contribution.

188
00:12:06.770 --> 00:12:07.603
<v 1>Okay.</v>

189
00:12:07.730 --> 00:12:10.110
<v 0>Why is the intersection in world space?</v>

190
00:12:10.590 --> 00:12:15.590
We did notice by HP this means heat point and where we have started array,

191
00:12:15.900 --> 00:12:20.820
we traveled along the direction of the rea with this tea amount where the

192
00:12:20.821 --> 00:12:21.780
intersection is,

193
00:12:21.900 --> 00:12:26.900
so this is where we ended up and the origin of the new ray is going to be dis

194
00:12:26.971 --> 00:12:29.970
hit point.
What is the normal going to be?
Well,

195
00:12:29.971 --> 00:12:34.050
we just grabbed the object that we intersected and we are taking the normal with

196
00:12:34.051 --> 00:12:37.140
the given function.
What is the return radiants?

197
00:12:37.200 --> 00:12:39.420
We simply add the emission term.

198
00:12:39.480 --> 00:12:43.560
This is the emission term and all three wavelengths.
There is a magic multiplier.

199
00:12:43.561 --> 00:12:48.561
Disregard that and then we continue evaluating the second part of the rendering

200
00:12:48.661 --> 00:12:49.081
equation.

201
00:12:49.081 --> 00:12:52.980
The first part is the emission and the second is the reflected amount of light.

202
00:12:56.820 --> 00:12:59.640
Let's continue with the inside of the trace function.

203
00:12:59.970 --> 00:13:04.440
If we hit an object with a type of one,
then this is a diffuse BRDF.

204
00:13:04.680 --> 00:13:09.060
The next functions compute the next random number for the low discrepancy halt

205
00:13:09.061 --> 00:13:14.061
on sampler and the direction is going to be a random sample in the hemisphere,

206
00:13:14.970 --> 00:13:19.080
a completely uniform random sample in the hemisphere of the subject.

207
00:13:19.230 --> 00:13:24.150
What we have here is this end plus the hemisphere function.
This is intuition.

208
00:13:24.180 --> 00:13:26.100
This is not exactly what is happening.

209
00:13:26.130 --> 00:13:30.750
I've just shortened the code slightly in order to simplify what is going on
here.

210
00:13:31.140 --> 00:13:35.190
The code that you will download,
we'll have the real deal in there.
Now.

211
00:13:35.430 --> 00:13:38.640
Then we compute the cosign term very straightforward.

212
00:13:38.700 --> 00:13:43.700
And on the TMP we are going to instantiate a new vector and this is going to

213
00:13:44.161 --> 00:13:45.660
hold the recursion.

214
00:13:45.690 --> 00:13:50.010
So the subsequent samples that we shoot out from the hemisphere are going to be

215
00:13:50.011 --> 00:13:54.600
added and added to this TMP.
Now is the time for recursion.

216
00:13:55.110 --> 00:14:00.000
We passed the ray and the scene to the trace function.
The Ray is actually not,

217
00:14:00.001 --> 00:14:01.650
the current one is the new one.

218
00:14:02.040 --> 00:14:06.120
So basically we set up the new hip point and the new direction of the deray and

219
00:14:06.121 --> 00:14:08.790
this is what we are going to pass to the trace function.

220
00:14:08.820 --> 00:14:12.420
We increment the depth variable because we have computed a bounce.

221
00:14:12.480 --> 00:14:17.480
The TMP is going to be a variable where we get her oldest radiants and we put

222
00:14:17.610 --> 00:14:21.120
every other parameter that is needed to compute one more balance.

223
00:14:21.780 --> 00:14:26.780
Now the color is going to contain the cosign term and all this radiance that is

224
00:14:27.151 --> 00:14:32.010
collected from the recursion and we multiply it with the cl that x,
Y,
Z,

225
00:14:32.011 --> 00:14:33.810
which is basically the BRDF.

226
00:14:34.590 --> 00:14:38.820
So this is the right side of the equation for a diffuse BRDF.

227
00:14:39.300 --> 00:14:42.900
This is multiplied by oh 0.1 this is just a magic constant.

228
00:14:46.440 --> 00:14:51.240
Now what about a specular BRDF?
What if we hit the mirror?
Well,
very simple.

229
00:14:51.470 --> 00:14:54.140
We compute the perfect reflection direction.

230
00:14:54.141 --> 00:14:59.141
You can see the rate dot t and we again set up this variable to collect the

231
00:14:59.391 --> 00:15:02.780
radiants in there and we are not doing anything.

232
00:15:02.781 --> 00:15:06.680
We are just going to add the radiants as we get reflected off of this mirror.

233
00:15:06.980 --> 00:15:11.870
Then we are going to compute subsequent bounces and this is going to be stored

234
00:15:11.871 --> 00:15:16.190
on this DMP.
So this is what we're going to add to this radiance.

235
00:15:18.760 --> 00:15:21.350
And what about the refractive material?
Well,

236
00:15:21.440 --> 00:15:26.440
we have every bit of knowledge that we need for this because essentially this is

237
00:15:28.070 --> 00:15:32.690
the vector version of snails law.
What does it mean?
Well,

238
00:15:32.930 --> 00:15:36.650
the origin was last law that we have computed is in one day.

239
00:15:37.220 --> 00:15:39.440
So it only gives you one angle.

240
00:15:39.560 --> 00:15:43.250
But if you're in three d you are interested in angles in two different

241
00:15:43.251 --> 00:15:44.084
dimensions.

242
00:15:44.120 --> 00:15:49.120
This is nothing but the extension of the very same law into higher dimension.

243
00:15:51.440 --> 00:15:53.060
Now where is this implemented exactly?

244
00:15:53.061 --> 00:15:58.061
You can see the cosign of data to note that n one and n two is considered

245
00:15:58.761 --> 00:16:03.500
differently because one of these media is always going to be air.

246
00:16:03.980 --> 00:16:07.640
Therefore one of the indices of refraction is always going to be one.

247
00:16:08.630 --> 00:16:13.630
The rest is just copy paste and again you can see that the square root is

248
00:16:14.371 --> 00:16:19.371
missing and we are going to postpone this after the test of cosign t too because

249
00:16:20.460 --> 00:16:25.170
if it is actually not larger than zero then we are not going to need this

250
00:16:25.171 --> 00:16:29.100
variable at all.
Therefore we can postpone this after the test.
Again,

251
00:16:34.800 --> 00:16:36.690
what about the direction of the outgoing gray?

252
00:16:36.750 --> 00:16:40.110
While this is just copy paste from the formula that we have their eyes before.

253
00:16:40.170 --> 00:16:41.790
So simple as that.

254
00:16:42.150 --> 00:16:47.150
Obviously we again need dairy corrosion because if we go inside a glass sphere

255
00:16:48.750 --> 00:16:51.270
than we are going to compute the refraction.

256
00:16:51.420 --> 00:16:54.540
So we are going to be inside of the sphere.
What does it mean?

257
00:16:54.570 --> 00:16:59.220
One that we have to invert a normal because we are inside so the normals are

258
00:16:59.221 --> 00:17:04.221
flipped and again we need to compute the trace function which is direct action.

259
00:17:04.231 --> 00:17:07.320
So we are also interested in the higher order bounces

260
00:17:08.870 --> 00:17:10.700
on the worst to Frennels law.

261
00:17:11.060 --> 00:17:15.920
What is the probability of reflection and refraction when rays are bouncing off

262
00:17:15.980 --> 00:17:20.270
in different directions in different angles off of refractive surfaces

263
00:17:20.480 --> 00:17:25.220
implemented by Christiane Hoffner.
So a big thanks for him.
It is very simple.

264
00:17:25.221 --> 00:17:29.420
You can see that it is exactly the same as what we have learned in mathematics.

265
00:17:29.421 --> 00:17:30.950
So this is the zero term.

266
00:17:30.951 --> 00:17:35.840
This is the probability of reflection in normal incidents and we are interested

267
00:17:35.841 --> 00:17:40.220
in the square of that and note that you don't see the n one and then two.

268
00:17:40.460 --> 00:17:44.330
This is because one of them is always going to be air or vacuum.

269
00:17:44.360 --> 00:17:47.270
So it is going to have the index of refraction of war.

270
00:17:48.490 --> 00:17:50.400
Now what about final probability

271
00:17:50.400 --> 00:17:53.700
<v 1>of reflection?
It is also coming from the formula.</v>

272
00:17:53.701 --> 00:17:55.920
We have every bit of information we need.

273
00:17:56.100 --> 00:18:00.840
So we just put in there this term with the cosign attenuation.

274
00:18:02.070 --> 00:18:04.230
How does the main function look like?
Well,

275
00:18:04.231 --> 00:18:09.231
we have some wizardry with c plus plus 11 lambda functions,

276
00:18:09.870 --> 00:18:14.870
but basically this is just a shortcut in order to be able to add a new sphere or

277
00:18:15.661 --> 00:18:18.300
a new plane to the scene.
In one line of code,

278
00:18:18.600 --> 00:18:22.230
spheres are given by their radius position color.

279
00:18:22.260 --> 00:18:24.510
By color we obviously mean lb.

280
00:18:24.650 --> 00:18:29.390
Those emission and type type means what kind of Brd of,
we have a diffuse,

281
00:18:29.391 --> 00:18:31.980
a specular or f refractive BRDF.

282
00:18:32.820 --> 00:18:37.310
Now for planes we have position,
normal color emission and obviously types.

283
00:18:37.400 --> 00:18:41.250
So what kind of material we have.
So using just one line of code,

284
00:18:41.400 --> 00:18:44.160
you can add a new object and specify everything,

285
00:18:44.250 --> 00:18:46.230
every information that you would need to it.

286
00:18:47.100 --> 00:18:52.100
Now we also add the light source and we specify the index of refraction for the

287
00:18:52.441 --> 00:18:57.441
refractive brds and we also specify how many samples per pixel would we like to

288
00:18:57.841 --> 00:18:58.674
compute.

289
00:19:01.610 --> 00:19:02.930
<v 0>Onwards to the main loop,</v>

290
00:19:03.260 --> 00:19:08.260
we have two four loops that iterate through the width and the height of the

291
00:19:08.721 --> 00:19:12.260
image plane.
Now vector see is color.

292
00:19:12.350 --> 00:19:17.060
It's again very sloppy.
What it means is actually the gradients that we compute,

293
00:19:17.300 --> 00:19:20.960
we instantiate array.
What is going to be the origin of the [inaudible].

294
00:19:21.200 --> 00:19:25.460
This is going to be zero,
zero,
zero,
so this is where the camera is placed.

295
00:19:26.300 --> 00:19:28.370
What is going to be the direction of the Ray.

296
00:19:28.430 --> 00:19:33.430
While we connect this way to the camera plane and we specify which pixel we are

297
00:19:33.441 --> 00:19:38.441
computing with I and J and then we add this weird random number to it.

298
00:19:39.050 --> 00:19:43.550
Now what this means is actually filtering in recursive ray tracing.

299
00:19:43.551 --> 00:19:48.551
What you would do is you would only send the ray through the midpoint of a pixel

300
00:19:49.550 --> 00:19:54.380
and that's it.
You would compute one sample per pixel in Monte Carlo Path,

301
00:19:54.381 --> 00:19:59.000
tracing your computing many samples per pixel and they don't have to go through

302
00:19:59.001 --> 00:20:00.290
the midpoint of the Pixel.

303
00:20:00.290 --> 00:20:05.290
You would sample the area of the Pixel and this gives you anti aliasing effects

304
00:20:06.050 --> 00:20:08.030
for free if you use it correctly.

305
00:20:09.410 --> 00:20:11.370
What is going to be the direction of Deray?

306
00:20:11.460 --> 00:20:14.960
This is again the same a minus B.

307
00:20:14.960 --> 00:20:18.470
The B is the origin of deray and a is the camera coordinates.

308
00:20:18.471 --> 00:20:23.240
So what does it mean that it is pointing from zero to the camera plate and we

309
00:20:23.241 --> 00:20:26.600
normalize this expression to have array of unit length.

310
00:20:27.170 --> 00:20:29.600
Now we obviously called the trace function.

311
00:20:29.900 --> 00:20:34.670
The number of bounces is zero and we pass every information that needs to be

312
00:20:34.671 --> 00:20:36.650
known in order to compute these bounces,

313
00:20:36.890 --> 00:20:40.700
so we provide this initial ray and the scene and everything else.

314
00:20:40.760 --> 00:20:45.410
Obviously we also passed the C and this is going to collect all the radiance

315
00:20:45.440 --> 00:20:50.440
there is in the subsequent and then after this recursion is done.

316
00:20:51.040 --> 00:20:53.080
We deposit all this energy,

317
00:20:53.110 --> 00:20:57.970
oldest radiants to the individual pixels and then we divide by the number of

318
00:20:57.971 --> 00:21:00.640
samples because if we wouldn't do this,

319
00:21:00.700 --> 00:21:05.500
then you remember the one over n multiplier everywhere in Monte Carlo

320
00:21:05.501 --> 00:21:08.980
integration.
If you wouldn't do this,
then the more samples you compute,

321
00:21:09.190 --> 00:21:12.460
the brighter image you would get and this is obviously not what we're looking

322
00:21:12.461 --> 00:21:13.294
for.

323
00:21:40.420 --> 00:21:42.820
At the very end we create a file.

324
00:21:42.850 --> 00:21:47.280
This is the ppm file format where you can easily write all your contributions in

325
00:21:47.281 --> 00:21:47.860
terror.

326
00:21:47.860 --> 00:21:52.570
We also start a stopwatch in order to measure how long we have been tracing.

327
00:21:52.571 --> 00:21:56.800
All these rays,
so very simple,
very trivial,
and when we are done,

328
00:21:56.830 --> 00:21:57.880
we close the file.

329
00:21:58.540 --> 00:22:02.680
It has the image in there and we done right how long the rendering algorithm has

330
00:22:02.681 --> 00:22:03.514
been running for.

331
00:22:05.220 --> 00:22:06.050
<v 1>Okay.</v>

332
00:22:06.050 --> 00:22:08.270
<v 0>And basically that's it.
That's it.</v>

333
00:22:08.271 --> 00:22:13.271
This is effectively 250 lines of code that can compute indirect illumination

334
00:22:13.670 --> 00:22:17.120
cost takes and every global illumination effect.

335
00:22:18.530 --> 00:22:20.780
And it can compute images like this.

336
00:22:20.810 --> 00:22:25.070
This is one student submission from previous years.
Absolutely gorgeous.

337
00:22:25.130 --> 00:22:28.430
This is the fixed version of small paint where there are no errors in the

338
00:22:28.431 --> 00:22:33.010
sampling.
Another one from Mechelle Comma,

339
00:22:34.180 --> 00:22:35.440
this actually it looks like,

340
00:22:35.441 --> 00:22:39.340
I don't know if you are into the music band boards of Canada,

341
00:22:39.370 --> 00:22:44.260
but this looks exactly like one of their album covers.
Love it.
Really cool.

342
00:22:46.880 --> 00:22:50.960
And also Sierpinski triangle triangles from Christiana Kasla.

343
00:22:52.790 --> 00:22:53.623
<v 1>Okay.</v>

344
00:22:53.980 --> 00:22:58.360
<v 0>You can find the link for the code in there and take a crack at it.</v>

345
00:22:58.450 --> 00:23:03.040
Just try it.
Build different scenes,
try to understand what is going on in there.

346
00:23:03.240 --> 00:23:04.810
Try to mess the code up.

347
00:23:05.200 --> 00:23:09.130
I wonder what happens if I would not normalize this factor.
Play with it.

348
00:23:09.250 --> 00:23:11.950
It's a really small,
concise,

349
00:23:12.070 --> 00:23:14.620
and really understandable path tracer.

350
00:23:16.150 --> 00:23:18.640
So take your time and play with it.

351
00:23:18.760 --> 00:23:22.540
It's lots of fun and you can create lots of beautiful,

352
00:23:22.660 --> 00:23:26.410
beautiful images with global illumination.
Thank you.

