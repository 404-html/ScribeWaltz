WEBVTT

1
00:00:00.600 --> 00:00:02.820
Okay,
let's continue with even more good stuff.

2
00:00:03.120 --> 00:00:08.120
Metropolis slide transport straight from 97 the key idea is to seek the light.

3
00:00:08.610 --> 00:00:13.350
This is the thing that I always hear from the artists who use the algorithm.

4
00:00:13.980 --> 00:00:18.780
What we are trying to do is sampling brighter light paths more often than darker

5
00:00:18.781 --> 00:00:23.460
light paths.
That's it.
That's the basic principle.
That's what we're trying to do.

6
00:00:24.390 --> 00:00:28.950
And educated people would immediately say that,
hey,

7
00:00:28.951 --> 00:00:33.210
but isn't this what we have been talking about at important sampling?

8
00:00:33.990 --> 00:00:38.730
Isn't this conflicting with important sampling?
What is important sampling?
Well,

9
00:00:38.731 --> 00:00:42.750
it means that if I have,
for instance,
a glossy reflection,

10
00:00:42.840 --> 00:00:44.040
a glossy BRDF,

11
00:00:47.550 --> 00:00:51.570
which has a really high probability of sending grace out in the perfect

12
00:00:51.571 --> 00:00:55.410
reflection direction,
so almost like a mirror with a high probability,

13
00:00:55.411 --> 00:00:56.730
it would behave like a mirror.

14
00:00:57.240 --> 00:01:01.830
That I would like to have a high probability of actually sampling that light
path

15
00:01:04.410 --> 00:01:07.500
proportional to the shape of the BRDF.

16
00:01:07.800 --> 00:01:10.770
And this we can do through important sampling.
Okay?

17
00:01:11.310 --> 00:01:16.310
But imagine a case where you would have a glossary of flection covered from

18
00:01:17.011 --> 00:01:19.350
almost every direction by black bodies.

19
00:01:20.160 --> 00:01:25.160
So it doesn't matter if I important sample the BRDF correctly because after I

20
00:01:26.071 --> 00:01:29.940
important sample the BRDF and the light is coming to the next bounce,

21
00:01:29.941 --> 00:01:34.140
it's it's always going to hit a black body and it's going to be absorbed.

22
00:01:34.560 --> 00:01:37.320
I'm never going to continue my lap light path afterwards.

23
00:01:37.590 --> 00:01:40.790
So even though I would important sample these,

24
00:01:41.370 --> 00:01:42.930
this one bounce,

25
00:01:43.830 --> 00:01:48.570
I am not important sampling along the whole path because I have important

26
00:01:48.571 --> 00:01:51.090
sample.
This one bounce correctly,

27
00:01:51.480 --> 00:01:55.530
but I didn't know that globally I'm just heading to a region that's really dark.

28
00:01:56.190 --> 00:02:01.020
And what metropolis like transport gives you is something that is not really

29
00:02:01.021 --> 00:02:01.651
referred to,

30
00:02:01.651 --> 00:02:06.030
but I like to call it multi bounds important sampling.

31
00:02:06.390 --> 00:02:11.390
So it may take suboptimal decisions and it may send out rays in a direction that

32
00:02:13.171 --> 00:02:18.171
is not so likely for your BRDF if it knows that it's going to end up being a

33
00:02:19.531 --> 00:02:21.840
bright light path.
So for instance,

34
00:02:21.870 --> 00:02:26.870
if you have a glossy into reflection that would be mostly sending grace out in

35
00:02:27.781 --> 00:02:32.400
this direction,
but there is complete darkness in there,
then it would,
it would,

36
00:02:32.401 --> 00:02:36.720
well it will do is it would actually send more race towards the light source,

37
00:02:36.721 --> 00:02:40.860
which looks like a suboptimal decision in their in depth BRDF.

38
00:02:41.220 --> 00:02:44.910
But over the whole light path that is actually going to be something,
right?

39
00:02:46.770 --> 00:02:49.830
So this is the key idea behind Metropoulos light transport.

40
00:02:49.980 --> 00:02:52.800
And I'd like to give you an intuitive example of that.

41
00:02:54.600 --> 00:02:55.030
<v 1>Okay.</v>

42
00:02:55.030 --> 00:02:56.560
<v 0>So imagine that</v>

43
00:02:58.530 --> 00:03:03.530
you have the camera in this room in the scene and you have a light source only

44
00:03:04.751 --> 00:03:07.810
in the only in the adjacent room in the next room.

45
00:03:09.070 --> 00:03:14.070
And this next room is separated by a wall and the door that is slightly ajar.

46
00:03:14.380 --> 00:03:19.380
So it is just opened just a bit and all the light that you see is coming through

47
00:03:20.441 --> 00:03:21.274
that door.

48
00:03:21.790 --> 00:03:26.500
And if you imagine for an hour naive path tracing,
what am I doing?

49
00:03:26.650 --> 00:03:28.900
I am sending already through the first

50
00:03:30.430 --> 00:03:35.430
big salt and I'm going to bounce it around the scene and it is very likely that

51
00:03:35.591 --> 00:03:39.310
I will never find the light source and I cannot even connect to the light
source.

52
00:03:39.311 --> 00:03:40.180
It's in the other room.

53
00:03:40.181 --> 00:03:45.181
I'm going to hit the wall or the door and imagined that I'm computing thousands

54
00:03:46.420 --> 00:03:51.420
and thousands of samples and I finally get to hit the light path that is

55
00:03:52.931 --> 00:03:57.160
actually connectable to our light source.
If we are doing park racing,

56
00:03:57.161 --> 00:03:59.140
you can imagine that I'm starting from here.

57
00:03:59.530 --> 00:04:02.670
If you take a look at the Arrow in there,
it's a,

58
00:04:02.680 --> 00:04:06.820
it gives you the intuition that maybe we are doing light tracing,

59
00:04:06.821 --> 00:04:11.680
we are shooting light rays of light from the light source and the finally get

60
00:04:11.681 --> 00:04:13.740
into this room and hit the camera.

61
00:04:13.741 --> 00:04:18.370
There's finally a good connection after thousands and thousands of samples.

62
00:04:18.400 --> 00:04:23.400
I finally have one contribution before that zero zero one zero zero zero and my

63
00:04:23.471 --> 00:04:28.270
CPU is basically dying on 100% load.
Nothing gets out of debt.

64
00:04:28.720 --> 00:04:32.980
Now imagine that I finally found the light path that makes sense,

65
00:04:33.190 --> 00:04:37.690
that has a contribution and then I would suddenly forget about the whole thing

66
00:04:37.720 --> 00:04:42.720
and I would again start sampling completely random light paths and get the zero,

67
00:04:42.821 --> 00:04:43.750
zero,
zero again.

68
00:04:46.560 --> 00:04:48.850
Now it would be a crime to do that wouldn't it?

69
00:04:49.660 --> 00:04:54.660
What metropolis is doing is essentially trying to remember which are the parts

70
00:04:55.660 --> 00:05:00.130
that makes sense and if they find something like that they are going to explore

71
00:05:00.131 --> 00:05:05.131
nearby so they are not going to shoot out a completely random sample for the

72
00:05:06.101 --> 00:05:09.820
next sample.
It's going to take this one sample that made sense.

73
00:05:09.821 --> 00:05:14.821
Finally a connection and then it's going to add very small perturbations to this

74
00:05:15.761 --> 00:05:16.594
slide path.

75
00:05:16.870 --> 00:05:21.870
What if I showed this in an angle that's just a bit changed and what you can

76
00:05:23.380 --> 00:05:27.060
expect is that most of the time it will give you again,

77
00:05:27.070 --> 00:05:30.490
some amount of contribution and you don't have to start from scratch.

78
00:05:32.080 --> 00:05:37.080
So basically you can use all of these knowledge into your advantage.

79
00:05:37.900 --> 00:05:40.150
How does the difference look like?
Well,

80
00:05:40.240 --> 00:05:45.240
this is the scene with bi-directional path tracing after 40 samples per pixel

81
00:05:46.840 --> 00:05:48.100
and now if you look closely,

82
00:05:48.101 --> 00:05:51.760
you will see Metropoulos after the very same number of samples per pixel.

83
00:05:51.880 --> 00:05:56.880
So this is by directional path tracing and now metropole is the same number of

84
00:05:57.141 --> 00:06:00.920
samples.
So if you take this knowledge into account,

85
00:06:02.420 --> 00:06:04.970
most of your samples are going to be useful.

86
00:06:05.390 --> 00:06:09.950
Just another look better action apart racing metropole this and viral action

87
00:06:09.980 --> 00:06:14.110
there was already a good algorithm.
It's not a nice path tracer,
it's,

88
00:06:14.230 --> 00:06:17.240
it's a good algorithm and now youth pathways and will be even worse.

89
00:06:18.880 --> 00:06:23.880
Not for example some Nice volumetric caustics with my youth part racing and an

90
00:06:24.601 --> 00:06:27.690
equal time comparison with metropolis light transport.

91
00:06:30.690 --> 00:06:35.310
How does it work?
Exactly?
Mathematical details,
but just enough,

92
00:06:35.430 --> 00:06:37.380
just enough to understand the intuition.

93
00:06:37.950 --> 00:06:41.910
What we are trying to do is important sampling.
What does it mean?

94
00:06:42.330 --> 00:06:47.330
It means that I am computing this great samples of f over p f is the function

95
00:06:48.451 --> 00:06:51.570
that I would like to integrate.
P is a sampling distribution.

96
00:06:52.020 --> 00:06:56.640
What I'm looking for is to match the blue lines with the green bars.

97
00:06:56.641 --> 00:07:01.290
If you remember.
So it means that if the function is large summer,

98
00:07:01.291 --> 00:07:05.520
it means that the image is sprite somewhere or the path,

99
00:07:05.521 --> 00:07:09.750
the space is bright somewhere,
then I would like to put more samples in there.

100
00:07:09.751 --> 00:07:12.630
So if f is larger than PE,
should also be large.

101
00:07:12.960 --> 00:07:17.800
This is what I'm trying to achieve.
Now how do I actually do this?

102
00:07:18.100 --> 00:07:21.190
I have some high dimensional function

103
00:07:23.740 --> 00:07:27.580
or if I'm doing locally important something,
then I have a BRDF function.

104
00:07:28.180 --> 00:07:30.370
How do I important sample this?

105
00:07:30.850 --> 00:07:33.670
The trivial solution is called rejection sampling.

106
00:07:36.850 --> 00:07:40.300
Basically what it means is that I would like to compute,

107
00:07:43.990 --> 00:07:47.030
uh,
samples from a sampling distribution.

108
00:07:47.210 --> 00:07:51.290
So here you see something that is like almost a Gaussian.

109
00:07:51.950 --> 00:07:56.950
But imagine that I cannot generate samples out of this function because what do

110
00:07:58.221 --> 00:08:03.080
I have in my c plus plus code?
Well,
I can generate uniform random numbers,

111
00:08:03.081 --> 00:08:06.470
but this function is not uniform random numbers.

112
00:08:06.920 --> 00:08:11.920
So what I can do is I can sample an arbitrary distribution function.

113
00:08:14.900 --> 00:08:19.900
If I end close it in a box and I throw completely uniform random samples on this

114
00:08:21.231 --> 00:08:21.651
box.

115
00:08:21.651 --> 00:08:26.651
So it is almost like drawing your function on a sheet of paper and throwing

116
00:08:26.781 --> 00:08:31.580
random samples at it.
Now,
I cannot generate random samples out of this function,

117
00:08:31.581 --> 00:08:36.581
but I can generate random uniformly distributed samples and the scheme is very

118
00:08:37.401 --> 00:08:39.650
simple.
If it is under the function,

119
00:08:39.740 --> 00:08:44.390
I'm going to take this sample and pretend that I've generated that sample in the

120
00:08:44.391 --> 00:08:47.960
first place.
And if it's out there,
I'm just going to kick it out.

121
00:08:48.500 --> 00:08:52.940
So if I do this,
I will have samples according to this almost Garcia.

122
00:08:56.380 --> 00:08:59.140
This works well,
but this is not what we are doing in practice.

123
00:08:59.170 --> 00:09:04.170
This is very inefficient and hopefully you can see from the image why this is an

124
00:09:04.481 --> 00:09:08.260
inefficient technique to do so someone please raise your hand and help me out

125
00:09:08.410 --> 00:09:09.700
why this is not efficient.

126
00:09:17.270 --> 00:09:21.380
Okay,
that's true.
Thanks.
So there's palm soft rejected samples.

127
00:09:21.560 --> 00:09:26.300
Most of my uniformly generated random numbers are completely wasted again.

128
00:09:26.510 --> 00:09:30.110
So there must be some technique that's better than this,

129
00:09:31.630 --> 00:09:32.560
where that is,

130
00:09:32.620 --> 00:09:36.850
but I guarantee that it's not going to make you any happier when you see how it

131
00:09:36.851 --> 00:09:37.684
is done.

132
00:09:38.210 --> 00:09:38.600
<v 1>Okay?</v>

133
00:09:38.600 --> 00:09:40.040
<v 0>So there's lots of rejection.</v>

134
00:09:40.610 --> 00:09:44.490
There's lots of rejections and this can be analytically,

135
00:09:44.510 --> 00:09:48.800
this problem can almost always be analytical assault by a technique called the

136
00:09:48.801 --> 00:09:52.270
inverse transform sampling or the Smirnoff transform.

137
00:09:54.480 --> 00:09:55.800
And this takes a bit of work,

138
00:09:55.801 --> 00:10:00.060
but I'll just briefly show you how it works and if you are really interested in

139
00:10:00.061 --> 00:10:02.640
the details done,
please take a look at this document,

140
00:10:06.840 --> 00:10:08.150
Sasha.
You what you have to do,

141
00:10:09.020 --> 00:10:13.700
you have to do all of these calculations and then you will have your sampling

142
00:10:13.701 --> 00:10:18.530
distribution.
Okay,
what do we have at the end?
Let's start with the intuition.

143
00:10:19.360 --> 00:10:19.650
<v 1>Okay?</v>

144
00:10:19.650 --> 00:10:23.370
<v 0>We have uniformly generated random numbers.</v>

145
00:10:23.400 --> 00:10:28.400
This is the [inaudible] at the end and I want to do some transform to these

146
00:10:28.651 --> 00:10:31.500
numbers in order to get an arbitrary sampling distribution.

147
00:10:32.340 --> 00:10:37.340
And what they are essentially doing is you have a probability distribution

148
00:10:38.461 --> 00:10:40.380
function you want to sample from that.

149
00:10:40.680 --> 00:10:44.790
It can be like a porcelain distribution and exponential distribution or some

150
00:10:44.791 --> 00:10:49.380
custom BRDF.
And if you integrate the PDF,

151
00:10:49.381 --> 00:10:50.910
you're going to have a CDF.

152
00:10:50.940 --> 00:10:54.060
So you integrate the probability distribution function,

153
00:10:54.210 --> 00:10:58.650
you will get a cumulative distribution function and this can help you in this

154
00:10:58.651 --> 00:11:00.810
transformation from uniform.

155
00:11:00.811 --> 00:11:03.900
He generated random numbers to the actual function.

156
00:11:05.500 --> 00:11:05.700
<v 1>Okay.</v>

157
00:11:05.700 --> 00:11:07.560
<v 0>Now this is very intimidating,
isn't it?</v>

158
00:11:09.790 --> 00:11:14.170
Imagine that whenever you come up with a new BRDF or any kind of function that

159
00:11:14.171 --> 00:11:17.560
you would like to sample,
you would have to compute all this.

160
00:11:18.340 --> 00:11:18.600
<v 1>Yeah.</v>

161
00:11:18.600 --> 00:11:22.650
<v 0>And not only that,
we were doing this for Brd F's.</v>

162
00:11:22.680 --> 00:11:25.980
So I can important sample one bounce.
Again,

163
00:11:26.040 --> 00:11:29.940
I emphasize that it means that if I hit the hit the table,

164
00:11:30.420 --> 00:11:32.100
I locally know what are the good,

165
00:11:32.130 --> 00:11:34.770
outgoing directions because of the material model.

166
00:11:35.160 --> 00:11:39.030
But it doesn't mean that it's globally a good idea because may maybe this

167
00:11:39.031 --> 00:11:42.960
completely black curtain next to it,
which I'm going to hit,

168
00:11:43.140 --> 00:11:45.270
and all of the energy is going to be absorbed.

169
00:11:47.220 --> 00:11:51.420
What does Metropoulos give us a solution to this?
So it's,

170
00:11:51.570 --> 00:11:54.960
it's important to sampling not only for one BRDF,

171
00:11:55.210 --> 00:11:57.580
not only for all possible brds,

172
00:11:58.000 --> 00:12:03.000
but an optimal important sampling along the whole path.

173
00:12:03.850 --> 00:12:08.850
So this means that it will know that if there is a path that is 15 bounce long

174
00:12:10.510 --> 00:12:14.800
but it hits something that is really bright and it transfers a lot of energy,

175
00:12:15.010 --> 00:12:20.010
it will know that I will need to sample this slide path and nearby and it is not

176
00:12:20.381 --> 00:12:24.910
going to trace many race towards the shadow regions.

177
00:12:25.720 --> 00:12:27.070
How does it work?
Again,

178
00:12:27.100 --> 00:12:32.100
intuitively it runs a Markov chain process and there is four Markov chains.

179
00:12:35.050 --> 00:12:36.970
There is a study state distribution.

180
00:12:37.240 --> 00:12:40.750
This means that we have been running the mark of chain for a while.

181
00:12:41.140 --> 00:12:46.140
And if you do that then it promises you optimal important sampling for any kind

182
00:12:46.181 --> 00:12:48.040
of function without doing anything.

183
00:12:49.600 --> 00:12:54.600
And I hope that it is understandable how really amazing this is because it is

184
00:12:55.810 --> 00:13:00.810
actually a simple sampling scheme that you can write down the pseudo code in

185
00:13:01.931 --> 00:13:06.040
five or six lines and and it gives you optimal important sampling.

186
00:13:06.340 --> 00:13:10.570
So this is really amazing and I emphasize again that this is over multiple

187
00:13:10.571 --> 00:13:13.540
bounces,
not important,
something won't be RDF,

188
00:13:13.780 --> 00:13:15.910
but over whole light paths

189
00:13:17.770 --> 00:13:21.760
there are different different variants of metropolis,
light transport.

190
00:13:22.300 --> 00:13:24.910
The original is the beach type Metropoulos.

191
00:13:24.940 --> 00:13:29.740
This is the one that was published in [inaudible] 97 it is a great algorithm.

192
00:13:29.950 --> 00:13:32.320
It has different mutations strategies.

193
00:13:32.321 --> 00:13:36.670
It means that it has different strategies of changing the current light path

194
00:13:36.700 --> 00:13:40.660
into a new one in a smart way and not random me.

195
00:13:41.920 --> 00:13:45.790
The problem is that almost no one in the world can implement it correctly.

196
00:13:46.030 --> 00:13:50.500
So it was published in [inaudible] 97 and the first viable implementation that

197
00:13:50.501 --> 00:13:55.501
came out was in the mid to bartender implemented by Vantaa Jaco and it was

198
00:13:56.111 --> 00:14:00.550
around I think 2010 so just a few years ago.

199
00:14:01.850 --> 00:14:02.230
Metro.

200
00:14:02.230 --> 00:14:07.090
I've got the original metropole is slide transport also attributed to Eric
Niche.

201
00:14:07.210 --> 00:14:09.040
No one in the world could implement it.

202
00:14:09.640 --> 00:14:12.750
I honestly don't know what was going on because he published it in [inaudible]

203
00:14:12.751 --> 00:14:17.751
97 and it took the very least 13 years for the first super smart guy to

204
00:14:19.391 --> 00:14:23.020
implement correctly.
I don't know what he was doing in the meantime.

205
00:14:23.021 --> 00:14:28.021
Maybe he was laughing on humanity that no one is smart enough to to deal with

206
00:14:28.751 --> 00:14:32.230
this and maybe we don't deserve this algorithm.
I don't know.

207
00:14:32.290 --> 00:14:36.400
It's not for the faint of heart.
It's a really difficult digress them.
Yes

208
00:14:39.070 --> 00:14:41.260
he working for Google.
That's true.
But

209
00:14:44.610 --> 00:14:48.280
after,
after the phd he did he go immediately to Google.

210
00:14:49.570 --> 00:14:53.450
So he's basically working on Edwards,

211
00:14:54.350 --> 00:14:57.710
how to get more money out of advertisements.

212
00:15:02.150 --> 00:15:06.980
It definitely pays well.
And who knows.
I mean that if Eric reaches working on it,

213
00:15:06.981 --> 00:15:11.570
that there's,
there's gonna be some good stuff in there,
I guarantee you.

214
00:15:14.210 --> 00:15:15.043
But

215
00:15:16.540 --> 00:15:20.690
I have to say that his face looked actually quite delighted when he got the

216
00:15:20.691 --> 00:15:24.440
Academy award just recently for his work.

217
00:15:24.441 --> 00:15:29.060
That was at the very least 15 years ago.
It's still used all over the industry.

218
00:15:29.180 --> 00:15:32.270
Multiple important sampling butter.
Actually the office in metropolis,

219
00:15:32.730 --> 00:15:37.700
it's all over the industry now are each style metropolis is really difficult.

220
00:15:38.060 --> 00:15:42.830
Uh,
fortunately there are also smart people at my former university,
namely,

221
00:15:43.120 --> 00:15:45.650
uh,
trouble Kellerman and lastly CMA colors.

222
00:15:46.340 --> 00:15:49.040
They came up with a simplified version of the algorithm,

223
00:15:49.220 --> 00:15:53.180
which is almost as robust,
but it's actually quite trivial to implement.

224
00:15:54.710 --> 00:15:58.610
It has also implemented in small paint.
It is called the primary sample space,

225
00:15:58.611 --> 00:15:59.444
metropolis.

226
00:15:59.690 --> 00:16:04.670
It is now implemented by one of my students from a previous year,

227
00:16:05.270 --> 00:16:09.140
uh,
rendering course and it is in small pens so you can give it a try.

228
00:16:12.180 --> 00:16:15.600
Basically it does a complicated sounding,

229
00:16:15.601 --> 00:16:20.601
but otherwise simple mapping from an infinite dimensional cube where I can

230
00:16:20.790 --> 00:16:25.790
generate infinite dimensional cube means arbitrarily long vectors of

231
00:16:27.690 --> 00:16:30.180
independent,
randomly uniform,

232
00:16:30.181 --> 00:16:34.860
random generated numbers and these random numbers are somehow transformed into

233
00:16:34.861 --> 00:16:35.694
light paths.

234
00:16:36.000 --> 00:16:40.530
So what the algorithm does is there's a probability that I am computing a

235
00:16:40.531 --> 00:16:45.531
completely new light path and if I don't have this probability then I'm going to

236
00:16:45.841 --> 00:16:50.841
stay around this light path and explore nearby what does it mean practically.

237
00:16:51.900 --> 00:16:56.160
If I find this super difficult life path from the other room to here,

238
00:16:56.580 --> 00:17:00.930
then I find a really bright light path.
The algorithm will know that,
okay,

239
00:17:01.080 --> 00:17:04.710
I'm just going to add slide perturbations to this light path.

240
00:17:04.711 --> 00:17:09.510
I'm going to stay around here and sometimes it will start to look around for

241
00:17:09.511 --> 00:17:10.500
random samples.

242
00:17:12.590 --> 00:17:15.770
There's also a visualization video on youtube.
If you take a look,

243
00:17:15.771 --> 00:17:18.260
you will immediately understand what is going on.

244
00:17:19.560 --> 00:17:20.320
<v 1>Okay.</v>

245
00:17:20.320 --> 00:17:22.540
<v 0>And some literature about these algorithms.</v>

246
00:17:23.530 --> 00:17:27.640
Now it is also a sampling scheme.

247
00:17:27.670 --> 00:17:31.630
So metropolis you can implement together with path tracing or by direction of

248
00:17:31.631 --> 00:17:36.400
path tracing.
And therefore this is also an unbiased and consistent algorithm

249
00:17:38.740 --> 00:17:43.600
and it is very robust.
It is tailored for really difficult scenes.

250
00:17:44.050 --> 00:17:47.050
So if you have a scene with a lot of occlusions,

251
00:17:47.051 --> 00:17:50.350
difficult to sample light sources,

252
00:17:50.370 --> 00:17:53.850
difficult to reach light sources,
use the metropolis.

253
00:17:54.210 --> 00:17:55.800
But if you have an easy scene,

254
00:17:55.890 --> 00:18:00.060
this is not going to give you much because the metropolis is a smart algorithm.

255
00:18:00.120 --> 00:18:04.020
It takes longer to compute one sample,
then a path tracer.

256
00:18:04.500 --> 00:18:08.280
And if this smart behavior of the algorithm,
it does not pay off,

257
00:18:08.520 --> 00:18:12.020
then there may be scenes where the metro police is actually worse than a path

258
00:18:12.021 --> 00:18:12.854
racer.

259
00:18:12.930 --> 00:18:17.740
So if you have an outdoor scene with large light sources and environment match

260
00:18:17.741 --> 00:18:22.710
that you hit all the time,
don't use Metropoulos.
It doesn't give you anything.

261
00:18:23.340 --> 00:18:28.170
Park racing would give you better results because it can dish out more samples

262
00:18:28.171 --> 00:18:31.830
per pixel because it's done and it parallelizes even better.

263
00:18:32.640 --> 00:18:33.110
<v 1>Okay.</v>

264
00:18:33.110 --> 00:18:36.290
<v 0>And only the number of samples matter in this case.</v>

265
00:18:38.450 --> 00:18:39.050
<v 1>Yeah.</v>

266
00:18:39.050 --> 00:18:43.640
<v 0>And there may be algorithms that take this into consideration.</v>

267
00:18:45.830 --> 00:18:50.330
So what if we had an algorithm that could determine if we have an easy scene or

268
00:18:50.331 --> 00:18:54.500
a difficult scene and it would use for easy scenes,
easy,

269
00:18:54.610 --> 00:18:57.530
a naive part,
racing by direction,
with path facing,

270
00:18:57.800 --> 00:19:01.910
or if there's a difficult scene,
then it would use metro police light transport.

271
00:19:02.200 --> 00:19:06.590
Now this would need an algorithm that can somehow determined whether the scene

272
00:19:06.591 --> 00:19:07.880
is easy or hard.

273
00:19:09.050 --> 00:19:13.140
And that's not trivial at all to do.
But behind this link,

274
00:19:13.141 --> 00:19:14.480
there's a work that deals with it.

275
00:19:15.080 --> 00:19:20.080
And I would also like to note that metropolis light transport is unbiased,

276
00:19:20.690 --> 00:19:24.900
but it starts out
biased.

277
00:19:24.960 --> 00:19:29.800
So what it means is that I'm running a mark of chain that will give me optimal

278
00:19:29.801 --> 00:19:33.480
important sampling,
but it,
this mark of chain also evolves in time.

279
00:19:33.540 --> 00:19:37.410
So I have to wait and wait and wait and it will get better and better

280
00:19:37.411 --> 00:19:42.090
estimations on the where the bride paths are and where the dark paths are.

281
00:19:42.840 --> 00:19:46.620
And this takes time.
This effect is what we call startup bias.

282
00:19:47.500 --> 00:19:48.040
<v 1>Okay.</v>

283
00:19:48.040 --> 00:19:52.540
<v 0>Now what do we get for it?
We'll see plenty of examples.
So for instance,</v>

284
00:19:52.570 --> 00:19:56.230
on caustics,
it's even better than by direction of past facing.

285
00:19:56.590 --> 00:19:59.920
For caustics you will get almost immediate convergence.

286
00:20:02.650 --> 00:20:05.710
Now what about this scene?
This scene was rendered with lux render.

287
00:20:07.690 --> 00:20:12.690
Here you have not glass fierce but some kind of prison materials fierce because

288
00:20:13.931 --> 00:20:18.931
you can see a pronounced the fact of this person and you can see volumetric

289
00:20:19.610 --> 00:20:20.210
caustic.

290
00:20:20.210 --> 00:20:25.000
So there is a participating media that we are in and these costs are going to be

291
00:20:25.001 --> 00:20:28.360
reflected multiple times and refracted multiple times.

292
00:20:28.630 --> 00:20:32.590
Let's say that this is a disgustingly difficult scene.

293
00:20:32.980 --> 00:20:37.780
The only light source their ears is actually this laser that comes in from the

294
00:20:37.781 --> 00:20:38.614
upper left.

295
00:20:40.390 --> 00:20:44.830
Let's try to render such a scene with the different algorithms that we have

296
00:20:44.831 --> 00:20:48.160
learned about.
Now,
if I start a path face,

297
00:20:48.161 --> 00:20:50.710
so this is what I will get after 10 minutes.

298
00:20:53.100 --> 00:20:55.200
So the highest scoring light paths,

299
00:20:55.230 --> 00:21:00.230
the bright light paths are not the greatest probability light paths and

300
00:21:00.781 --> 00:21:05.781
therefore most of the connections will be also obstructed towards the light

301
00:21:06.151 --> 00:21:10.820
source.
So it is very difficult to sample with path tracing.
Bi-Directional for,

302
00:21:10.840 --> 00:21:15.150
I think it's better,
but I mean if I get this after 10 minutes,

303
00:21:15.180 --> 00:21:19.620
I don't know how long it would take to render the actual scene and if you're on

304
00:21:19.710 --> 00:21:24.360
a tropple is it will find the light path that matter and find the ones that are

305
00:21:24.361 --> 00:21:29.040
actually needed to be sampled.
And this,
this is the sip already,

306
00:21:29.041 --> 00:21:34.041
the simplified version pssm lt and the number next to it is just the ratio of

307
00:21:35.251 --> 00:21:39.630
these small perturbations to large perturbations,

308
00:21:40.770 --> 00:21:41.640
sorry,
the opposite.

309
00:21:41.910 --> 00:21:46.320
So a large number means that most of my life paths are going to be random.

310
00:21:46.560 --> 00:21:51.560
So most of the 75% probability I'm going to do by direction apart facing 25%

311
00:21:53.430 --> 00:21:54.263
Metropoulos.

312
00:21:54.480 --> 00:21:59.480
And if I pull down this probability opening quantified that most of the time I'm

313
00:22:00.691 --> 00:22:04.020
going to do metropolis sampling,
I'm going to explore nearby.

314
00:22:04.320 --> 00:22:07.590
And you can see that this renders the scene much,
much faster.

315
00:22:10.400 --> 00:22:14.660
So this is definitely a very useful technique to have.

316
00:22:15.350 --> 00:22:18.800
Now I've done this animation just for fun.

317
00:22:20.000 --> 00:22:22.160
This is a primary sample space,

318
00:22:22.161 --> 00:22:25.760
metropolis light transport algorithm only with small mutations,

319
00:22:26.000 --> 00:22:31.000
so just very small adjustments to the light paths and this is how an image would

320
00:22:32.721 --> 00:22:37.721
converge we these small steps and you can see that the caustics converge

321
00:22:38.270 --> 00:22:41.780
ridiculously quickly.
Let's take a look at one more example.

322
00:22:47.490 --> 00:22:51.300
Take a look at this.
Most of the scene is still noisy,

323
00:22:51.510 --> 00:22:56.160
but the caustics are completely converged as we start out.

324
00:22:56.340 --> 00:22:56.761
Why?

325
00:22:56.761 --> 00:23:00.210
Because it is really bright and this is exactly what the metropolis is going to

326
00:23:00.211 --> 00:23:03.150
focus on.
So it is even better around caustics.

327
00:23:03.720 --> 00:23:08.720
Something that takes a brutal amount of samples with a normal path racer is

328
00:23:09.061 --> 00:23:13.470
going to be immediately converged with the metropolis.
So this is the first,

329
00:23:13.500 --> 00:23:18.390
I think 10 perhaps 10 minutes a friend during with the metropolis on and not so

330
00:23:18.391 --> 00:23:23.100
powerful machine.
So it seems that we have solved everything.

331
00:23:23.101 --> 00:23:25.320
We're looking good,
we got this,

332
00:23:25.710 --> 00:23:29.970
but I will show you a failure case that we actually still have problems that we

333
00:23:29.971 --> 00:23:30.804
couldn't solve.

334
00:23:31.650 --> 00:23:36.650
This is a sophisticated scene that is for some reason even harder in some sense.

335
00:23:39.390 --> 00:23:40.560
Then the previous scenes,

336
00:23:40.800 --> 00:23:44.970
and he just doesn't want to converge with the primary sample space.

337
00:23:45.660 --> 00:23:48.710
I'm just rendering and random and still fireflies.

338
00:23:48.711 --> 00:23:53.510
If I have really large,
really bright,
noisy spots,

339
00:23:53.690 --> 00:23:56.190
then this means that I have light paths that are,

340
00:23:56.240 --> 00:24:00.290
that have a ridiculous low probability to be visited.

341
00:24:00.680 --> 00:24:05.630
And that means that my sampling strategies are not smart enough.

342
00:24:08.090 --> 00:24:09.380
And this is a classical,

343
00:24:09.860 --> 00:24:13.490
longstanding problem in global illumination.

344
00:24:14.690 --> 00:24:15.430
<v 1>Okay?</v>

345
00:24:15.430 --> 00:24:19.870
<v 0>Metropoulos is not a solution for this.
It is still not good enough,</v>

346
00:24:19.900 --> 00:24:23.740
but there are techniques that can give you a really smooth results on

347
00:24:23.741 --> 00:24:26.230
ridiculously difficult scenes like this.

348
00:24:26.410 --> 00:24:29.230
And I will also explain you during the next lecture.

349
00:24:29.410 --> 00:24:34.180
Why is this essentially difficult?
Because it doesn't seem to intuitive does it?

350
00:24:34.660 --> 00:24:38.170
But I will explain to you during the next lecture.
Thank you very much.

