Speaker 1:          00:00          Some detail on bounding volume hierarchy. So I mean you, you take the object, say the triangles and group them all together. I mean there are a lot of ways to do that. This is a combinatorial explosion. So you cannot just say test each possibility and check which is the best one. So usually this is seen dependent so you don't know him beforehand, which bonding volume hierarchy would give you the best performance because um, it could be that through the light propagation light, very Seldomly enters say one half of the room because there is a wall with only a small home. If you do not know that, then you would read both rooms with the same priority and put them very high up in the tree hierarchy. But if light only travels very Seldomly to half of the room, then you could make one huge node for only half of the room and spend all your detail on the thing where actually something happens.

Speaker 1:          01:03          So the seam usually dictates what kind of hierarchies optimal. But this is, this doesn't make too much sense to take this into account because if you have to run the light simulation to know what is the most optimal spacial hierarchy, then you have done to lie to relational ready. So you need to use some kind of heuristic that works for general scenes and build a hierarchy that optimizes this holistic. And the most popular one is the surface area of your Ristick. We are, you compute a cost for the whole hierarchy and try to find the one with the lowest cost. And here, just to quickly show the formula, you can read this in detail in the references I provide on the last slide of the lecture. But here you sum up two components. So the costs of the inner nodes of the trees and the costs of the leaf nodes, because as we already know the object, so the triangles are in the leaf note of the tree.

Speaker 1:          02:14          So all the intermediate nodes are just different groupings, so from fine to coarse, but they do not contain content. So they just say, if I hit a bounding box of some intermediate node, then it tells me here my neck, my next level are these two bounding boxes. Continue with them. Then you check the next two bounding boxes in this volume and continue recursively until you hit all the leaf nodes that are appropriate. So that lie along Uri and the costs. So there is a cost associated with getting from one bounding box to the bounding boxes that lie emit and the cost of the leaf nodes, which are uh, also they intersect shoe costs of the triangles themselves. So see inner in this formula is the cost of um, checking, which I'm bounding boxes are appropriate for continuing through the tree. And the cost for the leaf node is the same for it.

Speaker 1:          03:30          That tn is the cost for the triangle intersections. And now the heuristic enters via the surface areas of objects because their main assumption in this heuristic is that you have that race lie randomly in your scene. So you don't, you don't know him beforehand in which, uh, directional light will travel. So you're just as humor, random rate distribution. And then you check how profitable is it that I hit certain objects. So objects with a small surface area are less probable, larger triangles are more profitable. And what you want to do is that you um, give very good groupings, the groupings that um, that have a high chance that you actually hit something in them or that you can exclude a lot of this and this is here are shown as a ratio of the surface area. So [inaudible] is the surface area of note and this is the volume of the bounding box which has a certain surface and it's also dictates how probable is it that I hit this bounding box.

Speaker 1:          04:58          And then you have the surface area of the root. So the level above, so I have my own bounding box at a certain level of the tree. And my route that contains me is a larger bounding box that at least as the extent of my current one. But what do you want to do is that you want to minimize this cost so that you want to have a large surface area of the mood but a small surface area of your current bounding box. Because this means that you can exclude a lot of volume in the space. So if you're going to a huge, um, bounding box and you want to decide where do I have to continue, then the smaller the continuation is the more descriptive it is, where the scene content is. The same is done for the file, for the final leaf nodes where the triangles are. And now you try to build a whole hierarchy that optimizes this coast. So this is not that you can decide at every level or at every level you decide what is the best ratio here that I can achieve. And then this gives you how you're grouping has to be done.

Speaker 1:          06:22          Um, they are different heuristics in the recent literature that take some more information of the scene into account. So, for example, the surface area heuristic, the only assumes random rate distribution in the scene but also assumes that they are infinitely long so that they just travel through the whole scene and the not to block belt checks. This is taken into account with more sophisticated to restricts and um, there are references on this and so yup.

Speaker 2:          07:06          I haven't done handed larger yes. Can Be larger than its roof because the two objects move apart from hell,

Speaker 1:          07:21          um, that you have to account for. So, so you would have to update, you would have to propagate this information up the tree otherwise, um, it would fade so to say, because you, if you do not treat the root no. Yeah, I mean this, you have to propagate up but it's the way of the propagation is clear. So it's just the grouping upwards till your have contained, even with the dynamic update what's happening. But with Katie trees, this is not too easy because the space itself is divided. So you have to somehow determine where is the object moving to in which other part of the tree, which is not simple because it could be that it moves into another leaf node, but the lymph node could be um, split already at the very top level of the tree. So to find the other leaf node, well Katie three of check moves into, you have to go up and down the whole tree. So this is much more costly, much more complicated here. You're just propagated upwards till it's okay. Um, so I mean, um, the surface area of your Ristick is just that the heuristic, but it's still expensive to compute the optimal three for that. So there is not necessarily unique solution with the minimal surface area humoristic but there is one and since this is expensive, there are also methods how to approximate. So not to develop a hierarchy with the optimal cost, but with one that's good enough for the purpose. And usually this is a trade off. So the more time you invest to build your spacial hierarchy,

Speaker 1:          09:26          they're better. It's quality gates and in turn, the more efficient delight simulations. So if you don't spend a lot of time to build your hierarchy, you have bad quality, inefficient rate traversal during the global illumination simulation. So you are actual rendering takes long. But if you spent more time on the hierarchy, then um, it has better properties for a propagation. So your light lighting simulation is more efficient and it's faster, but you see that there is some kind of trade off. So I mean if I end, usually this is encoded and or start again. Um, usually it depends on how complex your light simulation is. So if I want to trace say 1000 raise, then the cost of this is very, very low. So I just need a, I can live with a very, um, approximated hierarchy. So the hierarchy quality can be very bad, but because I shoot so less raise, I will not feel the difference too much.

Speaker 1:          10:42          But if a shoot, um, break counts in the billions, then even a small increase in, um, in optimality of the hierarchy, we'll give you significant gains in your rendering time. So what you see here in this graph, this I just showed that you get a feeling what are different methods? They are a, I put the reference to the actual math to the actual paper where this is from right next to it. So what do you see here are different methods on how to generate bounding volume hierarchies with the surface area heuristic. So as you see the Blue Line, the SPV h

Speaker 3:          11:33          okay.

Speaker 1:          11:36          Um, has very low call or um, start again. So what you'll see here is on the x axis, the number of rays that you will shoot in your light thing simulation. So that means that the more you go to the right, the more complex the light simulation is, the more quality you won't have the final rendering, the deeper you go into refraction and reflection levels, things like that.

Speaker 3:          12:11          MMM.

Speaker 1:          12:12          On the other hand, on the y axis, you see how many race delighting simulation can trays per second. So that means that the higher you go up, the y exists, the faster your lighting simulations, and now you have to find some trade off. So SBV age constructs very good. Spacial hierarchies, but it's also very slow. That means that for, um,

Speaker 1:          12:46          for a lightning simulation that only use a few million raise, the performance is very bad because most of the time is taken to build a spacial hierarchy. So for SPD age, it takes longer to build the hierarchy then due to the actual rendering, which doesn't make too much sense. But if you go into the indoor one territories for computing your final image, then it starts to pay off because you have a very, uh, high performance. So you can trace in this example on the, we are 400 million raised per second, um, [inaudible] BVH a HL BVH on the other hand is a method to, um, quickly get a spacial hierarchy that's not very optimal. So you see that for, um, scenes with only a few million race, you already get close to the final performance. So 200, a million raise per second, and you are much faster than Spv h here, but the mores you shoot, the more you're hurt by the missing optimality of your hierarchy. So that means that there is some kind of sweet spot around 10 Kiko race where SPV age gets actually better

Speaker 3:          14:18          then

Speaker 1:          14:19          Hrl, PVH. And in this paper they propose another method that is faster to construct. So you see it in the green belt, that line.

Speaker 1:          14:31          So you're quickly, uh, it alright. It gives a significant performance increase. Man's even for a smaller, uh, simulation. So already at hundred million race you are better than HL and you'll get, but you get quickly close to their performance of SPV age. So this is in this paper, this shows that, yeah, they found a very good intermediate method that's only a bit less or the mall then the, uh, state of the art before. So I advise you to look into this paper. You see a lot of interesting things there. So how to port PVH construction on the cheap view, parallelization issues and other smart tweets. So, uh, um, I give you the literature. So in Pvr, tea, it's the chapter four. And since this is inherently a geometrical problem, so you want to know where our triangles in the scene. The same hierarchies can also be used for collision detection because for collision detection, if you want to know cook two objects, uh, collide, then you have to be spatial near to each other.

Speaker 1:          15:51          So if I know that they are far apart already in the, uh, through the bounding boxes off the tree, then I can ignore this and not compute the exact intersection between them and are then there are several papers here. So the work of [inaudible] more or less started this whole business and his thesis. And then I also give some reason papers that usually look into how to do this fast and the cheap view. So this is more or less the current trend now, um, there are also upcoming works to do the same on, um, this intro, many core architecture. So the [inaudible].

Speaker 3:          16:36          Okay,

Speaker 1:          16:37          good. This concludes the first part of this lecture. Are there any questions?

Speaker 3:          16:45          Yeah.

Speaker 1:          16:46          If not, then I continue with something completely different. Now. I mean this is a very technical topic. If you want to implement it. Then you have to look into the papers anyhow because I cannot lay out here all day issues with coding. I mean it would be super boring. And on the other hands it's

Speaker 3:          17:09          okay

Speaker 1:          17:09          also. Um, the surface area heuristic in itself has proved worth food or um, but I mean did they are a lot of different approaches. So approximation of this small part approximation of this small part. So there are many papers that focus different partial problems in the whole, in the whole research problem. So going through a lot of later Chinese also suboptimal because due to the rapidly increasing hardware capabilities, the tunnel was also quite fast. So things that were super smart, um, approaches say four years ago to the carpet anymore because cheap now have completely different functionality and can do certain aspects more efficiently. So this is a rapidly developing, uh, topic since yeah, years old, ready? So if you want to implement it, have a look at the current literature, Sarah, if you standard papers like the one of the, of Ingo light, which have lasting contributions, but mostly in between our small optimizations that are focused on things that are perhaps not relevant, limited

Speaker 3:          18:32          anymore. Okay, good. That's for this.