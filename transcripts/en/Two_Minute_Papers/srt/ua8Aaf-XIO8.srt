1
00:00:00,150 --> 00:00:04,190
Some detail on bounding volume hierarchy.
So I mean you,

2
00:00:04,210 --> 00:00:08,130
you take the object, say the
triangles and group them all together.

3
00:00:08,460 --> 00:00:10,950
I mean there are a lot of ways to do that.

4
00:00:11,750 --> 00:00:13,560
This is a combinatorial explosion.

5
00:00:13,770 --> 00:00:18,770
So you cannot just say test
each possibility and check
which is the best one.

6
00:00:19,410 --> 00:00:24,210
So usually this is seen dependent
so you don't know him beforehand,

7
00:00:24,510 --> 00:00:29,510
which bonding volume hierarchy would
give you the best performance because um,

8
00:00:29,940 --> 00:00:33,270
it could be that through
the light propagation light,

9
00:00:33,300 --> 00:00:38,300
very Seldomly enters say one half of the
room because there is a wall with only

10
00:00:39,511 --> 00:00:42,180
a small home.
If you do not know that,

11
00:00:42,420 --> 00:00:47,420
then you would read both rooms with the
same priority and put them very high up

12
00:00:48,811 --> 00:00:49,920
in the tree hierarchy.

13
00:00:50,370 --> 00:00:54,450
But if light only travels very
Seldomly to half of the room,

14
00:00:54,720 --> 00:00:59,720
then you could make one huge node for
only half of the room and spend all your

15
00:01:00,601 --> 00:01:03,750
detail on the thing where
actually something happens.

16
00:01:03,840 --> 00:01:08,840
So the seam usually dictates
what kind of hierarchies optimal.

17
00:01:10,050 --> 00:01:11,640
But this is,

18
00:01:11,910 --> 00:01:16,320
this doesn't make too much sense to take
this into account because if you have

19
00:01:16,321 --> 00:01:21,321
to run the light simulation to know what
is the most optimal spacial hierarchy,

20
00:01:22,050 --> 00:01:24,180
then you have done to
lie to relational ready.

21
00:01:24,540 --> 00:01:29,540
So you need to use some kind of heuristic
that works for general scenes and

22
00:01:31,060 --> 00:01:34,860
build a hierarchy that
optimizes this holistic.

23
00:01:35,130 --> 00:01:39,660
And the most popular one is the
surface area of your Ristick.

24
00:01:40,200 --> 00:01:40,950
We are,

25
00:01:40,950 --> 00:01:45,950
you compute a cost for the whole
hierarchy and try to find the one with the

26
00:01:46,321 --> 00:01:51,120
lowest cost. And here, just
to quickly show the formula,

27
00:01:51,180 --> 00:01:56,180
you can read this in detail
in the references I provide
on the last slide of the

28
00:01:56,701 --> 00:01:57,534
lecture.

29
00:01:58,080 --> 00:02:02,550
But here you sum up two components.

30
00:02:02,700 --> 00:02:07,700
So the costs of the inner nodes of the
trees and the costs of the leaf nodes,

31
00:02:08,820 --> 00:02:11,430
because as we already know the object,

32
00:02:11,460 --> 00:02:14,220
so the triangles are in
the leaf note of the tree.

33
00:02:14,670 --> 00:02:19,260
So all the intermediate nodes
are just different groupings,

34
00:02:19,410 --> 00:02:24,390
so from fine to coarse,
but they do not contain content.

35
00:02:24,540 --> 00:02:26,790
So they just say,

36
00:02:26,970 --> 00:02:30,750
if I hit a bounding box
of some intermediate node,

37
00:02:32,040 --> 00:02:34,110
then it tells me here my neck,

38
00:02:34,140 --> 00:02:38,430
my next level are these two
bounding boxes. Continue with them.

39
00:02:38,670 --> 00:02:43,500
Then you check the next two bounding
boxes in this volume and continue

40
00:02:43,501 --> 00:02:47,640
recursively until you hit all the
leaf nodes that are appropriate.

41
00:02:47,760 --> 00:02:52,050
So that lie along Uri and the costs.

42
00:02:52,320 --> 00:02:57,320
So there is a cost associated with getting
from one bounding box to the bounding

43
00:03:00,341 --> 00:03:05,341
boxes that lie emit and
the cost of the leaf nodes,

44
00:03:05,800 --> 00:03:07,880
which are uh,

45
00:03:07,960 --> 00:03:11,500
also they intersect shoe costs
of the triangles themselves.

46
00:03:12,400 --> 00:03:17,400
So see inner in this
formula is the cost of um,

47
00:03:18,520 --> 00:03:19,150
checking,

48
00:03:19,150 --> 00:03:24,150
which I'm bounding boxes are appropriate
for continuing through the tree.

49
00:03:25,570 --> 00:03:29,620
And the cost for the leaf
node is the same for it.

50
00:03:30,040 --> 00:03:34,840
That tn is the cost for
the triangle intersections.

51
00:03:35,170 --> 00:03:40,170
And now the heuristic enters
via the surface areas of
objects because their main

52
00:03:43,931 --> 00:03:48,931
assumption in this heuristic is that
you have that race lie randomly in your

53
00:03:50,591 --> 00:03:55,510
scene. So you don't, you don't
know him beforehand in which,

54
00:03:55,570 --> 00:03:59,670
uh, directional light will
travel. So you're just as humor,

55
00:03:59,680 --> 00:04:01,480
random rate distribution.

56
00:04:02,650 --> 00:04:07,650
And then you check how profitable
is it that I hit certain objects.

57
00:04:10,030 --> 00:04:15,030
So objects with a small
surface area are less probable,

58
00:04:16,660 --> 00:04:18,880
larger triangles are more profitable.

59
00:04:19,240 --> 00:04:23,430
And what you want to do is that you um,

60
00:04:24,310 --> 00:04:28,210
give very good groupings,
the groupings that um,

61
00:04:29,830 --> 00:04:34,210
that have a high chance that you actually
hit something in them or that you can

62
00:04:34,211 --> 00:04:39,211
exclude a lot of this and this is here
are shown as a ratio of the surface area.

63
00:04:41,980 --> 00:04:46,980
So [inaudible] is the surface area
of note and this is the volume of the

64
00:04:47,681 --> 00:04:52,681
bounding box which has a certain surface
and it's also dictates how probable is

65
00:04:55,361 --> 00:04:57,880
it that I hit this bounding box.

66
00:04:58,450 --> 00:05:02,320
And then you have the
surface area of the root.

67
00:05:02,410 --> 00:05:03,970
So the level above,

68
00:05:04,120 --> 00:05:08,350
so I have my own bounding box
at a certain level of the tree.

69
00:05:08,440 --> 00:05:13,440
And my route that contains me is a
larger bounding box that at least as the

70
00:05:15,191 --> 00:05:16,840
extent of my current one.

71
00:05:17,860 --> 00:05:22,630
But what do you want to do is that you
want to minimize this cost so that you

72
00:05:23,020 --> 00:05:28,020
want to have a large surface area of the
mood but a small surface area of your

73
00:05:30,101 --> 00:05:31,480
current bounding box.

74
00:05:31,720 --> 00:05:36,720
Because this means that you can
exclude a lot of volume in the space.

75
00:05:37,570 --> 00:05:41,020
So if you're going to a huge,
um,

76
00:05:41,260 --> 00:05:45,430
bounding box and you want to
decide where do I have to continue,

77
00:05:45,850 --> 00:05:50,850
then the smaller the continuation
is the more descriptive it is,

78
00:05:51,880 --> 00:05:53,320
where the scene content is.

79
00:05:54,220 --> 00:05:57,040
The same is done for the file,

80
00:05:57,140 --> 00:06:00,560
for the final leaf nodes
where the triangles are.

81
00:06:00,920 --> 00:06:05,920
And now you try to build a whole
hierarchy that optimizes this coast.

82
00:06:07,280 --> 00:06:12,280
So this is not that you can decide at
every level or at every level you decide

83
00:06:13,550 --> 00:06:16,520
what is the best ratio
here that I can achieve.

84
00:06:16,700 --> 00:06:20,000
And then this gives you how
you're grouping has to be done.

85
00:06:22,370 --> 00:06:22,670
Um,

86
00:06:22,670 --> 00:06:27,670
they are different heuristics in the
recent literature that take some more

87
00:06:28,661 --> 00:06:32,500
information of the scene into
account. So, for example,

88
00:06:32,501 --> 00:06:34,060
the surface area heuristic,

89
00:06:34,300 --> 00:06:39,300
the only assumes random rate distribution
in the scene but also assumes that

90
00:06:40,211 --> 00:06:45,211
they are infinitely long so that they
just travel through the whole scene and

91
00:06:46,641 --> 00:06:48,550
the not to block belt checks.

92
00:06:48,970 --> 00:06:53,970
This is taken into account with more
sophisticated to restricts and um,

93
00:06:55,410 --> 00:06:59,470
there are references on this
and

94
00:07:01,000 --> 00:07:05,440
so
yup.

95
00:07:06,550 --> 00:07:10,720
I haven't done handed larger yes.

96
00:07:13,020 --> 00:07:17,710
Can Be larger than its roof because
the two objects move apart from

97
00:07:20,040 --> 00:07:20,873
hell,

98
00:07:21,370 --> 00:07:25,460
um, that you have to account for.
So, so you would have to update,

99
00:07:26,600 --> 00:07:31,210
you would have to propagate this
information up the tree otherwise, um,

100
00:07:31,440 --> 00:07:35,760
it would fade so to say, because
you, if you do not treat the root no.

101
00:07:36,520 --> 00:07:39,200
Yeah, I mean this, you
have to propagate up but

102
00:07:40,820 --> 00:07:44,540
it's the way of the propagation is clear.

103
00:07:44,630 --> 00:07:49,630
So it's just the grouping
upwards till your have contained,

104
00:07:50,840 --> 00:07:53,330
even with the dynamic
update what's happening.

105
00:07:54,200 --> 00:07:56,240
But with Katie trees,

106
00:07:56,450 --> 00:07:59,640
this is not too easy because
the space itself is divided.

107
00:07:59,660 --> 00:08:04,660
So you have to somehow determine where
is the object moving to in which other

108
00:08:04,791 --> 00:08:06,080
part of the tree,

109
00:08:06,260 --> 00:08:11,260
which is not simple because it could be
that it moves into another leaf node,

110
00:08:12,200 --> 00:08:14,780
but the lymph node could be um,

111
00:08:14,840 --> 00:08:18,560
split already at the very
top level of the tree.

112
00:08:18,860 --> 00:08:21,420
So to find the other leaf node,

113
00:08:21,440 --> 00:08:25,610
well Katie three of check moves into,
you have to go up and down the whole tree.

114
00:08:26,600 --> 00:08:30,410
So this is much more costly,
much more complicated here.

115
00:08:30,411 --> 00:08:33,100
You're just propagated
upwards till it's okay.

116
00:08:35,870 --> 00:08:40,080
Um, so I mean, um,

117
00:08:40,190 --> 00:08:43,370
the surface area of your Ristick
is just that the heuristic,

118
00:08:44,030 --> 00:08:49,030
but it's still expensive to
compute the optimal three for that.

119
00:08:50,090 --> 00:08:55,090
So there is not necessarily unique
solution with the minimal surface area

120
00:08:57,180 --> 00:08:58,380
humoristic but there is one

121
00:08:59,910 --> 00:09:03,840
and since this is expensive,

122
00:09:04,080 --> 00:09:07,710
there are also methods how to approximate.

123
00:09:07,770 --> 00:09:12,240
So not to develop a hierarchy
with the optimal cost,

124
00:09:12,330 --> 00:09:15,420
but with one that's good
enough for the purpose.

125
00:09:15,930 --> 00:09:18,060
And usually this is a trade off.

126
00:09:18,360 --> 00:09:23,360
So the more time you invest to
build your spacial hierarchy,

127
00:09:26,140 --> 00:09:29,650
they're better.
It's quality gates and in turn,

128
00:09:29,651 --> 00:09:32,110
the more efficient delight simulations.

129
00:09:32,320 --> 00:09:36,310
So if you don't spend a lot of
time to build your hierarchy,

130
00:09:36,370 --> 00:09:37,840
you have bad quality,

131
00:09:38,040 --> 00:09:43,040
inefficient rate traversal during
the global illumination simulation.

132
00:09:43,570 --> 00:09:45,820
So you are actual rendering takes long.

133
00:09:46,510 --> 00:09:51,260
But if you spent more time
on the hierarchy, then um,

134
00:09:51,550 --> 00:09:55,000
it has better properties
for a propagation.

135
00:09:55,060 --> 00:10:00,060
So your light lighting simulation
is more efficient and it's faster,

136
00:10:00,550 --> 00:10:02,740
but you see that there is
some kind of trade off.

137
00:10:03,160 --> 00:10:05,980
So I mean if I end,

138
00:10:06,010 --> 00:10:11,010
usually this is encoded
and or start again.

139
00:10:12,790 --> 00:10:13,510
Um,

140
00:10:13,510 --> 00:10:17,830
usually it depends on how
complex your light simulation is.

141
00:10:17,890 --> 00:10:22,210
So if I want to trace say 1000 raise,

142
00:10:23,410 --> 00:10:26,230
then the cost of this is very,
very low.

143
00:10:26,530 --> 00:10:30,640
So I just need a,
I can live with a very,

144
00:10:30,790 --> 00:10:34,330
um,
approximated hierarchy.

145
00:10:35,020 --> 00:10:37,690
So the hierarchy quality can be very bad,

146
00:10:37,720 --> 00:10:42,310
but because I shoot so less raise,
I will not feel the difference too much.

147
00:10:42,550 --> 00:10:47,260
But if a shoot, um, break
counts in the billions,

148
00:10:47,350 --> 00:10:51,130
then even a small increase in,
um,

149
00:10:52,390 --> 00:10:54,790
in optimality of the hierarchy,

150
00:10:54,791 --> 00:10:59,590
we'll give you significant
gains in your rendering time.

151
00:11:00,340 --> 00:11:02,530
So what you see here in this graph,

152
00:11:03,190 --> 00:11:08,140
this I just showed that you get a
feeling what are different methods?

153
00:11:08,350 --> 00:11:09,330
They are a,

154
00:11:09,340 --> 00:11:14,290
I put the reference to the actual math
to the actual paper where this is from

155
00:11:14,770 --> 00:11:15,760
right next to it.

156
00:11:16,660 --> 00:11:21,660
So what do you see here are different
methods on how to generate bounding volume

157
00:11:23,531 --> 00:11:26,140
hierarchies with the
surface area heuristic.

158
00:11:26,950 --> 00:11:31,590
So as you see the Blue Line,
the SPV h

159
00:11:33,600 --> 00:11:34,433
okay.

160
00:11:36,110 --> 00:11:36,943
Um,

161
00:11:38,120 --> 00:11:42,350
has very low call or um,

162
00:11:42,440 --> 00:11:46,250
start again.
So what you'll see here is on the x axis,

163
00:11:47,090 --> 00:11:52,090
the number of rays that you will
shoot in your light thing simulation.

164
00:11:52,870 --> 00:11:56,950
So that means that the
more you go to the right,

165
00:11:57,400 --> 00:12:01,330
the more complex the light simulation is,

166
00:12:01,540 --> 00:12:04,320
the more quality you won't
have the final rendering,

167
00:12:04,720 --> 00:12:08,920
the deeper you go into
refraction and reflection levels,

168
00:12:09,010 --> 00:12:09,843
things like that.

169
00:12:11,440 --> 00:12:12,273
MMM.

170
00:12:12,740 --> 00:12:16,430
On the other hand,
on the y axis,

171
00:12:16,520 --> 00:12:21,520
you see how many race delighting
simulation can trays per second.

172
00:12:23,090 --> 00:12:26,540
So that means that the higher you go up,
the y exists,

173
00:12:27,140 --> 00:12:29,540
the faster your lighting simulations,

174
00:12:30,830 --> 00:12:33,230
and now you have to find some trade off.

175
00:12:33,530 --> 00:12:37,670
So SBV age constructs very good.

176
00:12:37,760 --> 00:12:41,090
Spacial hierarchies,
but it's also very slow.

177
00:12:41,900 --> 00:12:44,460
That means that for,
um,

178
00:12:46,060 --> 00:12:51,060
for a lightning simulation that
only use a few million raise,

179
00:12:51,670 --> 00:12:56,670
the performance is very bad because most
of the time is taken to build a spacial

180
00:12:58,541 --> 00:13:00,850
hierarchy.
So for SPD age,

181
00:13:00,910 --> 00:13:04,750
it takes longer to build the hierarchy
then due to the actual rendering,

182
00:13:04,900 --> 00:13:06,790
which doesn't make too much sense.

183
00:13:07,120 --> 00:13:12,120
But if you go into the
indoor one territories for
computing your final image,

184
00:13:17,140 --> 00:13:21,790
then it starts to pay off
because you have a very, uh,

185
00:13:21,970 --> 00:13:26,150
high performance.
So you can trace in this example on the,

186
00:13:26,300 --> 00:13:30,340
we are 400 million raised per second,
um,

187
00:13:30,860 --> 00:13:35,860
[inaudible] BVH a HL BVH on
the other hand is a method to,

188
00:13:37,690 --> 00:13:42,370
um, quickly get a spacial
hierarchy that's not very optimal.

189
00:13:42,820 --> 00:13:47,740
So you see that for, um, scenes
with only a few million race,

190
00:13:48,250 --> 00:13:52,450
you already get close to
the final performance.

191
00:13:52,480 --> 00:13:56,440
So 200,
a million raise per second,

192
00:13:58,510 --> 00:14:03,370
and you are much faster than Spv h here,
but the mores you shoot,

193
00:14:03,400 --> 00:14:08,230
the more you're hurt by the missing
optimality of your hierarchy.

194
00:14:08,410 --> 00:14:13,410
So that means that there is some kind
of sweet spot around 10 Kiko race where

195
00:14:14,530 --> 00:14:17,290
SPV age gets actually better

196
00:14:18,060 --> 00:14:18,893
then

197
00:14:19,730 --> 00:14:20,930
Hrl,
PVH.

198
00:14:21,250 --> 00:14:26,250
And in this paper they propose another
method that is faster to construct.

199
00:14:26,980 --> 00:14:30,010
So you see it in the green belt,
that line.

200
00:14:31,340 --> 00:14:35,060
So you're quickly, uh, it alright.

201
00:14:35,190 --> 00:14:39,830
It gives a significant performance
increase. Man's even for a smaller,

202
00:14:40,010 --> 00:14:41,460
uh,
simulation.

203
00:14:41,461 --> 00:14:46,461
So already at hundred million race
you are better than HL and you'll get,

204
00:14:49,310 --> 00:14:53,840
but you get quickly close to
their performance of SPV age.

205
00:14:53,930 --> 00:14:57,650
So this is in this paper,
this shows that, yeah,

206
00:14:57,710 --> 00:15:02,600
they found a very good intermediate
method that's only a bit less or the mall

207
00:15:02,660 --> 00:15:05,690
then the, uh, state of the art before.

208
00:15:06,110 --> 00:15:09,530
So I advise you to look into this paper.

209
00:15:09,531 --> 00:15:11,990
You see a lot of interesting things there.

210
00:15:11,991 --> 00:15:16,340
So how to port PVH
construction on the cheap view,

211
00:15:16,520 --> 00:15:20,810
parallelization issues
and other smart tweets.

212
00:15:22,520 --> 00:15:27,020
So, uh, um, I give you the
literature. So in Pvr, tea,

213
00:15:27,021 --> 00:15:28,100
it's the chapter four.

214
00:15:29,480 --> 00:15:33,180
And since this is inherently
a geometrical problem,

215
00:15:33,181 --> 00:15:37,940
so you want to know where
our triangles in the scene.

216
00:15:38,420 --> 00:15:43,420
The same hierarchies can also be used
for collision detection because for

217
00:15:43,611 --> 00:15:48,350
collision detection, if you want to
know cook two objects, uh, collide,

218
00:15:48,590 --> 00:15:51,210
then you have to be
spatial near to each other.

219
00:15:51,680 --> 00:15:56,270
So if I know that they are
far apart already in the, uh,

220
00:15:56,600 --> 00:15:58,970
through the bounding boxes off the tree,

221
00:15:59,060 --> 00:16:04,060
then I can ignore this and not compute
the exact intersection between them and

222
00:16:05,001 --> 00:16:07,520
are then there are several papers here.

223
00:16:07,670 --> 00:16:12,670
So the work of [inaudible] more or less
started this whole business and his

224
00:16:13,971 --> 00:16:14,804
thesis.

225
00:16:15,080 --> 00:16:20,080
And then I also give some reason papers
that usually look into how to do this

226
00:16:21,141 --> 00:16:25,310
fast and the cheap view. So this is
more or less the current trend now, um,

227
00:16:25,490 --> 00:16:30,350
there are also upcoming
works to do the same on, um,

228
00:16:30,690 --> 00:16:35,060
this intro, many core
architecture. So the [inaudible].

229
00:16:36,960 --> 00:16:37,410
Okay,

230
00:16:37,410 --> 00:16:41,550
good. This concludes the
first part of this lecture.

231
00:16:42,060 --> 00:16:43,320
Are there any questions?

232
00:16:45,600 --> 00:16:46,433
Yeah.

233
00:16:46,490 --> 00:16:49,100
If not, then I continue with
something completely different. Now.

234
00:16:49,880 --> 00:16:53,990
I mean this is a very technical topic.
If you want to implement it.

235
00:16:54,260 --> 00:16:59,260
Then you have to look into the papers
anyhow because I cannot lay out here all

236
00:17:01,640 --> 00:17:04,670
day issues with coding.
I mean it would be super boring.

237
00:17:05,210 --> 00:17:08,270
And on the other hands it's

238
00:17:09,170 --> 00:17:09,590
okay

239
00:17:09,590 --> 00:17:11,060
also.
Um,

240
00:17:11,180 --> 00:17:16,180
the surface area heuristic in
itself has proved worth food or um,

241
00:17:17,240 --> 00:17:20,810
but I mean did they are a
lot of different approaches.

242
00:17:20,811 --> 00:17:25,250
So approximation of this small part
approximation of this small part.

243
00:17:25,400 --> 00:17:30,400
So there are many papers that focus
different partial problems in the whole,

244
00:17:32,120 --> 00:17:34,280
in the whole research problem.

245
00:17:34,550 --> 00:17:39,550
So going through a lot of later Chinese
also suboptimal because due to the

246
00:17:40,280 --> 00:17:43,700
rapidly increasing hardware capabilities,

247
00:17:44,120 --> 00:17:46,460
the tunnel was also quite fast.

248
00:17:46,730 --> 00:17:51,270
So things that were super smart,
um,

249
00:17:51,330 --> 00:17:56,330
approaches say four years ago to the
carpet anymore because cheap now have

250
00:17:58,561 --> 00:18:03,561
completely different functionality and
can do certain aspects more efficiently.

251
00:18:04,380 --> 00:18:08,140
So this is a rapidly developing,
uh,

252
00:18:08,250 --> 00:18:12,300
topic since yeah, years old, ready?

253
00:18:12,390 --> 00:18:16,980
So if you want to implement it,
have a look at the current literature,

254
00:18:17,940 --> 00:18:22,670
Sarah, if you standard papers like
the one of the, of Ingo light,

255
00:18:23,010 --> 00:18:26,160
which have lasting contributions,

256
00:18:26,280 --> 00:18:31,140
but mostly in between our
small optimizations that
are focused on things that

257
00:18:31,141 --> 00:18:32,400
are perhaps not relevant,
limited

258
00:18:32,420 --> 00:18:37,190
anymore. Okay, good. That's for this.

