Speaker 1:          00:06          Thanks for hosting me. I realized I should probably just cover my history for anyone who didn't know. I, uh, I grew up in the 1980s programming in logo. Uh, I learned how to do the triangles. I learned how to do the turtles. Can I actually just get a show of hands? Who here has programmed in logo? It's amazing. You know, I was at, I was at, uh, I spoke at a business conference the other day. No one raised their hands. I said, okay, who is programmed in Lisp? No one. I said, who here's heard of Lisp? He was like, wow, it's just all r and python these days. So yeah. Um, yeah, so I grew up, uh, I grew up on logo, uh, in the nineties. I, uh, I, so I should, my wife and I, uh, who's here, uh, uh, majored in computer science and we worked at Microsoft and I'm going to be talking a bit about that.

Speaker 1:          00:59          And then after a couple of years at Microsoft, we came to Google. We were here and I was here in the two thousands and I worked on the uh, web mirror team, which was part of the part of the crawl back then. And um, because I was a little crazy, I decided to give it up and become a writer and critic and technologists. And this is sort of the result of my book. Um, and uh, but it's really good to be back. This, I mean we were on the fourth floor back then and this brings back a lot of memories. So this is a very, uh, the, the, this, this has a special meaning for me. So I was going to read a couple sections that, uh, hopefully are relevant to more computer oriented computer oriented people. Uh, but first I want, um, as proof of my Bona Fides, you may notice that it's called bitwise and uh, those are actual bitwise operators on the cover or something I made sure I was so that people would say no, I just didn't look in a, a, I just didn't look in a library of computer terms.

Speaker 1:          01:58          It's pick one that sounded cool. The real discovery though was this bit of art by, um, by Richard McGuire. He's a cartoonist who does some New Yorker covers. And, um, if you notice the pipe and the ampersand, those are indeed bitwise operators. And I was very happy to find that piece of art and uh, and use it. Uh, so, uh, the, the first part I'd like to speak about is, um, is actually a tale of my time at Microsoft. And bizarrely enough, we have someone here who was actually there at the time on the very same team. So, uh, he can, he can verify that I'm not embellishing this. Uh, and this, this section is called a chat wars and it begins with a, uh, with a quote from Grace Hopper. Uh, it's easier to ask forgiveness than it is to get permission. And now you'll see why at 22, when I was just out of college and still agree in software engineer, I thought America Online and AOL won the battle, made the front page of the New York Times the public was beginning to care about code.

Speaker 1:          03:05          This wasn't the code that would crack the secrets of mathematics or the nature of the universe, but it was the lifeblood of our economy and society. It was a summer of 1999 and people were starting to realize that the Internet and the web, we're becoming a new dynamic circulatory system for informations, coordination, and life itself. The summer before my final year of college, I interned as a software engineer at Microsoft in Redmond. I was assigned to the group that was building Msn Messenger Service, Microsoft's instant messaging APP, and after receiving my degree, I went on to join them full time. The unwieldy name was cooked up by Microsoft and marketing department, which had a reputation for always picking the clunkiest and least imaginative product names, but he lists, see, you see me, Msn Messenger? No, it was MSN messenger service, but I'll call it messenger for short. At the time, the big players and instant messaging where AOL instant messenger, Yahoo and Icq, uh, AOL instant messenger, aim for short had tens of millions of users.

Speaker 1:          04:03          AOL had become the country's biggest dialup provider in the mid nineties by blitzing mailboxes with CD Roms and all AOL users automatically became aim users, Yahoo and ICQ. Each had millions of users. These are paltry numbers by the standards of 2018 but they were meaningful. In the 90s after my team finished developing the client code, we had some downtime while waiting for the server team to finish their hotmail integration. We couldn't release without their work. We fixed every bug we could find. One of the problems was getting new users to join messenger when so many people already used other chat programs. Um, unlike email, email, which has the standard SMTP format across all programs, these chat work networks didn't talk to each other. Aol didn't talk to Yahoo, which I didn't talk to Icq and none of them would talk to us. AOL had the largest user base.

Speaker 1:          04:56          So we discussed the possibility of adding code to allow Messenger to log into two servers simultaneously, Microsofts and AOL so that users could see their messenger and aim buddies on a single list and talk to aim buddies via messenger. We called it interrupt. A aims protocol was known as Oscar stood for acronym for open system for communication in real time. Uh, it was undocumented. Uh, so, uh, me and my mentor at the time signed up for AME accounts and watch the AME client talk to the server using a network monitor. I saw the protocol. The aim was using my mentor. Chris had figured out a large chunk of Oscar this way and after he left the team, I picked up his work and finish the job. Um, um, so, you know, did all notice that there were some odd messages heading their way from Redmond?

Speaker 1:          05:45          Probably not. They attended tens millions of users and we were mimicking their protocol reasonably well. But I thought this little stunt would be deemed to dubious and excised from messenger before it shit. But management liked it. So on July 22nd, 1999, Microsoft entered the chat markets with Msn Messenger Service, a complete with all interrupt. No one had warned all of our gambit and they weren't happy with what we termed are with what we termed our unauthorized interoperability. Quickly. They blocked messenger from connecting to their servers by veering their protocol messages in ways we hadn't anticipated. Users who tried to contact their aim buddies from messenger would receive a popup instant message saying, use an authorized AOL client at this link with the euro. But as long as messengers sent exactly the same protocol messages to the AOL servers, Ala wouldn't be able to detect that a user was on messenger.

Speaker 1:          06:37          So I took the AME client and meticulously check for differences in what it was sending and then changed our client to mimic it. Once again, messenger users receive an upgrade with this new fix. And because this was the dial up days, uh, the fix, uh, the client was tiny. He was literally 300 k was not even a megabyte, but AOL again caught on and switched their protocol up. We matched their client again, pushed out another upgrade. We went back and forth at least a dozen times at one point. AOL sneakily excluded users logging on from Microsoft headquarters, uh, ips from their changes so that we would be unaware that either messenger users were receiving an error message after an hour or two scratching our heads. A team member's sick at home notified us that yes, she was getting disconnected and a shout out to Kara for, for doing that amazing work when we were all going crazy.

Speaker 1:          07:26          Uh, Microsoft know we're both tech titans. In 1999 soon the press got a hold of the story. On July 24th, The New York Times rooted in cyberspace rivals skirmish over messaging. Aol kept blocking us or read the paper of record quote, but Microsoft refused to roll over late Friday. The software giant said it did, revised its Msn Messenger program to circumvent a miracle online's roadblock within hours. America Online answered that challenge with a new block. It was like reading about a wrestling match in which I was in the studious mass challenge. Okay, so another quote, this is from the great 20th century. Um, polymath, uh, Jacob Aronofsky, uh, progress is the exploration of our own error. And I think anyone who's been a software engineer sure knows that. Um, so the messenger war was a rush coming into work every morning to see whether the client's still worked with AOL was thrilling, even if it usually wasn't.

Speaker 1:          08:23          Um, when it wasn't working, I looked through them reams of protocol messages to figure out what it changed, fixed the client, try to get an update out the same day. Uh, I had no idea who my adversaries were, but I had been challenged and I wanted to win and our users care too. And they wanted us to win. And this was, you know, having actual users on your side at Microsoft. And those days are usually somewhat unusual. So A, we'll try different tactics. At one point, uh, I thought that they identify, we're identifying the Microsoft client because it wasn't downloading the advertising that the AOL client download it. So I updated our client to download it all and throw it away. Hey, we'll include a mysterious protocol and messages that didn't seem to affect their client but broke ours. So I fixed that. One day. I came in to see this embedded in the messengers from the AOL server.

Speaker 1:          09:08          Hi Dash Mark. It was a little missive from engineer to engineer, hidden from the corporate media and PR worlds that we're arguing over us. Uh, I felt solidarity with him even though we were on opposing sides. Uh, in the press, Ayla was pushing pop propaganda about how Microsoft had behaving like an evil hacker by asking for AOL passwords. Um, uh, but this wasn't true, but we were allowed only to respond through the PR department. My team was sealed off, but our code wasn't. And then one day AOL stop blocking us. It was strange to encounter sudden silence is the enemy had abruptly yield of the battlefield. And while I wanted to believe we'd one I suspected AOL would, wouldn't give up without a word. And a week later we found that messenger had been blocked again. But this time was different. The oil server was sending a huge chunk of new gobbledygook gook that I could not understand and it looked like this.

Speaker 1:          10:02          The first couple of lines are, are the standard AOL protocol header, the two eight oh two seven seven, nine c this is all fairly standard stuff. Um, but from these 90, 90, 90, 90 onward, it was incomprehensible and wasn't been been any relation to anything. The AOL servers, it's not their client or ours. The vast expanse of double zeros in the middle was also mysterious since a bunch of Zeros couldn't contain much meaning. Um, our client ignored it, but the AOL client responded to the scholarly book with a shorter version of the same gobbledygook. I didn't know what it was and it was maddening. After staring at it for half a day, I went over to Jonathan and brilliant surveyor engineer on our team and asked what he thought and he looked at it for a few minutes and he said, this is code, uh, specifically. Well, that's code.

Speaker 1:          10:51          Actually most of it's code, but the most important part is down here as you might guess, it was actual x 86 assembly code. The repeated nineties, a tipped them off because they signify a no op instruction. X86 assembler telling the processor to do nothing for one cycle. So the pieces came together. Normally protocol messages read data not as cold, but a and wells client had a security bug in it. It had a buffer overflow in it. Um, and actually let me ask, how many people know what a buffer overflow is? I'm going to skip over all everyone. We're going to skip over that actually for all the viewers and TV land, it basically means that they don't, um, is that you can run over the edge of a, of a, of a, uh, have an assigned spot in memory and, uh, overwrite the program code, uh, with whatever you want.

Speaker 1:          11:41          So they were overriding it with x 86 assembler and the, uh, and they were controlling the function of the AOL client. It's a huge security call fall, uh, since, uh, and AOL knew about this bug in the program and now they were exploiting it. The Double Zeros were filling up space in the programs buffer. And once it hit the end of the buffer, it a overwrote the executable code with the remainder of the protocol message. The, uh, this is the new code which caused the client to look up a particular configurable address in memory and send it back to the server. And this was tricky man, much trickier than anything they'd done so far. And it was a bit outside the realm of fair play hacking into their own client using an unfixed security hole, a hole that our client did not possess. It was a, uh, Rommel you magnificent bastard moment and I was out of my depth, uh, someone else at Microsoft.

Speaker 1:          12:37          I never found out who told the press about the buffer overflow, figuring that if people knew that the AOL client had a huge security hole in it, AOL would be forced to patch their client. I would no longer be able to exploit it. So according to the security expert, Richard and Smith, a certain fill bucking of bucking consulting, sent him an email alerting him to the buffer overflow in the AOL client. Dear Mr. Smith, I am a developer who has been working on a revolutionary new instant messaging client that should be released later this year. Because of that, I followed with interest the battle between AOL and Microsoft and had been trying to understand exactly what AOL is doing to block Microsoft and how Microsoft is getting around the blocks. Up until very recently, it's been pretty standard stuff. But now I fear AOL has gone too far. It appears that the Ame client has a buffer overflow book by itself. This may not be the end of the world as Microsoft is surely had its share.

Speaker 1:          13:33          Yes, yes. But AOL is now exploiting their own buffer overflow bug to help its efforts to block MSN instant messenger. Um, so, um, it ham fisted, I think the developer of a revolutionary new APP takes sides in the Microsoft Aol war without promoting his own APP. Um, the email also includes this, this actual trace. This is from the email because a, I don't have my notes from it anymore because those were confidential, but I can still have that. Um, and if Phil bookings text and his name warrant suspicious enough, he'd also sent the message, uh, from one of Microsoft's computers and a Microsoft Ip. The Ip address showed up in the email headers and Microsoft's digital fingerprints were all over the email. Smith accused, Microsoft is sending the email and Microsoft fessed up. The news story that emerged, covered Microsoft's attempt to bad mouth AOL under a fake identity and easier sell than explaining the buffer overflow.

Speaker 1:          14:32          People in various security forums ascertained that the buffer overflow is real and invade further against a AOL. But the press wasn't paying attention. The buffer overflow persisted into several later versions of aols client a will never admitted a thing and the press never did understand it. So we gave up and I licked my wounds. I joined the server team. The, uh, the larger lesson of the, of the messenger war was that the workings of code, we're no longer a private matter known only to those steeped in the lore of computing. They were increasingly becoming public affairs that impacted national and even global events. And you know, certainly coming in the wake of Cambridge Analytica, um, true more true than even when I read this, they were in, um, the chat wars were to me, a duel between a handful of people within two Gargantuan companies. And yet they became a national news story for a brief period.

Speaker 1:          15:25          Uh, looking back, it was the first inkling I had that it wasn't just computers that were permeating our lives, but the code itself and yet few grasp codes function and its impact, something that is still true today. The ultimate outcome of the conflict resulted from buffer overflow, whose existence was never agreed upon, um, because neither reporters nor the public understood it. So sometime after I left Microsoft, I met one of the AOL engineers who've worked against me. We had a huge laugh over it, and I complimented him on the genius of the buffer, overrun and exploit even as I, uh, bemoan my loss. It had been a great game. I said, and he agreed. We are both dumb struck that we are still to a very small number of people who knew the real story after all these years. So, um, that is, that's the buffer overflow story.

Speaker 1:          16:10          Um, I'd like the second section. Uh, I is, if you can hold your questions to the end a is going to read two more short segments that, uh, relate to, well, the fact that the book goes all over the place. Um, how many of you know Dork pour fortress, by the way? Just a couple of, okay. I'm not going to be speaking about that today, although I did. I did think about talking about it, but I try to discuss that in the book because I think it's a good example of how computers can and cannot model the world. So, um, there's a section called a truth tellers and liars and begins with a Charles Sanders pierce quote, all that logic warrants as a hope and not a belief. So, uh, there's a type of puzzle made most famous by the logician Raymond Smulyan and by the movie labyrinth that involves liars and truth tellers.

Speaker 1:          16:59          And how many of you know these sorts of lie or truth teller logic puzzles? Yeah. Okay. So let, let's skip all, let's get a little, we'll just skip over that. Here's a, I'll just give you a variant that I gave to my daughter. Uh, let's say we've got two doors and behind one is a huge amount of money in behind the other as a shark. Um, I decided that the lady or the tiger was a bit, it's a bit of a relic from an earlier era. So I changed it to money or shark, which I thought was very, very contemporary. Okay. So the writing on the doors on door one, the shark isn't here. Door to both doors are lying. Well, door to must be lying because it's impossible to truthfully say that you're a liar. So door one must be true or else do our two would be telling the truth.

Speaker 1:          17:38          The shark is behind door one and the money is behind door to, I uh, compulsively work through hundreds of these as a kid. And, uh, I was fortunate, my mother's stumbled on Smolins book, Alison Puzzle Land. How many of you read Ellison puzzle land? There's a call. I was going to say there's gotta be at least a couple. Um, and that became my introduction to the field of boolean logic. And lie or truth, Heller Polos and logical paradoxes. Um, Smollens use of Lewis Carroll suited the truth teller puzzles since, uh, you know, Carol had been a logician himself and some of the puddles in these books grew extraordinarily ornate and requiring multiple levels of inference. Uh, sometimes they didn't tell you what one or another person had said. Sometimes yes and no are replaced with nonsense words like ballon dog that meant yes or no, but you didn't know which there were even abstruse puddles that attempted to explain Kurt Girdles incompleteness theorem.

Speaker 1:          18:28          But, uh, it was above my head, uh, at that age. Uh, uh, but one puzzle genuinely irritated me. And this is a simplified version of it. So Amanda is trying to figure out which of two caskets contain a portrait. The first portrait we have, the portrait is not in here. And a second casket said exactly one of these caskets is telling the truth. So where's the portrait? Well, whether or not the second casket is telling the truth, the first casket must not be. Um, cause it says the portrait is not in here either as a second casket is true. And the first casket is therefore false, or the second casket is false. And thus the first casket casket must be false as well. Or else the second casket would be telling the truth in the puzzle. The men also figures the portrait is in the first casket.

Speaker 1:          19:12          He opens it up and finds nothing. The portraits in the second cascade, he early baffled. And so as I, and the answer seemed indisputable and it was very simple puzzle. So here's what smelly and rather an explanation without any information given about the truth or falsity of any of these sentences, nor any information given about the relation of their truth, values. The sentences could say anything and the object to be anywhere. Good Heavens, I can take any number of caskets that I please and put an object in one of them and then write any inscriptions at all on the lids. And these sentences won't convey any information. I felt cheated. I felt that smelly and had made an implicit promise that he would be providing logic puzzles that made sense. But I grudgingly observed the other puzzles explicitly claimed that the rules were being obeyed. And in this puzzle, there was no such guarantee.

Speaker 1:          19:57          The lesson was that truth and falsity are not absolute, but relative to a context outside that context statements, loose sense and meaning. Without the guarantee that rules are being followed, we can never be sure that our reasoning is valid and nowhere is that more true than in the logical and contextually isolated world of computers. So, um, from there I go on to talk about, um, bits themselves. So, um, you know, bits are commonly represented by, uh, the degree of voltage on a transistor and there's nothing true or false on circuit boards containing transistors, the binaries between the voltage being on or off a office, and actually zero as a, you made sure to say, but, um, and the binary isn't between true or, or even zero in one. No one is actually interested in whether gates output a voltage signal except in as much as that signal represents something else.

Speaker 1:          20:55          And what such signals represent in a computer is an abstract notion of logical truth and falsehood, which is a notion imposed by us, truth and falsehood. Our conceptions that we apply to the presence or absence of a signal at a particular point on a circuit board. Um, the binary representation of truth is so ubiquitous that we chronically can plate you logical, true, false and computational one zero on off binaries. A programming language permits me to have a boolean variable, let's call it is this thing on which can be either true or false. And the simplest representation and most common representation, uh, would be to use zero for falls and one for true. But what if with this numerical representation, we run across a two or some other number that's not zero or one, we could declare those numbers to be meaningless. Neither true nor false, but we don't want a trinary logic in which they're not two, but three options, true falls and meaningless.

Speaker 1:          21:45          So, and see the convention is that zero is false in any other numbers. True. Um, this representation appeals to our common convention of Equating Truth with existence. False. It is nothing. Absence, emptiness, zero truth is presence of validity, existence, anything other than zero, even a negative number. Um, for those of you who've used Microsoft's h results, you know, that, uh, it's reversed in that way and zero is, uh, actually, uh, the standard success results. Uh, something that, uh, caused a lot of bugs when people just, uh, use, uh, the not sign on h on h results thinking that they were binary results. A programmer is, and I include myself in this, is condition to treat true and false as synonyms for one and zero respectively true and false become the two possible values for a single bit in a two bit system, uh, in it's to value system.

Speaker 1:          22:38          These trues and falses remained a purely formal convention even though the words contain metaphysical weight within them. If I write, God exists equals true. That obviously doesn't cause God to exist, nor does it cause the computer to think or believe that God exists. All it does is set a signal somewhere deep in the recesses of a computer's memory. That line of code Harver suggest more than just the changing of signal on a circuit board. Any meaning we assign to true and false, uh, besides, uh, signals being on or off his interpretation. If I say God exists, I am making a claim about the real world. When a program contains a statement, God exists equal one, it merely indicates the alteration of a signal. Um, so computers don't understand the difference between true and false, nor do they understand what the concepts mean. And if a computer is to gain any grasp on truth, it's we understand it.

Speaker 1:          23:25          It will have to be someplace other than in its bits. And um, another quote from Thomas Pynchon who claims truth, truth abandons, and there's a little historical context. The history of logic has long wrestled with the problem with getting that true to mean more than one or on, uh, the problem of getting true to say something about the world. The difficulty started long before computers. We may think that we can patently tell the difference between a true and a false statement. But outside of logic puzzles penning down this distinction, proofs renders the vaccine to the point that both western philosophers like sexist empiric as an eastern philosophers like and the Guardian a question whether the truth of anything could be noon. These concerns, which might seem like Philosophical Navel gazing became far more urgent. What's formal logic? Enter the picture. The Great Magician Alfred Tarkovsky, uh, an influence on computer science and artificial intelligence coined convention t as a minimal criteria for the truth of the statement.

Speaker 1:          24:24          And here are two examples of convention t I show how many of you know convention t not too many, okay. Logics not in these days. All is as you put a sentence in quotes like the sky is blue, the sky is blue is true. If and only if the sky is blue, I'm a jelly doughnut is true if, and only if I'm a jelly donut. And a great deal of philosophical ink has been spilled on convention t. But I think, uh, most people will agree that this criteria is not especially helpful as a practical guide to determining the truth of a statement. And yet we may even despair it how little progress convention t seems to make over Aristotle's definition of over 2000 years ago to say of what it is to say of what is that it is not, or of what is not. That it is, is false while at to say of what it is that it is and of what is not.

Speaker 1:          25:12          That it is not. It's true. Not so helpful. Okay. Yeah, but you know, whatever truth may be, we can conclude that in order to interact well with the world, computers must be able to distinguish between true and false in the same way as humans do. The inadequacies of logic, tons of logicians attempts to collapse the, uh, difference between a logical truth in a worldly truth have been made all too clear in the computing age. The mathematician and phenomenologists Jean Carlo Rhoda put this bluntly. Mathematicians are therefore mystified by the spectacle of philosophers pretending to reinject philosophical sense into the language of mathematical logic. The fake philosophical terminology of mathematical logic has misled philosophers into believing that mathematical logic deals with the truth and the philosophical sense. But this is a mistake. Mathematical logic deals not with the truth, but only with the game of truth. The snobbish symbol dropping found nowadays and philosophical papers raises eyebrows among mathematicians like someone paying his grocery bill with monopoly money. Um, Rhoda hear echoes Plato's, who was one of the first to find that truth as a practical matter, a matter of action rather than a pure theoretical, uh, abstraction. Uh, and Paul Friedlander summary. A truth in Plato system is always both reality of being an correctness of apprehension and assertion. Or in William James his words, truth happens to an idea. It becomes true is made true by events. The troublesome gap is not between logic and language. Between logic

Speaker 2:          26:44          and reality. Symbols improves, cannot close that gap on their own. Three quotes. One torn Adams is actually the author of two our fortress. You activate bugs and little parts of the code from eight, six years ago where you did just didn't balance the numbers because it didn't matter. And the great computer scientist, Alan Perlis, every program is a part of some other program and rarely fits something that everyone in this room I'm sure already knows. And finally, this is my daughter. Uh, and this is something she, this is a song she wrote, which I think sums it up better than me and errors can happen to you and computers because you are a computer. Go and do it. Program yourself, just do it, explore your toes, explore your nose, explore everything you have NGOs. And if you don't want to do that, you can't even live, not even houses because houses are us. All right. That is what I want it to end on. Thank you. I've thought a lot,

Speaker 3:          27:40          uh, in my life about how, um, a deep understanding of computer science shapes my worldview and makes me think of the world and computational terms. And at the same time I've thought a lot about how, kind of similarly to what you were saying, that that's insufficient to, to kind of bridge the gap between conscious reality or reality in general. And you know, physics and math and all of that. And I feel like in many ways, um, this computational way of thinking about the world is extremely useful and at the same time very clouding because it makes us overreach. And the way that you were alluding to in your last piece, um, I was just wondering whether you could elaborate on your thoughts on that.

Speaker 2:          28:23          Yeah. I mean, this is something that I could speak about because I'm here, which is that one of the strangest things was that as a software engineer, I felt like I was surrounded by people who thought it was enough. I thought, there must be something wrong with me because everybody else seems so definite. I feel like it's just not working for me. And honestly, a large part of the book is me trying to elaborate on why I was so dissatisfied with it, which is one of the reasons why I don't, you know, program full time anymore. And you know, I had been, I was a lit geek from a young age and I liked some of the, uh, some of the formal, uh, experimental books like, uh, like, uh, there's a French author, George Correc, uh, who wrote a book called life a user's manual, which is Donald [inaudible] favorite novel.

Speaker 2:          29:16          Um, and everything is sort of mathematically structured by all sorts of formal mechanisms and it's beautiful. Um, and I found out actually in researching the book that, um, can, uh, correct had been writing another project in which he needed a 12 by 12 Greco Latin square in the late sixties. And there had been a paper written on computation lead them because he couldn't, he couldn't make one by hand. And I think that was the Euclid or oiler who thought that there didn't exist even exist. Greco Latin squares beyond a certain single digit size. Um, but someone had written a paper on computationally generating them and the coauthor was Donald canoes. So correct. Wrote to canoes back in the days before. Knuth was quite the household name that he is today and got a two 12 by 12 squares. So I love that point of connection and that I think that was one of the things that helped, um, keep me going and thinking, okay, there is, there is room to try to merge these two approaches because for many years I did feel like my mind was on two parallel tracks because I was doing some literature stuff in the background and then, and then I was, this was my job and I did and I enjoyed it a lot.

Speaker 2:          30:33          But, but each one I think felt incomplete and I didn't, I couldn't see how to, to sort of draw them together in any way. And for many years I did seem to be quite separate pieces because a lot of the literature and philosophy I studied was resolutely non quantitative and even non-logical. Um, and as Giancarlo Rhoda points out, the attempts to integrate them were very ham fisted. Um, there's, and that, that continues even to this day. One of the things I'm working on now is a Shakespearian authorship attribution using machine learning methods. And, um, it's not, this is basically the plot of t statistics of words mapped against a frequencies. And because these machine learning models, uh, these were using decision trees, random forests and um, a method called near a shrunken centroid. Uh, but because of the models were all opaque, um, uh, the, the internal results of the decision trees weren't presented.

Speaker 2:          31:35          Uh, uh, I had to re the models of part to sort of figure out, okay, actually how is this batch of Veshan being made? And seems like they were just being made on the basis of a handful, a very popular words like, and is used very frequently by authors who weren't Shakespeare and is not used very frequently by Shakespeare comparatively. Yeah. On a consistent basis. Um, but you know, if you don't actually have this breakdown, it can look very impressive. So, um, I think there's still a lack of good understanding as far as, as far as how you draw these things together. And part of that is because of the, the problems with semantic understanding that that computer is still have, I was always something of a skeptic when it came to a semantic AI, good old fashioned AI. And I guess I felt a little vindicated now that the much, uh, the, the neural nets and, and other, um, supervised learning tech sub symbolic techniques where sort of Poo pooed in the late 20th century and the Mid 20th Century in particular. But once you have enough data, suddenly they go way past anything that's symbolic AI has accomplished. So that's sort of a rambling answer. And I guess the short answer is that is that I treated at great length.

Speaker 2:          33:00          Um, anyone else like to ask anything whatsoever. That's it.

Speaker 4:          33:05          They're two weeks empty. You read one of them was very narrative and the other one was very, uh, uh, expos expository and like, what's the balance that you were trying to strike a and like what does the book like? Is it, uh, a lot of the narrative structure? Is it a lot of exposition? Do you like munge them together?

Speaker 2:          33:26          Yeah, well, hopefully helpful. Hopefully they, they, I, I skipped over the transition. Um, I tried to have it be both. I mean, I was encouraged, so it's an eye, I'm naturally sort of a top down writers. So if I just gone at it, it might, it might have been more directly philosophical, but, um, but a lot of people said, no, no, no, David, you should make it more personal. And some of the stories are good, but I tried to, but there's plenty of the parts of my life that I left out because I thought they were completely boring or irrelevant. So to the extent that I talk about my life, it is always in the service of these, of, of the larger points. And uh, the balance is I don't, um, it's hard to say. I got, I got, I dunno what the balances would you say it's, is it 50, 50?

Speaker 2:          34:16          I guess my point though is that, you know, having read books of both sorts, I think that you actually do need both pieces that, um, I actually, I, after after many years looking at politics but also arguments of other forms, it does seem that stories are actually better at convincing people then, then arguments per se. And so crafting a narrative story that, that illustrates a point in a more concrete and visceral way can actually be more effective than, you know, a deductive argument in which you argued from first principles because there's usually some assumption made in there or some prior if you're basing a that if you don't agree on, um, you'll just say nine, I know this is completely, this is completely invalid. I'm not going to follow it, but you know, you got a story and the threat of narrative is carrying you through. Um, that's sort of my thinking about it. Hi.

Speaker 5:          35:16          I was just wondering if I could ask you about your process writing this book. I know you said in the Q and a how like you ended up finding narrative themes that you might not have attended initially. Like how, how is the process and dinner? Oh my God, you read, you read the Q and a. My God. Okay.

Speaker 2:          35:30          Well, um, oh boy. Um, let me, let me say something that you, that I haven't already process. Um, well actually to return to the previous question, I did start off by writing some pretty theoretical stuff and I think my editor sort of reacted with harder saying you get, there was an entire, there's an entire, back in the day I did compiler research. I loved working on compilers because it was like, it's like, oh, it puts everything together. And, um, I had a chapter on compilers and compilers as illustrating the structure of abstraction layers and computers. That chapter got a, and it got replaced with a chapter on, uh, my daughter. Um, and you know, uh, what can I say? Maybe it will go onto the next book. Uh, but, uh, so it, it was, it wasn't matter of approximation and it was a way of, you know, I had some existing pieces that I'd written.

Speaker 2:          36:32          Um, there's one in particular called the stupidity of computers for n plus one that, that I think did provide the germ for this. And what I set out wanting to do was to write something that wasn't necessarily for, um, a technical audience, although I tried very hard to make it so that a tech, someone technical would read it and say, okay, this person, this person speaks my language. Because whenever I, whenever I had written for various venues, I would often speak to a software engineer there and they'd say, Oh my God, I'm so glad you're writing for us. You actually understand if he hears that it's happened enough that I was like, okay, there's, there's a, there's, there's a gap here in terms of, you know, people do not want to read another abstract critique of how the, the, the postmodern structure of computation is altering the nature of subjectivity in the, in the postmodern age.

Speaker 2:          37:35          You know, something like that. Uh, that, that being able to talk about this in which the particulars of the computer science matter is, I think something that actually is very useful and helpful. And so I try, I wanted to sort of communicate that tool set as well as some greater reflections on that tool set. Things that I didn't know when I said even, you know, in college but sort of had come to from thinking about them. Um, I was like, I was, I was a columnist for some, for, for slate for some years and one of these, shockingly, while there were two column, actually there were three columns that I wrote that were incredibly surprisingly popular. One was on the amazing kids' game robot Odyssey. How many people here ever played robot odyssey the hardest computer game? It was, it was, you had to, you had to use logic gates to program robots.

Speaker 2:          38:33          This was made for the apple two in like 1984. It is the hardest computer game I ever played. I didn't solve it until I was in college because that's what it asks you to do with logic. Gates is so damn abstract and I didn't possess those skills back then. That one was a huge hit a piece on Rokos. Basilisk was a huge shed because everybody loves Rokos bassline that's going, if you don't know about Roku as pastoralists, you should look it up. And the third one was about Vichtenstein and philosophy of language and how it related to computer science and how it had helped me understand some of the things I was I was talking about. And so in some ways those three pieces, uh, understanding that you know, computers, we're now touching everyday life and that the best way of understanding this was to both have a grasp of bits in the structures of computing as well as the larger picture of, you know, what they meant in terms of everyday living was something that I wanted to communicate it. And then I thought I could hopefully have something useful to contribute on. I don't know. Does that answer your question? Thanks for reading the Q and. A. I think I also said that it was the hardest thing I'd ever done and I still agree with that. It was, it wasn't, it was not, uh, writing is hard. I don't recommend it to anyone who absolutely doesn't need to do it. Uh, yeah.

Speaker 6:          39:54          Hi, thanks for coming. I look forward to reading the book. Thank you. So, I don't know if you answered this in the book, but there's been a lot of talk last few years about teaching computational thinking to more and more people are more simplistically teaching programming to everyone. And I'm curious what you think, whether it is this is a good thing or is it being overhyped? I

Speaker 2:          40:15          mean I guess I guess it can be both. There's always a height, you know, there's always hyper round something or other, it's like, yeah, you can say to some extent, oh, is our team is teaching kids about big data and you know, a good thing are overhyped well, yes it's good to know about those things, but the words big data may make you think, oh well let's not teach it like that. And I think that, I think, I think, I think everyone can certainly benefit from knowing how code works just in the way that I think they're going. People should can benefit from knowing a bit about how machine learning models work and how they can and can't what they can and can't do. Um, at the same time, you know, marketing it as, oh, this is going to be of practical usage to you and you know, you should definitely become a programmer or something like that.

Speaker 2:          41:05          I don't think it's necessary. I think that it would be better to propose this as yes, this is fundamental knowledge in the same way that mathematics is logic. Having some base, even theoretical appreciation of what an algorithm is, how an algorithm can work. Maybe this is because I found this stuff really interesting. I don't know. We recently picked up a book for my seven year old, a mathematics book for a seven year old that was recommended to us by someone other and they said, yeah, yeah, this is great for like, you know, really getting your kid into math. And it was, it was written in Latech and I said, okay, good sign. Um, but I started reading the problem. It's like, oh my God, this group theory for seven year olds. I was, I was like, this is insane. I like it. It was a very impressive, but I literally, I'm the number of kids who can absorb this level of abstraction because it was like, okay, well let's say you have beads on a chain that alternate between these three types of beads.

Speaker 2:          42:02          What does the 493rd bead? It was like for a seven year old. Uh, I was like, all right. Um, so I think it's a good thing. I think that unfortunately, especially Ed tech being the way that it is, you know, there's reason to worry whether the right things are being taught. You know, if you just go, go, if you just teach people how to like design a clock and put it up on the screen, that's, that's interest. I mean, it will get you some appreciation, but um, and use. But I think that, uh, I think that putting into context can be useful as well. Just as you know. I mean, it would be as if you only did like or arithmetic word problems in your entire time at school, you know, instead of going on to Algebra and calculus, I don't know, does that answer your question? Okay.

Speaker 7:          42:52          You mentioned, uh, like a fade. I can logo a SnapVault ed before. And I wonder, what do you think about like this educational programming and, uh, we're going and, uh, uh, what would it be? The future of the, of the logo or

Speaker 2:          43:09          teaching? No, no. I mean, I look at scratch and I have such mixed feelings about it because on the one hand, it's great to have, you know, the notion of, of imperative language and functional abstraction. Uh, and, but on the other hand, it's like they aren't talking about recursion, you know, where are the, you know, we're, we're, we're, uh, uh, uh, uh, that, that I, I feel like to some extent there's some, I, I do feel that you could introduce some of these concepts, some of the higher order concepts in a cool way earlier on. But at the same time, I, I, uh, you know, the fact that the kids are doing them as good and I've seen, I mean, I've seen other computer games, I've seen other like kids' games that, that, that, that work on similar principles. Um, but, uh, I think, uh, to some extent, you know, it doesn't necessarily have to take the form of programming per say as it, as much as it is a certain form of algorithmic abstraction and then it doesn't necessarily require programming so much as, you know, learning the, the nature of how data structures and certain algorithms can, can fit together.

Speaker 2:          44:32          And I, I'm saying that vaguely because I'm just thinking back to the various things I did when I was a kid that they gave me and appreciation, you know, I think truth teller in logic polls are great as well. Uh, and there are probably other forms of puzzles that I haven't, um, that, uh, that I'd never played. That would be great as well. And I think that, um, while we're all here at Google, but if some of us worked on trying to figure out what those are, that would be, that would be wonderful as well. Um, there was a puzzle game I played recently called, uh, Steven's sausage roll doing it. Does anyone know it? It is the hardest puzzle game I've played in many in many years. And I felt that training my brain quite well. Um, uh, in terms of, uh, I mean it, it's, you can see how it was very heavily influenced by abstract Algebra, but it translates those concepts into, into app, into applications within this game so that you aren't doing, you know, purely abstract exercises, but you're actually executing it in a vaguely algorithmic manner.

Speaker 2:          45:42          So I hope there's more of that honestly. Um, I think there's a lot of room for improvement. Um, uh, certainly, you know, I look at, uh, actually it's interesting, you know, my daughter's learning chess and I feel like in some ways chest tutelage has been, has been developed very well because the levels of abstraction you treat and sort of go up that ladder like that. And it's because you have such a, uh, an established context that, that it's helpful. So in some ways I would say that I'm learning chess may actually be better for you than learning scratch. I Dunno. And chess here really, really gets better. I mean like he beats me in chest at this point. Yeah. I mean there's a real ally. You know what? I was six years old and I had an apple, two e with amount of chrome moniker monitored, but you know, here you have, you can draw shapes and that was cool enough for me. I mean, and um, I have a short attention span and need lots of stimulation. So I don't think the kids would be, would hate it today. Try to replace Gretsch with Janice crypt and explain like to my son, how'd you draw these shapes and with Java script. Oh, you're just torturing him.

Speaker 2:          46:51          Sorry. It didn't seem that interested. If that's cause of javascript type python at least you know, uh, or Apl, maybe he'll like the cool little lake. You know the symbols. I don't know. Sorry. I look, if I had been introduced to javascript when I was six, I probably wouldn't be appropriate. Um, does someone else have a question back there? Peter, you must have a question and give me a hard time on logic and reason. Do I what were that? You put too much weight on logic and reason, didn't I just criticize it? Well, yes, but there was a lot of, a lot of philosophy and logic in there. I mean the, the background experience there is the discovery that winning an argument doesn't make you right. Yeah. So, well, I mean, to some extent I was hoping to play to this audience. I wouldn't have read that section to, uh, to, to, uh, to an audience of lit majors.

Speaker 2:          47:58          But this is presumably what folks here do all the time. And, uh, you know, maybe software for software engineers have changed, but I feel that the impulse to, uh, to, to quantify and regimen things logically is still pretty strong amongst, uh, software engineers and other sorts of engineers and scientists. And so I think it's worth exploring. And I think that the stuff I talk about still underpins a lot of, uh, a lot of arguments, I think. And even if you look at, you can see it. I guess if I were talking to an audience of statisticians, I'd probably be talking about Bayesianism infrequent to us and I, and you could come up and ask me, do you think you place too much emphasis on statistics? And I was like, well, you know, it's everywhere. So the world may place too much emphasis on it. Uh, software engineers actually believe in truth in their programs.

Speaker 2:          48:57          No, no. I mean, that's, what do I think software engineers believe? I think that software engineers have a tendency towards reifying contingent categories as, uh, as literal and, uh, and permanent. Uh, for example, the, these, uh, these, these four like personality tests, you know, I, uh, you know, people maybe people don't like, uh, many people don't go from Myers Briggs, but you know, apparently we subject a lot of people to classifying people into four colors, green, blue, gold, and orange. Uh, apparently most people turn out to be Greens. Uh, so if this is something that, you know, we all take seriously here at Google, I would say, well, I know you don't take it seriously Peter, but would you argue that most people take it seriously here? Okay. My experience was that video, um, it's easy to, to over over, wait what shows up on weird male threads or in fact any mail thread. Right. This is just from talking. I believe this was just talking to people. I mean, I didn't read mail threads when I was, I can't seem to help address a statistical group. We would argue about your sampling procedures, right? We could, but don't you think you're putting too much emphasis on statistics?

Speaker 2:          50:23          No, I think that's the only way to truth. Well as so there you go. Uh, uh, perhaps overweighting the, the, the, the logical truth. No definition. I have what I think is a very relevant question. I was wondering if you could talk about what it's like to write for and be criticized by programmers on the Internet. Uh, yeah. I mean, I'll be honest and say people were actually really nice, I think. And this is the sort of reinforce that that a lot of the feedback was, oh my God, finally someone who knows about coding. So I would say if anything, I was spoiled because I think that there's not a lot of technical knowledge on display, at least in the so called popular press or you know, uh, that, um, that I wouldn't say I've gone, I wouldn't say I've gotten a lot of, uh, of flack.

Speaker 2:          51:24          But in, in general, I think that if anything, I detected that there was a certain frustration and I mean this is the frustration sort of getting writ large at this point because you have a larger cultural clash. And this is something that I've seen being involved in like the New York writing scene and how much resentment or at least loading her is towards the Silicon Valley and, and, and tech people of all stripes. And this can extend to an ontological critique that anyone in programming must therefore be a, an awful evil positivist, which again, yeah, feed or you're right, they aren't. But you know, there are lots of big names who speak for technical companies who certainly qualify more on the positivists side of things. And there's a lot of anger. There's a lot of unjustified or anger towards them, which I think, which I think is based in ignorance.

Speaker 2:          52:23          I also think that, you know, yes. Uh, the, the, the worldview could do with some intelligent critiques rather than ignorant critiques that just really caused them to double down and think that, that, uh, that uh, you know, maybe we should go back and go back to iron rand because she was, cause she was right after all. Um, I dunno how, how's that, how's that for an answer? Uh, I mean it's a culture clash and it really is. Um, but, and I guess the thing is, is I have, I have an affection for both sides, I suppose, as well as frustration with, um, perhaps close mindedness that that occurs of which I have my own, uh, my own variance of it. You know, am I going to sit here and tell you that you should reject Derrida? Hell No. Am I going to tell you that you should sit here and read?

Speaker 2:          53:20          Uh, um, I don't know. Dennis DDA row. Yes. Yeah. Just stuff to be gained. But unfortunately, what rises to the top isn't always the best stuff. You mentioned that writing is work hard, work any word and recommend it to anyone. So do plan to continue writing and will it, will it be on the familiar topic? Yeah, I have a problem. Yeah. I mean it's, it's you, you do it if you can't do anything else. I mean, there's a Thomas Mohn quote where he said, a writer as someone for whom writing is harder than it is for anyone else. And I don't think, I don't know that that's true for all writers, but it's certainly true for me. And, um, I just, you know, it, it's, it's scratching some itch and you try to do it so that you hopefully are serving some greater purpose with it.

Speaker 2:          54:11          But, um, that's a sort of question that can make you very, very self conscious in a hurry. But I do plan to continue it. I'm writing a, I'm writing a, a young adult novel right now to get a complete break from this because, um, um, I didn't want to write about myself anymore, but yes, I have, I have more to say about computers and hopefully that'll be, that'll, that'll be in calming. Uh, in the short term, what is short term? Uh, oh boy. Knowing I mean, God, you know, and life cycles of books are much slower. So it depends if a, how next few years. I hope, I hope, uh, sooner if, uh, if the publishing industry decides to decides to speed up, it's uh, it's cycles. But, uh, I mean there was like a year turnaround after finishing this before it actually like came out. So it's, uh, I, I do miss the, the, the rapid release cycles of, Hey, I just called to this fixed, let's push it out.

Speaker 2:          55:11          All right, good night. Um, if I could do that with a book, that'd be great. That's why I still, you know, I still blog sometimes just because be able to write something and actually put it out there for, uh, for consumption the same day is amazing. And one of my most popular pieces in the last year, I actually went through that and I had, which was my explanation of the finale of twin peaks, the return, which I wrote in a couple days post it. Apparently a lot of people really wanted answers because overnight I get like literally like 10,000 times more traffic than my little blog has ever seen before.

Speaker 5:          55:47          Watch like five packets. I felt like I didn't me, but I'm just curious.

Speaker 2:          55:54          Um, I mean, what I always told people, look, if you're not enjoying it moment to moment, don't watch it. You want, it's not worth it. But it's a, but I, at the end of it, I did want to know more. So anyway, thank you very much everybody. It's been great. It's been fun.