Speaker 1:          00:06          Introduced a manual Schanzer Emmanuel is a creator and Co director of bootstrap when the largest form our k through 12 computer science initiatives in the US. He spent several years as a program manager and developer before becoming a high school teacher at the Middle School academic coach. And it has long been involved in connecting educators and technology, building partnerships with depression organizations, universities and companies from across Silicon Valley to bring a rigorous high quality cs education to all students, particularly underrepresented groups. He holds degrees in computer science and curriculum development and his research focus involves using programming to teach Algebra.

Speaker 2:          00:37          Cool. All right, well thank you. Well, hi everybody. Thank you. Thank you. I haven't even started. I want to thank all of you for being here today and uh, also as I mentioned before, I really appreciate you taking a moment away from the Comey testimony to uh, to join us here. Um, so it's great to be back at Google, so thank you for having me. I especially want to extend a thanks to Andrew for the invitation for setting this up and I'm going to spend the next 35 or so minutes talking to you about computer science education formulated as an engineering problem. So as Andrew mentioned, my name is Emmanuel. I work with a team. Uh, their names are up here on the slides for him. Krishnamurthy Kathy Fisler and I'm a young Smith and a bootstrapper right now is one of the largest formal in school programming courses in the country.

Speaker 2:          01:23          We reach about 20,000 students every single year. Most of these students are taught by teachers with little or no computing experience. Um, 43% of our students are girls and young women, 46% self identify as African American or Latino. So if you're, you know, counting these numbers, these are pretty good in the CS education business. A lot of these classes often struggle to recruit underrepresented groups. Um, I'm going to tell you a little bit about how we did what we did, where we're going, and uh, hopefully pass on some of those lessons to you guys, especially since you were engineers. And I think this is a problem, uh, that you guys have a unique way of looking at. I'm not an engineer's broadly. Also sales geos here as well, I guess Geo engineers, but other Googlers overall. So let's start with a question. Um, somebody walks into your office and says, you know, I, I want to teach computer science. You guys are the expert. You work at Google. So what language should I use? So I'm just curious, take a second. I want to, I want to hear like a couple of suggestions. Like three, three, three folks. What would you recommend to someone who's asking you this?

Speaker 3:          02:26          Right.

Speaker 2:          02:27          Excellent. Scratch. What else? Python. Great.

Speaker 3:          02:32          One more recommended list

Speaker 2:          02:35          he recommends list. Great. Okay. There's always one. All right, sounds good. And this in fact is exactly the way it goes. So here's an example of an actual Facebook thread. Um, someone asks was on post and says, Hey, I'm looking for a device on teaching some coding. What do people think I should use? And the responses are all things like scratch. Indeed was the first one, someone else's recommending some logo. Uh, someone else is looking at, uh, let's see. Uh, they're talking about maybe c plus plus maybe Java or python. So the answers are all immediately here are some languages, Harrison tools. Um, letting ask you a slightly different question. Someone walks into your office and says, Hey, I want to make software. You guys are Googlers, what language should I use? So what do you tell them?

Speaker 4:          03:26          What type of software?

Speaker 2:          03:27          So you would push back, you'd say, well, what kind of software do you want?

Speaker 4:          03:30          It's an android APP. You have to use Java. It's a iPhone APP. Yo see objective c or swift or something.

Speaker 2:          03:41          Yeah. So you're saying that maybe before you answer with the language, you would ask a little bit more about what this person is trying to make. Right? Even though they came to you asking for a language, you're saying, well, back up a second, what do you want to do? And I think that's sort of telling that when someone asks an engineer, what language should I use? The engineer says back up, what are you trying to do? But when it comes to education, if a teacher says, what should I use were instantly quick to jump in and say, you should use c sharp, you should use scratch. Things like that. Why? I mean, as engineers, the first thing we should be doing is looking at what are the constraints of the problem. So here are some educational constraints that we should be asking before we answer that teacher's question.

Speaker 2:          04:25          How old are the students? Right? Maybe they're 30 maybe they're five. That might change our answers a little bit. Have they had prior programming exposure? Is it their first program in class or do they have master's degrees in computer science? Is it a required class where you're going to have every kid there or is it self selected kids? How long is it right? Is this to run it on all day, summer camp, eight hours a day, every day? Or is it like, you know, half an hour coding club Monday mornings? Is it even a class? Maybe it's a drop in coding club over at the local science museum. And some kids are there every day. Some kids shop once and you never see him again. Now I think if I had given you guys more time to think about this question, you would have come back with some of these constraints you would have asked about them, but there are some other constraints that you might not have thought of.

Speaker 2:          05:11          So if you're interested in getting computer science into an educational context, you should also ask yourselves, how many kids are there? Right? Is it one teacher teaching a giant lecture hall or is it just a small group of kids? Um, similarly, is there Internet access in the school or an educational setting? Is the teacher new to programming maybe the teacher has never coded before? Can the students type that isn't a critical question that might immediately lead you to say, well, you know, scratches a great place to start if they can't type. Are there students with different ability levels, right? Are they visually impaired? Do they have sensory motor impairments? If you're talking about schools, the answer is yes. And you have to ask what those impairments are, what the different ability levels are, because those will change your answer. Do they have regular computer access at home?

Speaker 2:          05:56          Because if you're a programming class and you're relying on kids completing programming assignments for homework, this matters. And in fact, do they even have regular computer access at school, right? I mean, if a teacher says, I want to teach computer science, we often think, oh, you must have a computer live. Kids must have computers every day. Often what it really means is there's like a laptop cart that comes around on Friday. So these are the constraints that we need to ask about before we even barge in and say, well, here's how computer science education should work. And you know, as, as computer scientists were often over fixate on the tool, right? We jumped into the language, we jump into the software, which is why I think when you look at the last 40 years, the history of cs education has a history of tools. Here's the new tool that's going to change the way programming has taught forever.

Speaker 2:          06:42          And then 10 years later, here's the new new tool that's going to change the way programming has taught forever. And this endless cycle never gets us anywhere. So let's look at this as engineers and say, let's define the problem. What are our constraints and what are our metrics? We've talked about our constraints. I'm going to posit that there are three metrics we should consider. So first is equity, right? Without equity, we could get computer science into every school and then the only kids who show up for the class or rich white boys, and I think none of us would be thrilled with that. So equity is number one. We also want scale, right? We need this to be reachable by millions and millions of kids. And you've got things like hour of code that reach millions upon millions of kids, all kinds of kids. But even code.org even Hadi Partovi himself would say hour of code is not rigorous education.

Speaker 2:          07:27          It's merely exposure. What we want for our third criteria is rigor. If we hadn't gotten all three of these, I would propose that we're never fully successful, we're never where we need to be. So with these goals in mind, let's look at the solution space cause there's sort of four strategies that people tend to use when it comes to cs education. So the first is let's make it a required course. Every child in America must take computer science before they graduate. Okay. Um, there's a riff on this, which is, no, no, no, no. There should be a computer science course in every school, but it's optional. It's an elective that kids can choose. Option three, forget all of that. We're going after school an option for maybe instead we try to integrate computing into some existing mainstream classes. So let's look at these four. And I just want to say that, you know, all four of these strategies have merit.

Speaker 2:          08:19          So as I go through this, you know, some have strengths and others have weaknesses and that's fine. I think there's room in this space floor for a plurality of approaches. So let's start with the required course, right? Let's, let's talk about that strategy. Well, the problem with required courses is that require this strategy doesn't scale. If we really wanted to get computer science to be taught to every child in America, and we need to do four things. First, we would need to have something called cs teacher certification in every single state so that a teacher could become a CS teacher. And right now less than half of the states have such a certification. So that means a policy effort that's going to take a lot of years and a lot of dollars to create. And then once that's done, we need to recruit and train at least 20,000 full time dedicated cs teachers.

Speaker 2:          09:04          And that's even more years and even more dollars. And then let's just assume that none of those teachers decide to piece out and go work for a technology company because now they can make a whole lot more money. Let's just assume they all stay in the classroom, right? We still have to pay their salaries, which means at least a billion dollars a year added to the national education budget in every single year in perpetuity. That's not going to happen anytime soon. But suppose somebody with deep pockets opens up and says, I'm going to pay for all of it. It's totally okay. Well, beyond paying their salary, there's also the laws of time and space and there's a finite number of hours in the school day and rooms in the school building. So where are these cs class is going to fit, right? It's essentially a nonstarter. So there's a lot of benefits here, but right off the bat would give up on scale, right? That's not happening with the strategy. Even worse, if it's a required class that kids need to complete to graduate, that means you have wildly different ability levels in that classroom. And because it's a graduation requirement, there's a perverse incentive on the part of the teacher to get rid of the rigor, right? To make sure that every single kid can pass it. Because we don't want kids dropping out of high school because they didn't pass their cs class. So we may lose some of the rigor as well.

Speaker 2:          10:16          Well, I mean it often does, and that's why it's shaded, right? So some teachers will hold the line, some teachers will say, no, I'm going rigorous the whole way. And that's why it's half on there. Right? I think some teachers will take that. We'll take the approach that you would take. There are other teachers that are going to say, you know what? I wasn't even a CS major. The fact that I don't know, you know, this computer science class, I don't want any kid to fail up, so we're just going to do something that's Ah, that's fun and sort of easy to pass. And that's just, that's merely a risk. It's not an a definite outcome. So let's take a look at strategy number two. What if computer science was simply an elective, right? That solves some of these problems. Well, the problem with elective courses is that they're not equitable.

Speaker 2:          11:06          And I'll tell you why. So every school has a set of graduation requirements. So here's a hypothetical grid of courses that a student might take in different subject areas years one through four, and you can clearly see there's room for computer science there. What happens if a kid fails a required course, for example, Algebra one, well then they have to retake it their sophomore year. So we've just moved this pathway down a notch, but they're also doubling up. The school will typically assign them to a second math class, like a remedial math class to make damn sure that that kid passes their Algebra class this time. And of course they're missing their fourth year of math. So what happens? They get another year added somewhere else in a different track, maybe financial math, applied math, something like that, to give them the credits that they need.

Speaker 2:          11:52          And then over on the column you'll notice that virtually every science has Algebra as a prerequisite, right? Without Algebraic functions, you're not modeling projectile motion and physics, you're not balancing chemical equations. So often there's a delay introduced a bubble in the pipeline, and that's if they fell class once. What if a kid fails to classes, right? You had this nice grid structure that allows for all these courses, but now there's this cascade of errors. That means that these students don't have room in the schedule to take the electives. So for students who fail these classes, they're, they're exed out of these options. And when you look at the students that typically struggle in the mainstream classes, often they split along class lines, poverty, lines, ses. And because of some structures that we have in America, those are also divided among racial lines. So these elective courses are great to have, but it's no surprise that when you look at the courses that are being offered right now as electives, often there's a particular profile of student who winds up being in the classroom. So going back to our scorecard here, you know, we lose equity off the bat. And I think that there is often something of a risk in losing rigor. And I'll tell you why, because for a school that's just offering a single computer science elective, it's not cost effective for them to hire like a full blown computer science teacher. So what are they gonna do? Who's gonna teach that class?

Speaker 2:          13:10          So maybe a math teacher, maybe a history teacher, right? They'll ask another teacher to take over that class, which means we lose the ability to ensure that they have the necessary training and depth of content to ensure rigor. So again, rigorous sort of a risk here. So let's take a look at strategy three. What if we did? What if we just bypass the schools all together and did computer science as an afterschool program? Well, this is a strategy that I can tell you a lot about. So bootstrap began as an afterschool program and several years back, early in our growth, we were actually one of the largest afterschool programming curricula in the country. And in fact we had tons of engineers from Google who taught the class and after school programs. And when we looked at the impact we were having, we shut it down. That's a battle scar.

Speaker 2:          13:55          And I'm going to tell you my reasons for doing so. See the problem with afterschool computer science is that by definition it has to compete with afterschool football, basketball, theater, sculpture, having a job taking care of your little brother, which means the only kids who show up for afterschool cs are the kids with the means and inclination to do so. They already see themselves as interested in coding. So equity goes out the window very, very quickly. Once you scale beyond a certain group, you lose equity. But there's something else which is that after a long day of school, kids are exhausted justifiably so, which means it's extremely hard to teach a rigorous afterschool programming class. Now this is not to knock after school coding clubs. I think they're fantastic. I think they add a lot of value. But I think often the critique that you hear is this after school thing. It's really great kids, they're getting engaged, but I wouldn't say they're learning rigorous computer science. Um, so easy to scale, but you risk losing some other stuff as well. So what sort of ruled out the first three strategies as, as having some benefits but not necessarily getting us to the whole, to all three of our metrics for success. So I want to pause for a second and give you an indication

Speaker 2:          15:08          the idea that everyone should learn computer science does not mean everyone should take computer science classes. I think this is, this is a tenuous connection that we need to sever. So I want to talk about the fourth strategy, which is what does it look like to integrate computing into a mainstream course? And if you were to pick a course, any course, I think you'd want to pick Algebra and I'll tell you why. So first Algebra is the gateway to all stem. As I mentioned before, you fail Algebra one and you just give up on math right there. Yeah, you're screwed for the m part of stem, right? You're not going to become a mathematician, but you're also not going to come a physicist without functions. You're not going to become a chemist or biologist. Even if you want to go into economics, financial literacy, you need to know Algebraic functions. If you want to model things like compound interest. So a kid who flames out of Algebra one has essentially made a career decision where they're, they're exed out from stem. Um, in fact this impact is so significant that a 2004 study looked at the correlation between grades kids get in high school and their lifetime earnings. And what they found was that the greatest child gets an Algebra one is the most strongly correlated of any subject with the amount of money that child will make for the rest of his or her life.

Speaker 3:          16:23          Okay.

Speaker 2:          16:23          And finally, we live in an era of high stakes testing and standardized test and Algebra one is a requirement in every single school in the United States, which means that the superintendent of New York City public schools isn't staying awake at night having, you know, shivering saying, why aren't my kid learning to code? What they're really worried about is are my kids going to be able to pass the Algebra exams? And this is happening nationwide, right. Typically when you hear people compare how we're doing to other countries, the thing that that scares us the most is other countries are beating us in math. And guess which part of the math test people freak out about the most? The algebra. It's a word problems.

Speaker 2:          17:03          I mean it's not only is it not necessarily required everywhere, but typically when, when you think about Americans who are scared of math, it's always the train leaving Chicago and the train leaving, leaving New York, right? It's this like nightmare word problem that we all we all giggle about, right? Because it's true. We have like national PTSD when it comes to Algebra. So this is a class that's in need of help. So what if we tried to teach computer science through the Algebra class? What if we integrated? So I'll make a strong claim here that the integrative strategy is scalable, equitable, and rigorous. Here's why it's scalable because every child takes Algebra, right? You're immediately reaching every child in the country. You're leveraging the huge network of existing teachers, courses and professional organizations that are already out there. So we can grab that scale and run with it to teach computer science.

Speaker 2:          17:54          It's also equitable. You know why? Because everyone takes Algebra, which means right off the bat you're removing the negative stereotypes that are accidentally reinforced by things like electives and afterschool clubs where when other kids would look at who's taking those courses, they say, oh, that that student doesn't look like me, but if you were in the Algebra class, we get rid of that right off the bat. We're all in it together and it's also fairly rigorous, right? The content in Algebra is well suited to rigorous instruction and evaluation. Algebra teachers confront issues of abstraction and funnel notation all the time. There are some great corollaries here that can we can put to use to teaching computer science. So you're probably sitting here saying, oh my God, Emmanuel is telling me that, that this is basically a free lunch, right? We get all of those metrics for free.

Speaker 2:          18:39          It's fantastic. Do you believe me? No, because there's no such thing as a free lunch. So here's what we do, right? We've essentially traded one set of challenge and constraints for a different set of challenging constraints. So rather than trying to like jam computer science into a resource starved educational context, now we have a different constraint problem to solve. If we want it to fly, we have to have transfer, which means the computer science kids are learning in the math class had damn well better result in them learning math better than they did before. Otherwise the math teacher's going to just going to revolt. They're going to say, I don't care how cool this is or how useful it is. My job is to teach math and if I'm giving up time from my math class, it better result in improved math outcomes. Right? So in cognitive science literature, this is a phenomenon called transfer.

Speaker 2:          19:27          Transfer is pretty simple. A skill learned in one context can be used successfully in a different context. That's our goal and it turns out that transfer happens all the time, but almost never in the way you expect. If you want to actually guide kids to transfer, it's much harder than you think. So how do we guide kids from transferring skills and computing into Algebra? Well, we know that there are three new constraints. Number one, you have to have explicit instruction. Having a kid perform task a and then later having them perform task B, a and B might seem similar to you, but you have no guarantee that student is going to make the connection. And often without having a teacher in the room to explicitly tie the two together, it ain't going to happen. But that's okay. Right? We're dealing with math teachers so we can check that one off.

Speaker 2:          20:16          Number two, the tasks that you're using in domain a and B have to have deep structural similarities. How deep am I talking about? I'll give you an example from a 2009 case study. They looked at a, a physics teacher who was talking about gravity and acceleration and had his students do tons and tons of problems where a ball was dropped off of a tower or off of, um, I don't, out of an airplane, things like that. And they, they studied how fast the ball was moving after a given time where it was after a given time, all sorts of stuff. And then they gave the kids a quiz. The quiz had balls being dropped down holes and the students complained, you know why you didn't show us any whole problems. So trend like the, the level of structural similarities needs to be insanely high in order to really facilitate transfer.

Speaker 2:          21:10          And finally you need to have a process for performing tasks, right? You can't just give kids a problem in domain a and then assume that they will magically understand how to transfer that to solving that problem in domain be right. A classic formulation of what I just said is we often think that we're teaching kids problem solving simply because we give them problems to solve and that's not true. So we've got to have an explicit task. So these are our new criteria. We've already got one. Let's talk about how we get number two deep structural similarities between computer programming and Algebra. Well, there's a problem because most of the coding that we do in K12 doesn't actually have functions. And functions are kind of important for Algebra. So a lot of teachers will use that function machines, right? There's inputs and outputs. There's a vertical line test, except often you have functions that you know, return, void or functions that you give them the same input 10 times, you get 10 different outputs.

Speaker 2:          22:02          This is perfectly common in many programming languages. Um, there's no computer output, right? Here's a block from a, a language you might be familiar with. What's the output of that function? There's nothing computed that's showing up. So for a teacher who's trying to make connections between the functions on a computer and the functions and Algebra, this doesn't fly. Coding also doesn't have variables for the most part. Here's a classic example from python x equals 10 and now x equals x plus two. When you run this program, what's the final value of x class? Fantastic. Actually, no, that's not right at all. I'm a math teacher. This is nonsense. And you can probably guess why. And there's actually two problems here. One is, will. Can you guess what one of the problems is?

Speaker 2:          22:52          Yeah. We're overloading the equals sign, right? We're treating something that has a clear definition in mathematics to mean assignment, right? Assignment is not equality. So that's a syntactic problem, but there's something much deeper at work here, which is the semantic problem because assignment does not exist in math. And for those of us who know that sometimes state can be a little bit hairy when you're writing code, right? State is a known challenging thing for young programmers to get a handle on and that's hard in a programming course. Now we're going to ask a math teachers to teach that and at the same time sufficiently differentiated from the equality concepts that they're learning in the math book. So this is a very tall order and it gets worse because coding also doesn't have numbers and you kind of need numbers to do math. What do I mean by that?

Speaker 2:          23:37          Well, of course you guys know what one over two is, right? What's one of your two zero, right? Because in Java that's what you get and you might say, oh, manual, you're just being, you know, you're just being silly. A teacher needs to make sure that they're teaching kids to declare things as a float, not Annette. Maybe that's true, except in a math class. That's not part of the standards. And so now we're asking math teachers to teach kids about these different partial representations of numbers, which again, takes valuable time away from actually teaching math. And that's a problem. But of course these partial representations, no matter which one you pick, you're going to get burned one way or another. A math teacher will often teach kids this important property. If I have three numbers a, B, and c, these two expressions are equivalent. Y'All agree? What if a plus B is too big,

Speaker 2:          24:33          right? Maybe a minus c buys us some room before we have an overflow. So the bottom one competes, but the first one gives us an error or maybe vice versa. The bottom one is an underflow error. So this statement that these two expressions are equivalent is now wrong in a math class. It's wrong and it gets even worse because let's say we use those floats, for example, we'll float introduce error, right? Which means that these two expressions are no longer equivalent. Either we've just broken associativity and distributively in a math class and we're going to ask a math teacher to teach it to. Even if we could. These are known obstacles for transfer, so if your goal is teaching Algebra, this is deeply problematic. So what do we do in bootstrap? Well, we decided, you know what? Functional programming is a pretty decent way to do this.

Speaker 2:          25:21          It enforces much more algebraic behavior. We chose a language that has a strong numeric tower implementation, so numbers behave as close as it's reasonably possible to the numbers that behave in the book. So we get a lot of the deep structural similarities and then we actually do programming using word problems taken from a math book. So we get some of that for free. But what I want to get back to is this idea that the takeaway should not be functional programming is awesome, right? Functional programming is necessary if your goal is Algebra, but it is not sufficient. You also need a curriculum that uses functional programming because the curriculum is critical if you want to teach the process for performing those tasks. So I'm going to explain this using an extremely scientific graph. So pay close attention. This is very, very scientific. Um, uh, we can graph a student's frustration level as a function of the number of lines of code that they've written.

Speaker 2:          26:13          Um, and typically it looks kind of like this. So you give kids a programming challenge and you say, all right, kids solve it because they fire up the editor and they're, they're starting here, they're going, I don't know where to begin. That first line of code is sometimes the hardest line for a kid to write. Sometimes even for an adult. This is essentially called the blank page syndrome. They're like, w where do I begin? But eventually maybe with some prodding from the instructor or maybe on their own, they start writing some code. They're starting to get things going. Their frustration level goes down and students are kind of like three d printers, right? They work by additive manufacturing. So every time they encounter above or every time they encounter a new feature with their solution, add more lines of code, just more and more lines of code.

Speaker 2:          26:57          And gradually the complexity goes up and they hit a bug. And the, the way around the bug is, I'll just check for that case and I'll add more lines of code and so on and so forth. But eventually this path becomes unsustainable and it gets harder and harder to fix those bugs. And eventually the kid raises their hand and says, my program doesn't work. I'm stuck. This is a common pattern in computer science education. And those of us in the room who may have done some teaching of computer science, may have seen some of this play out. Now how do you deal with that? Well, let's look at any other discipline, right? Every discipline works in a completely different way from this idea. They have, uh, like architects. Architects don't start by pouring concrete and then just adding stuff until you get a building, right?

Speaker 2:          27:40          They have three d models. They have blueprints. Um, let's say you're building a, you're building a device and if you are building the first mouse, right, you don't start by ordering a manufacturing prototype and then adding to it until it works, you probably think it through with some circuit diagrams, maybe some other kind of model. Um, the point is we don't just jump to the solution and start hacking at it until it works. Typically what we do is we follow some sort of multistage path to a solution, right? We start with one thing and then we build on it. And that one thing is not the same representation as the finished form. An architect might start with a blueprint, not concrete. So we have these multiple representations that we pass through on the way to a solution and each representation represents a different perspective on the solution. So one representation might be great for answering one category of questions and a different representation look better for another category.

Speaker 2:          28:35          This multidimensional view is also present in software engineering. Right? Often there are specs, often there are test cases. Often there are long, you know, uh, uh, user interaction specs that are written up. There are lots of things that go through before you just instantly start coding. And it turns out that there's a multidimensional view that every teacher, every math teacher cares about too, which is functions, functions have multiple representations. I can think of it as a symbolic form. I can think of it as a line on a graph. I can think of it as a mapping between domain, I'm sorry, a table of inputs and outputs and a mapping between domain and range. So every Algebra teacher out there already understands this idea of multiple representations, multiple stages, and multiple viewpoints. So what does this look like in a programming class? So this is an actual worksheet from the bootstrap curriculum that math teachers use.

Speaker 2:          29:25          Um, it's got a fairly simple word problem. This one is aimed at programming. So, uh, in the process of making a video game, so every bootstrap kid builds a game. They need to write a function that controls the movement of their target. So we have our word problem, write a function update target, which takes in the targets x coordinate and produces the next x coordinate, which is 50 pixels to the right. Step one contract and purpose statement. We ask students to come up with a name, the domain and the range of that function and to write a purpose statement, an English language summary of what that function does, and then we ask them to write some examples, update target given 10 the work it should do is 10 plus 50 same thing for 20 then we ask students to identify the pattern, what's changing, what's the rule, and from there they can derive sort of the finished form.

Speaker 2:          30:17          Now as software engineers, this looks somewhat familiar to us, right? That first stage kind of looks like having them read a type specification and maybe a comment as well. That second part looks an awful lot like writing test cases and then of course the final representation is then you go and write the code. So students are doing all three. A math teacher would totally disagree. A math teacher would say, no, no, no, no, no, no. That first step, I know what that is. It's domain and range. It's thinking of a function. A function machine is mapping between these two sets. And that second one, that's input output tables, right? That's that little, uh, the tea table mapping between discrete input and output pairs. And finally, I don't know what that code thing is, but this is clearly the symbolic form or the function. So these representations dovetail beautifully in the context of a math class.

Speaker 2:          31:03          So we've got multiple representations of code, multiple representations of functions. And with this as a scaffold, we're able to manage this frustration because at every stage students know what's expected. At first, the very first thing I do is write the contract and purpose statement. And each one of these gives you a different perspective on the problem, a different viewpoint, which allows you to build into the next stage. So scaffolds are useful. This is the explicit task that t that student teachers teach students how to do when they're programming the computer that they can then transfer over to the domain of math. When I'm working on a word problem, I'll use the same strategy. So when you look at things this way, we sort of have the dependency graph if we want to satisfy these constraints. So there are three things that work here. You've got to know what programming language you're teaching. If you want to teach computer science, what language am I teaching? You also need to have a curriculum. How am I going to teach it, right? What active activities are kids going to go through? And then you need a pedagogy. What will it look like? What is the explicit task that students are learning? And often we just pick one off the shelf and say, we're teaching scratch. Great. Now let's build a curriculum. We're teaching python. Great. Let's figure out a pedagogy. But can you guess what the dependency graph looks like here?

Speaker 5:          32:23          Wow.

Speaker 2:          32:23          Pedagogy first. Anyone disagree? If we're to draw arrows here, where do they go?

Speaker 5:          32:31          I mean, it seems like you're choosing language first. You're going to choose scratch

Speaker 2:          32:35          if it right. If someone says I'm going with scratched, they would choose language first. But let's say that you were starting from a clean sheet of paper. We want to change CS education. We want to set up a class or an after school club or whatever. What does the dependency graph look like here? Is there a dominator or they codependent? What do you think?

Speaker 2:          32:56          Maybe language last? Well, you can approach it from any perspective, but all three of them have dependencies on each other. The moment you make one choice in this graph, you instantly prune the tree for what you can do elsewhere. So here's what we did to build a curriculum that could be integrated into a mainstream Algebra class. So I heard a volunteer say maybe we should start with a language, so sure, I'll start there. We knew it needed to have easy unit tests, right? It needed to be really trivially easy for kids to create that input output table. So that meant for us vertical line test, we really wanted to functional language so that we wouldn't have to manage state. We also wanted the first class images because images are engaging and fun. And it's really nice if kids can just write some code and see the output right away as a computed output from the function rather than worrying about setting up a buffer somewhere and then retrieving it. But most importantly, we wanted mathematical semantics. We wanted to have that deep structural similarity between tasks.

Speaker 6:          33:56          The main reason kids are scared of math class, they were scared of the previous math class in the previous manifest before that. But what the kids think math is his arithmetic. And as soon as they see numbers, their palms start sweating. So when I've taught this kind of thing, um, uh, we started with images on the first day of class and we'd get to numbers about week three or four.

Speaker 2:          34:21          Yeah. So making images easily accessible, lowering that barrier for some kids can be a huge motivational boost. So these were the criteria we wanted that led us to choose the language we wanted. And I just want to point out, we started with the criteria, not the language. We started with those three things. And from there we picked our language. We didn't decide we were in love with less than we wanted less per example, but for our pedagogy we used structured problem solving, right? Because we want it to get that explicit task and that problem solving strategy had to be multi representational. It had to use worked examples because that's the pedagogy that math teachers are familiar with and we actually borrowed it from a phenomenal program that's been running for more than 20 years at the university level called program by design. So it's an effective pedagogy that's been proven successful.

Speaker 2:          35:04          We ported it to middle and high school math and then finally you need a curriculum and by the way, for those of you that are interested in teaching computer science, maybe at a local school or at a summer program, a curriculum is not a list of activities that is not a curriculum. A curriculum involves lesson plans, homework assignments, exit slips, a warm up activities. It's aligned to national and state standards so that a teacher knows where things fit. If you're expecting that teacher to go and build this on their own, looking at a list of activities, it's not going to fly because guess what? Teachers are really busy and the curriculum developed has a narrative final project that ties together everything students have learned. Every student in bootstrap builds a video game of their own invention and so at the end of the class, kids can do a video game launch party, right? It's sort of like a science fair for the math department where they show off what they built in their math class. We believe that Algebra is the moment where math becomes creative, right? You're literally making your own functions. You're building your own mathematical tools. Well, let's make a video game out of it and so you'll notice that what kids are presenting here is not showing off their cool graphics for their games. Although they do show that we actually have kids do code reviews,

Speaker 2:          36:13          parents, friends, teachers, and sometimes visiting engineers ask students questions, why did you do it this way? What would you have to change to add this feature or that feature? And students are required to look at which representation makes the most sense. To answer that question, is it my unit tests? Is it my, my, uh, type specification or am I going straight to the code? So this is something that we're doing at the middle and high school level because we're building on something that math teachers already have them do. Kids are used to going up to the front of the room and explaining their solutions.

Speaker 5:          36:44          So

Speaker 2:          36:45          that's what we do at bootstrap. That's the strategy that we've taken and you know, we believe deeply in equity scale and rigor, and we can do this not just to Algebra, but also through additional curricular offerings. So we've partnered with the American Association of Physics Teachers to build a bootstrap physics module that does the same thing for a physics class that we've already done for Algebra. And we're also working on a data science module that can be integrated into a high school statistics class. Or there are plenty of other classes that use spreadsheets, right? Business classes, civics classes, right. There are students who might want an ask. I think stop and Frisk is racist or I think it's not. And guess what? That database is publicly available. And in the data science curriculum, teachers can have students answer that question themselves by viewing programs as questions they ask of data. And by aligning it to the standards that teachers already have to teach, we can embed this in a mainstream class. Our vision is that a school should be able to give kids at least three, if not more, entryways into computing throughout their high school career, all without having to find room in the budget for a new teacher or woman. The schedule for a new course

Speaker 2:          37:55          if you want to get involved, if there's tons of things that uh, there's tons of places to help out. We built compilers, we create programming language, we live on the web. All of our stack is built on Google technologies. So if you're interested in helping out, but you're like, I kind of want to focus on the engineering side, there's a ton of engineering help we could use. If you want to be an advocate, talk to your local school or district. Ask them why their math teacher isn't using computer science when they could spread the word at the office and of course if you'd like to contribute, you can. Our website is here.

Speaker 5:          38:24          I want to end on this note.

Speaker 2:          38:27          I think Google more than any other company in the world right now understands the importance of disciplined. Sometimes engineering. I mean you guys have thousands of engineers working on data integrity, right? Just to make sure that one file doesn't get corrupted when it's duplicated across the network. Users don't often see the magic that's going on there, but Google understands that that kind of stuff is critical for building a scalable infrastructure. So often in the tech sector, when we approach education, we stop thinking about it as an engineering problem. We'll just dive into what we were taught, what we think is cool, what we think kids will enjoy. We lose the engineering side of things. This baffles us at bootstrap. We've never understood why. And here to tell you that computer science education is one of the most sophisticated engineering problems in existence. It's waiting for someone to step in and do some of the deep, possibly unsexy engineer and work to create a solution at bootstrap. We've built one of the largest and most diverse cs education programs in the nation and we did it at a fraction of the cost and with a team of four human beings. And we did it because we look at the problem like engineers working at startups scale and imagine what a company like Google could do. So I want to leave it there. I'm happy to answer any questions you have. This is an engineering problem that is built for a company like Google.

Speaker 2:          39:58          Absolutely, yes. So the question was do we test the kids? And I'm so glad you asked. That is literally my secret. Last slide. Whoops, load.

Speaker 2:          40:11          This should be mirroring. Can you guys see my screen here? Okay, great. So the answer is yes. You better believe we test the kids and in fact the tests that we use for our initial study all involve questions drawn from national and state standardized tests. Not because we're in love with standardized tasks, but because we understand that decision makers want to see that kind of stuff. And what we've seen is the testicle, he significant evidence of very large gains on three tasks that we've looked at so far. Function, composition, solving word problems and matching between representations of functions.

Speaker 6:          40:45          Okay, so this is, this is pre and post the kids who got this great collaboration. The kids, you got a standard Algebra credit lower table. Is that the upper table is pretty imposed, is that correct?

Speaker 2:          40:56          No, the lower table is a demographic distribution. So this table, so this table right here is showing gains pre, post, not looking at a control group. I will say that this is the first curriculum ever to have demonstrated evidence of transfer. We're gathering additional data. We're building a much larger data set that includes control groups. So we'll be able to compare apples and oranges. But historically this belief that learning to code will help you in math class has not been true. The simple fact that this table exists was something we're extremely proud of. We've been able to make that happen.

Speaker 6:          41:29          Great question. Yeah. Staff for years afterwards when they go to college, when they actually get it for a job.

Speaker 2:          41:38          Unfortunately, maintaining data on minors is extremely complex. I mean, I'm with you. I, I wish I could stand here and say we've tracked these, these thousands of kids and we know what happens to them. We don't, um, what I can say is the schools that have adopted, bootstrap continue to use it. Um, and I mean it's, it's not hard data. It's proxy and anecdotes at this point, so I can't answer that.

Speaker 7:          42:00          Yeah. Yeah. Can you talk a little bit about your choice of, here's a lot of conversation about what the AP who doing muses. Dictation. I graduated from high school pretty recently and a lot I talk about shifting the bathroom. Teaching pocket. You program with your job did use your pipeline. If you teach it through an autogrow class, it makes sense that you use some things. I'm with less list or something to make it useful to Algebra. But is it still useful outside of that class in an engineering context?

Speaker 2:          42:30          So I heard sort of two questions in there. So one of them you were saying it's sort of how did we choose our language, right? What, what factors go into it? And the second is, is functional programming useful outside of a math class?

Speaker 7:          42:41          No sugar itself, but the way that you teach it, does it make sense to students that would be useful outside of the context of that?

Speaker 2:          42:48          Absolutely. Right. In fact, the program by design curriculum that I mentioned is used in universities around the world. They actually use the same language that we're using and we borrowed the same design recipe. So a student in, in Boston can go over to northeastern university and they will see, oh my God, the freshmen cs majors are doing the same work that we do. Um, and in fact, I don't know if you want to, if you want to mention this because there's, this is a parallel in New York as well.

Speaker 6:          43:16          Well, I'm no longer enter Delphi. So how long are you using this approach in their, in their CF zero class. But it was for, for a number of years while I was being here. That's a Delphi University. So that mid level, uh, liberal arts school where I was on the CS faculty and we had a CF zero class programming for poets programming for non majors. And we did it this way and we had a fair number of students who had such a good time that they became cs managers. Um, and they seem to learn, uh, learned a lot.

Speaker 2:          43:50          So, so there are parallels directly into a number of universities around the world. But more, more importantly than that, yes. Functional programming isn't a whole bunch of companies as well. It's used in plenty of industrial contacts. So the language itself transfers. But yeah, especially big data. That's right. But more significantly this, this approach that we're using, the structure, problem solving, writing a type specification. And you know, thinking through your unit tests deeply before you dive into the code, that's a high level skill that's relevant no matter what language you're using, right? I mean, I, I went to the bathroom before giving this talk and you know, I think Google is famous for your testing on the toilet pages. Um, you know, this is something that that is transferable across languages, right? This is where you get to explicit a process that transfers everywhere. Um, as far as how do we choose our language or like why, you know, I think this debate about should we use python or should we use Java? It needs to be about what is our learning goal?

Speaker 2:          44:45          Computer Science teachers are the only teachers I can think of of any discipline that when you ask them, what do you teach there answer is the tool. Imagine if I asked a math teacher, what do you teach? They might say Algebra, geometry, Calculus, right? They're not going to say calculator. If I ask a chemistry teacher, what do you teach? Maybe Orgo, right? Maybe some physical chemistry. You, you'd think they were crazy if they answered and said, I teach bunsen burner. But when you ask your average cs teacher, what do you teach? There answer is Python Scratch Java. It's the only discipline where they self identify but the tool and that's the problem. We cannot folk overfocus on the tool because there's this dependency graph that requires that we think a little more broadly. Other questions? Yeah. Yeah.

Speaker 4:          45:32          Initially you had said you were an afterschool program then maybe the changes were that we were really large and then you shop. I want to expand on what happened and why.

Speaker 2:          45:49          Yeah, sure. So we uh, we actually partnered with a terrific afterschool program called citizen schools. They are national in scope. They're very active in New York and I know Google has done some work with them in the past on third great shooters back then. In fact, I was a citizen schools employee at one point. Here's what we noticed when we were doing an afterschool programming club. So first we needed volunteers, so we had to recruit tons of engineers, which is not easy. Second engineers are busy people and sometimes life happens, right? You have a ship deadline, the build is broken. So one engineer has to piece out and can't make it that day. So what do you do? You have redundancy. You recruit three, four or five engineers to make sure that at least one or two, one of them can be there every single day. So we have to recruit five engineers just to teach this afterschool program, which is typically how many kids?

Speaker 2:          46:34          Maybe 20 maybe 30 if that. I've got it. It's like, yeah. So, so we're spending all of our time recruiting engineers who need a lot of training to teach, right? You guys are experts at the content, but teaching is hard too. So we're investing a ton and trending engineer's five engineers to eight kids, and now those engineers, once you've trained to them, they come back every semester of forever. Right? They just keep teaching. No, what? Yeah. Right. So then they get busy. They leave the project. So you have to recruit enormous numbers of volunteers who you lose almost instantly just to reach 20 kids. If you're lucky, a single public school math teacher is going to reach 80 to 100 kids in a single year. And if they like what they're doing, if they believe in the program, they'll do it forever until they die or retire, whichever one comes first. Right? So if you're thinking about scale as a priority, afterschool is amazingly flexible. There's a lot to recommend it, but scale is not one of them.

Speaker 5:          47:35          Yeah. Was one you're showing like the math word in here. Like what about separate metric?

Speaker 2:          47:49          So I mean, essentially we use summit of assessment, I'm sorry, formative assessment throughout the curriculum. So once we spend about two lessons teaching this explicit task, this multi representational task, the moment that's over every single thing in the curriculum is a word problem where kids are given a problem to a problem statement or problem to solve and got. And so we're able to assess as they go through the program, are they able to complete it? Where are they stuck? Um, to be really upfront, the level of programming we teach in our Algebra module is fairly small, right? We're not doing object oriented programming. We're not doing, you know, recursion for example. Um, but we have an extraordinarily high percentage of students who finished the program, build a video game on their own and we use that as a proxy for their learning to program. There are some learning studies that were in the process of doing the reason we haven't, we didn't start with those are because for us we felt that showing math outcomes was the most immediate concern. Um, but we're gathering data and we're looking to report on the CS learning outcomes.

Speaker 5:          48:54          I was a teacher before. If you've touched it shows it's something that I should, I'm just curious like what do you think are the biggest factors that we just schools adopting or not adopting? Bootstrapper my school's willingness to train factors.

Speaker 2:          49:10          So, right. I mean, right now our, our capacity problem is we do not have enough staff to train teachers fast enough. There are far more teachers who are looking for training, then we can train in a year. Um, but as far as the bottleneck at the school, right. What makes a school successful? Um, I mean, I think a significant part of that is the administration needs to believe in the program because if a math teacher comes to our training, gets excited and then it goes back to the classroom and start saying, all right, we're going to do this. And the principal looks in the door and says, why are kids making video games? Right? Why are they even on a computer? That principle, you know, justifiably might be hesitant about somebody messing with their math scores. And so often we hear from teachers who are saying, I really want to teach the program.

Speaker 2:          49:52          I wasn't able to get the administrative buy in. So there's a messaging issue for us. There is something of a bottleneck around, look, some schools do not have even enough computers for a once a week laptop card that's starting to disappear, right? Were the hardware problem is starting to get solved. Um, but I think the, the, the third most common issue is a sense of teacher support. So this is an area in particular where Google can be enormously instrumental, right? It's, there's tons of teachers using bootstrap in New York City public schools right now. I would say a percentage of them are thinking to themselves, all right, I'm doing it. It sure would be cool if I could have an engineer just come and visit my class like once or twice just to like have my back and to talk to my kids. Right. That boost, that sense of there could be someone I could call upon that would be tremendous. Even if that teacher never calls on you, just knowing that they could can be the difference between them teaching it or not teaching it. Um, so I think that's, those are the top three bottlenecks

Speaker 2:          50:56          I think people, I hope people would, yeah.

Speaker 5:          50:59          Google search month.

Speaker 2:          51:01          There you go. Oh, is it perfect? Yes sir.

Speaker 5:          51:03          I did teach for America and I taught one or hostile years. Um, so just like try to put myself in the shoes and I do like kind of touched on it. Just stand, don't like teacher buy in is very intriguing because I can see at least like the teachers in my school, ones that had been there for 30 years, every year there's some new way to teach math and they're like, listen, I've got to town by now and it kind of discarded. But like on a bigger scale and your district kind of federal where, where are we on? Because eventually you feel like we get to the point where it is curriculum wouldn't be required or like it's so ingrained in our society that we need to have it on kind of a bigger level. Like where are we?

Speaker 2:          51:45          We're, we're not even at the starting line. Um, so, so in terms of teacher buy in, that's something that we excel at. I'm on a former math teacher. So in our trainings we, our math teacher, the math teacher, we focused heavily on the math. Typically we don't mention the con, the computer science learning outcomes because we're, we're there talk math and the veteran teachers buy in at a deeper level than the young bucks because the young teachers are like, finally computers. Cool. They're not necessarily thinking about the math connection. The veteran teachers see it. So we've, we've been fairly successful there and it took 10 years for us to get to that point. So it's not an easy thing to do. Um, but as far as the federal level goes, it's a hard engineering problem. Right? Scale comes not from getting to 10 million kids in your first year.

Speaker 2:          52:29          It comes from building up a pool of teachers. Maybe you only train a thousand teachers a year, but every teacher you train keeps doing it until they die or retire. Right now the trend in scale is how do get to 10 million kids in year one. And if that's the threshold, guess what? Youtube videos we'll do youtube videos, the teach program math through programming like that. It's quick, it's easy, it's cheap, you don't get the rigor and you don't get teacher buy in for that either. Um, I think, I think a lot of governors have made some really terrific proclamations about getting everyone to code and then it falls to the superintendents and their states to figure out how to make that happen. And what winds up happening is, well, we used to have this class on PowerPoint and excel. That's kind of like a program in class.

Speaker 2:          53:15          Let's have that count to see us. So sometimes we're repurposing an existing class and calling it cs or we're doing hour of code one hour a year, kid does it. We taught computer science check. Um, and we'll take the, you know, the elective route, which has its benefits, but it also has some drawbacks I think in order for there to actually be a policy movement on this, it's someone needs to tackle the engineering problem and get buy in and say this is, we're going to build something scalable but it's not going to happen in one year. And unfortunately that that sales pitches is hard to make when someone else says I can do it in a year and I can do it for cheap. All I need is a video crew.

Speaker 3:          53:57          Yeah.

Speaker 4:          53:59          So what you just said about, uh, the issues that you have, proper citizen school. I pretty much agree with that about the issues about how cars, a lot of it, a lot of expensive resources takes a long time to build off all of this stuff. Um, so what would be, would you have advice for people that are interested in doing this type of stuff and actually would like to dedicate some time over the long term? Like how do we approach this type of problem? Like what for people that aren't going to go in like start or join your bootstrap

Speaker 2:          54:55          well, what are your constraints? Are you thinking like career change or are you thinking

Speaker 4:          54:59          you like what would be the type of thing that you can do for a couple hours a week and so useful and meaningful impact?

Speaker 2:          55:08          So I think, I think this, you know, that kind of thing is where you can be complimentary to an Oregon, to an afterschool organization like citizen schools, like afterschool, all stars, right? Maybe you personally decide, I'm going to invest in teaching an afterschool program in class through one of these programs, but I'm going to be responsible for recruiting and maintaining a rotating community of volunteers, right, of coworkers. And I'm going to make sure that they get trained and since maybe you've done it two or three times, maybe you can be the one to train them. If you keep that pathway sustainable, you can start to have a bigger impact. Um, option to connect with an organization like bootstrap and say, I want to be available for any teacher who has questions. I would love to just be able to work with those teachers even though I've only got a couple of hours a week. Um, I think, you know, there are summer camps that they don't necessarily hit the equity angle all that well, but you can do so much when you have kids for eight hours a day for three, four, five weeks. I mean, you can do a lot there without having to give up an entire, you know, part time year.

Speaker 3:          56:17          That's interesting. Thank you.

Speaker 2:          56:22          Yeah. All right. Well, I know our time is up and everyone, everyone's really curious to hear about the testimony that came out. So I'll leave you guys to it. But, uh, thank you so much for having me. Thank you, Google, for all of the technology that we have built our platform on, so we really appreciate it and thanks especially to my host, Andrew, for setting this up.