Speaker 1:          00:07          Carolyn venaseal team. Our guest today has been in video games since roughly the start of the current century. She got hooked on designing them and then on observing what kinds of games other people are making and connecting those and also what kinds of games people haven't been making an or just thinking of now. So Carolyn, Venice, Hilton.

Speaker 2:          00:30          Okay.

Speaker 3:          00:35          Hi everybody. As Coase introduced me, I'm Carolyn, Dan Haseltine, and I'm here today because everybody can dance. I know there's this punchline that normally goes after that. Everybody can dance, but not every patient buddy should dance. I don't believe that. I believe that everybody can dance and that everybody who wants to dance should dance. I think they should dance. I think they should sing. I think they should write poetry. I think they should do whatever our expression moves them. I think that our expression is a natural human right that transcends every brown boundary we have. The problem is this hasn't been true for our youngest art form and by our youngest art form. Of course, I'm talking about video games. Historically there has been a very high boundary, a very high border to be in part of video games because historically in order to make video games you need to be a programmer. You need to know somebody who can program and who's willing to work with you or you need to have the money to hire a programmer. For this reason, the people who've been making video games are extremely different than the people who've been singing or writing poetry or dancing. I have a quick question, uh, before I fully get into this, which is I'd like to know how many people here are programmers.

Speaker 3:          02:05          Great. Okay. Thank you so much. Just didn't want to make any assumptions. No, there's a terminology thing I should hit before I keep going. There is a difference of opinion about the difference between coding and programming, so I just want to admit I'm going to use those synonymously for the most part when I talk about someone who is a non programmer, what I mean is someone who is not fluent in any scripting language or I mean someone who is not fluent in any programming language or I mean someone who identified themselves to me as not being a programmer because a lot of this is about self identification

Speaker 3:          02:46          set. I want to take a step back and tell you a little bit about my history with video games, which starts in 1980 when I was born into a house with a computer which was true of fewer than 1% of American households have that time when I was five years old. My Dad, because he has awesome, introduced me to colossal cave adventure. I thought that this was the best thing I had ever seen. I could tell computer things and the computer would do things. It was fantastic. He printed out the source code in Fortran on our old dot matrix printer. It was about this big from the perspective of someone about this tall and I would carry it to daycare. I wanted to understand it. I wanted to know what was going on. Fourth Grade, my fourth grade elementary had a school computer lab. I met logo, their logo with the turtle.

Speaker 3:          03:46          The turtle is awesome. You told that what you wanted to do and it would just do it on the spot and you could make procedures and you could link all these commands together. In fifth grade I had decided I wanted to make video games. I had this idea, it was like a Mashup of wit of Infocomm's wish, Springer and colossal cave adventure and Jurassic Park. It had dinosaurs. It was going to be great and I would map it all out on graph paper and I would write all the text descriptions down by eighth grade. I knew a little basic, I knew a little pascal. Uh, at one point I borrowed a book from the library. It had a explanation of Conway's game of life and basic. So I typed it into the computer and it was a really bad implementation of Conway's game of life. So every time the sales hit the edge of the board, they would break.

Speaker 3:          04:31          My parents saw what I was doing and one of them showed me one way to make it better than the other. Showed me the other way to make it better. Okay. Oh, you know the millions of ways you could've made that program better. It was a pretty bad implementation, but the point I'm trying to make here is that I wanted video games. I wanted this, I wanted to be part of this. I had wanted it my entire life and I had every advantage. There was a computer in my house when I was born. I have never lived in a house without a computer. Both of my parents were programmers. There was a, there was a computer lab at my school. I had basic programming concepts from about five years old. So I went to college and I majored in creative writing and I never took a single computer science course because one of my friends had told me that the comp side professor who taught comp side, one o one deliberately washed people out who didn't want to major.

Speaker 3:          05:31          I didn't want to. Major programming is great, but it was a means to an end and there weren't any game programming classes. I didn't know how to take my little bit of basic, my little bit of Pascal, even if it had been expanded, I didn't know how to take that and make something with graphics. I didn't know how to make something that you could put on a disk in a box on a shelf and then could go to the store and buy it and put it in their council. That was, those were the people who made real games. It wasn't a meaningful aspiration for me. And so I faded out of games. I'm standing here in front of you today and I did say I was a prep professional game developers. So you can tell that some point. I got back on the horse, but I didn't do it by learning to program.

Speaker 3:          06:23          I came in the back door. There was a company called Sigma Tronics Games and around, let's see, they started somewhere in 94 95 I think, and I apologize if I just got that wrong, but the pertinent part is that what they were making was a pay for play mud and it was available on America Online and I wound up doing volunteer customer support for them in exchange for my pay for played being play instead of pay. So I got through the door there. Eventually they hired me on when they hired me, it was to run in game events. It was to write documentation and it was to do more customer support. At that point I was in the games industry and I had no idea how to make my own game. I knew how to support someone else's, but games were for people who knew how to program, they were for people who could put that disk in that box on that shelf.

Speaker 3:          07:21          I didn't know how to do any of that, which meant they weren't for me so obviously at some point I got over this. I got over this because of a system called informed seven informed seven made it possible for me to release. My first game. One I open is a psychic horror game. It was a collaboration between me and my friend Katelyn Sandal and it came out in 2010 the reason I was able to create and release a game is because of a system called informed seven informed seven looks like that it does not look like a programming language. To me with my limited background and experience, when I saw something like this, when I saw something that looked like English, I was a creative writing major. English was comfortable. I knew how to work with it. I had the confidence. I said yes, I can make something that looks like that informed seven was created by Graham Nelson.

Speaker 3:          08:23          Graham Nelson was looking specifically at non programmers and trying to make a system that was more comfortable for them. It has an integrated development environment is actually a Trans Pilar. It does not go from informed seven to working game. It goes from an informed seven two and form six to work in game. Uh, what you're looking at right here is a relatively common in interactive fiction snapshot of a game called cloak of darkness. It's a very bad game, but the point of cloak of darkness is to show how various systems handle the creation of various game elements. This is what cloak of darkness. Well, this chunk of cloak of darkness looks like uninformed six. If you know how to program, this is not scary looking. If you don't computer code is intimidating. Computer Code is intimidating because the computer doesn't think like a person. The point of learning to program is learning to think like the computer operates.

Speaker 3:          09:27          That's the whole point of computer science. If you don't know how to think like the computer operates, then you need some kind of bridge. You need something that makes it easier for the way you think, to correspond with the way that the computer operates and that's what informed seven was for me. When I originally launched my game, I was working at harmonics. By then. I'm not going to go into the details of how I got there, but assume it was kind of like how I got into games in the first place. When I launched my game, uh, I was really excited about it. I told a bunch of people at harmonics, Hey, I made a game and one of the engineers and has to see my source code. I would be happy to show you my source code I sent over my source code. Uh, informed seven actually tells you your word counts dead, your line count.

Speaker 3:          10:13          So I knew that it was upward of a hundred thousand words. I had no idea what that meant in lines of code. I still don't, but I sent it over and he sent it back and said, you accidentally sent me or design notes. I wanted to see the source code, but, but that was my source code. I didn't have anything else to show him. He had looked at it and seen it as something that a non programmer could do. Something that a non programmer could understand. Inform seven, don't get me wrong, can actually do some extraordinarily complicated things, but informed seven was released in 2006, uh, in the year 2006 use of informed six and dropped like a rock and by the time you get to 2012 informed six alone was hardly being used anymore at all because the people who were making interactive fiction where people who were coming from a programming background but also from a writing background, they had the same experience I did.

Speaker 3:          11:13          Also informed seven has an integrated development environment which makes everything so much better. Here's the problem with informed seven informed seven is a scripting language. It has very specific syntax. The Syntax is actually as specific as the syntax for informed six, which means that even though it looked intuitive and it was easy to read, Oh man, you can get the most amazing compiler errors out of it and because it's trying very much to help you and figure out what you meant to do. Yeah, it's not as simple as I think there might be a semicolon missing. It's kind of amazing. Actually. I love informed seven. I don't claim that it's for everybody. I'm going to digress for a second because I do come, uh, as a hobbyist very much from an interactive fiction background, I'm seven is used to make purser games. Parser games tend to look

Speaker 2:          12:06          okay

Speaker 3:          12:06          like that. When someone who doesn't know how to play parser games plays a parser game, they try commands that don't work because they don't understand the limits because they haven't been taught to play parser games. There's an actual skill involved here. You need to know that you need to make these known verb verb noun combinations and you need to understand that it's just not understanding English. There are a lot of people who play and love Parser Games. There are a lot of people who get frustrated by the fact that the prompt is giving them this illusion of infinite choice. But in reality they have very limited choices available to them.

Speaker 2:          12:44          Okay,

Speaker 3:          12:45          but there are systems that are easier than this.

Speaker 3:          12:50          This is the other major branch of interactive fiction. It's called choice-based interactive fiction and it actually comes from the tradition of game books and from choose your own adventures. Instead of giving you an illusion of infinite choice, it shows you exactly what you can do in that room and the actuality is all you can do in that room is walk around. That makes it so much less frustrating to people who don't have the skill to interact with that program who don't have the experience. So bringing it back to game engines, what's needed is a game engine that is just as accessible as this. Something that takes that experience of I don't know what to type and turns it into. I know what I can type or not even type this is construct too and construct to is a visual scripting engine for making graphical games is something that presents everything in menus. It presents everything with drag and drop. What you're seeing right here is actually a script in the making. Uh, if you click the little heart image, which is the AA friends sprite with the left mouse button, it will rotate 90 degrees and it's currently offering me the chance to add another action to this script. This is not a complicated script, but once you start adding them together and chaining them, just like a small program can become something dramatically larger, a small script can join with others to become a game.

Speaker 3:          14:26          Just because it works with visual scripting does not mean that a program is necessarily going to be simple. All it's doing is making the syntax accessible. Here you can see that there are a lot of things you can do from the system object, many of which are extremely important, many of which require mastering the engine. Apart from the scripting side, there are actually a number engines in this style. They are engines that are based around the idea that it will be easier for people to code if they don't have to fight with syntax. This is an image from the game. Air Escape, the fit, the fall of gravity. Air Escape was greenlight through steam. It received multiple awards including an award on its physics engines. Specifically. It was created entirely in construct to it is a fiendishly difficult puzzle. Platformer and the developers selected this system specifically because he didn't have experience making games with programming yet.

Speaker 3:          15:31          He needed something that was accessible to where he was at the time he was starting there or another. There are a number of other game engines in this same vein. Click team, click team fusion, uh, gamemaker studio game salad and Stencil. The last one, it's dental, uh, and there are others but those are some major ones. I'm not going to go through in detail all of them because what I actually want to do is move to show you a completely different kind of game engine. This is twine. Twine is designed specifically for making, is designed specifically for making choice based interactive fiction games. What you're seeing here is the design interface and since twine games are played as this series of webpages, essentially you can see with a map the webpage forming. This is actually the exact same cloak of darkness section that you saw before.

Speaker 3:          16:27          Although I didn't implement the rest of it. Here's the thing about twine I didn't try to teach you in form seven I didn't try to teach you construct too. Those take half an hour at least to teach somebody if what you want is for them to go from zero to game and that's regardless of whether they have a programming background or not. Let's face it, a language is a language, their syntax to learn. There's system, there's the system to learn. I can teach you twine in 30 seconds. I have done this repeatedly. You can make a basic twine game with the information you get in 30 seconds, which is start at the start type whatever you want into that passage. Whenever you want to make a link to a new passage, put in double brackets, it will open up a new, it will open up a new passage for you.

Speaker 3:          17:15          Keep going until you're done. Hit Build, build story. You now have a playable webpage. You can put it anywhere you want. People can play your game. It is that simple and that is why people are flocking to twine right now because there is no game engine. More accessible. Twine is free. It is also open source and it supports a lot more than simple hyperlink. It has full support for variables, for conditional logic, for extensions with images and CSS and video and sound and it also extends with Java script, but for that basic game, that first experience of I made a thing. There it is. It's amazing for someone who never thought they could make a game before. Here's a different engine choice of games. Try some games is also an interactive fiction engine, but it's an interactive fiction engine that is aimed at a very specific audience and it's aimed at a very specific audience because it's used to create a very specific kind of game choice. Script is used specifically to make novel length interactive fiction. Choice of games is a commercial company that is making its money on selling novel length, interactive fiction. They are not aiming at programmers, they're aiming at writers, specifically writers who never intended to make this kind of system. It's as simple as it can be because they need it to be accessible to this specific audience. There isn't actually an ID for choice of games for choice of games choice script. The system you use actually has extraordinarily simple syntax and you just write it in manuscript form.

Speaker 3:          18:58          When you're done, what you get looks like this. This is actually optimized for people playing on their iPads or other touchscreen devices, but you can play on a computer as well. Uh, and again, it's very intuitive to play. Select your option. Click next, move on.

Speaker 2:          19:16          Okay.

Speaker 3:          19:16          These are three examples of engines that are also aimed at creating very specific kinds of games. Run Paya specifically for visual novels. RPG maker is specifically for RPGs. Adventure Games studio is specifically for Click and pointed ventures. Again, I'm not going to walk you through the full details of all of these.

Speaker 2:          19:35          Okay.

Speaker 3:          19:35          All of these engines are aimed or had as a primary audience. People who don't know how to program in mind. This one was aimed at programmers. Unity is a big deal. They currently have 45% of the market share for game engines used in commercial games. 47% of developers are using it. 4.5 million developers are registered and they have 600 million gamers at a minimum playing projects created with unity.

Speaker 2:          20:11          Okay.

Speaker 3:          20:11          Unity uses c sharp and Java script as it's languages. This is not something that's accessible to people who don't know how to program except that a company saw the void. The people who make playmaker put a visual scripting system on top of unity. It is in use at actually some rather large studios. Most famously blizzard used the visual scripting system playmaker when it was making Hearthstone. Hearthstone is a digital collectible card game and it's something like the income is estimated at about 20 million month. It's a very successful card game. The reason why they used a playmaker was so that when they're 15 person team that was working on it, the art team was capable of building things in the engine without needing to pull programmer off what they were doing at the time. Specifically. Playmaker is a visual state editor and it's also a runtime library, but the net effect is only visual scripting system that was built directly into unity in addition to large studios using it for specialized projects. It is possible to make a full game with playmaker Hoff Stein is the founder of little worlds interactive. Her launch product was the counting kingdom, which is a tower defense game that is aimed at teaching kids arithmetic. She made it completely in unity with the support of playmaker.

Speaker 3:          21:44          No, I've been talking about non programmers. I've been talking about programmers. When it comes to game development, do programmers have an advantage over non programmers? It depends on what you mean by advantage. A lot of people ask if non programmers can use these tools to compete with programmers, but that depends so much on what you mean by compete. When I talk about game developers, I'm not just talking about people who want to make games commercially. I'm going to show you one of my favorite quotes about game development. It's from Zoe Quinn.

Speaker 2:          22:18          Okay.

Speaker 3:          22:19          How do I not game jams go make a thing. It doesn't have to be good or finished. Okay, cool. You one, this is an attitude I can get behind 100% game jams are not intended to be polished commercial games. This is kind of like a 48 hour hackathon you want to get from zero to game and at the end you have the joy of having done it and possibly you polished and refine it and continue, but the concept of compete isn't meaningful. If you look at game development as a whole, it's only meaningful if you look at game development in a commercial market. I made this game once, it was specifically for one of my friends and it was called coffee with about five e's on the end and it was this tiny text adventure about how awesome it is when you wake up in the morning and someone else brings you a cup of coffee.

Speaker 3:          23:10          It couldn't compete with Super Mario Brothers for the, we get Super Mario Brothers for the we, you couldn't compete with coffee. They're of in two completely separate worlds during two completely separate universes. Yes. Video Games are a commercial market, so are novels. Not everyone wants to be the next J K Rowling. Some people just want to make little games that they can show to their friends or just make them for fun or just keep them for themselves. These concepts exist in writing. People write for fun people, right for their friends. People write for themselves. Postcard game is the term given to a game that is just for one other person. Diary game is the term given to a game that you made just for you. These things you might show them to someone else later, but that's not necessarily why you made it. This is an art form. People practice this art form for themselves.

Speaker 2:          24:10          Okay.

Speaker 3:          24:11          As I was preparing for this talk, I spoke to a number of game doves, actually about 35 who are not programmers. I asked them, why do you want to make games? What's in this for you? Is it really worth it to you? I got an amazing variety of answers back and I just want to read you a few excerpts that exemplify themes that people talked about. One of them was joy. Darryl Kelvin told me for me, games are windows on other worlds, discovering new things, ideas, ecosystems. It's about creating tiny play spaces to create and share wonders. People talked about the unique nature of the medium. Valentino, Christos Dymo told me there are two reasons I make games. One is that I love the idea of creating something that people can interact with and get an emotional response back to. I love the idea that people can have such a strong emotional response that it's in my power to make them feel it, that people resonate with a story in a game more than any other medium people talked about self expression. That's something you can't access in the world of commercial game development in the same way that you can if you're sitting down at your computer and making a game for you. [inaudible] Asia, Maroon cough. I showcase an aspect of what is important to me. Using themes and elements taken from my life. I want to walk with whoever ends up playing. I also want people to finish the game and have a part of me to walk away with.

Speaker 3:          25:50          People talked about contributing to the greater body of art lecture. Denise, I want to make video games because I like to pretend there's more to this medium than escapism and power fantasies. I don't like competition. I don't like capitalism. I don't like violence. I can't stand the values mainstream games usually convey, I like to pretend I can change that with my very limited skills, at least for the handful of people that can reach, and here's one very common theme from Talon Lee. I make games because people make games. Little kids make games in the playground. We make games when we walk on tile floors. I basically always constantly been making games and computer games were just another thing I'm willing to do.

Speaker 3:          26:40          I spoke with 35 game dubs of all those people. One person mentioned money as a primary motivator. I spoke with multiple professional game devs who are making their incomes off the games that they were making. They didn't get into this for the money. Singers don't get into music for the money. Artists don't start painting for the money. Actors don't start out in theater for the money. Of course, it's nice to get paid. Everybody likes to get paid getting paid as great, but what brought them in originally was the art form. They found something in it that spoke to them, something that resonated with them. It's the same way and get game development.

Speaker 3:          27:23          There are 7.3 billion people, approximately a very large approximation on this planet right now. All those people, how many people like to sing? I can bet you it's a lot more than the people who are making their living off it. I would guess that it's millions, hundreds of millions, perhaps. Literally billions. All we see usually is that little tip of the iceberg, but there's this huge iceberg of people beneath it who want to sing just to sing in game development. Historically, there was this barrier. You had to know how to program. You had to know a programmer or you had to pay someone to program for you. That meant there wasn't much below that tip of the iceberg. You saw the professionals. That was pretty much what you saw. To be clear. To be fair, there were game creation systems in the eighties things like pinball constructor set, things like adventure creation system, things like Gary's kitchen, game maker. There were more in the nineties RPG maker originally showed up then a divinity for realms, the FFR, but those systems existed. You had to know where to find them. You had to know that they existed even to go looking for them.

Speaker 2:          28:44          Okay,

Speaker 3:          28:44          and all this time it was easiest if you knew how to program. So historically, most examples of this art form that we have are the examples that were created by programmers. Most of them were created in studios, which means by corporations or by Solo developers working on their own in a context where their games might not be seen afterward, even if they wanted them to be.

Speaker 2:          29:18          Okay.

Speaker 3:          29:19          This is the youngest art form we have. We don't know who invented singing. We don't know who invented acting. We don't know who invented painting. We know who filed the patent for the very first interactive electronic game. That would be Thomas t Goldsmith Jr and es El Rey man. They filed a patent for something called the Cathode Ray tube amusement device in 1947 that was 68 years ago and given that it was analog, we might not even count that in when we're talking about digital games. A Pong is commonly cited as the first video game that we had. E pollen is, you know, from the seventies this is young. This is a very young art form and to frighten now it is undergoing this incredible revolution. We're instead of this tiny group of people being able to make video games, there is a lamp swell.

Speaker 3:          30:19          Here's what we know about the people who are at the tip of the iceberg, the igd. Yay. That's the, that's the international game. Developers Association runs a survey every year and one of the things they do is collect demographics about the people who answer. Most of these people are in studios, either large studios or small ones or our freelancers associated with the industry. Here's what the IGA said in 2015 about its members. The people who responded were white. They were male. They were cisgender, they were heterosexual, they were young. They were usually married or in a longterm relationship, but they did not have children. Most of these people were in the United States and 93% have some amount of higher education. 93% of people in the world do not have higher education. 93% of America does not have higher education. 93% of the people who own computers in their homes or gaming systems or smartphones.

Speaker 2:          31:27          Yeah,

Speaker 3:          31:27          it's not 93% this is a very specific group of people. Right now. The profile of video games is changing because the profile of the people making video games is changing.

Speaker 3:          31:53          We are not just seeing games now that are made by this profile of people, which means that we're not seeing games that are necessarily aimed at this profile of people because that is also what was happening here because this was the profile of people making games. They were making games for people who look like themselves. They were making games for white men in America and they were making games where the protagonist tended to be a white heterosexual man with American attitudes though not necessarily in America, so this is a very big change for people who are not in this profile to be realizing we can make games too. We can take this into our own hands. We are capable of being part of this art form. Even if we don't know how to program.

Speaker 2:          32:46          Even if

Speaker 3:          32:48          for those of you in this audience who don't know how to program, even if you don't know how to program Game Dev is open to you,

Speaker 2:          32:56          it's changing.

Speaker 3:          32:59          The barriers are coming down and this is a moment in history that people are going to look back to and see that an art form became available to the public instead of to a small specific group.

Speaker 3:          33:17          No, this is an argument I've heard before. If people want to make video games, they should learn to program. It doesn't make sense for people who don't know how to program to be making video games. There is no merit in these systems that are making it possible for people who don't know how to program to make video games because the people who know how to program will make better video games. This is not true. I have worked in AAA development. It does not make you a better game designer to be a better programmer. These are two separate skill sets.

Speaker 2:          33:50          Okay.

Speaker 3:          33:52          The one does not follow the other.

Speaker 2:          33:55          It's

Speaker 3:          33:56          like having to learn human anatomy before you're allowed to sing,

Speaker 3:          34:03          but what about the limitations of the tools? Well, two limitations from relate to design. If you're trying to design something that runs outside the limitations of your tools, then yeah, you're going to, it's like having a hammer. If you have a hammer and that's what you've got, you can be incredibly versatile with that. Hammer can be a screwdriver, it can be a lever, it can be a Panini press. It can be a s'mores stick. There are so many things you can do with that one hammer. If you're used to a full toolbox, having one hammer, it's terrible, but if that's not what you're used to, if someone gives you one tool, you can do amazing things with it. Yeah. If you're used to having the full power of c sharp or the full power of seat for that matter, let's go eat and lower level.

Speaker 3:          34:47          Then visual scripting is incredibly limiting, but that doesn't mean that you can't make amazing things with it. Remember twine, I talked about twine as the game engine. That is the fastest to pick up the one you can learn in 30 seconds. This is a non extended version of twine. This is what you can do with variables. If you can set variables and you can check variables, you can make so many amazing things happen with game development. Comparing twine to unity, yes, there are huge differences between these two programs. Twine cannot do three d animation. It doesn't have a built in physics engine at all and it doesn't, for example, make a good tool to make something like world of Warcraft in. There are no twine, massively multiplayer roleplaying games, but twine runs in your browser, which unit is not unity can run in your browser.

Speaker 3:          35:50          It requires a plugin. You have to download the plugin, you have to get the plug in to work. The plugin does not work on Linux or appropriate to this audience. Chrome, you cannot play unity games in chrome in your browser. So twined might have its limitations, but unity does too. And this is because every tool has its limitations. Going back to 1841 1841 was when it became possible to purchase premade oil paint before 1841 if you were an artist and you wanted to make a painting, you were probably grinding your own pigment. You were probably mixing it with oil and you were probably stretching your own canvas. Cause let me tell you, premade canvases did not exist back then either. So if you have an idea for a painting and it's about six feet by two feet and you happen to have a six foot by two foot canvas, you're fine.

Speaker 3:          36:47          Your image for the project fits within your parameters. But if the idea for a painting you have is six feet by two feet and the canvas you have is four by three. If you know how to stretch canvas and you have the supplies, you're still good. You can just stretch the new canvas that you want. If you don't know how to stretch canvas, then you can either alter your design so that it fits within the materials you have or you can paint on the wall. The second version is not recommended. So that's what programming is like in this context. In the context of this art form, if you know how to program, you know how to grind your own paint pigment, you know how to mix your own paint, you know how to stretch your own canvas. You can go beyond the builtin limitations of your tool and that's fine and that might make amazing things, but it doesn't mean that a game made within the limitations of the tool is innately inferior because games that are designed with their tools in mind, whether you know how to program or knots are going to work better than games that are not designed with the limitations of the tool in mind.

Speaker 3:          37:58          But everyone should learn to program programming is awesome. And I say that with the greatest enthusiasm because while the things you should know is that by now I do in fact know how to program. I think it's wonderful. Uh, I've been doing c sharp for about a year of doing c for about three years. Programming is so cool you guys, as many of you in this room doubtlessly agree,

Speaker 2:          38:21          but

Speaker 3:          38:25          not everyone should learn to program. The people who want to program should learn to program. There are no huge definitive you must do. There are things that will make your life a little easier in the society if you know how to read that will make your life easier. Knowing how to program, it's actually not a basic societal skill and gamed of is an art form. Art is a basic part of human society. Gamed of is a valid and in and of itself. It doesn't have to be a gateway to anything else. If Somebody Tries Game Dad and they get excited and they want to learn a program like yours truly, that's fantastic. You know more power to them, but if they just want to make a game, that is okay. So going back to the 35 game devs who I spoke with, the 35 game devs who are nuts, in fact programmers, I asked them this question, if it were impossible to make games without learning to program first, would you still have chosen to make games? Some of them said yes. More of them said no. Many of them had already tried to learn to program. They had not succeeded and it wasn't a lack of effort. They were up against huge barriers that they had no personal control over barriers, like time, money, energy, the former education that they were coming into this with access to tools and teachers and people who would give them feedback on their work competence, social pressure. I want to tell you a story about social pressure. This comes from Megan Hughes Gamemaker who uses twine and gamemaker maker.

Speaker 3:          40:23          Megan Hughes. I went to an all girls high school here in Durban, South Africa. We had a male teacher for computer science. Well, he taught us well. He would make comments about the fact that women should not be programmers. He chuckled to himself if anyone's spoke of that sort of career for women, and he was generally patronizing, even when we might correct him about code, he'd put on the board as in he humored us throughout our education. For most of the three years I had him teach me, I thought he only had a son of whom he spoke incredibly fondly. Somewhere near the end of the third year, he accidentally mentioned his daughter, uh, well accomplished specialists daughter. This attitude combined with the fact that the male friends I knew who were into computers seem to sell far ahead of me having dads that encourage them and taking apart machines and coding from an early age. Whereas I was blamed for anything even slightly off on her home, on our home computer, and we certainly didn't have the funds for me to run risks of breaking anything with phones, with code attempts. I figured I'd already lost the race before starting. In the end, I pursued my other love psychology.

Speaker 3:          41:35          This is not just about America. This is about everybody worldwide who might want access to this art form. This is about me, but it's also about Meghan Hughes. It's about everybody I heard from who wasn't in the United States and everybody who was but who never thought that they could ever learn to program

Speaker 3:          41:56          some of these people, the ones who thought they would never ever learn to program our learning to program because of Game Dev. This is especially common in twine. That's super simple language and the reason it's especially common in twine is because twine extends with javascript. People working in twine. See what other people have done in Java script and some of them are getting curious and some of them are getting involved. This is Kiva Bay. I'm 32 and I feel for the first time in my life like I could learn programming, maybe not well, but I could figure it out with some help and I think it's because I've made a twine game now that I feel confident enough to even try. Programming always felt like a secret society hidden behind a locked door. I could never find twine. Showed me a window to sneak through.

Speaker 2:          42:42          Yeah,

Speaker 3:          42:42          keep a base. First game is about her personal experience of homelessness. It's called 12 hours and it just went, it just went through a green light on steam. This is not a game that would exist if she had to learn to program,

Speaker 2:          43:00          but

Speaker 3:          43:02          well some people are inspired to learn to program by their game Dev experience. It's not true for everybody. This is Mike Rosen who works in quest and adventure game studio. I have mild dyscalculia, which is basically like dyslexia, but with numbers, it's nearly impossible for me to recognize or make sense of patterns and sequences in numbers and I'm also pretty bad with computer logic. Years ago a friend tried to teach me some basic programming and I just could not get a handle on it at all. I just assume making a game would be something beyond my abilities until I found these programs.

Speaker 2:          43:39          Okay.

Speaker 3:          43:40          I spoke with 35 known programming game devs. They work on over a dozen different engines and between them they have created literally hundreds of games. Some of these games are hours and hours long. Others are 15 minutes, 10 minutes, five minutes to some of them have created just one game. Others have created dozens.

Speaker 2:          44:07          Yeah.

Speaker 3:          44:07          The vast majority of these games would not exist if they had had to learn to program first. We are better off because their game success, we are better off for these new voices, these new experiences, these new ideas about what is a video game. We're better off even for the gains that were just created for one person or for no one else to see. Has anyone ever drawn you a picture? Has anyone ever written you a poem? It doesn't have to be big. Just something small like Oh, dirty limerick core. You know when new version of roses are red, violets are blue.

Speaker 3:          44:52          What would the world be like if no one could? What would the world be like if your choices were right? The entire Elliot or nothing. That is where video games have been. That is what is changing right now. Right here at this moment in history. Every single person in this room, programmers and non programmers could go home tonight, download a free game engine and start making a game if that was what you wanted to do. This is how the world is changing. This is incredible. This is huge and more people every day thanks to the Internet, thanks to free tools, thanks to other people telling them you can make a game to more people everyday. Go home, download that free software, try it out, discover that they can be part of this. The world is changing. It's changing right now. This is the future where everyone can make games and it's really important. Thank you.

Speaker 3:          45:59          I would like to take a moment to thank the Devs who were willing to speak with me and share their insights. There were more stories here than I possibly could have shared with you and I wish I could have shared more. I was deeply honored by their willingness to tell me their stories. I would also like to thank the people who take the time to make software to help non programmers into this, into this art form. Uh, particularly the people who are releasing it for free. As many of the people coming into game development do not necessarily have the money to be able to afford an expensive game says inexpensive game engine. So any questions,

Speaker 2:          46:41          right?

Speaker 4:          46:44          Yeah, I'm 20 years older than you, but I remember witnessing a fairly similar phenomena with hypercard people developing interactive stories, you know, in the mid eighties

Speaker 3:          46:59          absolutely. And I think part of what's going on right now that makes the change here is the Internet. I think it is how easy it is for people to pass their games for one person to another because hypercard not as easy as just downloading on someone else's file or playing online. But yes. Hypercard as an example that absolutely fits into this model.

Speaker 4:          47:24          So you don't have to be use twine. Presumably you were a

Speaker 2:          47:30          programmer created twice so correct design stand point. If you want to make tools for game designers, what advice would you,

Speaker 3:          47:37          the question was from a Meta perspective, uh, what would be my advice to people who want to make games? We want to make game engines for non programmers. Uh, this is actually a really interesting question for me because one of the things that I've been working on quietly behind the scenes has been exactly that. Uh, there are reasons why I wanted to learn c sharp. The thing that I would say is most important to keep in mind is that you want to minimize the number of walls that people can run into. That if it's possible to keep people from using bed syntax for whatever the system is, keeps them from doing that, make it impossible to make bad decisions, make it possible to make interesting decisions. And I recognize that, you know, it's very hard to get rid of runtime errors. Like you can't help the people who go and divide by zero deliberately. Yes, you divided by zero and now everything's going to stop. But if it's not possible for them to hit, go and then have compiler error after compiler error after compiler error if it will run. But give them a heads up about what went wrong. That would be my advice. Make it as streamlined as possible to make something. I also want to give credit to Chris [inaudible] who was the creator of twine, uh, who was looking specifically at this kind of question when he created it.

Speaker 3:          49:07          Anybody else?

Speaker 5:          49:12          So I have a question. It's a little bit of a tangent from your talk. Um, goes a little bit beyond game design. Um, the thing I find really neat about what you've been saying has been the, um, I guess I'll say the bridge between programmers and non programmers in the field of game design that's been created by these, um, different systems where you can actually do some game design. And I think of these different systems as providing different ways to express programming logic that are somewhat more intuitive to people who haven't gone through the, okay, let's learn in December from scratch and all right, the seven computer things and that can stop. Um, and I, I'm sort of wondering how do we expand that beyond game design? Because you said, should everyone learn to program? No. And I certainly sympathize with the, with the feelings behind that.

Speaker 5:          49:54          There are people who can't learn to program and people for whom it's really not worth it and they will not enjoy it and they will be miserable. Um, but our society is more and more one that's like, just, you know, the computers are accumulating under our feet and we're being risen up by them. And for the people who don't understand anything about programming to understand how computers work, I think the feeling is just being more and more helpless in the face of all sorts of stuff around them. So I'd love to see that, um, bridge that you're building in game design, outside of game design. Do you know of any efforts in that area? Ways make, I'll say programming in general. The wow, is that a, you know, broad statement more accessible to people who aren't programs?

Speaker 3:          50:34          Code Academy, Code Academy Code Academy comes instantly to mind from a game design perspective because, hey, I come back to this, it's, it's my lunch.

Speaker 5:          50:44          No, that's your thing. That's this talk.

Speaker 3:          50:46          There is a system that was created at MIT called sketch and what's really interesting about sketch it same day eight to 16 year olds, but it works in the browser and not only does it not let you fail your syntax, but all of the visual drag and drop scripting, all the pieces of it are kind of shaped like puzzle pieces. So you can see how they all fit together. So it makes it very easy to understand, okay, if I have an, if else, there's this little gap here and that little gap means that I have to have what my conditional is in there. But you also ask the broader question, not just about programming but about growing more comfortable with computers at large. And I want to point out that another way to look at this is that it's a Ui challenge and that is a Ui challenge. That number one is being tackled at Google. Number two, apple excels at, and there were so many people continuing to tackle this challenge of how do we make computers that look like they think like people, how do we make things intuitive and it's an ongoing struggle. It's an important struggle and how to teach programming is undergoing that exact same struggle.

Speaker 5:          52:00          Yeah, I'm, I'm worried. I mean I'm, I'm behind efforts to make computers think more like people, but I think that the computers the way computers think has a way of the own and it's always going to be around and helping people in general understand a little bit more of that would be valuable too. But that's a program perspective so,

Speaker 3:          52:19          well, so I had an experience a couple of weeks back where I was working on a rogue like game. So these are the top down dungeon games, procedural generation, whole nine yards. And I was working on line of sight. So here's my, here's my player character. How far can they see, what can they see? How are things getting exposed? How does this interface with the light mechanics? And it was the first time I'd used my Algebra in about 20 years and before then I was in school doing something in school. But it was important for me to learn Algebra in the same way. I think that there's merit to learning programming in the context of actually, you know, programming. There's a lot to be said for knowing some programming. There's a lot to be said for knowing some Algebra and possibly it'll show up 20 years later and you'll sit there going, I'm so glad I paid attention in that class. Why didn't I listen to my trig teacher or what? And I listen to my programming teacher, but my protest is against the idea that a barrier should be in place. The barrier when it's not in the context of being a barrier is another matter entirely.

Speaker 3:          53:38          Anybody else? Right. Hi.

Speaker 6:          53:41          So I had a general question about building tools. So in some sense, building a game with her strict language, it's like building a very specialized tool so you can build for Mckinnell things you've built in with our hammer and the hammer is very good at hammering but terrible at other things. And there are other tools, our Swiss army knives, which are kind of expert to use. Um, so I've seen this in game engines that you try to build to. This is a tool and knows how to speak certain things, but it's extremely frustrating when you try to go beyond that to paradigm. And I don't know if you've talked a bit about that trade off between generalized tools and specialized tools.

Speaker 3:          54:11          It's startling. So that's something that we see with choice script, RPG maker, adventure game, studio, Britain Pie. They are aimed very specifically a doing one specific kind of game and once you branch off that, it's that question of making sure that the system you're using to make what you're making actually fits with what you're trying to make. And I got rescued by a programmer once about a year ago because I had this great idea for any synchronous multiplayer game written an informed seven and I knew that informed seven can support data that holds over from play to play. And I thought to myself, I can make a game that's multiplayer where multiple people can play it and affect each other by just putting it on a server. I didn't understand that what was going to happen was that it was going to cash in the browser and people would not be able to interact with each other.

Speaker 3:          55:09          I didn't understand the limits of my tool. I wound up and this was for a game jam, so I wound up running actually to my fiance, Daniel Church, who is extraordinarily good at programming and said, save me. I have created an idea that is beyond my toolset and she set up server communication and Java script and made it so that it could actually happen the way I had originally pictured it. Yes, there are dangers. If you decide that you're going to use your hammer as a Panini press, it is a good idea to look around and see if you have a Panini press available first. Anybody else? Well, in that case, I want to thank you so much for your time. I really appreciate that you came here to hear me speak today and I actually have a blog@civilnoon.com where I think about game does and the state of Game Dev and the people making games. So if that's of interest to you, please stop by. Thank you so much. Sure.