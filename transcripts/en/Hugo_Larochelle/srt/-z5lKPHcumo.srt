1
00:00:00,510 --> 00:00:00,700
Okay.

2
00:00:00,700 --> 00:00:04,960
In this video we'll see a more general
algorithm for performing in France in

3
00:00:04,961 --> 00:00:08,440
general conditional random fields
known as belief propagation.

4
00:00:10,520 --> 00:00:11,170
Okay.

5
00:00:11,170 --> 00:00:14,500
So we've seen in the previous
video that we could, uh,

6
00:00:14,560 --> 00:00:17,200
visually illustrate a,
uh,

7
00:00:17,201 --> 00:00:20,830
undirected graphical model like a
conditional random fields that we can be

8
00:00:20,831 --> 00:00:25,831
written as a product of factors into a
factor graph where we have a graph it

9
00:00:26,681 --> 00:00:30,760
notes that correspond to random variables
and other notes that correspond to the

10
00:00:30,761 --> 00:00:33,460
different factors in the model.

11
00:00:35,590 --> 00:00:36,423
Okay.

12
00:00:36,830 --> 00:00:41,830
One advantage of the fact of graph is
that it provides a good representation for

13
00:00:42,920 --> 00:00:47,920
a actually deriving and illustrating the
types of computations that we must do

14
00:00:48,350 --> 00:00:50,480
to perform inference in a,
uh,

15
00:00:50,481 --> 00:00:54,800
undirected graphical model of like a
conditional random fields. Uh, in fact,

16
00:00:54,801 --> 00:00:59,210
the forward backward algorithm that
we've seen before for a computing,

17
00:00:59,211 --> 00:00:59,801
the alpha bed,

18
00:00:59,801 --> 00:01:04,580
a tables which are useful for unnecessary
to compute the marginals in a linear

19
00:01:04,581 --> 00:01:09,530
chain conditional random fields can be
rented in the more general form where, uh,

20
00:01:09,540 --> 00:01:12,380
in, uh, it's a specific case,

21
00:01:12,710 --> 00:01:16,760
it boils down to the forward backward
algorithm. But for a general,

22
00:01:16,880 --> 00:01:18,170
a conditional random fields,

23
00:01:18,350 --> 00:01:22,970
it provides now an algorithm for these
more general cases or performing imprints.

24
00:01:23,410 --> 00:01:24,050
Okay.

25
00:01:24,050 --> 00:01:27,860
Specifically belief products or this
algorithm is known as belief propagation.

26
00:01:28,250 --> 00:01:33,250
It's a message fashioning algorithm
in the sense that now in the graph,

27
00:01:33,650 --> 00:01:34,670
each node,

28
00:01:34,970 --> 00:01:39,700
the notes are going to exchange
messages between them and uh,

29
00:01:39,850 --> 00:01:43,040
the messages are going to be
exchanged normally until convergence.

30
00:01:43,041 --> 00:01:47,570
That is until the messages that one though
the sending to another node does not

31
00:01:47,571 --> 00:01:49,940
change. And, uh,

32
00:01:49,970 --> 00:01:54,970
the idea is that the messages that one
node is going to send to another note is

33
00:01:55,071 --> 00:01:57,670
going to be a combination of,
uh,

34
00:01:57,770 --> 00:02:02,770
things that come from the
factors associated with
that node and messages that

35
00:02:03,231 --> 00:02:05,390
were received from its neighbors.

36
00:02:05,840 --> 00:02:06,450
Okay.

37
00:02:06,450 --> 00:02:09,180
So there are actually going
to be two types of messages.

38
00:02:09,181 --> 00:02:12,570
Much like there are two types of nodes
in the factor of graft are going to be

39
00:02:12,571 --> 00:02:15,060
two types of messages.
Um,

40
00:02:15,270 --> 00:02:20,270
so there are going to be messages from a
variable nodes which are illustrated as

41
00:02:20,311 --> 00:02:24,510
a circle in the graph, uh,
to its neighbor factor notes,

42
00:02:24,540 --> 00:02:26,620
which are the squares,
uh,

43
00:02:26,670 --> 00:02:29,920
the messages they're going to
be defining a recursive form.

44
00:02:29,921 --> 00:02:33,240
So the message from a variable node,

45
00:02:33,900 --> 00:02:38,250
which is a illustrated,
uh, it's not an s to a,

46
00:02:38,280 --> 00:02:40,920
a node that is a factor.

47
00:02:41,010 --> 00:02:44,010
So we use f two of a
straight factor notes.

48
00:02:44,490 --> 00:02:49,410
So the message from s two f
when the node as takes value,

49
00:02:49,470 --> 00:02:54,470
I is just going to be the product of the
messages that all the other factors f

50
00:02:56,311 --> 00:03:01,311
prime which are connected to s and
are not f so the note f one that send

51
00:03:02,291 --> 00:03:04,490
messages recursively to itself.
So it's,

52
00:03:04,530 --> 00:03:09,530
it's going to receive the messages that
other factors of prime I've sent to s

53
00:03:11,050 --> 00:03:13,180
four, again, the uh, uh,

54
00:03:13,210 --> 00:03:16,570
where we assumed that the
node s is taking value. I,

55
00:03:17,230 --> 00:03:22,230
so we take all the messages that have
been sent to s and we multiply them

56
00:03:22,331 --> 00:03:26,500
together and that becomes the
message that s is going to send to f.

57
00:03:26,680 --> 00:03:28,900
And what we take the
product of fat of messages,

58
00:03:29,050 --> 00:03:32,380
we only take the messages
from factors f Primes,

59
00:03:32,381 --> 00:03:37,240
which are not f but our
neighbors are connected to us.

60
00:03:37,810 --> 00:03:39,790
Okay.
So in this illustration here,

61
00:03:39,850 --> 00:03:44,850
the message from s two F is going to be
the product of the messages that come

62
00:03:45,161 --> 00:03:49,300
from this. And this note, this factor
node here in this factor are not here.

63
00:03:49,330 --> 00:03:52,450
So this would be one of the F primes
and this would be another APP.

64
00:03:53,710 --> 00:03:58,180
And now the messages from a factor
node to a neighbor variable node,

65
00:03:58,330 --> 00:04:01,720
it's going to be slightly
more complicated. Um,

66
00:04:01,900 --> 00:04:06,640
so the message from f two s where,
uh,

67
00:04:06,670 --> 00:04:10,840
s stakes is assumed to take
value. I, so for instance, in, uh,

68
00:04:10,870 --> 00:04:15,020
if s is a label note than I would
be a potential label for that, uh,

69
00:04:15,370 --> 00:04:20,290
for that label node is going to be
now not just a product but as some.

70
00:04:20,710 --> 00:04:25,710
So we're going to have a sum over the
value of all the other variables that,

71
00:04:27,630 --> 00:04:32,470
uh, are involved in the factor, the
factor that's sending a message.

72
00:04:32,980 --> 00:04:36,630
Uh, but we're in this,
some will keep the, uh,

73
00:04:36,670 --> 00:04:38,860
value of the node s two,

74
00:04:38,861 --> 00:04:42,730
which we're sending message to its
value where assuming, which is I,

75
00:04:42,850 --> 00:04:43,683
which is this here.

76
00:04:44,410 --> 00:04:49,410
So we take the value of the
factor for all vectors zed where,

77
00:04:49,660 --> 00:04:53,110
uh, all the values of all
the other variables, uh,

78
00:04:53,140 --> 00:04:56,320
involved in this factor are being
changed to their potential value.

79
00:04:56,350 --> 00:05:01,020
We trade of all of these values except
for the note as which we keep fixed to

80
00:05:01,030 --> 00:05:03,520
eye.
And when you take that value,

81
00:05:03,521 --> 00:05:08,521
we would also multiply the messages
that all of the other neighbor nodes.

82
00:05:10,480 --> 00:05:14,230
And so the neighbor nodes here are going
to be variable notes as primes that are

83
00:05:14,231 --> 00:05:18,910
neighbors of f except the note
to which we're sending a message.

84
00:05:19,090 --> 00:05:24,000
S So we're going to multiply all,
all the messages that these, uh,

85
00:05:24,070 --> 00:05:28,650
notes s primes Av sent to f and uh,

86
00:05:28,680 --> 00:05:32,470
we're a US also take into
account in this some,

87
00:05:32,680 --> 00:05:35,530
what is the value that that, uh, uh,

88
00:05:35,680 --> 00:05:40,540
note as frying is taking in the
variables involved in the factor.

89
00:05:41,620 --> 00:05:43,990
So visually,
uh,

90
00:05:44,010 --> 00:05:49,010
the message sent from this factor to that
variable node is going to involve the

91
00:05:51,701 --> 00:05:56,701
messages that came from all other
variable notes that are not s and a,

92
00:05:57,800 --> 00:06:02,420
it's going to be the product of
these messages. But then, um,

93
00:06:02,460 --> 00:06:03,890
there are going to,
uh,

94
00:06:04,130 --> 00:06:07,610
we're going to get the message for
each potential value that each of these

95
00:06:07,611 --> 00:06:08,870
variable node can take.

96
00:06:08,990 --> 00:06:12,560
And you're going to be combined
together and waited by the, uh,

97
00:06:12,590 --> 00:06:17,030
factor associated. They're sort of
factor that is sending the message.

98
00:06:17,330 --> 00:06:20,720
And then we're going to some over
all potential values that these,

99
00:06:20,990 --> 00:06:23,270
this variable known in this
variable note could take.

100
00:06:25,890 --> 00:06:28,950
So to make this more concrete,
we're going to do the, uh,

101
00:06:29,010 --> 00:06:32,130
specify a specific case
of a linear chain CRF,

102
00:06:32,430 --> 00:06:36,750
and it's going to be simplified so
we won't have a context window. Uh,

103
00:06:36,810 --> 00:06:40,440
we'll just have why one be connected to
x one and y two, I'll need two x two.

104
00:06:41,730 --> 00:06:46,170
So here we have our equations for
the messages and now, uh, we'll uh,

105
00:06:46,200 --> 00:06:49,870
do a few iterations of the
messages, uh, where we compute a,

106
00:06:49,871 --> 00:06:53,250
a few of them in, uh,
actually will, we'll, uh,

107
00:06:53,300 --> 00:06:58,260
in this example only do from
left to right for now. So, uh,

108
00:06:58,261 --> 00:07:02,370
first we, uh, initially, uh, we
initialize all the messages to one.

109
00:07:02,371 --> 00:07:05,210
So the mew messages all going
to be set to one initiative.

110
00:07:05,211 --> 00:07:07,230
That's usually the
starting condition we use.

111
00:07:08,400 --> 00:07:13,400
Now let's consider the message that
is stent from x one to this factor.

112
00:07:14,310 --> 00:07:19,310
So a message from a
variable nodes to a factor,

113
00:07:20,010 --> 00:07:24,140
a node, it should be the product
of all the messages that the, uh,

114
00:07:24,270 --> 00:07:28,100
variable no that's received
from other factors except f.

115
00:07:28,370 --> 00:07:31,920
Now in this case,
x is only involved in one factor.

116
00:07:31,921 --> 00:07:36,360
So there are no other messages when this
case will the product of nothing. Uh,

117
00:07:36,400 --> 00:07:40,680
we'll set it to one by definition.
Next,

118
00:07:40,681 --> 00:07:43,250
we'll consider this
message here from this,

119
00:07:43,260 --> 00:07:45,150
this factor through that variable node.

120
00:07:47,210 --> 00:07:52,210
So if we look at the formula here
from the factor to a variable note,

121
00:07:53,300 --> 00:07:57,320
uh, what we have to do is that
we have to some, so, okay,

122
00:07:57,321 --> 00:07:59,390
so this factor,
uh,

123
00:07:59,420 --> 00:08:02,660
involves y one and x one.

124
00:08:02,960 --> 00:08:07,960
And then while what do we have to do is
to some over all values involved in the

125
00:08:08,511 --> 00:08:11,330
factor that is x one and y one,

126
00:08:11,660 --> 00:08:16,660
except that we keep the value of the
note to which we're sending the message.

127
00:08:17,811 --> 00:08:21,470
So that's s two,
it's specified value in the message.

128
00:08:21,471 --> 00:08:26,471
So that's I hear and also we only some
over the variables that are on observed.

129
00:08:27,410 --> 00:08:31,040
Uh, so in this case x one is given.
So we keep it fixed also too.

130
00:08:31,041 --> 00:08:35,080
It's a given value. So in
fact, in this case, we, uh,

131
00:08:35,360 --> 00:08:39,950
have only one term in the song and
that's the term where a x one takes the

132
00:08:40,010 --> 00:08:44,420
specified value and why one takes a also,
it's uh,

133
00:08:44,630 --> 00:08:45,700
the value.
Hi.

134
00:08:48,370 --> 00:08:50,300
So removing the ink,
uh,

135
00:08:50,350 --> 00:08:55,350
the message being sent to why one from
this factor is going to be the value of

136
00:08:57,421 --> 00:09:00,150
the factor four x one. And, uh,

137
00:09:00,151 --> 00:09:03,840
some given while you value
of y one being cool to I,

138
00:09:04,670 --> 00:09:09,670
so that's this term times the message
that was received by this factor from

139
00:09:09,900 --> 00:09:13,380
other value variable nodes. Stan, why one?

140
00:09:13,590 --> 00:09:16,920
So the only other message is
this message here, which is one,

141
00:09:16,921 --> 00:09:21,921
so one times that cause this will be the
expression of the message and all this

142
00:09:23,791 --> 00:09:28,710
that when I say that I see for a
given value I, for the variable node,

143
00:09:28,980 --> 00:09:33,980
it means that I need to send what
this message is for all values.

144
00:09:34,230 --> 00:09:38,970
I have the variable node in
question. Uh, so in this case,

145
00:09:39,090 --> 00:09:43,440
when I'm sending a message to a y one,
um,

146
00:09:43,500 --> 00:09:47,700
it can take as many values as the
number of classes from one to see.

147
00:09:47,790 --> 00:09:52,410
So we'll need to compute this
expression for eye being one, two,

148
00:09:52,411 --> 00:09:57,390
three up to capital's seat. And
so when I'm sending, uh, this,

149
00:09:57,750 --> 00:09:58,860
uh, I'm, can,

150
00:09:58,861 --> 00:10:02,730
I can think of it as sending a vector
actually where each element of the vector

151
00:10:02,731 --> 00:10:06,510
is a different value of the message
for different values of, of I.

152
00:10:07,020 --> 00:10:12,020
And so I could just take the exponential
of the lug you neri factor for all

153
00:10:13,120 --> 00:10:18,120
value possible values for [inaudible]
and send that as the message of,

154
00:10:18,350 --> 00:10:21,570
uh, this factor to the
variable node. Why one.

155
00:10:24,690 --> 00:10:25,300
Okay,

156
00:10:25,300 --> 00:10:28,270
then we have to send message
from y one, two, this factor.

157
00:10:28,360 --> 00:10:32,650
So we have a message from a
variable no to a factor node,

158
00:10:34,150 --> 00:10:37,840
assuming that our variable
takes, uh, some given value. I,

159
00:10:38,080 --> 00:10:43,080
and that needs to be the product of all
messages that were sent to the factor,

160
00:10:44,590 --> 00:10:49,360
um, to the factor. Sorry to
the variable note f except,

161
00:10:49,850 --> 00:10:54,790
uh, s sorry. Except f.
So in this case, uh,

162
00:10:54,820 --> 00:10:55,650
the,
uh,

163
00:10:55,650 --> 00:10:59,230
other message I could have come in from
other factors would be this message.

164
00:10:59,470 --> 00:11:02,710
So we'll have the product of just this.

165
00:11:02,711 --> 00:11:07,270
It's the only other factor message that
this is receiving except from a message

166
00:11:07,271 --> 00:11:11,860
from this guy, this factor
node. So the message sent by,

167
00:11:12,010 --> 00:11:13,340
uh, I, uh,

168
00:11:13,360 --> 00:11:17,160
why one to this factor would just
be the exponential of the union.

169
00:11:17,161 --> 00:11:21,350
Every factor for the value of y one,
which would be I,

170
00:11:21,380 --> 00:11:25,110
so we'd have the vector of exponential
of [inaudible] exponentially. Like,

171
00:11:25,111 --> 00:11:28,600
hey you two and so on,
this vector would be sent to that fact

172
00:11:28,680 --> 00:11:29,513
factor.

173
00:11:31,850 --> 00:11:36,850
Next we have the message from this
factor no to that variable note.

174
00:11:38,180 --> 00:11:43,100
So that's this rule here.
Now we have to some over all,

175
00:11:43,530 --> 00:11:48,320
uh, the values of the random
variables involved in the factor f.

176
00:11:48,350 --> 00:11:49,970
So it's this factor.

177
00:11:50,000 --> 00:11:55,000
So the variables are y one and y two
but have to keep zed s to its value.

178
00:11:55,970 --> 00:11:58,060
I,
so in other words,

179
00:11:58,061 --> 00:12:02,560
we have to send the messages for each
value of I where we do the sum and we take

180
00:12:02,830 --> 00:12:06,430
the variable to which we are sending
a message and we keeping it to that

181
00:12:06,440 --> 00:12:07,360
specified value.

182
00:12:07,380 --> 00:12:11,320
I and otherwise for the other
variables we some over their values.

183
00:12:11,380 --> 00:12:13,180
So in this case we're sending to y two.

184
00:12:13,181 --> 00:12:15,580
So where are you going to
some over the value of y one.

185
00:12:15,930 --> 00:12:20,200
So we have to some over
why one of this factor,

186
00:12:20,660 --> 00:12:22,750
the factor here,
which is the pairwise factors.

187
00:12:22,751 --> 00:12:26,350
So it's the exponential of
the pairwise factor here.

188
00:12:27,550 --> 00:12:32,170
Times all the messages that comes from
other variable nodes as prime that are

189
00:12:32,171 --> 00:12:34,360
not s and that'll work send to f.

190
00:12:34,570 --> 00:12:39,520
So essentially this message here,
so that message here,

191
00:12:39,760 --> 00:12:44,760
so have the exponential of a u y one
times the exponential of a p y one y two.

192
00:12:45,730 --> 00:12:50,440
So that's equivalent to the exponential
of Aui one and AP. Why One? Why too.

193
00:12:50,470 --> 00:12:54,700
And then we're summing over the
other variables that are not y too.

194
00:12:54,701 --> 00:12:56,740
So that's in this case.
Why One?

195
00:12:58,660 --> 00:12:59,150
Okay.

196
00:12:59,150 --> 00:13:00,580
And uh,

197
00:13:00,590 --> 00:13:05,590
so that's this message that's being sent
from that factor to this variable Nov.

198
00:13:07,000 --> 00:13:08,820
Let's, so mink, oh,

199
00:13:09,260 --> 00:13:14,260
and notice that this is actually the
initial value of the first column in the,

200
00:13:14,680 --> 00:13:18,980
uh, uh, computation of the Alpha table
in the forward backward algorithm.

201
00:13:19,250 --> 00:13:22,250
So we see we're starting to recover pieces
from the forward backward algorithm.

202
00:13:23,500 --> 00:13:24,333
Okay,

203
00:13:24,460 --> 00:13:28,450
next we could send the
message from here to there.

204
00:13:28,451 --> 00:13:32,380
So with a similar reasoning as
in this case here, we get one

205
00:13:33,900 --> 00:13:35,070
and would a similar reasoning.

206
00:13:35,071 --> 00:13:40,071
The message from this factor
to this variable node would
just be the exponential

207
00:13:40,171 --> 00:13:43,370
of the urinary factor, uh, for the, uh,

208
00:13:43,440 --> 00:13:46,320
position two in the sequence.

209
00:13:48,720 --> 00:13:49,030
Okay.

210
00:13:49,030 --> 00:13:53,530
Now the message sends from Y to, to
this factor despair, wires factor.

211
00:13:53,970 --> 00:13:56,470
Uh,
so we are in this rule here.

212
00:13:56,540 --> 00:14:01,540
S F would be the product of all
the messages from other factors,

213
00:14:01,991 --> 00:14:05,230
F primes that are not f and
that are connected to s.

214
00:14:05,260 --> 00:14:09,940
So it's the product of that
message and that message,

215
00:14:09,941 --> 00:14:14,090
which is this expression here or
equivalently alpha on, why two,

216
00:14:14,200 --> 00:14:18,850
we lose our notation from
the Ford backward dollar with
them, which we find here.

217
00:14:18,851 --> 00:14:20,680
It's the product of this times that,

218
00:14:23,440 --> 00:14:24,273
okay.

219
00:14:24,470 --> 00:14:27,210
And now if we compute the
message to white three,

220
00:14:28,560 --> 00:14:32,150
then uh, again, where we get is the, uh,

221
00:14:32,220 --> 00:14:36,830
some over the other variable
that shares the same factors.

222
00:14:36,831 --> 00:14:41,831
So that's why two of the pairwise factor
here times all the messages that were

223
00:14:44,851 --> 00:14:47,760
sent to,
uh,

224
00:14:47,820 --> 00:14:52,400
all the messages that were sent
to f from variable known as prime,

225
00:14:52,401 --> 00:14:55,380
which is connected to f n
which is not [inaudible].

226
00:14:55,910 --> 00:14:59,450
So in this case it would be,
uh,

227
00:14:59,480 --> 00:15:01,400
it would be that message here.

228
00:15:02,180 --> 00:15:07,180
So we see that we have some overweight
to the other and a variable nodes of the

229
00:15:07,281 --> 00:15:09,690
exponential of a,

230
00:15:09,900 --> 00:15:14,900
a two why to just here
times Alpha One y two,

231
00:15:15,051 --> 00:15:18,770
which is here and times
the exponential of,

232
00:15:19,340 --> 00:15:24,080
uh, deep pairwise factor,
which we can just put it into
the same exponential here.

233
00:15:24,350 --> 00:15:29,350
And so this corresponds to the
pairwise factor in this expression here

234
00:15:29,630 --> 00:15:34,370
corresponds to this factor.
So if you continue like this,

235
00:15:34,670 --> 00:15:39,110
in this sequence, in this order of the
messages, we actually recover all of the,

236
00:15:39,380 --> 00:15:43,460
uh,
of equations for the values of the Alpha.

237
00:15:43,520 --> 00:15:48,440
So the column in the
Alpha tables. And so, uh,

238
00:15:48,590 --> 00:15:50,210
so this is just,
you know,

239
00:15:50,211 --> 00:15:53,550
at the beginning of the demonstration
that there are equivalent and you know,

240
00:15:53,551 --> 00:15:56,720
a full demonstration, we
actually show you that, uh, uh,

241
00:15:56,721 --> 00:16:01,070
and so would the validate
that a belief propagation, uh,

242
00:16:01,071 --> 00:16:05,540
applied from left to right and then
right to left actually yields the

243
00:16:05,541 --> 00:16:09,560
computation of all the Alpha table and
then the computation of the better table.

244
00:16:13,500 --> 00:16:15,750
So, yeah, so actually if you look at this,

245
00:16:16,380 --> 00:16:21,380
we actually do a recovered the expression
for the second column of the Alpha

246
00:16:21,630 --> 00:16:25,980
Table. And so by proceeding like
this, we recovered all of the,

247
00:16:26,340 --> 00:16:28,440
uh,
of table columns.

248
00:16:32,500 --> 00:16:36,580
So yeah. And for the, to
sum up for the linear chain,

249
00:16:36,660 --> 00:16:37,790
a linear chain graph,

250
00:16:37,810 --> 00:16:41,210
belief propagation is actually the
same as the forward backward algorithm.

251
00:16:41,400 --> 00:16:45,460
The Ford Pass computes the Alpha table,
the backward pass the bed a table,

252
00:16:46,510 --> 00:16:50,950
uh, for the similar reason for an the
miracles stability, we actually, uh,

253
00:16:51,070 --> 00:16:54,220
usually implement a version
that passes log messages.

254
00:16:54,221 --> 00:16:56,290
So that's going to be
more stable numerically.

255
00:16:57,640 --> 00:17:00,780
And one advantage of the message
passing out with them is that, uh,

256
00:17:00,850 --> 00:17:04,180
the belief propagation algorithm is that
we can do in France now on other types

257
00:17:04,181 --> 00:17:06,460
of structure. Now, interestingly,

258
00:17:06,640 --> 00:17:11,640
belief propagation yields Zack inference
if are a structure of our factor graph

259
00:17:13,420 --> 00:17:18,100
is a tree and arbitrary retreat
actually. So, uh, if we,

260
00:17:18,130 --> 00:17:19,420
uh,
uh,

261
00:17:19,421 --> 00:17:23,980
so we can show that belief propagation
actually eventually converges by

262
00:17:23,981 --> 00:17:28,870
computing the, uh, uh, if we compute
the, uh, each of the messages,

263
00:17:29,190 --> 00:17:33,100
eventually the messages
stop changing. And, uh,

264
00:17:33,160 --> 00:17:37,330
and the actually correspond to what
you would like the messages to be.

265
00:17:37,420 --> 00:17:39,200
So if you locked space,
uh,

266
00:17:39,201 --> 00:17:44,201
the log some of the factors
for all of the variables,

267
00:17:46,300 --> 00:17:50,160
uh, that's, uh, come from
a given part of the tree.

268
00:17:51,270 --> 00:17:55,940
And so these long messages can be
used then to provide a do approximate

269
00:17:55,950 --> 00:18:00,450
inference. And in particular
compute marginals, the, uh,

270
00:18:00,480 --> 00:18:04,860
general algorithm with the same equations
can all be so be applied to a graph

271
00:18:05,010 --> 00:18:06,720
which has loops.
Uh,

272
00:18:06,830 --> 00:18:11,460
so in this case it would not
correspond to a tree and, uh,

273
00:18:11,640 --> 00:18:16,240
and then it's often use it practice to
do approximate inference. So, uh, uh,

274
00:18:16,270 --> 00:18:20,190
obtained some approximate estimates
of what the marginals could be.

275
00:18:20,940 --> 00:18:25,620
Uh, you have to be careful. I'll
ever, the algorithm could divert. Uh,

276
00:18:25,621 --> 00:18:29,970
so there are certain tricks that,
uh, are used to make it converge.

277
00:18:30,240 --> 00:18:32,730
Uh, so I ref, you know, there's,

278
00:18:32,760 --> 00:18:36,450
there's a vast body of literature on
a message passing algorithms and loopy

279
00:18:36,451 --> 00:18:39,300
belief propagation,
which I won't cover. Um,

280
00:18:39,330 --> 00:18:44,330
but so one trick that is
tough time sometimes uses
that instead of updating the

281
00:18:45,091 --> 00:18:48,180
messages by overriding them,
you instead,

282
00:18:48,570 --> 00:18:51,890
when you recompute a message,
a second password,

283
00:18:51,900 --> 00:18:54,150
you competing the same
message a second time,

284
00:18:54,270 --> 00:18:57,930
you actually do some sort of weight of
average between the current message and

285
00:18:57,931 --> 00:19:02,580
the previous message. Cause that's
one trick that's sews for, uh,

286
00:19:02,670 --> 00:19:05,520
having a better behaved a algorithm.

287
00:19:06,480 --> 00:19:09,960
So I'm not going to the detail in part
because there are actually a lot of

288
00:19:09,961 --> 00:19:14,130
general purpose libraries that are
publicly available where we just pass the

289
00:19:14,131 --> 00:19:18,720
graph in a certain and data structure
and then the algorithm will do this,

290
00:19:18,780 --> 00:19:23,730
uh, uh, message fascinating until belief
propagation. We'll run it over your graph,

291
00:19:24,600 --> 00:19:26,070
uh,
and uh,

292
00:19:26,071 --> 00:19:30,510
and these areas quite useful because then
they can be used on arbitrary types of

293
00:19:30,511 --> 00:19:31,344
graphs.

294
00:19:34,170 --> 00:19:38,850
So it means that now instead
of constraining ourselves
to a linear chain CRF,

295
00:19:38,851 --> 00:19:41,460
before doing a sequential classification,

296
00:19:41,700 --> 00:19:46,110
we could start considering
adding a lateral connections
between labels that are

297
00:19:46,111 --> 00:19:48,570
at two positions away from each other.

298
00:19:48,660 --> 00:19:52,770
So I have factors between
whyK and why k plus two.

299
00:19:53,160 --> 00:19:57,480
Uh, so even if this would
introduce some loops in the, uh,

300
00:19:57,510 --> 00:20:00,600
in the model, we could
still deal with those. Uh,

301
00:20:00,601 --> 00:20:03,940
we could add also lateral connections,
uh,

302
00:20:04,020 --> 00:20:07,660
for triplets of labels as well.
Um,

303
00:20:07,890 --> 00:20:12,750
so really we can just explore a bunch
of different types of graphs by, uh, uh,

304
00:20:12,810 --> 00:20:17,340
adding factors as we wish.
And then from these factors,

305
00:20:17,341 --> 00:20:20,550
we get a factor of graph and from
the fact that graph, this would, uh,

306
00:20:20,580 --> 00:20:25,510
describe the way of passing messages
between a variable nodes and fat log fire

307
00:20:25,650 --> 00:20:28,500
and factors and from factors.
So variable notes.

308
00:20:29,280 --> 00:20:33,300
So the idea really is when we do
CRF modeling is that you want to add

309
00:20:33,301 --> 00:20:38,301
connections between the things that have
dependencies are fairly strong and that

310
00:20:38,401 --> 00:20:42,540
you want to model directly.
And in fact,

311
00:20:42,541 --> 00:20:47,320
you can have a connectivity that
varies between examples. Uh,

312
00:20:47,321 --> 00:20:52,150
so if you have some information,
uh, that differs between examples,

313
00:20:52,270 --> 00:20:54,400
which would tell you that for one example,
for instance,

314
00:20:54,401 --> 00:20:58,840
the first label should really be
connected to the last label, for instance.

315
00:20:58,841 --> 00:21:02,800
But for other, uh, maybe four other,
uh, structures, you don't want this,

316
00:21:02,801 --> 00:21:06,460
you could actually have a separate,
essentially graph,

317
00:21:06,520 --> 00:21:11,290
separate factor ref for each training
example when you're actually, uh, uh,

318
00:21:11,350 --> 00:21:13,900
and you could actually
train such a CRF as well.

319
00:21:16,170 --> 00:21:17,870
So examples of,
uh,

320
00:21:17,940 --> 00:21:21,600
graphs that we often see
for a computer vision.

321
00:21:21,601 --> 00:21:23,220
We could have a grid structure.

322
00:21:23,370 --> 00:21:27,200
So imagine we were labeling each
pixel in the image by, uh, uh,

323
00:21:27,240 --> 00:21:30,920
maybe a segmentation, uh,
label, which tells us, uh,

324
00:21:31,020 --> 00:21:34,620
which may be separates a
foreground from background. Well,

325
00:21:34,621 --> 00:21:38,130
then we flew on to, uh, the
labeling to be fairly smooth.

326
00:21:38,131 --> 00:21:42,390
We could have factors
between each pair of, uh, uh,

327
00:21:42,420 --> 00:21:44,170
pixels like this.
Uh,

328
00:21:44,270 --> 00:21:49,270
Dell are adjacent in the grid of pixels
so that the labeling is a somewhat

329
00:21:49,741 --> 00:21:54,420
smooth, uh, uh, spatially.
But really in general,

330
00:21:54,421 --> 00:21:58,480
we could have any set of
variables connected with, uh,

331
00:21:58,590 --> 00:22:03,180
a bunch of different factors. In
this case, I'll need showing pair,

332
00:22:03,250 --> 00:22:06,390
uh, factors that are over
pairs of variables. They,

333
00:22:06,450 --> 00:22:08,700
but they could be over a triplets or,
or more.

334
00:22:09,000 --> 00:22:11,250
And then the Lou people leave propagation.

335
00:22:11,300 --> 00:22:15,870
I'm going to could be applied also
on these, uh, types of graphs. Um,

336
00:22:15,930 --> 00:22:18,150
you have to be careful.
It doesn't, like I said,

337
00:22:18,151 --> 00:22:21,480
loopy belief propagation or belief
propagation on new peak graphs is not

338
00:22:21,481 --> 00:22:23,850
necessarily guaranteed to converge
on this. You're a careful,

339
00:22:24,090 --> 00:22:25,410
that's not something I'm going to cover,

340
00:22:25,411 --> 00:22:27,150
but I encourage you to
look at the literature.

341
00:22:27,151 --> 00:22:30,750
If you have you encountered problems
where you actually want these more

342
00:22:30,751 --> 00:22:34,680
complicated structure, uh,
to, uh, model your problem

343
00:22:39,110 --> 00:22:41,240
and final lien.
Uh,

344
00:22:41,241 --> 00:22:44,720
I just want to show the expression
for what to do with these messages.

345
00:22:44,810 --> 00:22:47,930
So intuitively these
messages correspond to a,

346
00:22:47,931 --> 00:22:52,730
what is the sum of all the variable nodes.
Uh,

347
00:22:52,760 --> 00:22:57,030
that's, uh, that's, uh, our
nuts. The current variable, no,

348
00:22:57,031 --> 00:23:00,860
they come from a surgeon,
uh, direction from the graph.

349
00:23:01,650 --> 00:23:05,570
And so if you want it to
compute the marginal probability
of the label somewhere

350
00:23:05,571 --> 00:23:07,400
in the graph, well, uh,

351
00:23:07,430 --> 00:23:11,120
to get its approximate approximated
marginal that approximately at marginal,

352
00:23:11,121 --> 00:23:13,670
we just take a similarly
as we've done before,

353
00:23:13,671 --> 00:23:18,650
the exponential of the luck factor
that involves on the dat a variable.

354
00:23:18,890 --> 00:23:23,890
And then plus the messages that come
from all the factors that involve,

355
00:23:25,360 --> 00:23:28,400
uh, the a node. Why k, uh,

356
00:23:28,460 --> 00:23:32,000
except the factor that's, uh, the,

357
00:23:32,110 --> 00:23:34,220
the factor that owned
the involves white gave.

358
00:23:34,221 --> 00:23:39,221
We have sun and then we just some the
log messages from these other factors,

359
00:23:39,980 --> 00:23:43,790
uh, from other nodes outside
of the Eh, from other, sorry,

360
00:23:44,060 --> 00:23:47,750
other factor nodes that are
connected to this variable notes.

361
00:23:47,750 --> 00:23:52,220
We'd some all of their log messages and
then with just normalize the numerator

362
00:23:52,221 --> 00:23:57,221
by summing over all values
that are possible for my
variable of interest of the

363
00:23:57,441 --> 00:23:59,840
numerators. So the exponential, uh,

364
00:23:59,870 --> 00:24:04,790
exponentiate at some of luck factors
and log messages. So to sum up,

365
00:24:05,420 --> 00:24:09,140
approximate inference would correspond
to something over all the luck factors

366
00:24:09,141 --> 00:24:11,960
that involve only the
variable of interest. Why Gay?

367
00:24:12,170 --> 00:24:14,990
So this is this term here.

368
00:24:14,991 --> 00:24:19,000
In this example I'm showing just
one luck factor, but you can have,

369
00:24:19,130 --> 00:24:20,240
you can have more than one,

370
00:24:20,930 --> 00:24:25,930
then you some over all the log messages
that come into why k from other factors.

371
00:24:26,211 --> 00:24:31,060
So it's this sum here. Then
you take the exponential, uh,

372
00:24:31,190 --> 00:24:35,270
the exponential of those,
some of luck factors and log messages,

373
00:24:36,020 --> 00:24:40,460
and then we normalize to ensure
that we get a valid distribution.

374
00:24:41,270 --> 00:24:41,660
Okay,

375
00:24:41,660 --> 00:24:46,160
so this sums up the general
belief propagation algorithm
for general conditional

376
00:24:46,161 --> 00:24:46,850
random fields.

