WEBVTT

1
00:00:00.610 --> 00:00:00.780
Okay.

2
00:00:00.780 --> 00:00:04.620
<v 1>In this video we'll see how we can compute the partition function in the linear</v>

3
00:00:04.621 --> 00:00:06.140
chain conditional random fields.

4
00:00:07.600 --> 00:00:08.030
<v 0>Yeah.</v>

5
00:00:08.030 --> 00:00:12.390
<v 1>The previous video we've introduced a,
a notation that a separate,</v>

6
00:00:12.400 --> 00:00:15.770
a two types of log factors,
the urinary luck factors,

7
00:00:15.771 --> 00:00:20.771
which only depend on the label that a specific position and the pairwise

8
00:00:21.170 --> 00:00:21.741
factors,

9
00:00:21.741 --> 00:00:26.741
which depends on which depend on a pair of adjacent labels in a sequence.

10
00:00:28.340 --> 00:00:31.720
And if we take this general notation,
then uh,

11
00:00:31.760 --> 00:00:36.320
we can write p of y given x.
So the probability of a label,

12
00:00:36.460 --> 00:00:41.460
a sequence why given the sequence of inputs x as just the exponential of the,

13
00:00:41.631 --> 00:00:46.631
some of the you Neri luck factors plus the sum of the pairwise luck factors.

14
00:00:47.060 --> 00:00:48.470
So by taking the exponential,

15
00:00:48.471 --> 00:00:53.471
we know that this term is going to be positive and then we can divide by a

16
00:00:53.511 --> 00:00:55.700
partition function,
which is uh,
uh,

17
00:00:55.730 --> 00:00:58.540
or normalization constant with just just a,

18
00:00:58.541 --> 00:01:02.630
some of the numerator over all possible sequences.
And then by doing this,

19
00:01:02.631 --> 00:01:06.410
then we are guaranteed that this is a valid distribution.

20
00:01:06.411 --> 00:01:09.080
It's sums to one and the terms are a non negative.

21
00:01:12.380 --> 00:01:15.290
So imagine we actually want it to compute that expression.

22
00:01:15.440 --> 00:01:18.030
So for a given sequence of inputs,
uh,

23
00:01:18.031 --> 00:01:20.330
we are considering a particular sequence of labels.

24
00:01:20.331 --> 00:01:23.540
They want to know according to our conditional random fields,
uh,

25
00:01:23.541 --> 00:01:28.541
what is the actual probability of that label sequence being associated with the

26
00:01:28.821 --> 00:01:32.930
given input sequence?
So a computing,

27
00:01:32.931 --> 00:01:34.700
the numerator is not too complicated.

28
00:01:34.701 --> 00:01:39.330
It's linear and the number in the size of the sequence,
linear in,
you know,

29
00:01:39.350 --> 00:01:43.940
capital k.
Now we have this partition function,
this normalization constant,

30
00:01:44.180 --> 00:01:47.930
which,
uh,
for which I give the expression here explicitly,

31
00:01:48.200 --> 00:01:52.340
it's the sum of the numerator.
So that's the same as the numerator,

32
00:01:52.730 --> 00:01:57.230
but it's the sum over all possible value for the label that the first position,

33
00:01:57.231 --> 00:02:01.790
second position up to the label,
add the last position.

34
00:02:01.791 --> 00:02:06.440
So I have a bunch of nested sums.
And so if this is a,

35
00:02:06.441 --> 00:02:08.210
if there are capital's CE classes,

36
00:02:08.211 --> 00:02:12.830
then this is the sum over c times Capitol c times,

37
00:02:13.220 --> 00:02:16.730
times capital's see,
so k times,
uh,

38
00:02:16.731 --> 00:02:18.710
the product of c terms.

39
00:02:19.010 --> 00:02:22.940
And so that would be c to the capital K s.

40
00:02:23.300 --> 00:02:28.300
So this is an expression that requires some over an exponential number of terms

41
00:02:29.030 --> 00:02:30.890
which,
uh,
for a long sequences,

42
00:02:30.891 --> 00:02:33.500
for large volumes of case that's going to be problematic.

43
00:02:34.280 --> 00:02:39.170
And so that's if we did a naive implementation of the computation of the

44
00:02:39.171 --> 00:02:42.830
partition function.
However,
as we'll see in this video,

45
00:02:42.831 --> 00:02:47.360
we can actually exploit the special linear chain structure in a linear chain

46
00:02:47.361 --> 00:02:51.110
conditional random fields to write a dynamic program that will allow us to

47
00:02:51.111 --> 00:02:56.111
compute the partition function in polynomial time instead of in a exponential

48
00:02:56.991 --> 00:03:01.870
time,
which respect to uh,
uh,
which respect to k the long,
the length of the,
um,

49
00:03:02.890 --> 00:03:07.520
uh,
the length of the sequence.
Oh,
I also want to,

50
00:03:07.970 --> 00:03:12.470
uh,
mentioned that.
So notice I'm using why prying here?

51
00:03:12.471 --> 00:03:17.471
That's to distinguish between the variables that corresponds to a,

52
00:03:17.751 --> 00:03:22.751
the curse part to the labels over which I'm summing in the denominator in the

53
00:03:23.061 --> 00:03:27.980
partition function.
So distinguish those from the labels.
Why here,

54
00:03:28.130 --> 00:03:32.090
which are the labels for which I'm evaluating the probability according to my

55
00:03:32.091 --> 00:03:36.130
model that this particular value of the sequence would be observed,
uh,

56
00:03:36.140 --> 00:03:40.250
would be associated to a given,
uh,
inputs sequence.
Okay.

57
00:03:40.310 --> 00:03:41.420
So this is just too,

58
00:03:41.450 --> 00:03:45.140
this is just to mention that this is a separate variable in my expression.

59
00:03:48.300 --> 00:03:48.990
All right,

60
00:03:48.990 --> 00:03:52.470
so what we'll do is that we'll just reorganize the terms in the partition

61
00:03:52.471 --> 00:03:56.910
function and then we'll notice that we can compute progressively different parts

62
00:03:56.911 --> 00:04:01.560
of it,
uh,
in sequence.
And then to be able to get a,

63
00:04:01.620 --> 00:04:03.250
uh,
an expert,
uh,

64
00:04:03.290 --> 00:04:07.050
the value computed value of the partition function much more efficiently.

65
00:04:08.010 --> 00:04:13.010
So what I did here is that I just first reorganized the sequence of the labels.

66
00:04:13.141 --> 00:04:15.330
I'm going to some in the nested sons,

67
00:04:15.480 --> 00:04:19.110
I'm going to some over the last label and then the previous,

68
00:04:19.120 --> 00:04:24.060
the last label up to the second navel and then the first label.

69
00:04:24.300 --> 00:04:29.200
So I can do this because here,
each of the psalms are independent,

70
00:04:29.201 --> 00:04:33.450
there are for variables and they don't depend on each other in the,
uh,
um,

71
00:04:33.510 --> 00:04:36.910
eight or of the summations.
I can actually change the order of,

72
00:04:36.990 --> 00:04:41.780
of these nested psalms here.
So that's the first thing I did here.

73
00:04:42.740 --> 00:04:46.430
And then the second thing that we'll notice is that,
well,

74
00:04:46.431 --> 00:04:51.200
when I'm performing the sum,
when I'm iterating over y prime one,
the first label,

75
00:04:51.770 --> 00:04:56.670
so I'm summing over the exponential of the summer,
normally all of the uh,

76
00:04:56.840 --> 00:05:01.640
Lug a urinary factors and uh,
uh,
pairwise factors.
However,

77
00:05:01.700 --> 00:05:06.430
however,
within this,
some of factors,
the only two factors that only depend,
uh,

78
00:05:06.600 --> 00:05:08.030
that depends on why prime one,

79
00:05:08.120 --> 00:05:13.120
there's the associated urinary factor and then the pairwise factor between y

80
00:05:13.131 --> 00:05:18.131
prime one and y prime to all of the other factors in the sun that's into the

81
00:05:19.341 --> 00:05:21.830
exponential do not depend on why prime one.

82
00:05:22.220 --> 00:05:25.670
So because the exponential with some is a product of exponentials.

83
00:05:25.880 --> 00:05:30.680
I can separate out into this term here and then the exponential of the sum of

84
00:05:30.681 --> 00:05:35.560
all the other luck factors.
And then I can take this,
uh,
factor.

85
00:05:35.900 --> 00:05:37.470
Uh,
so this,
this,
uh,

86
00:05:37.490 --> 00:05:42.490
constant exponential of the sum of all the other factors and push it out of the,

87
00:05:43.011 --> 00:05:47.990
some override prime one and a.
So push it into the other outer nested sub.

88
00:05:49.220 --> 00:05:51.800
So that's what I've done here.
I've taken all of the other terms,

89
00:05:51.801 --> 00:05:55.730
ain't going to be a,
they're going to appear elsewhere in the expression.

90
00:05:56.600 --> 00:06:01.370
Now look at this some here,
I would remove a bit of ink.

91
00:06:03.380 --> 00:06:08.380
Now I can actually compute this expression if someone gives me a value for y

92
00:06:08.901 --> 00:06:12.860
prime to solo this die.
Why prime too is being iterated in this sum here.

93
00:06:13.250 --> 00:06:14.720
So if you tell me,
well,

94
00:06:14.721 --> 00:06:18.320
compute this expression for right prime two equals one say,

95
00:06:18.350 --> 00:06:22.040
well I can actually compute this,
uh,
efficiently.
It's just a,

96
00:06:22.041 --> 00:06:25.370
an iteration over all the labels that y prime one can take.

97
00:06:26.240 --> 00:06:29.580
And now,
uh,
I could repeat this,
uh,

98
00:06:29.630 --> 00:06:34.630
this computation performing this sum for each possible value of y prime too in

99
00:06:34.761 --> 00:06:35.960
the outer some here.

100
00:06:36.830 --> 00:06:40.610
And what I could do then is actually stored a result into a vector.

101
00:06:41.360 --> 00:06:44.090
So I'm going to call it this vector alpha one.

102
00:06:44.600 --> 00:06:48.860
And it's going to be index is going to depend on a alpha prime too.

103
00:06:48.920 --> 00:06:52.190
So you can think of this as a vector or you could think of it as a function as

104
00:06:52.191 --> 00:06:55.400
well.
But because there's a finite number of values for y prime to you,

105
00:06:55.520 --> 00:06:59.900
you might as well think of it as a vector or a just in array that contains all

106
00:06:59.901 --> 00:07:04.901
of the values of this sum for the different potential value of y prime too.

107
00:07:06.620 --> 00:07:11.030
So at this point I could just precompute this son for all potential value of y

108
00:07:11.031 --> 00:07:11.864
prime too,

109
00:07:11.900 --> 00:07:16.900
which I'll work and I'll need this summation here when I perform the sum over

110
00:07:17.210 --> 00:07:19.230
right prime too,
because there's some of a ride.

111
00:07:19.231 --> 00:07:21.810
Prime too is the exponential of again,

112
00:07:21.830 --> 00:07:26.830
only the luck factors that depend on why prime to that is the unit refactor this

113
00:07:27.591 --> 00:07:31.370
pairwise factor between y prime two and 1.3 times.

114
00:07:31.400 --> 00:07:34.490
This sum here now because I've precomputed it,

115
00:07:34.491 --> 00:07:38.750
I can just multiply instead by uh,
Alpha one y prime too.

116
00:07:40.010 --> 00:07:43.520
And so again,
if you give me using the same reasoning,

117
00:07:43.521 --> 00:07:48.440
if you give me a particular value of y prime three I can now compute this whole

118
00:07:48.441 --> 00:07:51.170
expression using what I've precomputed before.

119
00:07:52.520 --> 00:07:55.400
So I'm going to call that Alpha two y prime three.

120
00:07:55.401 --> 00:07:59.960
So that's the sum over white prime one and the y prime too.

121
00:08:00.020 --> 00:08:01.580
So that's why we have a two here,

122
00:08:01.760 --> 00:08:06.760
given a specific value of y prime three and to perform this computation.

123
00:08:07.521 --> 00:08:12.410
Now notice that I'm using the Alpha one y prime too.
So this is,
uh,

124
00:08:12.440 --> 00:08:16.340
multiplied here.
So this is times alpha one y prime too.

125
00:08:17.270 --> 00:08:21.530
And then it can continue like this performing all of the sums that are nested

126
00:08:21.950 --> 00:08:25.730
until I reach a determine which I'm going to call it.

127
00:08:25.760 --> 00:08:30.470
Alpha capital came on us,
one of y prime capitol cake.

128
00:08:30.650 --> 00:08:35.150
So again,
I'm going to just go up like this,
uh,
doing a,

129
00:08:35.360 --> 00:08:39.320
uh,
each time doing a summation over the current label,
uh,

130
00:08:39.530 --> 00:08:44.530
of an expression which is going to depend on the precomputed sums over the

131
00:08:45.051 --> 00:08:49.280
previous label.
So now,
once I reached this level,

132
00:08:49.900 --> 00:08:50.330
uh,

133
00:08:50.330 --> 00:08:54.710
that almost almost ready to compute the partition function partition function is

134
00:08:54.711 --> 00:08:57.360
going to some over white prime capitol gates.

135
00:08:57.361 --> 00:09:02.361
Possible values from one to capitol c of the exponential of the Unia refactor.

136
00:09:04.260 --> 00:09:09.240
That involves why Prime Capital k times?
Well,
this whole expression,

137
00:09:10.080 --> 00:09:11.580
this whole expression here,

138
00:09:12.920 --> 00:09:13.560
<v 0>okay,</v>

139
00:09:13.560 --> 00:09:18.330
<v 1>which at this point in my computation is stored into the vector Alpha capital k</v>

140
00:09:18.331 --> 00:09:22.290
minus one index by the value of y prime cake.
So again,

141
00:09:22.291 --> 00:09:26.070
I can perform this some where I just iterate over y prime capital,

142
00:09:26.071 --> 00:09:30.860
k of the exponential of the urinary factor involving why Prime Capita,

143
00:09:30.861 --> 00:09:35.610
okay.
Times devalue in my store back there.
Alpha capital k minus one.

144
00:09:36.750 --> 00:09:41.320
And performing that computation gives me the value for uh,

145
00:09:41.470 --> 00:09:45.480
uh,
finally the value for the partition function on their normalization constant.

146
00:09:46.400 --> 00:09:50.690
Okay,
so this is the rationale behind the algorithm,
uh,
for,
uh,

147
00:09:50.740 --> 00:09:54.660
the dynamic program Algorithm for computing the partition function.

148
00:09:56.310 --> 00:09:56.830
<v 0>Okay?</v>

149
00:09:56.830 --> 00:09:58.690
<v 1>So let's look at the pseudo code for this.</v>

150
00:09:59.080 --> 00:10:03.730
So this is exactly what I've explained,
but in pseudo code,
uh,
so first,
uh,

151
00:10:03.750 --> 00:10:04.091
I actually,

152
00:10:04.091 --> 00:10:07.480
what I'm going to do to organize by computations is that each of the Alpha

153
00:10:07.481 --> 00:10:08.140
vectors,

154
00:10:08.140 --> 00:10:13.140
I'm going to store them as a column into a two dimensional array.

155
00:10:13.660 --> 00:10:17.590
So this here is going to be,
this column's going to be Alpha one,
Alpha two,

156
00:10:17.591 --> 00:10:18.370
Alpha three,

157
00:10:18.370 --> 00:10:23.370
and so on until Alpha a capital k minus one,

158
00:10:23.591 --> 00:10:24.940
that's the last outfit than I need.

159
00:10:26.350 --> 00:10:31.350
So I initialize the first column of my Ira by computing the Alpha one vector.

160
00:10:32.290 --> 00:10:35.320
And obviously we seen the Alpha one vector.
Uh,

161
00:10:35.321 --> 00:10:39.910
so for I or what I need to do is iterate over the value of y prime too,

162
00:10:40.060 --> 00:10:43.210
and then compute the sum over y prime one,

163
00:10:43.390 --> 00:10:47.830
this sum here of the exponentiation urinary plus pairwise factor.

164
00:10:49.670 --> 00:10:53.450
So that's going to initialize the value of these elements in my array.

165
00:10:53.510 --> 00:10:58.100
And then for,
uh,
going from the second column to the last column,

166
00:10:58.101 --> 00:11:02.840
the Meyer Ray for all values of y prime,

167
00:11:03.050 --> 00:11:07.550
a small k plus one that is for all elements in that column.

168
00:11:08.420 --> 00:11:09.320
Okay,
so this,

169
00:11:09.321 --> 00:11:14.060
the value of this is essentially the index of the element in the column,
uh,

170
00:11:14.090 --> 00:11:14.901
in the,
uh,

171
00:11:14.901 --> 00:11:19.901
in their columns or indexes the row in a specific column where the index of the

172
00:11:21.201 --> 00:11:25.250
column is a small k,
I'm going to compute that expression.

173
00:11:25.251 --> 00:11:30.251
So Alpha k given a y Prime Cape plus one a,

174
00:11:30.950 --> 00:11:34.940
which is just a sum.
So that performs the summation of her,
uh,

175
00:11:35.030 --> 00:11:40.030
y Prime Kay of the exponential of the urinary and pairwise factor times the

176
00:11:41.211 --> 00:11:46.211
Alpha terms from the previous column that corresponds to the summation over why

177
00:11:46.881 --> 00:11:51.800
one up to uh,
why prime one up to y prime came on this one.

178
00:11:52.850 --> 00:11:56.350
So do this.
So here we're having illustration of what that corresponds to.

179
00:11:56.470 --> 00:12:01.470
So to here it would be the value of y prime k plus one in a given a duration for

180
00:12:04.931 --> 00:12:06.310
a given value of k.

181
00:12:07.000 --> 00:12:11.830
And then to compute that value while I'll need to use the alphas,

182
00:12:11.890 --> 00:12:14.140
all the Alphas at the previous columns.

183
00:12:14.160 --> 00:12:17.410
So all the Alpha vector came on this one.

184
00:12:18.490 --> 00:12:21.280
And so this is not just a summation of these terms,

185
00:12:21.281 --> 00:12:24.150
these terms are then weighted by this term here.

186
00:12:24.200 --> 00:12:28.600
The exponential of the urinary and pairwise factor that involve,

187
00:12:29.310 --> 00:12:33.010
uh,
that,
uh,
in this case involves why prime cane.

188
00:12:34.240 --> 00:12:35.410
And so we continue like this.

189
00:12:35.411 --> 00:12:39.010
So now we have a procedure that goes from left to right and uh,

190
00:12:39.040 --> 00:12:41.380
that can compute each of the columns sequentially.

191
00:12:43.150 --> 00:12:47.650
And now ultimately,
when I need to compute my normalization constant on my,
uh,

192
00:12:47.830 --> 00:12:48.790
partition function,

193
00:12:49.060 --> 00:12:53.400
I just need to do the final sum over y prime capital gain.
Uh,

194
00:12:53.530 --> 00:12:58.240
the exponential of the urinary factor that only involves why Prime Kevin Old k

195
00:12:58.450 --> 00:13:03.280
times the elements in the last column here.
Okay?

196
00:13:04.120 --> 00:13:08.560
So I'll take that term times the exponential,
the urinary factor,
uh,

197
00:13:08.730 --> 00:13:13.510
of y prime capital k being equal to one plus,
uh,

198
00:13:13.540 --> 00:13:18.040
at the exponential of the urinary factor,
uh,

199
00:13:18.160 --> 00:13:21.820
involve,
uh,
the UN every factor here for a y prime,

200
00:13:21.980 --> 00:13:25.900
the capital k equals,
sorry,
let me say that again.

201
00:13:26.140 --> 00:13:29.020
So when I'm computing the normalization constant here,

202
00:13:29.021 --> 00:13:32.260
I'm summing over all values of y prime capital,
okay?
Eh,

203
00:13:32.410 --> 00:13:36.850
of the exponential of the need,
you and every factor Times d,
uh,

204
00:13:36.910 --> 00:13:39.670
Alpha value,
add the last column.
Here's,

205
00:13:39.720 --> 00:13:42.310
I'm taking that value times the exponential,

206
00:13:42.311 --> 00:13:47.311
the unit urinary factor for why Prime k being called to one plus this value here

207
00:13:47.651 --> 00:13:52.140
at Times d exponential at the end,
every factor at four.
Why Prime Kevin?
Okay.

208
00:13:52.150 --> 00:13:56.650
Equals to a plus.
This value here at times the exponential,

209
00:13:56.651 --> 00:13:59.740
the urinary factor for why Prime K equals three.

210
00:14:00.100 --> 00:14:03.670
So this is a specific example of course for uh,
three labels.

211
00:14:03.671 --> 00:14:06.820
And if I had capital c labels that I do this over,

212
00:14:06.821 --> 00:14:09.070
all capitals see rose in that array.

213
00:14:10.060 --> 00:14:14.200
So notice that this whole procedure is in a,

214
00:14:14.201 --> 00:14:18.580
as a complexity of an o of uh,
capital cane.

215
00:14:18.610 --> 00:14:22.780
This length of the sequence times c squared,
capital c squares.

216
00:14:22.781 --> 00:14:27.520
So the number of potential labels for each,
uh,
element in the label sequence.

217
00:14:27.700 --> 00:14:32.040
So now we have something that's actually pulling pulley meal in the link.

218
00:14:32.041 --> 00:14:36.460
Does the sequence as well as being pulling on in the number of classes.
Okay.

219
00:14:36.461 --> 00:14:37.900
So this is much more manageable.

220
00:14:37.901 --> 00:14:40.900
This is something we can do in a reasonable amount of time.

221
00:14:41.490 --> 00:14:44.470
And so we get this complexity because,
um,

222
00:14:44.620 --> 00:14:49.150
we have two aid rates over a number of values.
That's in Oif gay.

223
00:14:49.330 --> 00:14:54.050
And then for each value of the label at Cape last one,

224
00:14:54.200 --> 00:14:57.290
there are s capitol c values such values,

225
00:14:57.440 --> 00:15:02.060
we have to perform a sum over the value of y prime k at so the label at position

226
00:15:02.061 --> 00:15:05.930
cane there are see such value.
So we have c times c times case,

227
00:15:05.931 --> 00:15:09.440
so that's a k times c squared.
All right,

228
00:15:09.441 --> 00:15:11.930
so that's a pseudo code for computing.
Uh,

229
00:15:11.931 --> 00:15:16.670
the partition function and the at the same time computing this Alpha table,

230
00:15:16.671 --> 00:15:17.600
which as we'll see,

231
00:15:17.601 --> 00:15:20.750
we'll also be useful for performing other types of fingerprints.

232
00:15:24.240 --> 00:15:25.240
As it turns out,

233
00:15:25.241 --> 00:15:30.010
we could have a actually done the computation from the last position.

234
00:15:30.040 --> 00:15:34.870
So summing over the last label and then finally summing over the first label

235
00:15:34.900 --> 00:15:36.640
instead.
And that's because again,

236
00:15:36.641 --> 00:15:41.641
we can in decimation over all potential values for all labels it any place into

237
00:15:41.891 --> 00:15:44.680
a sequence a weekend.
Instead,

238
00:15:44.920 --> 00:15:47.980
we can change the order of these nets that some like we want.

239
00:15:48.730 --> 00:15:53.730
And using the same argument that I could instead performed the sum over the last

240
00:15:54.401 --> 00:15:55.234
label,

241
00:15:55.240 --> 00:15:59.470
assuming a particular value for the previous to last label and that store that

242
00:15:59.471 --> 00:16:01.840
into a vector,
which I'm going to call it better vector.

243
00:16:02.530 --> 00:16:06.880
So that's better capital case when I'm performing the sum over y prime capital k

244
00:16:07.750 --> 00:16:12.690
and then using that value,
it could perform the son now,
uh,
over the previous,

245
00:16:12.691 --> 00:16:16.570
the last label.
And I'm going to be reusing what I've computed before.

246
00:16:16.720 --> 00:16:17.650
And then similarly,

247
00:16:17.651 --> 00:16:22.210
you have this better value instead of the Alpha value times the exponential of

248
00:16:22.211 --> 00:16:25.030
the unitary factor plus the pairwise factor.

249
00:16:25.031 --> 00:16:29.920
But now here over where I'm performing a some over the previous,
the last label,

250
00:16:30.550 --> 00:16:35.380
I can get the new like this for,
uh,
all labels.

251
00:16:35.440 --> 00:16:40.440
And then until I reached the sum over the first label where I just have to take

252
00:16:41.261 --> 00:16:46.210
a sum of where the value for the first label of the exponential of its urinary

253
00:16:46.211 --> 00:16:49.690
factor value,
a times the better value.

254
00:16:49.810 --> 00:16:54.400
So Beta two value for it.
They given,
uh,
uh,
value of y prime,

255
00:16:54.401 --> 00:16:59.380
one in the iteration for this sub because that's just exactly the same
procedure.

256
00:16:59.381 --> 00:17:03.300
But instead of going from the first able to the last week,

257
00:17:03.310 --> 00:17:06.160
going from the last label to the first.

258
00:17:08.550 --> 00:17:12.030
So I'm writing down here,
uh,
exactly the same algorithm,

259
00:17:12.031 --> 00:17:14.730
but now for computing what I'm going to call it,
the Beta tables.

260
00:17:14.731 --> 00:17:16.320
Similarly in the Beta table,

261
00:17:16.620 --> 00:17:21.620
each column is going to correspond to the better vectors in the description of

262
00:17:21.901 --> 00:17:25.980
the algorithm,
that previous slide.
And so now what we'll do is that when stamp,

263
00:17:25.981 --> 00:17:29.140
we'll initialize the last column.

264
00:17:29.141 --> 00:17:33.930
So this column here is going to be better capital k y prime came on a swan or

265
00:17:33.931 --> 00:17:36.630
why prime key minus one is the,
uh,
uh,

266
00:17:37.020 --> 00:17:41.430
index of the row in that column.
And so I compute it like this.

267
00:17:41.790 --> 00:17:46.470
That's the initial value for my table.
And then I go instead from the,

268
00:17:46.520 --> 00:17:51.430
uh,
uh,
previous to last column until the first column.

269
00:17:51.431 --> 00:17:53.940
So this column here is going to be better too.

270
00:17:55.040 --> 00:17:55.460
<v 0>Okay.</v>

271
00:17:55.460 --> 00:17:59.000
<v 1>And I perform a similar computation.
But instead,</v>

272
00:17:59.270 --> 00:18:04.220
when I'm computing the value here,
instead of using a,
as in the alpha table,

273
00:18:04.221 --> 00:18:08.630
the values and the previous column,
I'm using the values in the,
uh,

274
00:18:08.930 --> 00:18:13.640
what would be the next column if I'm ordering her columns like this,

275
00:18:14.650 --> 00:18:16.310
whenever I'm computing this value,

276
00:18:16.490 --> 00:18:21.200
I'm going to take each of the value in the column to the right,

277
00:18:21.640 --> 00:18:23.620
uh,
multiplied that by the exponential living,

278
00:18:23.630 --> 00:18:27.410
a urinary factor plus the pairwise factor and perform a,

279
00:18:27.440 --> 00:18:31.430
performed a song that I'm going to put in the,
uh,
array element here.

280
00:18:32.000 --> 00:18:37.000
So I'm going to go from right to left like this until I filled out all of the

281
00:18:37.700 --> 00:18:38.960
table,
the better table,

282
00:18:38.961 --> 00:18:43.040
and then I can finally computed partition function by summing over the first

283
00:18:43.041 --> 00:18:48.020
label.
The exponential of these of its urinary factor times.
The bit of value,

284
00:18:48.400 --> 00:18:52.730
uh,
in the bit of values are taken from the first column here.
Okay?

285
00:18:52.731 --> 00:18:57.731
So that's just an equivalent procedure for obtaining the partition function as

286
00:18:59.151 --> 00:19:02.510
that of x.
And that's actually,
if you're implementing,
uh,

287
00:19:02.600 --> 00:19:06.140
the computation of the Alpha and Beta tables when we have debugging your code is

288
00:19:06.141 --> 00:19:10.760
to make sure that if you computing the partition function either from the Alpha

289
00:19:10.761 --> 00:19:13.380
table,
the better table,
you actually get exactly the same

290
00:19:13.420 --> 00:19:14.253
<v 0>value.</v>

291
00:19:18.010 --> 00:19:23.010
<v 1>So computing both tables is a often referred to as the forward backward</v>

292
00:19:24.011 --> 00:19:28.620
algorithm for conditional random fields.
So where we've seen that Alpha is,
uh,

293
00:19:28.660 --> 00:19:33.040
Chris wants to afford pass from left to right and better is a backward pass from

294
00:19:33.041 --> 00:19:37.810
right to left.
Um,
it has other names.
So,

295
00:19:37.811 --> 00:19:38.470
uh,

296
00:19:38.470 --> 00:19:42.100
it's sometime referred to as the belief propagation algorithm for linear chain,

297
00:19:42.110 --> 00:19:46.000
sorry,
f or The Sun Product Algorithm,
uh,
for the interchange CRFs.

298
00:19:46.870 --> 00:19:51.870
And notice that intuitively Alpha is the table that gives us what would be the

299
00:19:52.571 --> 00:19:56.890
value of the summation of the numerator,
uh,

300
00:19:56.920 --> 00:19:57.760
for uh,

301
00:19:57.761 --> 00:20:02.761
all the terms that involve the labels from to the left of a given physician.

302
00:20:02.830 --> 00:20:07.360
And then bed,
uh,
gives us the similar some,
but for the,
uh,

303
00:20:07.390 --> 00:20:12.250
exponentiate a luck factors of all the labels that are to the right of the

304
00:20:12.251 --> 00:20:13.084
current position.

305
00:20:13.570 --> 00:20:17.090
And so for that reason there are actually going to be useful fall.

306
00:20:17.091 --> 00:20:20.710
So performing other types of inferences where I want to compute marginal

307
00:20:20.711 --> 00:20:22.960
probabilities over the sequence.

308
00:20:22.961 --> 00:20:27.400
Why want to some out other labels that could appear to the left or the right of

309
00:20:27.401 --> 00:20:30.820
a given position.
So we'll see that in the following video.

310
00:20:32.550 --> 00:20:33.383
<v 0>Okay,</v>

311
00:20:34.030 --> 00:20:37.190
<v 1>well now what I want to say is that if you want to get it as stable</v>

312
00:20:37.191 --> 00:20:42.020
implementation of the forward backward or the belief propagation Algorithm for

313
00:20:42.021 --> 00:20:45.980
computing the uh,
where we compute these alpha and Beta tables,

314
00:20:46.610 --> 00:20:49.180
it's actually better to work in log space.

315
00:20:49.360 --> 00:20:54.360
That is instead of computing and a table that contains the alpha or better

316
00:20:54.780 --> 00:20:59.260
values,
it's contained instead the log alpha and the lug bed or values.

317
00:20:59.710 --> 00:21:04.410
So if we look at our recursions,
it's just means that whenever we computing,
uh,

318
00:21:04.420 --> 00:21:08.440
Alpha and Stan and we will compute luck Alpha and which would correspond to the

319
00:21:08.441 --> 00:21:13.441
log of the expression we had before the sum over the exponential locked factors.

320
00:21:14.260 --> 00:21:15.250
And then now,

321
00:21:15.640 --> 00:21:19.900
usually we would have times an Alpha here and we wouldn't have this term here,

322
00:21:20.110 --> 00:21:23.380
but because now in this procedure were reluctant work in log space,

323
00:21:23.410 --> 00:21:26.980
what we have is actually the Lug Alpha values.

324
00:21:27.850 --> 00:21:32.800
Then I can just take the log alpha and put it inside the expectation,

325
00:21:33.010 --> 00:21:37.420
the Srd exponentiation here,
uh,
inside the exponential.

326
00:21:37.870 --> 00:21:42.060
Okay.
So if I have this,
then the exponential of that,
uh,

327
00:21:42.160 --> 00:21:45.310
would indeed be alpha would be equivalent to multiplying by Alpha here.

328
00:21:45.670 --> 00:21:50.140
And similarly,
we introduced the lug better into the exponential for the,

329
00:21:50.370 --> 00:21:50.801
uh,

330
00:21:50.801 --> 00:21:55.801
expression for the re re the update value in the forward or backward pass,

331
00:21:56.530 --> 00:21:59.230
in this case,
the backward pass for the better table.

332
00:22:00.520 --> 00:22:05.260
So that's one part of getting the stable implementation.
The other thing,

333
00:22:05.261 --> 00:22:09.390
however,
is that whenever we computing a dialogue of a,

334
00:22:09.391 --> 00:22:13.150
some of the exponential of a set of terms,

335
00:22:13.900 --> 00:22:17.770
this,
uh,
this,
uh,
expression or this,
um,

336
00:22:18.190 --> 00:22:19.570
operation lug,

337
00:22:19.571 --> 00:22:24.571
some ex operation could actually be a unstable if one of the exponentiate a term

338
00:22:25.241 --> 00:22:28.930
is actually quite large because then we get the exponential of our very large

339
00:22:28.931 --> 00:22:32.830
term and a,
we might get a new miracle precision problems.

340
00:22:33.040 --> 00:22:38.040
So actually a much more stable implementation of the Luxem x operation,

341
00:22:38.770 --> 00:22:42.880
uh,
over a set of values is as follows.

342
00:22:43.000 --> 00:22:44.760
So imagine that,
I'm just going to call it zed.

343
00:22:44.790 --> 00:22:47.990
I each of the terms that I'm doing over which I'm doing it luck,

344
00:22:48.000 --> 00:22:50.140
some ex operation.
Uh,

345
00:22:50.141 --> 00:22:55.120
it turns out that this is equivalent to just taking the maximum value amongst

346
00:22:55.121 --> 00:22:59.560
all the setae values and then adding the log of the,

347
00:22:59.561 --> 00:23:04.330
some of the exponential of zed I minus the maximum,

348
00:23:04.780 --> 00:23:07.720
which is the same Max is here.
So essentially I've,

349
00:23:07.900 --> 00:23:12.900
I've taken out that maximum term here and I pushed it then front here.

350
00:23:14.110 --> 00:23:18.790
And the advantage for this is that if I think the exponential of each setae

351
00:23:18.850 --> 00:23:20.740
minus the Max overalls at eyes,

352
00:23:20.970 --> 00:23:25.100
well then this term can only be either a zero of [inaudible] is the Max and

353
00:23:25.110 --> 00:23:27.940
maximizing that I or a,
it's going to be negative.

354
00:23:28.150 --> 00:23:32.320
And the exponential of a negative number is going to be smaller than one.

355
00:23:32.920 --> 00:23:35.200
So this storm will be relatively small.

356
00:23:35.730 --> 00:23:39.910
So we won't get an expression where computing numerically just explodes and

357
00:23:39.911 --> 00:23:44.680
against something like an infinite value,
uh,
for in terms of the position of the,

358
00:23:44.681 --> 00:23:49.550
uh,
the machine and a,
so I'll let you do as an exercise.

359
00:23:49.790 --> 00:23:54.350
Uh,
why does expression is equivalent to this?
Uh,
but,
uh,

360
00:23:54.351 --> 00:23:59.351
what we're essentially a leveraging is that fact that this here is actually a

361
00:23:59.541 --> 00:24:01.520
constant.
And so,

362
00:24:01.521 --> 00:24:05.360
and then I'm leveraging also the fact that the sum of the exponential of is some

363
00:24:05.361 --> 00:24:08.690
is a product of exponentials.
And if you leverage these two things,

364
00:24:08.840 --> 00:24:12.820
then you see that this will cancel out with that term and then you'd just get

365
00:24:12.840 --> 00:24:14.000
exactly disturbed here.

366
00:24:14.710 --> 00:24:15.110
<v 0>Okay?</v>

367
00:24:15.110 --> 00:24:17.340
<v 1>All right.
So this is actually very important.</v>

368
00:24:17.341 --> 00:24:21.200
If you want to implement a belief propagation or forward backward,

369
00:24:21.201 --> 00:24:25.730
I'll get them in the linear chain.
CRF,
you really out to use this table,
legs,
uh,

370
00:24:25.790 --> 00:24:30.360
implementation that works in log space and implements a stable version of the

371
00:24:30.361 --> 00:24:32.010
lug,
some ex operation here.

372
00:24:33.410 --> 00:24:33.480
<v 0>Okay.</v>

